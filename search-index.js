var searchIndex = {};
searchIndex["backtrace"] = {"doc":"A library for acquiring a backtrace at runtime","items":[[3,"Frame","backtrace","A trait representing one frame of a backtrace, yielded to the `trace` function of this crate.",null,null],[3,"Symbol","","A trait representing the resolution of a symbol in a file.",null,null],[3,"SymbolName","","A wrapper around a symbol name to provide ergonomic accessors to the demangled name, the raw bytes, the raw string, etc.",null,null],[3,"Backtrace","","Representation of an owned and self-contained backtrace.",null,null],[3,"BacktraceFrame","","Captured version of a frame in a backtrace.",null,null],[3,"BacktraceSymbol","","Captured version of a symbol in a backtrace.",null,null],[5,"trace","","Inspects the current call-stack, passing all active frames into the closure provided to calculate a stack trace.",null,{"inputs":[{"name":"f"}],"output":null}],[5,"resolve","","Resolve an address to a symbol, passing the symbol to the specified closure.",null,null],[11,"ip","","Returns the current instruction pointer of this frame.",0,null],[11,"symbol_address","","Returns the starting symbol address of the frame of this function.",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"name","","Returns the name of this function.",1,{"inputs":[{"name":"self"}],"output":{"generics":["symbolname"],"name":"option"}}],[11,"addr","","Returns the starting address of this function.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"filename","","Returns the file name where this function was defined.",1,{"inputs":[{"name":"self"}],"output":{"generics":["path"],"name":"option"}}],[11,"lineno","","Returns the line number for where this symbol is currently executing.",1,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"option"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new symbol name from the raw underlying bytes.",2,null],[11,"as_str","","Returns the raw symbol name as a `str` if the symbols is valid utf-8.",2,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"as_bytes","","Returns the raw symbol name as a list of bytes",2,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"backtrace"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"backtraceframe"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"backtracesymbol"}}],[11,"new","","Captures a backtrace at the callsite of this function, returning an owned representation.",3,{"inputs":[],"output":{"name":"backtrace"}}],[11,"new_unresolved","","Similar to `new` except that this does not resolve any symbols, this simply captures the backtrace as a list of addresses.",3,{"inputs":[],"output":{"name":"backtrace"}}],[11,"frames","","Returns the frames from when this backtrace was captured.",3,null],[11,"resolve","","If this backtrace was created from `new_unresolved` then this function will resolve all addresses in the backtrace to their symbolic names.",3,{"inputs":[{"name":"self"}],"output":null}],[11,"from","","",3,{"inputs":[{"generics":["backtraceframe"],"name":"vec"}],"output":{"name":"self"}}],[11,"into","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["backtraceframe"],"name":"vec"}}],[11,"ip","","Same as `Frame::ip`",4,null],[11,"symbol_address","","Same as `Frame::symbol_address`",4,null],[11,"symbols","","Returns the list of symbols that this frame corresponds to.",4,null],[11,"name","","Same as `Symbol::name`",5,{"inputs":[{"name":"self"}],"output":{"generics":["symbolname"],"name":"option"}}],[11,"addr","","Same as `Symbol::addr`",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"filename","","Same as `Symbol::filename`",5,{"inputs":[{"name":"self"}],"output":{"generics":["path"],"name":"option"}}],[11,"lineno","","Same as `Symbol::lineno`",5,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"option"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"backtrace"}}]],"paths":[[3,"Frame"],[3,"Symbol"],[3,"SymbolName"],[3,"Backtrace"],[3,"BacktraceFrame"],[3,"BacktraceSymbol"]]};
searchIndex["backtrace_sys"] = {"doc":"","items":[[4,"backtrace_state","backtrace_sys","",null,null],[5,"backtrace_create_state","","",null,null],[5,"backtrace_syminfo","","",null,null],[5,"backtrace_pcinfo","","",null,null],[6,"backtrace_syminfo_callback","","",null,null],[6,"backtrace_full_callback","","",null,null],[6,"backtrace_error_callback","","",null,null]],"paths":[]};
searchIndex["bitflags"] = {"doc":"A typesafe bitmask flag generator useful for sets of C-style bitmask flags. It can be used for creating typesafe wrappers around C APIs.","items":[[0,"example_generated","bitflags","This module shows an example of code generated by the macro. IT MUST NOT BE USED OUTSIDE THIS CRATE.",null,null],[3,"Flags","bitflags::example_generated","This is the same `Flags` struct defined in the crate level example. Note that this struct is just for documentation purposes only, it must not be used outside this crate.",null,null],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"flags"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"ordering"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"FLAG_A","","",0,null],[18,"FLAG_B","","",0,null],[18,"FLAG_C","","",0,null],[18,"FLAG_ABC","","",0,null],[11,"empty","","Returns an empty set of flags.",0,{"inputs":[],"output":{"name":"flags"}}],[11,"all","","Returns the set containing all flags.",0,{"inputs":[],"output":{"name":"flags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",0,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",0,{"inputs":[{"name":"u32"}],"output":{"generics":["flags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",0,{"inputs":[{"name":"u32"}],"output":{"name":"flags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",0,{"inputs":[{"name":"self"},{"name":"flags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"flags"}}],[11,"bitor_assign","","Adds the set of flags.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"flags"}}],[11,"bitxor_assign","","Toggles the set of flags.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"flags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"flags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",0,{"inputs":[{"name":"self"}],"output":{"name":"flags"}}],[11,"extend","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",0,{"inputs":[{"name":"t"}],"output":{"name":"flags"}}],[14,"bitflags","bitflags","The macro used to generate the flag structure.",null,null]],"paths":[[3,"Flags"]]};
searchIndex["cfg_if"] = {"doc":"A macro for defining #[cfg] if-else statements.","items":[[14,"cfg_if","cfg_if","",null,null]],"paths":[]};
searchIndex["dlib"] = {"doc":"","items":[[3,"Library","dlib","A loaded dynamic library.",null,null],[3,"Symbol","","Symbol from a library.",null,null],[4,"DlError","","",null,null],[13,"NotFound","","",0,null],[13,"MissingSymbol","","",0,null],[14,"ffi_dispatch","","",null,null],[14,"ffi_dispatch_static","","",null,null],[14,"link_external_library","","",null,null],[14,"dlopen_external_library","","",null,null],[14,"external_library","","",null,null],[11,"new","","Find and load a dynamic library.",1,{"inputs":[{"name":"p"}],"output":{"generics":["library","error"],"name":"result"}}],[11,"get","","Get a pointer to function or static variable by symbol name.",1,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"from","","",1,{"inputs":[{"name":"library"}],"output":{"name":"library"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"symbol"}}],[11,"deref","","",2,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"into_raw","","Extract the wrapped `os::platform::Symbol`.",2,{"inputs":[{"name":"self"}],"output":{"name":"symbol"}}],[11,"from_raw","","Wrap the `os::platform::Symbol` into this safe wrapper.",2,{"inputs":[{"name":"symbol"},{"name":"l"}],"output":{"name":"symbol"}}],[11,"lift_option","","Lift Option out of the symbol.",2,{"inputs":[{"name":"self"}],"output":{"generics":["symbol"],"name":"option"}}]],"paths":[[4,"DlError"],[3,"Library"],[3,"Symbol"]]};
searchIndex["fnv"] = {"doc":"An implementation of the [Fowler–Noll–Vo hash function][chongo].","items":[[3,"FnvHasher","fnv","An implementation of the Fowler–Noll–Vo hash function.",null,null],[6,"FnvBuildHasher","","A builder for default FNV hashers.",null,null],[6,"FnvHashMap","","A `HashMap` using a default FNV hasher.",null,null],[6,"FnvHashSet","","A `HashSet` using a default FNV hasher.",null,null],[11,"default","","",0,{"inputs":[],"output":{"name":"fnvhasher"}}],[11,"with_key","","Create an FNV hasher starting with a state corresponding to the hash `key`.",0,{"inputs":[{"name":"u64"}],"output":{"name":"fnvhasher"}}],[11,"finish","","",0,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write","","",0,null]],"paths":[[3,"FnvHasher"]]};
searchIndex["glium"] = {"doc":"Easy-to-use, high-level, OpenGL3+ wrapper.","items":[[0,"os","glium::glutin","Contains traits with platform-specific methods in them.",null,null],[0,"unix","glium::glutin::os","",null,null],[8,"MonitorIdExt","glium::glutin::os::unix","Additional methods on `MonitorId` that are specific to Linux.",null,null],[10,"native_id","","Returns the inner identifier of the monitor.",0,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[6,"EGLContext","","",null,null],[6,"GLXContext","","",null,null],[8,"WindowExt","","Additional methods on `Window` that are specific to Unix.",null,null],[10,"get_xlib_window","","Returns the ID of the `Window` xlib object that is used by this window.",1,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[10,"get_xlib_display","","Returns a pointer to the `Display` object of xlib that is used by this window.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"get_xlib_screen_id","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"option"}}],[10,"get_xlib_xconnection","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["arc"],"name":"option"}}],[10,"send_xim_spot","","",1,null],[10,"get_xcb_connection","","This function returns the underlying `xcb_connection_t` of an xlib `Display`.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"get_wayland_surface","","Returns a pointer to the `wl_surface` object of wayland that is used by this window.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"get_wayland_display","","Returns a pointer to the `wl_display` object of wayland that is used by this window.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"is_ready","","Check if the window is ready for drawing",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"WindowBuilderExt","","Additional methods on `WindowBuilder` that are specific to Unix.",null,null],[10,"with_x11_visual","","",2,null],[10,"with_x11_screen","","",2,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"windowbuilder"}}],[4,"RawHandle","","Context handles available on Unix-like platforms.",null,null],[13,"Glx","","",3,null],[13,"Egl","","",3,null],[4,"XNotSupported","","Error returned if this system doesn't have XLib or can't create an X connection.",null,null],[13,"LibraryOpenError","","Failed to load one or several shared libraries.",4,null],[13,"XOpenDisplayFailed","","Connecting to the X server with `XOpenDisplay` failed.",4,null],[8,"EventsLoopExt","","Additional methods on `EventsLoop` that are specific to Linux.",null,null],[10,"new_x11","","Builds a new `EventsLoop` that is forced to use X11.",5,{"inputs":[],"output":{"generics":["xnotsupported"],"name":"result"}}],[10,"new_wayland","","Builds a new `EventsLoop` that is forced to use Wayland.",5,{"inputs":[],"output":{"name":"self"}}],[10,"is_wayland","","True if the `EventsLoop` uses Wayland.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_x11","","True if the `EventsLoop` uses X11.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"GlContextExt","glium::glutin::os","Platform-specific extensions for OpenGL contexts.",null,null],[16,"Handle","","Raw context handle.",6,null],[10,"raw_handle","","Returns the raw context handle.",6,null],[8,"GlContext","glium::glutin","A trait for types associated with a GL context.",null,null],[10,"make_current","","Sets the context as the current context.",7,{"inputs":[{"name":"self"}],"output":{"generics":["contexterror"],"name":"result"}}],[10,"is_current","","Returns true if this context is the current one in this thread.",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_proc_address","","Returns the address of an OpenGL function.",7,null],[10,"swap_buffers","","Swaps the buffers in case of double or triple buffering.",7,{"inputs":[{"name":"self"}],"output":{"generics":["contexterror"],"name":"result"}}],[10,"get_api","","Returns the OpenGL API being used.",7,{"inputs":[{"name":"self"}],"output":{"name":"api"}}],[10,"get_pixel_format","","Returns the pixel format of the main framebuffer of the context.",7,{"inputs":[{"name":"self"}],"output":{"name":"pixelformat"}}],[10,"resize","","Resize the GL context.",7,null],[3,"Context","","Represents an OpenGL context.",null,null],[3,"ContextBuilder","","Object that allows you to build `Context`s.",null,null],[12,"gl_attr","","The attributes to use to create the context.",8,null],[3,"GlWindow","","Represents an OpenGL context and a Window with which it is associated.",null,null],[4,"CreationError","","Error that can happen while creating a window or a headless renderer.",null,null],[13,"OsError","","",9,null],[13,"NotSupported","","TODO: remove this error",9,null],[13,"NoBackendAvailable","","",9,null],[13,"RobustnessNotSupported","","",9,null],[13,"OpenGlVersionNotSupported","","",9,null],[13,"NoAvailablePixelFormat","","",9,null],[13,"PlatformSpecific","","",9,null],[13,"Window","","",9,null],[4,"ContextError","","Error that can happen when manipulating an OpenGL context.",null,null],[13,"IoError","","",10,null],[13,"ContextLost","","",10,null],[4,"Api","","All APIs related to OpenGL that you can possibly get while using glutin.",null,null],[13,"OpenGl","","The classical OpenGL. Available on Windows, Linux, OS/X.",11,null],[13,"OpenGlEs","","OpenGL embedded system. Available on Linux, Android.",11,null],[13,"WebGl","","OpenGL for the web. Very similar to OpenGL ES.",11,null],[4,"GlProfile","","Describes the requested OpenGL context profiles.",null,null],[13,"Compatibility","","Include all the immediate more functions and definitions.",12,null],[13,"Core","","Include all the future-compatible functions and definitions.",12,null],[4,"GlRequest","","Describes the OpenGL API and version that are being requested when a context is created.",null,null],[13,"Latest","","Request the latest version of the \"best\" API of this platform.",13,null],[13,"Specific","","Request a specific version of a specific API.",13,null],[13,"GlThenGles","","If OpenGL is available, create an OpenGL context with the specified `opengl_version`. Else if OpenGL ES or WebGL is available, create a context with the specified `opengles_version`.",13,null],[12,"opengl_version","glium::glutin::GlRequest","The version to use for OpenGL.",13,null],[12,"opengles_version","","The version to use for OpenGL ES.",13,null],[7,"GL_CORE","glium::glutin","The minimum core profile GL context. Useful for getting the minimum required GL version while still running on OSX, which often forbids the compatibility profile features.",null,null],[4,"Robustness","","Specifies the tolerance of the OpenGL context to faults. If you accept raw OpenGL commands and/or raw shader code from an untrusted source, you should definitely care about this.",null,null],[13,"NotRobust","","Not everything is checked. Your application can crash if you do something wrong with your shaders.",14,null],[13,"NoError","","The driver doesn't check anything. This option is very dangerous. Please know what you're doing before using it. See the `GL_KHR_no_error` extension.",14,null],[13,"RobustNoResetNotification","","Everything is checked to avoid any crash. The driver will attempt to avoid any problem, but if a problem occurs the behavior is implementation-defined. You are just guaranteed not to get a crash.",14,null],[13,"TryRobustNoResetNotification","","Same as `RobustNoResetNotification` but the context creation doesn't fail if it's not supported.",14,null],[13,"RobustLoseContextOnReset","","Everything is checked to avoid any crash. If a problem occurs, the context will enter a \"context lost\" state. It must then be recreated. For the moment, glutin doesn't provide a way to recreate a context with the same window :-/",14,null],[13,"TryRobustLoseContextOnReset","","Same as `RobustLoseContextOnReset` but the context creation doesn't fail if it's not supported.",14,null],[4,"ReleaseBehavior","","The behavior of the driver when you change the current context.",null,null],[13,"None","","Doesn't do anything. Most notably doesn't flush.",15,null],[13,"Flush","","Flushes the context that was previously current as if `glFlush` was called.",15,null],[3,"PixelFormat","","Describes a possible format. Unused.",null,null],[12,"hardware_accelerated","","",16,null],[12,"color_bits","","",16,null],[12,"alpha_bits","","",16,null],[12,"depth_bits","","",16,null],[12,"stencil_bits","","",16,null],[12,"stereoscopy","","",16,null],[12,"double_buffer","","",16,null],[12,"multisampling","","",16,null],[12,"srgb","","",16,null],[3,"PixelFormatRequirements","","Describes how the backend should choose a pixel format.",null,null],[12,"hardware_accelerated","","If true, only hardware-accelerated formats will be considered. If false, only software renderers. `None` means \"don't care\". Default is `Some(true)`.",17,null],[12,"color_bits","","Minimum number of bits for the color buffer, excluding alpha. `None` means \"don't care\". The default is `Some(24)`.",17,null],[12,"float_color_buffer","","If true, the color buffer must be in a floating point format. Default is `false`.",17,null],[12,"alpha_bits","","Minimum number of bits for the alpha in the color buffer. `None` means \"don't care\". The default is `Some(8)`.",17,null],[12,"depth_bits","","Minimum number of bits for the depth buffer. `None` means \"don't care\". The default value is `Some(24)`.",17,null],[12,"stencil_bits","","Minimum number of bits for the depth buffer. `None` means \"don't care\". The default value is `Some(8)`.",17,null],[12,"double_buffer","","If true, only double-buffered formats will be considered. If false, only single-buffer formats. `None` means \"don't care\". The default is `Some(true)`.",17,null],[12,"multisampling","","Contains the minimum number of samples per pixel in the color, depth and stencil buffers. `None` means \"don't care\". Default is `None`. A value of `Some(0)` indicates that multisampling must not be enabled.",17,null],[12,"stereoscopy","","If true, only stereoscopic formats will be considered. If false, only non-stereoscopic formats. The default is `false`.",17,null],[12,"srgb","","If true, only sRGB-capable formats will be considered. If false, don't care. The default is `false`.",17,null],[12,"release_behavior","","The behavior when changing the current context. Default is `Flush`.",17,null],[3,"GlAttributes","","Attributes to use when creating an OpenGL context.",null,null],[12,"sharing","","An existing context to share the new the context with.",18,null],[12,"version","","Version to try create. See `GlRequest` for more infos.",18,null],[12,"profile","","OpenGL profile to use.",18,null],[12,"debug","","Whether to enable the `debug` flag of the context.",18,null],[12,"robustness","","How the OpenGL context should detect errors.",18,null],[12,"vsync","","Whether to use vsync. If vsync is enabled, calling `swap_buffers` will block until the screen refreshes. This is typically used to prevent screen tearing.",18,null],[4,"Event","","Describes a generic event.",null,null],[13,"WindowEvent","","",19,null],[12,"window_id","glium::glutin::Event","",19,null],[12,"event","","",19,null],[13,"DeviceEvent","glium::glutin","",19,null],[12,"device_id","glium::glutin::Event","",19,null],[12,"event","","",19,null],[13,"Awakened","glium::glutin","",19,null],[13,"Suspended","","The application has been suspended or resumed.",19,null],[4,"MouseButton","","Describes a button of a mouse controller.",null,null],[13,"Left","","",20,null],[13,"Right","","",20,null],[13,"Middle","","",20,null],[13,"Other","","",20,null],[3,"EventsLoopProxy","","Used to wake up the `EventsLoop` from another thread.",null,null],[6,"ScanCode","","Hardware-dependent keyboard scan code.",null,null],[3,"DeviceId","","Identifier of an input device.",null,null],[3,"HeadlessContext","","Represents a headless OpenGL context.",null,null],[3,"MonitorId","","Identifier for a monitor.",null,null],[3,"EventsLoopClosed","","The error that is returned when an `EventsLoopProxy` attempts to wake up an `EventsLoop` that no longer exists.",null,null],[4,"VirtualKeyCode","","Symbolic name for a keyboard key.",null,null],[13,"Key1","","The '1' key over the letters.",21,null],[13,"Key2","","The '2' key over the letters.",21,null],[13,"Key3","","The '3' key over the letters.",21,null],[13,"Key4","","The '4' key over the letters.",21,null],[13,"Key5","","The '5' key over the letters.",21,null],[13,"Key6","","The '6' key over the letters.",21,null],[13,"Key7","","The '7' key over the letters.",21,null],[13,"Key8","","The '8' key over the letters.",21,null],[13,"Key9","","The '9' key over the letters.",21,null],[13,"Key0","","The '0' key over the 'O' and 'P' keys.",21,null],[13,"A","","",21,null],[13,"B","","",21,null],[13,"C","","",21,null],[13,"D","","",21,null],[13,"E","","",21,null],[13,"F","","",21,null],[13,"G","","",21,null],[13,"H","","",21,null],[13,"I","","",21,null],[13,"J","","",21,null],[13,"K","","",21,null],[13,"L","","",21,null],[13,"M","","",21,null],[13,"N","","",21,null],[13,"O","","",21,null],[13,"P","","",21,null],[13,"Q","","",21,null],[13,"R","","",21,null],[13,"S","","",21,null],[13,"T","","",21,null],[13,"U","","",21,null],[13,"V","","",21,null],[13,"W","","",21,null],[13,"X","","",21,null],[13,"Y","","",21,null],[13,"Z","","",21,null],[13,"Escape","","The Escape key, next to F1.",21,null],[13,"F1","","",21,null],[13,"F2","","",21,null],[13,"F3","","",21,null],[13,"F4","","",21,null],[13,"F5","","",21,null],[13,"F6","","",21,null],[13,"F7","","",21,null],[13,"F8","","",21,null],[13,"F9","","",21,null],[13,"F10","","",21,null],[13,"F11","","",21,null],[13,"F12","","",21,null],[13,"F13","","",21,null],[13,"F14","","",21,null],[13,"F15","","",21,null],[13,"Snapshot","","Print Screen/SysRq.",21,null],[13,"Scroll","","Scroll Lock.",21,null],[13,"Pause","","Pause/Break key, next to Scroll lock.",21,null],[13,"Insert","","`Insert`, next to Backspace.",21,null],[13,"Home","","",21,null],[13,"Delete","","",21,null],[13,"End","","",21,null],[13,"PageDown","","",21,null],[13,"PageUp","","",21,null],[13,"Left","","",21,null],[13,"Up","","",21,null],[13,"Right","","",21,null],[13,"Down","","",21,null],[13,"Back","","The Backspace key, right over Enter.",21,null],[13,"Return","","The Enter key.",21,null],[13,"Space","","The space bar.",21,null],[13,"Compose","","The \"Compose\" key on Linux.",21,null],[13,"Numlock","","",21,null],[13,"Numpad0","","",21,null],[13,"Numpad1","","",21,null],[13,"Numpad2","","",21,null],[13,"Numpad3","","",21,null],[13,"Numpad4","","",21,null],[13,"Numpad5","","",21,null],[13,"Numpad6","","",21,null],[13,"Numpad7","","",21,null],[13,"Numpad8","","",21,null],[13,"Numpad9","","",21,null],[13,"AbntC1","","",21,null],[13,"AbntC2","","",21,null],[13,"Add","","",21,null],[13,"Apostrophe","","",21,null],[13,"Apps","","",21,null],[13,"At","","",21,null],[13,"Ax","","",21,null],[13,"Backslash","","",21,null],[13,"Calculator","","",21,null],[13,"Capital","","",21,null],[13,"Colon","","",21,null],[13,"Comma","","",21,null],[13,"Convert","","",21,null],[13,"Decimal","","",21,null],[13,"Divide","","",21,null],[13,"Equals","","",21,null],[13,"Grave","","",21,null],[13,"Kana","","",21,null],[13,"Kanji","","",21,null],[13,"LAlt","","",21,null],[13,"LBracket","","",21,null],[13,"LControl","","",21,null],[13,"LMenu","","",21,null],[13,"LShift","","",21,null],[13,"LWin","","",21,null],[13,"Mail","","",21,null],[13,"MediaSelect","","",21,null],[13,"MediaStop","","",21,null],[13,"Minus","","",21,null],[13,"Multiply","","",21,null],[13,"Mute","","",21,null],[13,"MyComputer","","",21,null],[13,"NavigateForward","","",21,null],[13,"NavigateBackward","","",21,null],[13,"NextTrack","","",21,null],[13,"NoConvert","","",21,null],[13,"NumpadComma","","",21,null],[13,"NumpadEnter","","",21,null],[13,"NumpadEquals","","",21,null],[13,"OEM102","","",21,null],[13,"Period","","",21,null],[13,"PlayPause","","",21,null],[13,"Power","","",21,null],[13,"PrevTrack","","",21,null],[13,"RAlt","","",21,null],[13,"RBracket","","",21,null],[13,"RControl","","",21,null],[13,"RMenu","","",21,null],[13,"RShift","","",21,null],[13,"RWin","","",21,null],[13,"Semicolon","","",21,null],[13,"Slash","","",21,null],[13,"Sleep","","",21,null],[13,"Stop","","",21,null],[13,"Subtract","","",21,null],[13,"Sysrq","","",21,null],[13,"Tab","","",21,null],[13,"Underline","","",21,null],[13,"Unlabeled","","",21,null],[13,"VolumeDown","","",21,null],[13,"VolumeUp","","",21,null],[13,"Wake","","",21,null],[13,"WebBack","","",21,null],[13,"WebFavorites","","",21,null],[13,"WebForward","","",21,null],[13,"WebHome","","",21,null],[13,"WebRefresh","","",21,null],[13,"WebSearch","","",21,null],[13,"WebStop","","",21,null],[13,"Yen","","",21,null],[4,"ControlFlow","","Returned by the user callback given to the `EventsLoop::run_forever` method.",null,null],[13,"Continue","","Continue looping and waiting for events.",22,null],[13,"Break","","Break from the event loop.",22,null],[4,"MouseScrollDelta","","Describes a difference in the mouse scroll wheel state.",null,null],[13,"LineDelta","","Amount in lines or rows to scroll in the horizontal and vertical directions.",23,null],[13,"PixelDelta","","Amount in pixels to scroll in the horizontal and vertical direction.",23,null],[6,"ButtonId","","Identifier for a specific button on some device.",null,null],[3,"EventsLoop","","Provides a way to retreive events from the system and from the windows that were registered to the events loop.",null,null],[4,"MouseCursor","","Describes the appearance of the mouse cursor.",null,null],[13,"Default","","The platform-dependent default cursor.",24,null],[13,"Crosshair","","A simple crosshair.",24,null],[13,"Hand","","A hand (often used to indicate links in web browsers).",24,null],[13,"Arrow","","Self explanatory.",24,null],[13,"Move","","Indicates something is to be moved.",24,null],[13,"Text","","Indicates text that may be selected or edited.",24,null],[13,"Wait","","Program busy indicator.",24,null],[13,"Help","","Help indicator (often rendered as a \"?\")",24,null],[13,"Progress","","Progress indicator. Shows that processing is being done. But in contrast with \"Wait\" the user may still interact with the program. Often rendered as a spinning beach ball, or an arrow with a watch or hourglass.",24,null],[13,"NotAllowed","","Cursor showing that something cannot be done.",24,null],[13,"ContextMenu","","",24,null],[13,"NoneCursor","","",24,null],[13,"Cell","","",24,null],[13,"VerticalText","","",24,null],[13,"Alias","","",24,null],[13,"Copy","","",24,null],[13,"NoDrop","","",24,null],[13,"Grab","","",24,null],[13,"Grabbing","","",24,null],[13,"AllScroll","","",24,null],[13,"ZoomIn","","",24,null],[13,"ZoomOut","","",24,null],[13,"EResize","","Indicate that some edge is to be moved. For example, the 'SeResize' cursor is used when the movement starts from the south-east corner of the box.",24,null],[13,"NResize","","",24,null],[13,"NeResize","","",24,null],[13,"NwResize","","",24,null],[13,"SResize","","",24,null],[13,"SeResize","","",24,null],[13,"SwResize","","",24,null],[13,"WResize","","",24,null],[13,"EwResize","","",24,null],[13,"NsResize","","",24,null],[13,"NeswResize","","",24,null],[13,"NwseResize","","",24,null],[13,"ColResize","","",24,null],[13,"RowResize","","",24,null],[3,"HeadlessRendererBuilder","","Object that allows you to build headless contexts.",null,null],[12,"dimensions","","The dimensions to use.",25,null],[12,"opengl","","The OpenGL attributes to build the context with.",25,null],[3,"ModifiersState","","Represents the current state of the keyboard modifiers",null,null],[12,"shift","","The \"shift\" key",26,null],[12,"ctrl","","The \"control\" key",26,null],[12,"alt","","The \"alt\" key",26,null],[12,"logo","","The \"logo\" key",26,null],[3,"WindowBuilder","","Object that allows you to build windows.",null,null],[12,"window","","The attributes to use to create the window.",27,null],[4,"CursorState","","Describes how winit handles the cursor.",null,null],[13,"Normal","","Normal cursor behavior.",28,null],[13,"Hide","","The cursor will be invisible when over the window.",28,null],[13,"Grab","","Grabs the mouse cursor. The cursor's motion will be confined to this window and the window has exclusive access to further events regarding the cursor.",28,null],[4,"TouchPhase","","Describes touch-screen input state.",null,null],[13,"Started","","",29,null],[13,"Moved","","",29,null],[13,"Ended","","",29,null],[13,"Cancelled","","",29,null],[3,"KeyboardInput","","Describes a keyboard input event.",null,null],[12,"scancode","","Identifies the physical key pressed",30,null],[12,"state","","",30,null],[12,"virtual_keycode","","Identifies the semantic meaning of the key",30,null],[12,"modifiers","","Modifier keys active at the time of this input.",30,null],[6,"AxisId","","Identifier for a specific analog axis on some device.",null,null],[4,"WindowCreationError","","Error that can happen while creating a window or a headless renderer.",null,null],[13,"OsError","","",31,null],[13,"NotSupported","","TODO: remove this error",31,null],[4,"ElementState","","Describes the input state of a key.",null,null],[13,"Pressed","","",32,null],[13,"Released","","",32,null],[3,"Touch","","Represents touch event",null,null],[12,"device_id","","",33,null],[12,"phase","","",33,null],[12,"location","","",33,null],[12,"id","","unique identifier of a finger.",33,null],[3,"WindowAttributes","","Attributes to use when creating a window.",null,null],[12,"dimensions","","The dimensions of the window. If this is `None`, some platform-specific dimensions will be used.",34,null],[12,"min_dimensions","","The minimum dimensions a window can be, If this is `None`, the window will have no minimum dimensions (aside from reserved).",34,null],[12,"max_dimensions","","The maximum dimensions a window can be, If this is `None`, the maximum will have no maximum or will be set to the primary monitor's dimensions by the platform.",34,null],[12,"fullscreen","","Whether the window should be set as fullscreen upon creation.",34,null],[12,"title","","The title of the window in the title bar.",34,null],[12,"maximized","","Whether the window should be maximized upon creation.",34,null],[12,"visible","","Whether the window should be immediately visible upon creation.",34,null],[12,"transparent","","Whether the the window should be transparent. If this is true, writing colors with alpha values different than `1.0` will produce a transparent window.",34,null],[12,"decorations","","Whether the window should have borders and bars.",34,null],[12,"multitouch","","[iOS only] Enable multitouch, see multipleTouchEnabled",34,null],[3,"Window","","Represents a window.",null,null],[3,"WindowId","","Identifier of a window. Unique for each window.",null,null],[3,"AvailableMonitorsIter","","An iterator for the list of available monitors.",null,null],[4,"DeviceEvent","","Represents raw hardware events that are not associated with any particular window.",null,null],[13,"Added","","",35,null],[13,"Removed","","",35,null],[13,"MouseMotion","","Change in physical position of a pointing device.",35,null],[12,"delta","glium::glutin::DeviceEvent","(x, y) change in position in unspecified units.",35,null],[13,"MouseWheel","glium::glutin","Physical scroll event",35,null],[12,"delta","glium::glutin::DeviceEvent","",35,null],[13,"Motion","glium::glutin","Motion on some analog axis.  This event will be reported for all arbitrary input devices that winit supports on this platform, including mouse devices.  If the device is a mouse device then this will be reported alongside the MouseMotion event.",35,null],[12,"axis","glium::glutin::DeviceEvent","",35,null],[12,"value","","",35,null],[13,"Button","glium::glutin","",35,null],[12,"button","glium::glutin::DeviceEvent","",35,null],[12,"state","","",35,null],[13,"Key","glium::glutin","",35,null],[13,"Text","","",35,null],[12,"codepoint","glium::glutin::DeviceEvent","",35,null],[4,"WindowEvent","glium::glutin","Describes an event from a `Window`.",null,null],[13,"Resized","","The size of the window has changed.",36,null],[13,"Moved","","The position of the window has changed.",36,null],[13,"Closed","","The window has been closed.",36,null],[13,"DroppedFile","","A file has been dropped into the window.",36,null],[13,"HoveredFile","","A file is being hovered over the window.",36,null],[13,"HoveredFileCancelled","","A file was hovered, but has exited the window.",36,null],[13,"ReceivedCharacter","","The window received a unicode character.",36,null],[13,"Focused","","The window gained or lost focus.",36,null],[13,"KeyboardInput","","An event from the keyboard has been received.",36,null],[12,"device_id","glium::glutin::WindowEvent","",36,null],[12,"input","","",36,null],[13,"CursorMoved","glium::glutin","The cursor has moved on the window.",36,null],[12,"device_id","glium::glutin::WindowEvent","",36,null],[12,"position","","(x,y) coords in pixels relative to the top-left corner of the window. Because the range of this data is limited by the display area and it may have been transformed by the OS to implement effects such as cursor acceleration, it should not be used to implement non-cursor-like interactions such as 3D camera control.",36,null],[12,"modifiers","","",36,null],[13,"CursorEntered","glium::glutin","The cursor has entered the window.",36,null],[12,"device_id","glium::glutin::WindowEvent","",36,null],[13,"CursorLeft","glium::glutin","The cursor has left the window.",36,null],[12,"device_id","glium::glutin::WindowEvent","",36,null],[13,"MouseWheel","glium::glutin","A mouse wheel movement or touchpad scroll occurred.",36,null],[12,"device_id","glium::glutin::WindowEvent","",36,null],[12,"delta","","",36,null],[12,"phase","","",36,null],[12,"modifiers","","",36,null],[13,"MouseInput","glium::glutin","An mouse button press has been received.",36,null],[12,"device_id","glium::glutin::WindowEvent","",36,null],[12,"state","","",36,null],[12,"button","","",36,null],[12,"modifiers","","",36,null],[13,"TouchpadPressure","glium::glutin","Touchpad pressure event.",36,null],[12,"device_id","glium::glutin::WindowEvent","",36,null],[12,"pressure","","",36,null],[12,"stage","","",36,null],[13,"AxisMotion","glium::glutin","Motion on some analog axis. May report data redundant to other, more specific events.",36,null],[12,"device_id","glium::glutin::WindowEvent","",36,null],[12,"axis","","",36,null],[12,"value","","",36,null],[13,"Refresh","glium::glutin","The window needs to be redrawn.",36,null],[13,"Touch","","Touch event has been received",36,null],[13,"HiDPIFactorChanged","","DPI scaling factor of the window has changed.",36,null],[3,"Blend","glium","Blend effect that the GPU will use for blending.",null,null],[12,"color","","The blending function for color channels.",37,null],[12,"alpha","","The blending function for alpha channels.",37,null],[12,"constant_value","","A constant color that can be used in the blending functions.",37,null],[3,"Depth","","Represents the depth parameters of a draw command.",null,null],[12,"test","","The function that the GPU will use to determine whether to write over an existing pixel on the target. Don't forget to set `depth_write` appropriately if you use a depth test.",38,null],[12,"write","","Sets whether the GPU will write the depth values on the depth buffer if they pass the depth test.",38,null],[12,"range","","The range of possible Z values in surface coordinates.",38,null],[12,"clamp","","Sets whether the depth values of samples should be clamped to `0.0` and `1.0`.",38,null],[3,"IndexBuffer","","A list of indices loaded in the graphics card's memory.",null,null],[3,"VertexBuffer","","A list of vertices loaded in the graphics card's memory.",null,null],[3,"Program","","A combination of shaders linked together.",null,null],[3,"LinearSyncFence","","Prototype for a `SyncFence`.",null,null],[3,"SyncFence","","Provides a way to wait for a server-side operation to be finished.",null,null],[3,"Version","","Describes a version.",null,null],[12,"0","","",39,null],[12,"1","","",39,null],[12,"2","","",39,null],[3,"Rect","","Area of a surface in pixels.",null,null],[12,"left","","Number of pixels between the left border of the surface and the left border of the rectangle.",40,null],[12,"bottom","","Number of pixels between the bottom border of the surface and the bottom border of the rectangle.",40,null],[12,"width","","Width of the area in pixels.",40,null],[12,"height","","Height of the area in pixels.",40,null],[3,"BlitTarget","","Area of a surface in pixels. Similar to a `Rect` except that dimensions can be negative.",null,null],[12,"left","","Number of pixels between the left border of the surface and the left border of the rectangle.",41,null],[12,"bottom","","Number of pixels between the bottom border of the surface and the bottom border of the rectangle.",41,null],[12,"width","","Width of the area in pixels. Can be negative.",41,null],[12,"height","","Height of the area in pixels. Can be negative.",41,null],[3,"Frame","","Implementation of `Surface`, targeting the default framebuffer.",null,null],[3,"IncompatibleOpenGl","","Returned during Context creation if the OpenGL implementation is too old.",null,null],[12,"0","","",42,null],[4,"Profile","","Describes the OpenGL context profile.",null,null],[13,"Core","","The context uses only future-compatible functions and definitions.",43,null],[13,"Compatibility","","The context includes all immediate mode functions and definitions.",43,null],[4,"BlendingFunction","","Function that the GPU will use for blending.",null,null],[13,"AlwaysReplace","","Simply overwrite the destination pixel with the source pixel.",44,null],[13,"Min","","For each individual component (red, green, blue, and alpha), the minimum value is chosen between the source and the destination.",44,null],[13,"Max","","For each individual component (red, green, blue, and alpha), the maximum value is chosen between the source and the destination.",44,null],[13,"Addition","","For each individual component (red, green, blue, and alpha), a weighted addition between the source and the destination.",44,null],[12,"source","glium::BlendingFunction","The factor to apply to the source pixel.",44,null],[12,"destination","","The factor to apply to the destination pixel.",44,null],[13,"Subtraction","glium","For each individual component (red, green, blue, and alpha), a weighted subtraction of the source by the destination.",44,null],[12,"source","glium::BlendingFunction","The factor to apply to the source pixel.",44,null],[12,"destination","","The factor to apply to the destination pixel.",44,null],[13,"ReverseSubtraction","glium","For each individual component (red, green, blue, and alpha), a weighted subtraction of the destination by the source.",44,null],[12,"source","glium::BlendingFunction","The factor to apply to the source pixel.",44,null],[12,"destination","","The factor to apply to the destination pixel.",44,null],[4,"LinearBlendingFactor","glium","Indicates which value to multiply each component with.",null,null],[13,"Zero","","Multiply the source or destination component by zero, which always gives `0.0`.",45,null],[13,"One","","Multiply the source or destination component by one, which always gives you the original value.",45,null],[13,"SourceColor","","Multiply the source or destination component by its corresponding value in the source.",45,null],[13,"OneMinusSourceColor","","Equivalent to `1 - SourceColor`.",45,null],[13,"DestinationColor","","Multiply the source or destination component by its corresponding value in the destination.",45,null],[13,"OneMinusDestinationColor","","Equivalent to `1 - DestinationColor`.",45,null],[13,"SourceAlpha","","Multiply the source or destination component by the alpha value of the source.",45,null],[13,"SourceAlphaSaturate","","Multiply the source or destination component by the smallest value of `SourceAlpha` and `1 - DestinationAlpha`.",45,null],[13,"OneMinusSourceAlpha","","Multiply the source or destination component by `1.0` minus the alpha value of the source.",45,null],[13,"DestinationAlpha","","Multiply the source or destination component by the alpha value of the destination.",45,null],[13,"OneMinusDestinationAlpha","","Multiply the source or destination component by `1.0` minus the alpha value of the destination.",45,null],[13,"ConstantColor","","Multiply the source or destination component by the corresponding value in `Blend::const_value`.",45,null],[13,"OneMinusConstantColor","","Multiply the source or destination component by `1.0` minus the corresponding value in `Blend::const_value`.",45,null],[13,"ConstantAlpha","","Multiply the source or destination component by the alpha value of `Blend::const_value`.",45,null],[13,"OneMinusConstantAlpha","","Multiply the source or destination component by `1.0` minus the alpha value of `Blend::const_value`.",45,null],[4,"DepthTest","","The function that the GPU will use to determine whether to write over an existing pixel on the target.",null,null],[13,"Ignore","","Never replace the target pixel.",46,null],[13,"Overwrite","","Always replace the target pixel.",46,null],[13,"IfEqual","","Replace if the z-value of the source is equal to the destination.",46,null],[13,"IfNotEqual","","Replace if the z-value of the source is different than the destination.",46,null],[13,"IfMore","","Replace if the z-value of the source is more than the destination.",46,null],[13,"IfMoreOrEqual","","Replace if the z-value of the source is more than, or equal to the destination.",46,null],[13,"IfLess","","Replace if the z-value of the source is less than the destination.",46,null],[13,"IfLessOrEqual","","Replace if the z-value of the source is less than, or equal to the destination.",46,null],[4,"StencilTest","","Specifies which comparison the GPU will do to determine whether a sample passes the stencil test. The general equation is `(ref & mask) CMP (stencil & mask)`, where `ref` is the reference value (`stencil_reference_value_clockwise` or `stencil_reference_value_counter_clockwise`), `CMP` is the comparison chosen, and `stencil` is the current value in the stencil buffer.",null,null],[13,"AlwaysPass","","The stencil test always passes.",47,null],[13,"AlwaysFail","","The stencil test always fails.",47,null],[13,"IfLess","","`(ref & mask) < (stencil & mask)`",47,null],[12,"mask","glium::StencilTest","The mask that is and'ed with the reference value and stencil buffer.",47,null],[13,"IfLessOrEqual","glium","`(ref & mask) <= (stencil & mask)`",47,null],[12,"mask","glium::StencilTest","The mask that is and'ed with the reference value and stencil buffer.",47,null],[13,"IfMore","glium","`(ref & mask) > (stencil & mask)`",47,null],[12,"mask","glium::StencilTest","The mask that is and'ed with the reference value and stencil buffer.",47,null],[13,"IfMoreOrEqual","glium","`(ref & mask) >= (stencil & mask)`",47,null],[12,"mask","glium::StencilTest","The mask that is and'ed with the reference value and stencil buffer.",47,null],[13,"IfEqual","glium","`(ref & mask) == (stencil & mask)`",47,null],[12,"mask","glium::StencilTest","The mask that is and'ed with the reference value and stencil buffer.",47,null],[13,"IfNotEqual","glium","`(ref & mask) != (stencil & mask)`",47,null],[12,"mask","glium::StencilTest","The mask that is and'ed with the reference value and stencil buffer.",47,null],[4,"StencilOperation","glium","Specificies which operation the GPU will do depending on the result of the stencil test.",null,null],[13,"Keep","","Keeps the value currently in the stencil buffer.",48,null],[13,"Zero","","Writes zero in the stencil buffer.",48,null],[13,"Replace","","Writes the reference value (`stencil_reference_value_clockwise` or `stencil_reference_value_counter_clockwise`) in the stencil buffer.",48,null],[13,"Increment","","Increments the value currently in the stencil buffer. If the value is the maximum, don't do anything.",48,null],[13,"IncrementWrap","","Increments the value currently in the stencil buffer. If the value is the maximum, wrap to `0`.",48,null],[13,"Decrement","","Decrements the value currently in the stencil buffer. If the value is `0`, don't do anything.",48,null],[13,"DecrementWrap","","Decrements the value currently in the stencil buffer. If the value is `0`, wrap to `-1`.",48,null],[13,"Invert","","Inverts each bit of the value.",48,null],[4,"Api","","Describes an OpenGL-related API.",null,null],[13,"Gl","","Regular OpenGL.",49,null],[13,"GlEs","","OpenGL embedded system.",49,null],[4,"Handle","","Handle to a shader or a program.",null,null],[13,"Id","","A numeric identifier.",50,null],[13,"Handle","","A `GLhandleARB`.",50,null],[4,"RawUniformValue","","A raw value of a uniform. \"Raw\" means that it's passed directly with `glUniform`. Textures for example are just passed as integers.",null,null],[13,"SignedInt","","",51,null],[13,"UnsignedInt","","",51,null],[13,"Float","","",51,null],[13,"Mat2","","2x2 column-major matrix.",51,null],[13,"Mat3","","3x3 column-major matrix.",51,null],[13,"Mat4","","4x4 column-major matrix.",51,null],[13,"Vec2","","",51,null],[13,"Vec3","","",51,null],[13,"Vec4","","",51,null],[13,"IntVec2","","",51,null],[13,"IntVec3","","",51,null],[13,"IntVec4","","",51,null],[13,"UnsignedIntVec2","","",51,null],[13,"UnsignedIntVec3","","",51,null],[13,"UnsignedIntVec4","","",51,null],[13,"Double","","",51,null],[13,"DoubleMat2","","",51,null],[13,"DoubleMat3","","",51,null],[13,"DoubleMat4","","",51,null],[13,"DoubleVec2","","",51,null],[13,"DoubleVec3","","",51,null],[13,"DoubleVec4","","",51,null],[13,"Int64","","",51,null],[13,"Int64Vec2","","",51,null],[13,"Int64Vec3","","",51,null],[13,"Int64Vec4","","",51,null],[13,"UnsignedInt64","","",51,null],[13,"UnsignedInt64Vec2","","",51,null],[13,"UnsignedInt64Vec3","","",51,null],[13,"UnsignedInt64Vec4","","",51,null],[4,"DrawError","","Error that can happen while drawing.",null,null],[13,"NoDepthBuffer","","A depth function has been requested but no depth buffer is available.",52,null],[13,"AttributeTypeMismatch","","The type of a vertex attribute in the vertices source doesn't match what the program requires.",52,null],[13,"AttributeMissing","","One of the attributes required by the program is missing from the vertex format.",52,null],[13,"ViewportTooLarge","","The viewport's dimensions are not supported by the backend.",52,null],[13,"InvalidDepthRange","","The depth range is outside of the `(0, 1)` range.",52,null],[13,"UniformTypeMismatch","","The type of a uniform doesn't match what the program requires.",52,null],[12,"name","glium::DrawError","Name of the uniform you are trying to bind.",52,null],[12,"expected","","The expected type.",52,null],[13,"UniformBufferToValue","glium","Tried to bind a uniform buffer to a single uniform value.",52,null],[12,"name","glium::DrawError","Name of the uniform you are trying to bind.",52,null],[13,"UniformValueToBlock","glium","Tried to bind a single uniform value to a uniform block.",52,null],[12,"name","glium::DrawError","Name of the uniform you are trying to bind.",52,null],[13,"UniformBlockLayoutMismatch","glium","The layout of the content of the uniform buffer does not match the layout of the block.",52,null],[12,"name","glium::DrawError","Name of the block you are trying to bind.",52,null],[12,"err","","The error giving more details about the mismatch.",52,null],[13,"SubroutineUniformToValue","glium","Tried to bind a subroutine uniform like a regular uniform value.",52,null],[12,"name","glium::DrawError","Name of the uniform you are trying to bind.",52,null],[13,"SubroutineUniformMissing","glium","Not all subroutine uniforms of a shader stage were set.",52,null],[12,"stage","glium::DrawError","Shader stage with missing bindings.",52,null],[12,"expected_count","","The expected number of bindings.",52,null],[12,"real_count","","The number of bindings defined by the user.",52,null],[13,"SubroutineNotFound","glium","A non-existent subroutine was referenced.",52,null],[12,"stage","glium::DrawError","The stage the subroutine was searched for.",52,null],[12,"name","","The invalid name of the subroutine.",52,null],[13,"UnsupportedVerticesPerPatch","glium","The number of vertices per patch that has been requested is not supported.",52,null],[13,"TessellationNotSupported","","Trying to use tessellation, but this is not supported by the underlying hardware.",52,null],[13,"TessellationWithoutPatches","","Using a program which contains tessellation shaders, but without submitting patches.",52,null],[13,"SamplersNotSupported","","Trying to use a sampler, but they are not supported by the backend.",52,null],[13,"InstancesCountMismatch","","When you use instancing, all vertices sources must have the same size.",52,null],[13,"VerticesSourcesLengthMismatch","","If you don't use indices, then all vertices sources must have the same size.",52,null],[13,"TransformFeedbackNotSupported","","You requested not to draw primitives, but this is not supported by the backend.",52,null],[13,"WrongQueryOperation","","See the documentation of the `draw_parameters` module for infos.",52,null],[13,"SmoothingNotSupported","","You requested smoothing, but this is not supported by the backend.",52,null],[13,"ProvokingVertexNotSupported","","The requested provoking vertex is not supported by the backend.",52,null],[13,"RasterizerDiscardNotSupported","","Discarding rasterizer output isn't supported by the backend.",52,null],[13,"DepthClampNotSupported","","Depth clamping isn't supported by the backend.",52,null],[13,"BlendingParameterNotSupported","","One of the blending parameters is not supported by the backend.",52,null],[13,"FixedIndexRestartingNotSupported","","Restarting indices (multiple objects per draw call) is not supported by the backend.",52,null],[4,"SwapBuffersError","","Error that can happen when swapping buffers.",null,null],[13,"ContextLost","","The OpenGL context has been lost and needs to be recreated. The `Display` and all the objects associated to it (textures, buffers, programs, etc.) need to be recreated from scratch.",53,null],[13,"AlreadySwapped","","The buffers have already been swapped.",53,null],[5,"get_supported_glsl_version","","Given an API version, this function returns the GLSL version that the implementation is required to support.",null,{"inputs":[{"name":"version"}],"output":{"name":"version"}}],[0,"backend","","The `backend` module allows one to link between glium and the OpenGL context..",null,null],[3,"Context","glium::backend","Stores the state and information required for glium to execute commands. Most public glium functions require passing a `Rc<Context>`.",null,null],[4,"ReleaseBehavior","","Defines what happens when you change the current context.",null,null],[13,"None","","Nothing is done when using another context.",54,null],[13,"Flush","","The commands queue of the current context is flushed.",54,null],[0,"glutin","","Backend implementation for the glutin library",null,null],[3,"Display","glium::backend::glutin","A GL context combined with a facade for drawing upon.",null,null],[3,"GlutinBackend","","An implementation of the `Backend` trait for glutin.",null,null],[4,"DisplayCreationError","","Error that can happen while creating a glium display.",null,null],[13,"GlutinCreationError","","An error has happened while creating the backend.",55,null],[13,"IncompatibleOpenGl","","The OpenGL implementation is too old.",55,null],[0,"headless","","Backend implementation for a glutin headless renderer.",null,null],[3,"Headless","glium::backend::glutin::headless","A headless glutin context.",null,null],[3,"GlutinBackend","","An implementation of the `Backend` trait for a glutin headless context.",null,null],[11,"deref","","",56,{"inputs":[{"name":"self"}],"output":{"name":"context"}}],[11,"deref","","",57,{"inputs":[{"name":"self"}],"output":{"name":"headlesscontext"}}],[11,"swap_buffers","","",57,{"inputs":[{"name":"self"}],"output":{"generics":["swapbufferserror"],"name":"result"}}],[11,"get_proc_address","","",57,null],[11,"get_framebuffer_dimensions","","",57,null],[11,"is_current","","",57,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"make_current","","",57,{"inputs":[{"name":"self"}],"output":null}],[11,"get_context","","",56,{"inputs":[{"name":"self"}],"output":{"name":"rc"}}],[11,"new","","Create a new glium `Headless` context.",56,{"inputs":[{"name":"headlesscontext"}],"output":{"generics":["incompatibleopengl"],"name":"result"}}],[11,"unchecked","","Create a new glium `Headless` context.",56,{"inputs":[{"name":"headlesscontext"}],"output":{"generics":["incompatibleopengl"],"name":"result"}}],[11,"with_debug","","The same as the `new` constructor, but allows for specifying debug callback behaviour.",56,{"inputs":[{"name":"headlesscontext"},{"name":"debugcallbackbehavior"}],"output":{"generics":["incompatibleopengl"],"name":"result"}}],[11,"unchecked_with_debug","","The same as the `unchecked` constructor, but allows for specifying debug callback behaviour.",56,{"inputs":[{"name":"headlesscontext"},{"name":"debugcallbackbehavior"}],"output":{"generics":["incompatibleopengl"],"name":"result"}}],[11,"draw","","Start drawing on the backbuffer.",56,{"inputs":[{"name":"self"}],"output":{"name":"frame"}}],[11,"clone","glium::backend::glutin","",58,{"inputs":[{"name":"self"}],"output":{"name":"display"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"glutinbackend"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new glium `Display` from the given context and window builders.",58,{"inputs":[{"name":"windowbuilder"},{"name":"contextbuilder"},{"name":"eventsloop"}],"output":{"generics":["displaycreationerror"],"name":"result"}}],[11,"from_gl_window","","Create a new glium `Display`.",58,{"inputs":[{"name":"glwindow"}],"output":{"generics":["incompatibleopengl"],"name":"result"}}],[11,"unchecked","","Create a new glium `Display`.",58,{"inputs":[{"name":"glwindow"}],"output":{"generics":["incompatibleopengl"],"name":"result"}}],[11,"with_debug","","The same as the `new` constructor, but allows for specifying debug callback behaviour.",58,{"inputs":[{"name":"glwindow"},{"name":"debugcallbackbehavior"}],"output":{"generics":["incompatibleopengl"],"name":"result"}}],[11,"unchecked_with_debug","","The same as the `unchecked` constructor, but allows for specifying debug callback behaviour.",58,{"inputs":[{"name":"glwindow"},{"name":"debugcallbackbehavior"}],"output":{"generics":["incompatibleopengl"],"name":"result"}}],[11,"rebuild","","Rebuilds the Display's `GlWindow` with the given window and context builders.",58,{"inputs":[{"name":"self"},{"name":"windowbuilder"},{"name":"contextbuilder"},{"name":"eventsloop"}],"output":{"generics":["displaycreationerror"],"name":"result"}}],[11,"gl_window","","Borrow the inner glutin GlWindow.",58,{"inputs":[{"name":"self"}],"output":{"generics":["glwindow"],"name":"ref"}}],[11,"draw","","Start drawing on the backbuffer.",58,{"inputs":[{"name":"self"}],"output":{"name":"frame"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"description","","",55,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",55,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"from","","",55,{"inputs":[{"name":"creationerror"}],"output":{"name":"displaycreationerror"}}],[11,"from","","",55,{"inputs":[{"name":"incompatibleopengl"}],"output":{"name":"displaycreationerror"}}],[11,"deref","","",58,{"inputs":[{"name":"self"}],"output":{"name":"context"}}],[11,"get_context","","",58,{"inputs":[{"name":"self"}],"output":{"name":"rc"}}],[11,"deref","","",59,{"inputs":[{"name":"self"}],"output":{"name":"rc"}}],[11,"swap_buffers","","",59,{"inputs":[{"name":"self"}],"output":{"generics":["swapbufferserror"],"name":"result"}}],[11,"get_proc_address","","",59,null],[11,"get_framebuffer_dimensions","","",59,null],[11,"is_current","","",59,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"make_current","","",59,{"inputs":[{"name":"self"}],"output":null}],[8,"Backend","glium::backend","Trait for types that can be used as a backend for a glium context.",null,null],[10,"swap_buffers","","Swaps buffers at the end of a frame.",60,{"inputs":[{"name":"self"}],"output":{"generics":["swapbufferserror"],"name":"result"}}],[10,"get_proc_address","","Returns the address of an OpenGL function.",60,null],[10,"get_framebuffer_dimensions","","Returns the dimensions of the window, or screen, etc.",60,null],[10,"is_current","","Returns true if the OpenGL context is the current one in the thread.",60,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"make_current","","Makes the OpenGL context the current context in the current thread.",60,{"inputs":[{"name":"self"}],"output":null}],[8,"Facade","","Trait for types that provide a safe access for glium functions.",null,null],[10,"get_context","","Returns an opaque type that contains the OpenGL state, extensions, version, etc.",61,{"inputs":[{"name":"self"}],"output":{"name":"rc"}}],[0,"buffer","glium","A buffer is a memory location accessible to the video card.",null,null],[3,"Buffer","glium::buffer","Represents a view of a buffer.",null,null],[3,"BufferAny","","Represents a sub-part of a buffer.",null,null],[3,"BufferMutSlice","","Represents a sub-part of a buffer.",null,null],[3,"BufferSlice","","Represents a sub-part of a buffer.",null,null],[3,"BufferAnySlice","","Slice of a `Buffer` without any type info.",null,null],[3,"Mapping","","A mapping of a buffer for reading and writing.",null,null],[3,"WriteMapping","","A mapping of a buffer for write only.",null,null],[3,"ReadMapping","","A mapping of a buffer for reading.",null,null],[3,"Inserter","","Allows inserting a fence in the list.",null,null],[3,"BufferView","","Represents a view of a buffer.",null,null],[3,"BufferViewSlice","","Represents a sub-part of a buffer.",null,null],[3,"BufferViewMutSlice","","Represents a sub-part of a buffer.",null,null],[3,"BufferViewAny","","Represents a sub-part of a buffer.",null,null],[3,"BufferViewAnySlice","","Slice of a `Buffer` without any type info.",null,null],[4,"ReadError","","Error that can happen when reading from a buffer.",null,null],[13,"NotSupported","","The backend doesn't support reading from a buffer.",62,null],[13,"ContextLost","","The context has been lost. Reading from the buffer would return garbage data.",62,null],[4,"CopyError","","Error that can happen when copying data between buffers.",null,null],[13,"NotSupported","","The backend doesn't support copying between buffers.",63,null],[4,"BufferCreationError","","Error that can happen when creating a buffer.",null,null],[13,"OutOfMemory","","Not enough memory to create the buffer.",64,null],[13,"BufferTypeNotSupported","","This type of buffer is not supported.",64,null],[4,"BufferMode","","How the buffer is created.",null,null],[13,"Default","","This is the default mode suitable for any usage. Will never be slow, will never be fast either.",65,null],[13,"Dynamic","","The mode to use when you modify a buffer multiple times per frame. Similar to `Default` in that it is suitable for most usages.",65,null],[13,"Persistent","","Optimized for when you modify a buffer exactly once per frame. You can modify it more than once per frame, but if you modify it too often things will slow down.",65,null],[13,"Immutable","","Optimized when you will never touch the content of the buffer.",65,null],[4,"BufferType","","Type of a buffer.",null,null],[13,"ArrayBuffer","","",66,null],[13,"PixelPackBuffer","","",66,null],[13,"PixelUnpackBuffer","","",66,null],[13,"UniformBuffer","","",66,null],[13,"CopyReadBuffer","","",66,null],[13,"CopyWriteBuffer","","",66,null],[13,"AtomicCounterBuffer","","",66,null],[13,"DispatchIndirectBuffer","","",66,null],[13,"DrawIndirectBuffer","","",66,null],[13,"QueryBuffer","","",66,null],[13,"ShaderStorageBuffer","","",66,null],[13,"TextureBuffer","","",66,null],[13,"TransformFeedbackBuffer","","",66,null],[13,"ElementArrayBuffer","","",66,null],[5,"is_buffer_read_supported","","Returns true if reading from a buffer is supported by the backend.",null,{"inputs":[{"name":"c"}],"output":{"name":"bool"}}],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"readerror"}}],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",62,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"copyerror"}}],[11,"fmt","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",63,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"deref","","",67,{"inputs":[{"name":"self"}],"output":{"name":"d"}}],[11,"deref_mut","","",67,{"inputs":[{"name":"self"}],"output":{"name":"d"}}],[11,"deref","","",68,{"inputs":[{"name":"self"}],"output":{"name":"d"}}],[11,"write","","Writes the whole content.",69,{"inputs":[{"name":"self"},{"name":"d"}],"output":null}],[11,"len","","Returns the length of the mapping.",69,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set","","Changes an element of the mapping.",69,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"d"}],"output":null}],[11,"insert","","Inserts a new fence.",70,{"inputs":[{"name":"self"},{"name":"commandcontext"}],"output":null}],[11,"get_id","","",71,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"new","","Builds a new buffer containing the given data. The size of the buffer is equal to the size of the data.",71,{"inputs":[{"name":"f"},{"name":"t"},{"name":"buffertype"},{"name":"buffermode"}],"output":{"generics":["buffer","buffercreationerror"],"name":"result"}}],[11,"empty_unsized","","Builds a new buffer of the given size.",71,{"inputs":[{"name":"f"},{"name":"buffertype"},{"name":"usize"},{"name":"buffermode"}],"output":{"generics":["buffer","buffercreationerror"],"name":"result"}}],[11,"get_context","","Returns the context corresponding to this buffer.",71,{"inputs":[{"name":"self"}],"output":{"name":"rc"}}],[11,"get_size","","Returns the size in bytes of this buffer.",71,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_persistent","","Returns true if this buffer uses persistent mapping.",71,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"write","","Uploads some data in this buffer.",71,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"invalidate","","Invalidates the content of the buffer. The data becomes undefined.",71,{"inputs":[{"name":"self"}],"output":null}],[11,"read","","Reads the content of the buffer.",71,{"inputs":[{"name":"self"}],"output":{"generics":["readerror"],"name":"result"}}],[11,"map","","Maps the buffer in memory for both reading and writing.",71,{"inputs":[{"name":"self"}],"output":{"name":"mapping"}}],[11,"map_read","","Maps the buffer in memory for reading.",71,{"inputs":[{"name":"self"}],"output":{"name":"readmapping"}}],[11,"map_write","","Maps the buffer in memory for writing only.",71,{"inputs":[{"name":"self"}],"output":{"name":"writemapping"}}],[11,"copy_to","","Copies the content of the buffer to another buffer.",71,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"generics":["copyerror"],"name":"result"}}],[11,"slice_custom","","Builds a slice that contains an element from inside the buffer.",71,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bufferslice"}}],[11,"slice_custom_mut","","Same as `slice_custom` but returns a mutable slice.",71,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"buffermutslice"}}],[11,"as_slice","","Builds a slice containing the whole subbuffer.",71,{"inputs":[{"name":"self"}],"output":{"name":"bufferslice"}}],[11,"as_mut_slice","","Builds a slice containing the whole subbuffer.",71,{"inputs":[{"name":"self"}],"output":{"name":"buffermutslice"}}],[11,"as_slice_any","","Builds a slice-any containing the whole subbuffer.",71,{"inputs":[{"name":"self"}],"output":{"name":"bufferanyslice"}}],[11,"empty","","Builds a new buffer of the given size.",71,{"inputs":[{"name":"f"},{"name":"buffertype"},{"name":"buffermode"}],"output":{"generics":["buffer","buffercreationerror"],"name":"result"}}],[11,"empty_array","","Builds a new buffer of the given size.",71,{"inputs":[{"name":"f"},{"name":"buffertype"},{"name":"usize"},{"name":"buffermode"}],"output":{"generics":["buffer","buffercreationerror"],"name":"result"}}],[11,"len","","Returns the number of elements in this buffer.",71,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"slice","","Builds a slice of this subbuffer. Returns `None` if out of range.",71,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"generics":["bufferslice"],"name":"option"}}],[11,"slice_mut","","Builds a slice of this subbuffer. Returns `None` if out of range.",71,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"generics":["buffermutslice"],"name":"option"}}],[11,"read_as_texture_1d","","Reads the content of the buffer.",71,{"inputs":[{"name":"self"}],"output":{"generics":["readerror"],"name":"result"}}],[11,"fmt","","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"drop","","",71,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"bufferslice"}}],[11,"get_size","","Returns the size in bytes of this slice.",72,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"get_context","","Returns the context corresponding to this buffer.",72,{"inputs":[{"name":"self"}],"output":{"name":"rc"}}],[11,"write","","Uploads some data in this buffer.",72,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"invalidate","","Invalidates the content of the slice. The data becomes undefined.",72,{"inputs":[{"name":"self"}],"output":null}],[11,"read","","Reads the content of the buffer.",72,{"inputs":[{"name":"self"}],"output":{"generics":["readerror"],"name":"result"}}],[11,"copy_to","","Copies the content of this slice to another slice.",72,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"generics":["copyerror"],"name":"result"}}],[11,"slice_custom","","Builds a slice that contains an element from inside the buffer.",72,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bufferslice"}}],[11,"as_slice_any","","Builds a slice-any containing the whole subbuffer.",72,{"inputs":[{"name":"self"}],"output":{"name":"bufferanyslice"}}],[11,"len","","Returns the number of elements in this slice.",72,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"slice","","Builds a subslice of this slice. Returns `None` if out of range.",72,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"generics":["bufferslice"],"name":"option"}}],[11,"read_as_texture_1d","","Reads the content of the buffer.",72,{"inputs":[{"name":"self"}],"output":{"generics":["readerror"],"name":"result"}}],[11,"fmt","","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"from","","",72,{"inputs":[{"name":"buffermutslice"}],"output":{"name":"bufferslice"}}],[11,"from","","",72,{"inputs":[{"name":"buffer"}],"output":{"name":"bufferslice"}}],[11,"from","","",72,{"inputs":[{"name":"buffer"}],"output":{"name":"bufferslice"}}],[11,"get_size","","Returns the size in bytes of this slice.",73,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"map","","Maps the buffer in memory for both reading and writing.",73,{"inputs":[{"name":"self"}],"output":{"name":"mapping"}}],[11,"map_read","","Maps the buffer in memory for reading.",73,{"inputs":[{"name":"self"}],"output":{"name":"readmapping"}}],[11,"map_write","","Maps the buffer in memory for writing only.",73,{"inputs":[{"name":"self"}],"output":{"name":"writemapping"}}],[11,"write","","Uploads some data in this buffer.",73,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"invalidate","","Invalidates the content of the slice. The data becomes undefined.",73,{"inputs":[{"name":"self"}],"output":null}],[11,"read","","Reads the content of the buffer.",73,{"inputs":[{"name":"self"}],"output":{"generics":["readerror"],"name":"result"}}],[11,"copy_to","","Copies the content of this slice to another slice.",73,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"generics":["copyerror"],"name":"result"}}],[11,"slice_custom","","Builds a slice that contains an element from inside the buffer.",73,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"buffermutslice"}}],[11,"as_slice_any","","Builds a slice-any containing the whole subbuffer.",73,{"inputs":[{"name":"self"}],"output":{"name":"bufferanyslice"}}],[11,"len","","Returns the number of elements in this slice.",73,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"slice","","Builds a subslice of this slice. Returns `None` if out of range.",73,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"generics":["buffermutslice"],"name":"option"}}],[11,"read_as_texture_1d","","Reads the content of the buffer.",73,{"inputs":[{"name":"self"}],"output":{"generics":["readerror"],"name":"result"}}],[11,"fmt","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"from","","",73,{"inputs":[{"name":"buffer"}],"output":{"name":"buffermutslice"}}],[11,"as_slice_any","","Builds a slice-any containing the whole subbuffer.",74,{"inputs":[{"name":"self"}],"output":{"name":"bufferanyslice"}}],[11,"as_typed_slice_mut","","Builds a mutable typed slice containing the whole subbuffer, without checking the type.",74,{"inputs":[{"name":"self"}],"output":{"name":"buffermutslice"}}],[11,"as_typed_slice","","Builds a typed slice containing the whole subbuffer, without checking the type.",74,{"inputs":[{"name":"self"}],"output":{"name":"bufferslice"}}],[11,"get_elements_size","","Returns the size in bytes of each element in the buffer.",74,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"get_elements_count","","Returns the number of elements in the buffer.",74,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"get_context","","Returns the context corresponding to this buffer.",74,{"inputs":[{"name":"self"}],"output":{"name":"rc"}}],[11,"get_size","","Returns the number of bytes in this subbuffer.",74,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"invalidate","","Invalidates the content of the buffer. The data becomes undefined.",74,{"inputs":[{"name":"self"}],"output":null}],[11,"read","","UNSTABLE. This function can be removed at any moment without any further notice.",74,{"inputs":[{"name":"self"}],"output":{"generics":["readerror"],"name":"result"}}],[11,"from","","",74,{"inputs":[{"name":"buffer"}],"output":{"name":"bufferany"}}],[11,"drop","","",74,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"bufferanyslice"}}],[11,"get_id","","",75,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"get_size","","Returns the number of bytes in this slice.",75,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"get_elements_size","","Returns the size in bytes of each element in the buffer.",75,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"get_elements_count","","Returns the number of elements in the buffer.",75,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"invalidate","","Invalidates the content of the slice. The data becomes undefined.",75,{"inputs":[{"name":"self"}],"output":null}],[11,"get_context","","Returns the context corresponding to this buffer.",75,{"inputs":[{"name":"self"}],"output":{"name":"rc"}}],[11,"fmt","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[8,"Content","","Trait for types of data that can be put inside buffers.",null,null],[16,"Owned","","A type that holds a sized version of the content.",76,null],[10,"read","","Prepares an output buffer, then turns this buffer into an `Owned`.",76,{"inputs":[{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"get_elements_size","","Returns the size of each element.",76,{"inputs":[],"output":{"name":"usize"}}],[10,"to_void_ptr","","Produces a pointer to the data.",76,null],[10,"ref_from_ptr","","Builds a pointer to this type from a raw pointer.",76,null],[10,"is_size_suitable","","Returns true if the size is suitable to store a type like this.",76,{"inputs":[{"name":"usize"}],"output":{"name":"bool"}}],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"buffercreationerror"}}],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",64,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"buffermode"}}],[11,"eq","","",65,{"inputs":[{"name":"self"},{"name":"buffermode"}],"output":{"name":"bool"}}],[11,"default","","",65,{"inputs":[],"output":{"name":"buffermode"}}],[11,"fmt","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"buffertype"}}],[11,"eq","","",66,{"inputs":[{"name":"self"},{"name":"buffertype"}],"output":{"name":"bool"}}],[0,"debug","glium","",null,null],[3,"TimestampQuery","glium::debug","Allows you to obtain the timestamp inside the OpenGL commands queue.",null,null],[4,"DebugCallbackBehavior","","Describes the behavior that the debug output should have.",null,null],[13,"Ignore","","Don't do anything. This is the default behavior in release.",77,null],[13,"DebugMessageOnError","","Print a message on stdout on error, except in some circumstances like when compiling shaders. This is the default behavior in debug mode.",77,null],[13,"PrintAll","","Print every single output received by the driver.",77,null],[13,"Custom","","Use a custom callback.",77,null],[12,"callback","glium::debug::DebugCallbackBehavior","The function to be called.",77,null],[12,"synchronous","","Whether or not it should be called immediately (true) or asynchronously (false).",77,null],[4,"Severity","glium::debug","Severity of a debug message.",null,null],[13,"Notification","","Anything that isn't an error or performance issue.",78,null],[13,"Low","","Redundant state-change performance warning, or unimportant undefined behavior.",78,null],[13,"Medium","","Major performance warnings, shader compilation/linking warnings, or the use of deprecated functionality.",78,null],[13,"High","","All OpenGL Errors, shader compilation/linking errors, or highly-dangerous undefined behavior.",78,null],[4,"Source","","Source of a debug message.",null,null],[13,"Api","","Calls to the OpenGL API.",79,null],[13,"WindowSystem","","Calls to a window-system API.",79,null],[13,"ShaderCompiler","","A compiler for a shading language.",79,null],[13,"ThirdParty","","An application associated with Openctxt.gl.",79,null],[13,"Application","","Explicitly generated by Glium or the application.",79,null],[13,"OtherSource","","",79,null],[4,"MessageType","","Type of a debug message.",null,null],[13,"Error","","An error, typically from the API",80,null],[13,"DeprecatedBehavior","","Some behavior marked deprecated has been used",80,null],[13,"UndefinedBehavior","","Something has invoked undefined behavior",80,null],[13,"Portability","","Some functionality the user relies upon is not portable",80,null],[13,"Performance","","Code has triggered possible performance issues",80,null],[13,"Marker","","Command stream annotation",80,null],[13,"PushGroup","","Entering a debug group",80,null],[13,"PopGroup","","Leaving a debug group",80,null],[13,"Other","","Any other event",80,null],[6,"DebugCallback","","Represents a callback that can be used for the debug output feature of OpenGL.",null,null],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"severity"}}],[11,"fmt","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",78,{"inputs":[{"name":"self"},{"name":"severity"}],"output":{"name":"bool"}}],[11,"clone","","",79,{"inputs":[{"name":"self"}],"output":{"name":"source"}}],[11,"fmt","","",79,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",80,{"inputs":[{"name":"self"}],"output":{"name":"messagetype"}}],[11,"fmt","","",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `TimestampQuery`. Returns `None` if the backend doesn't support it.",81,{"inputs":[{"name":"f"}],"output":{"generics":["timestampquery"],"name":"option"}}],[11,"is_ready","","Queries the counter to see if the timestamp is already available.",81,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get","","Returns the value of the timestamp. Blocks until it is available.",81,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[0,"draw_parameters","glium","Describes miscellaneous parameters to be used when drawing.",null,null],[3,"Blend","glium::draw_parameters","Blend effect that the GPU will use for blending.",null,null],[12,"color","","The blending function for color channels.",37,null],[12,"alpha","","The blending function for alpha channels.",37,null],[12,"constant_value","","A constant color that can be used in the blending functions.",37,null],[3,"Depth","","Represents the depth parameters of a draw command.",null,null],[12,"test","","The function that the GPU will use to determine whether to write over an existing pixel on the target. Don't forget to set `depth_write` appropriately if you use a depth test.",38,null],[12,"write","","Sets whether the GPU will write the depth values on the depth buffer if they pass the depth test.",38,null],[12,"range","","The range of possible Z values in surface coordinates.",38,null],[12,"clamp","","Sets whether the depth values of samples should be clamped to `0.0` and `1.0`.",38,null],[3,"SamplesPassedQuery","","A query that allows you to know the number of samples written to the output during the draw operations where this query was active.",null,null],[3,"TimeElapsedQuery","","A query that allows you to know the number of nanoseconds that have elapsed during the draw operations.",null,null],[3,"PrimitivesGeneratedQuery","","Query that allows you to know the number of primitives generated by the geometry shader. Will stay at `0` if you use it without any active geometry shader.",null,null],[3,"AnySamplesPassedQuery","","A query type that allows you to know whether any sample has been written to the output during the operations executed with this query.",null,null],[3,"TransformFeedbackPrimitivesWrittenQuery","","Query that allows you to know the number of primitives generated by transform feedback.",null,null],[3,"Stencil","","Describes the parameters that must be used for the stencil operations when drawing.",null,null],[12,"test_clockwise","","A comparison against the existing value in the stencil buffer.",82,null],[12,"reference_value_clockwise","","Reference value that is used by `stencil_test_clockwise`, `stencil_fail_operation_clockwise`, `stencil_pass_depth_fail_operation_clockwise` and `stencil_depth_pass_operation_clockwise`.",82,null],[12,"write_mask_clockwise","","Allows specifying a mask when writing data on the stencil buffer.",82,null],[12,"fail_operation_clockwise","","Specifies the operation to do when a fragment fails the stencil test.",82,null],[12,"pass_depth_fail_operation_clockwise","","Specifies the operation to do when a fragment passes the stencil test but fails the depth test.",82,null],[12,"depth_pass_operation_clockwise","","Specifies the operation to do when a fragment passes both the stencil and depth tests.",82,null],[12,"test_counter_clockwise","","A comparaison against the existing value in the stencil buffer.",82,null],[12,"reference_value_counter_clockwise","","Reference value that is used by `stencil_test_counter_clockwise`, `stencil_fail_operation_counter_clockwise`, `stencil_pass_depth_fail_operation_counter_clockwise` and `stencil_depth_pass_operation_counter_clockwise`.",82,null],[12,"write_mask_counter_clockwise","","Allows specifying a mask when writing data on the stencil buffer.",82,null],[12,"fail_operation_counter_clockwise","","Specifies the operation to do when a fragment fails the stencil test.",82,null],[12,"pass_depth_fail_operation_counter_clockwise","","Specifies the operation to do when a fragment passes the stencil test but fails the depth test.",82,null],[12,"depth_pass_operation_counter_clockwise","","Specifies the operation to do when a fragment passes both the stencil and depth tests.",82,null],[3,"DrawParameters","","Represents the parameters to use when drawing.",null,null],[12,"depth","","How the fragment will interact with the depth buffer.",83,null],[12,"stencil","","How the fragment will interact with the stencil buffer.",83,null],[12,"blend","","The effect that the GPU will use to merge the existing pixel with the pixel that is being written.",83,null],[12,"color_mask","","Allows you to disable some color components.",83,null],[12,"line_width","","Width in pixels of the lines to draw when drawing lines.",83,null],[12,"point_size","","Diameter in pixels of the points to draw when drawing points.",83,null],[12,"backface_culling","","Whether or not the GPU should filter out some faces.",83,null],[12,"polygon_mode","","How to render polygons. The default value is `Fill`.",83,null],[12,"multisampling","","Whether multisample antialiasing (MSAA) should be used. Default value is `true`.",83,null],[12,"dithering","","Whether dithering is activated. Default value is `true`.",83,null],[12,"viewport","","The viewport to use when drawing.",83,null],[12,"scissor","","If specified, only pixels in this rect will be displayed. Default is `None`.",83,null],[12,"draw_primitives","","If `false`, the pipeline will stop after the primitives generation stage. The default value is `true`.",83,null],[12,"samples_passed_query","","If set, each sample (ie. usually each pixel) written to the output adds one to the counter of the `SamplesPassedQuery`.",83,null],[12,"time_elapsed_query","","If set, the time it took for the GPU to execute this draw command is added to the total stored inside the `TimeElapsedQuery`.",83,null],[12,"primitives_generated_query","","If set, the number of primitives generated is added to the total stored inside the query.",83,null],[12,"transform_feedback_primitives_written_query","","If set, the number of vertices written by transform feedback.",83,null],[12,"condition","","If set, the commands will only be executed if the specified query contains `true` or a number different than 0.",83,null],[12,"transform_feedback","","If set, then the generated primitives will be written back to a buffer.",83,null],[12,"smooth","","If set, then the generated primitives will be smoothed.",83,null],[12,"provoking_vertex","","In your vertex shader or geometry shader, you have the possibility to mark some output varyings as `flat`. If this is the case, the value of one of the vertices will be used for the whole primitive. This variable allows you to specify which vertex.",83,null],[12,"primitive_bounding_box","","Hint for the GPU of the bounding box of the geometry.",83,null],[12,"primitive_restart_index","","If enabled, will split the index buffer (if any is used in the draw call)  at the MAX value of the IndexType (u8::MAX, u16::MAX or u32::MAX) and start a new primitive of the same type (\"primitive restarting\"). Supported on > OpenGL 3.1 or OpenGL ES 3.0.  If the backend does not support GL_PRIMITIVE_RESTART_FIXED_INDEX, an Error  of type `FixedIndexRestartingNotSupported` will be returned.",83,null],[3,"ConditionalRendering","","Condition whether to render or not.",null,null],[12,"query","","The query to use.",84,null],[12,"wait","","If true, the GPU will wait until the query result has been obtained. If false, the GPU is free to ignore the query and draw anyway.",84,null],[12,"per_region","","If true, only samples that match those that were written with the query active will be drawn.",84,null],[4,"BlendingFunction","","Function that the GPU will use for blending.",null,null],[13,"AlwaysReplace","","Simply overwrite the destination pixel with the source pixel.",44,null],[13,"Min","","For each individual component (red, green, blue, and alpha), the minimum value is chosen between the source and the destination.",44,null],[13,"Max","","For each individual component (red, green, blue, and alpha), the maximum value is chosen between the source and the destination.",44,null],[13,"Addition","","For each individual component (red, green, blue, and alpha), a weighted addition between the source and the destination.",44,null],[12,"source","glium::draw_parameters::BlendingFunction","The factor to apply to the source pixel.",44,null],[12,"destination","","The factor to apply to the destination pixel.",44,null],[13,"Subtraction","glium::draw_parameters","For each individual component (red, green, blue, and alpha), a weighted subtraction of the source by the destination.",44,null],[12,"source","glium::draw_parameters::BlendingFunction","The factor to apply to the source pixel.",44,null],[12,"destination","","The factor to apply to the destination pixel.",44,null],[13,"ReverseSubtraction","glium::draw_parameters","For each individual component (red, green, blue, and alpha), a weighted subtraction of the destination by the source.",44,null],[12,"source","glium::draw_parameters::BlendingFunction","The factor to apply to the source pixel.",44,null],[12,"destination","","The factor to apply to the destination pixel.",44,null],[4,"LinearBlendingFactor","glium::draw_parameters","Indicates which value to multiply each component with.",null,null],[13,"Zero","","Multiply the source or destination component by zero, which always gives `0.0`.",45,null],[13,"One","","Multiply the source or destination component by one, which always gives you the original value.",45,null],[13,"SourceColor","","Multiply the source or destination component by its corresponding value in the source.",45,null],[13,"OneMinusSourceColor","","Equivalent to `1 - SourceColor`.",45,null],[13,"DestinationColor","","Multiply the source or destination component by its corresponding value in the destination.",45,null],[13,"OneMinusDestinationColor","","Equivalent to `1 - DestinationColor`.",45,null],[13,"SourceAlpha","","Multiply the source or destination component by the alpha value of the source.",45,null],[13,"SourceAlphaSaturate","","Multiply the source or destination component by the smallest value of `SourceAlpha` and `1 - DestinationAlpha`.",45,null],[13,"OneMinusSourceAlpha","","Multiply the source or destination component by `1.0` minus the alpha value of the source.",45,null],[13,"DestinationAlpha","","Multiply the source or destination component by the alpha value of the destination.",45,null],[13,"OneMinusDestinationAlpha","","Multiply the source or destination component by `1.0` minus the alpha value of the destination.",45,null],[13,"ConstantColor","","Multiply the source or destination component by the corresponding value in `Blend::const_value`.",45,null],[13,"OneMinusConstantColor","","Multiply the source or destination component by `1.0` minus the corresponding value in `Blend::const_value`.",45,null],[13,"ConstantAlpha","","Multiply the source or destination component by the alpha value of `Blend::const_value`.",45,null],[13,"OneMinusConstantAlpha","","Multiply the source or destination component by `1.0` minus the alpha value of `Blend::const_value`.",45,null],[4,"DepthTest","","The function that the GPU will use to determine whether to write over an existing pixel on the target.",null,null],[13,"Ignore","","Never replace the target pixel.",46,null],[13,"Overwrite","","Always replace the target pixel.",46,null],[13,"IfEqual","","Replace if the z-value of the source is equal to the destination.",46,null],[13,"IfNotEqual","","Replace if the z-value of the source is different than the destination.",46,null],[13,"IfMore","","Replace if the z-value of the source is more than the destination.",46,null],[13,"IfMoreOrEqual","","Replace if the z-value of the source is more than, or equal to the destination.",46,null],[13,"IfLess","","Replace if the z-value of the source is less than the destination.",46,null],[13,"IfLessOrEqual","","Replace if the z-value of the source is less than, or equal to the destination.",46,null],[4,"DepthClamp","","Specifies whether the depth value of samples should be clamped to `0.0` or `1.0`.",null,null],[13,"NoClamp","","Do not clamp. Samples with values outside of the `[0.0, 1.0]` range will be discarded.",85,null],[13,"Clamp","","Clamp the depth values. All samples will always be drawn.",85,null],[13,"ClampNear","","Depth values inferior to `0.0` will be clamped to `0.0`.",85,null],[13,"ClampFar","","Depth values superior to `1.0` will be clamped to `1.0`.",85,null],[4,"QueryCreationError","","Error that can happen when creating a query object.",null,null],[13,"NotSupported","","The given query type is not supported.",86,null],[4,"StencilTest","","Specifies which comparison the GPU will do to determine whether a sample passes the stencil test. The general equation is `(ref & mask) CMP (stencil & mask)`, where `ref` is the reference value (`stencil_reference_value_clockwise` or `stencil_reference_value_counter_clockwise`), `CMP` is the comparison chosen, and `stencil` is the current value in the stencil buffer.",null,null],[13,"AlwaysPass","","The stencil test always passes.",47,null],[13,"AlwaysFail","","The stencil test always fails.",47,null],[13,"IfLess","","`(ref & mask) < (stencil & mask)`",47,null],[12,"mask","glium::draw_parameters::StencilTest","The mask that is and'ed with the reference value and stencil buffer.",47,null],[13,"IfLessOrEqual","glium::draw_parameters","`(ref & mask) <= (stencil & mask)`",47,null],[12,"mask","glium::draw_parameters::StencilTest","The mask that is and'ed with the reference value and stencil buffer.",47,null],[13,"IfMore","glium::draw_parameters","`(ref & mask) > (stencil & mask)`",47,null],[12,"mask","glium::draw_parameters::StencilTest","The mask that is and'ed with the reference value and stencil buffer.",47,null],[13,"IfMoreOrEqual","glium::draw_parameters","`(ref & mask) >= (stencil & mask)`",47,null],[12,"mask","glium::draw_parameters::StencilTest","The mask that is and'ed with the reference value and stencil buffer.",47,null],[13,"IfEqual","glium::draw_parameters","`(ref & mask) == (stencil & mask)`",47,null],[12,"mask","glium::draw_parameters::StencilTest","The mask that is and'ed with the reference value and stencil buffer.",47,null],[13,"IfNotEqual","glium::draw_parameters","`(ref & mask) != (stencil & mask)`",47,null],[12,"mask","glium::draw_parameters::StencilTest","The mask that is and'ed with the reference value and stencil buffer.",47,null],[4,"StencilOperation","glium::draw_parameters","Specificies which operation the GPU will do depending on the result of the stencil test.",null,null],[13,"Keep","","Keeps the value currently in the stencil buffer.",48,null],[13,"Zero","","Writes zero in the stencil buffer.",48,null],[13,"Replace","","Writes the reference value (`stencil_reference_value_clockwise` or `stencil_reference_value_counter_clockwise`) in the stencil buffer.",48,null],[13,"Increment","","Increments the value currently in the stencil buffer. If the value is the maximum, don't do anything.",48,null],[13,"IncrementWrap","","Increments the value currently in the stencil buffer. If the value is the maximum, wrap to `0`.",48,null],[13,"Decrement","","Decrements the value currently in the stencil buffer. If the value is `0`, don't do anything.",48,null],[13,"DecrementWrap","","Decrements the value currently in the stencil buffer. If the value is `0`, wrap to `-1`.",48,null],[13,"Invert","","Inverts each bit of the value.",48,null],[4,"BackfaceCullingMode","","Describes how triangles should be filtered before the fragment processing. Backface culling is purely an optimization. If you don't know what this does, just use `CullingDisabled`.",null,null],[13,"CullingDisabled","","All triangles are always drawn.",87,null],[13,"CullCounterClockwise","","Triangles whose vertices are counterclockwise won't be drawn.",87,null],[13,"CullClockwise","","Triangles whose vertices are clockwise won't be drawn.",87,null],[4,"PolygonMode","","Defines how the device should render polygons.",null,null],[13,"Point","","Only draw a single point at each vertex.",88,null],[13,"Line","","Only draw a line in the boundaries of each polygon.",88,null],[13,"Fill","","Fill the content of the polygon. This is the default mode.",88,null],[4,"Smooth","","Specifies a hint for the smoothing.",null,null],[13,"Fastest","","The most efficient option should be chosen.",89,null],[13,"Nicest","","The most correct, or highest quality, option should be chosen.",89,null],[13,"DontCare","","No preference.",89,null],[4,"ProvokingVertex","","The vertex to use for flat shading.",null,null],[13,"LastVertex","","Use the last vertex of each primitive.",90,null],[13,"FirstVertex","","Use the first vertex of each primitive.",90,null],[4,"SamplesQueryParam","","The query to use for samples counting.",null,null],[13,"SamplesPassedQuery","","A `SamplesPassedQuery`.",91,null],[13,"AnySamplesPassedQuery","","A `AnySamplesPassedQuery`.",91,null],[5,"validate","","DEPRECATED. Checks parameters and returns an error if something is wrong.",null,{"inputs":[{"name":"context"},{"name":"drawparameters"}],"output":{"generics":["drawerror"],"name":"result"}}],[11,"clone","glium","",37,{"inputs":[{"name":"self"}],"output":{"name":"blend"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",37,{"inputs":[{"name":"self"},{"name":"blend"}],"output":{"name":"bool"}}],[11,"ne","","",37,{"inputs":[{"name":"self"},{"name":"blend"}],"output":{"name":"bool"}}],[11,"alpha_blending","","Returns a blend effect to add transparent objects over others.",37,{"inputs":[],"output":{"name":"blend"}}],[11,"default","","",37,{"inputs":[],"output":{"name":"blend"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"blendingfunction"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",44,{"inputs":[{"name":"self"},{"name":"blendingfunction"}],"output":{"name":"bool"}}],[11,"ne","","",44,{"inputs":[{"name":"self"},{"name":"blendingfunction"}],"output":{"name":"bool"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"linearblendingfactor"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",45,{"inputs":[{"name":"self"},{"name":"linearblendingfactor"}],"output":{"name":"bool"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"depth"}}],[11,"default","","",38,{"inputs":[],"output":{"name":"depth"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"depthtest"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",46,{"inputs":[{"name":"self"},{"name":"depthtest"}],"output":{"name":"bool"}}],[11,"requires_depth_buffer","","Returns true if the function requires a depth buffer to be used.",46,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","glium::draw_parameters","",85,{"inputs":[{"name":"self"}],"output":{"name":"depthclamp"}}],[11,"fmt","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",85,{"inputs":[{"name":"self"},{"name":"depthclamp"}],"output":{"name":"bool"}}],[11,"clone","","",86,{"inputs":[{"name":"self"}],"output":{"name":"querycreationerror"}}],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",86,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Builds a new query.",92,{"inputs":[{"name":"f"}],"output":{"generics":["samplespassedquery","querycreationerror"],"name":"result"}}],[11,"is_ready","","Queries the counter to see if the result is already available.",92,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get","","Returns the value of the query. Blocks until it is available.",92,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"to_buffer_u32","","Writes the result of the query to a buffer when it is available.",92,{"inputs":[{"name":"self"},{"generics":["u32"],"name":"bufferslice"}],"output":{"generics":["tobuffererror"],"name":"result"}}],[11,"get_id","","",92,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",93,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Builds a new query.",93,{"inputs":[{"name":"f"}],"output":{"generics":["timeelapsedquery","querycreationerror"],"name":"result"}}],[11,"is_ready","","Queries the counter to see if the result is already available.",93,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get","","Returns the value of the query. Blocks until it is available.",93,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"to_buffer_u32","","Writes the result of the query to a buffer when it is available.",93,{"inputs":[{"name":"self"},{"generics":["u32"],"name":"bufferslice"}],"output":{"generics":["tobuffererror"],"name":"result"}}],[11,"get_id","","",93,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Builds a new query.",94,{"inputs":[{"name":"f"},{"name":"bool"}],"output":{"generics":["anysamplespassedquery","querycreationerror"],"name":"result"}}],[11,"is_ready","","Queries the counter to see if the result is already available.",94,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get","","Returns the value of the query. Blocks until it is available.",94,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_buffer_u32","","Writes the result of the query to a buffer when it is available.",94,{"inputs":[{"name":"self"},{"generics":["u32"],"name":"bufferslice"}],"output":{"generics":["tobuffererror"],"name":"result"}}],[11,"get_id","","",94,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Builds a new query.",95,{"inputs":[{"name":"f"}],"output":{"generics":["primitivesgeneratedquery","querycreationerror"],"name":"result"}}],[11,"is_ready","","Queries the counter to see if the result is already available.",95,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get","","Returns the value of the query. Blocks until it is available.",95,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"to_buffer_u32","","Writes the result of the query to a buffer when it is available.",95,{"inputs":[{"name":"self"},{"generics":["u32"],"name":"bufferslice"}],"output":{"generics":["tobuffererror"],"name":"result"}}],[11,"get_id","","",95,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",96,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Builds a new query.",96,{"inputs":[{"name":"f"}],"output":{"generics":["transformfeedbackprimitiveswrittenquery","querycreationerror"],"name":"result"}}],[11,"is_ready","","Queries the counter to see if the result is already available.",96,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get","","Returns the value of the query. Blocks until it is available.",96,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"to_buffer_u32","","Writes the result of the query to a buffer when it is available.",96,{"inputs":[{"name":"self"},{"generics":["u32"],"name":"bufferslice"}],"output":{"generics":["tobuffererror"],"name":"result"}}],[11,"get_id","","",96,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"clone","","",82,{"inputs":[{"name":"self"}],"output":{"name":"stencil"}}],[11,"fmt","","",82,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",82,{"inputs":[],"output":{"name":"stencil"}}],[11,"clone","glium","",47,{"inputs":[{"name":"self"}],"output":{"name":"stenciltest"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",47,{"inputs":[{"name":"self"},{"name":"stenciltest"}],"output":{"name":"bool"}}],[11,"ne","","",47,{"inputs":[{"name":"self"},{"name":"stenciltest"}],"output":{"name":"bool"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"stenciloperation"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",48,{"inputs":[{"name":"self"},{"name":"stenciloperation"}],"output":{"name":"bool"}}],[11,"clone","glium::draw_parameters","",87,{"inputs":[{"name":"self"}],"output":{"name":"backfacecullingmode"}}],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",87,{"inputs":[{"name":"self"},{"name":"backfacecullingmode"}],"output":{"name":"bool"}}],[11,"clone","","",88,{"inputs":[{"name":"self"}],"output":{"name":"polygonmode"}}],[11,"fmt","","",88,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",88,{"inputs":[{"name":"self"},{"name":"polygonmode"}],"output":{"name":"bool"}}],[11,"clone","","",89,{"inputs":[{"name":"self"}],"output":{"name":"smooth"}}],[11,"fmt","","",89,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",89,{"inputs":[{"name":"self"},{"name":"smooth"}],"output":{"name":"bool"}}],[11,"clone","","",90,{"inputs":[{"name":"self"}],"output":{"name":"provokingvertex"}}],[11,"fmt","","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",90,{"inputs":[{"name":"self"},{"name":"provokingvertex"}],"output":{"name":"bool"}}],[11,"clone","","",83,{"inputs":[{"name":"self"}],"output":{"name":"drawparameters"}}],[11,"fmt","","",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",84,{"inputs":[{"name":"self"}],"output":{"name":"conditionalrendering"}}],[11,"fmt","","",91,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",91,{"inputs":[{"name":"self"}],"output":{"name":"samplesqueryparam"}}],[11,"from","","",91,{"inputs":[{"name":"samplespassedquery"}],"output":{"name":"samplesqueryparam"}}],[11,"from","","",91,{"inputs":[{"name":"anysamplespassedquery"}],"output":{"name":"samplesqueryparam"}}],[11,"default","","",83,{"inputs":[],"output":{"name":"drawparameters"}}],[0,"framebuffer","glium","Framebuffers allow you to customize the color, depth and stencil buffers you will draw on.",null,null],[3,"DefaultFramebuffer","glium::framebuffer","A framebuffer which has only one color attachment.",null,null],[3,"RenderBuffer","","A render buffer is similar to a texture, but is optimized for usage as a draw target.",null,null],[3,"RenderBufferAny","","A RenderBuffer of indeterminate type.",null,null],[3,"DepthRenderBuffer","","A render buffer is similar to a texture, but is optimized for usage as a draw target.",null,null],[3,"StencilRenderBuffer","","A render buffer is similar to a texture, but is optimized for usage as a draw target.",null,null],[3,"DepthStencilRenderBuffer","","A render buffer is similar to a texture, but is optimized for usage as a draw target.",null,null],[3,"SimpleFrameBuffer","","A framebuffer which has only one color attachment.",null,null],[3,"MultiOutputFrameBuffer","","This struct is useless for the moment.",null,null],[3,"EmptyFrameBuffer","","A framebuffer with no attachment at all.",null,null],[4,"DefaultFramebufferAttachment","","One of the color attachments on the default framebuffer.",null,null],[13,"BackLeft","","The backbuffer for the left eye. Equivalent to the backbuffer if stereoscopy is disabled.",97,null],[13,"BackRight","","The backbuffer for the right eye. May not be present.",97,null],[13,"FrontLeft","","The frontbuffer for the left eye. Equivalent to the frontbuffer if stereoscopy is disabled. May not be accessible.",97,null],[13,"FrontRight","","The frontbuffer for the right eye. May not be present or accessible.",97,null],[4,"RenderBufferCreationError","","Error while creating a render buffer.",null,null],[13,"FormatNotSupported","","The requested format is not supported.",98,null],[4,"ValidationError","","An error that can happen while validating attachments.",null,null],[13,"EmptyFramebufferObjectsNotSupported","","You requested an empty framebuffer object, but they are not supported.",99,null],[13,"EmptyFramebufferUnsupportedDimensions","","The requested characteristics of an empty framebuffer object are out of range.",99,null],[13,"DimensionsMismatchNotSupported","","The backend doesn't support attachments with various dimensions.",99,null],[13,"SamplesCountMismatch","","All attachments must have the same number of samples.",99,null],[13,"TooManyColorAttachments","","Backends only support a certain number of color attachments.",99,null],[12,"maximum","glium::framebuffer::ValidationError","Maximum number of attachments.",99,null],[12,"obtained","","Number of attachments that were given.",99,null],[4,"ColorAttachment","glium::framebuffer","Describes an attachment for a color buffer.",null,null],[13,"Texture","","A texture.",100,null],[13,"RenderBuffer","","A render buffer.",100,null],[4,"DepthAttachment","","Describes an attachment for a depth buffer.",null,null],[13,"Texture","","A texture.",101,null],[13,"RenderBuffer","","A render buffer.",101,null],[4,"StencilAttachment","","Describes an attachment for a stencil buffer.",null,null],[13,"Texture","","A texture.",102,null],[13,"RenderBuffer","","A render buffer.",102,null],[4,"DepthStencilAttachment","","Describes an attachment for a depth and stencil buffer.",null,null],[13,"Texture","","A texture.",103,null],[13,"RenderBuffer","","A render buffer.",103,null],[5,"is_dimensions_mismatch_supported","","Returns true if the backend supports attachments with varying dimensions.",null,{"inputs":[{"name":"c"}],"output":{"name":"bool"}}],[11,"clone","","",97,{"inputs":[{"name":"self"}],"output":{"name":"defaultframebufferattachment"}}],[11,"fmt","","",97,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"back_left","","Creates a `DefaultFramebuffer` with the back left buffer.",104,{"inputs":[{"name":"f"}],"output":{"name":"defaultframebuffer"}}],[11,"clear","","",104,{"inputs":[{"name":"self"},{"generics":["rect"],"name":"option"},{"name":"option"},{"name":"bool"},{"generics":["f32"],"name":"option"},{"generics":["i32"],"name":"option"}],"output":null}],[11,"get_dimensions","","",104,null],[11,"get_depth_buffer_bits","","",104,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"option"}}],[11,"get_stencil_buffer_bits","","",104,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"option"}}],[11,"draw","","",104,{"inputs":[{"name":"self"},{"name":"v"},{"name":"i"},{"name":"program"},{"name":"u"},{"name":"drawparameters"}],"output":{"generics":["drawerror"],"name":"result"}}],[11,"blit_color","","",104,{"inputs":[{"name":"self"},{"name":"rect"},{"name":"s"},{"name":"blittarget"},{"name":"magnifysamplerfilter"}],"output":null}],[11,"blit_from_frame","","",104,{"inputs":[{"name":"self"},{"name":"rect"},{"name":"blittarget"},{"name":"magnifysamplerfilter"}],"output":null}],[11,"blit_from_simple_framebuffer","","",104,{"inputs":[{"name":"self"},{"name":"simpleframebuffer"},{"name":"rect"},{"name":"blittarget"},{"name":"magnifysamplerfilter"}],"output":null}],[11,"blit_from_multioutput_framebuffer","","",104,{"inputs":[{"name":"self"},{"name":"multioutputframebuffer"},{"name":"rect"},{"name":"blittarget"},{"name":"magnifysamplerfilter"}],"output":null}],[11,"clone","","",98,{"inputs":[{"name":"self"}],"output":{"name":"creationerror"}}],[11,"fmt","","",98,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",98,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",98,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from","","",98,{"inputs":[{"name":"formatnotsupportederror"}],"output":{"name":"creationerror"}}],[11,"new","","Builds a new render buffer.",105,{"inputs":[{"name":"f"},{"name":"uncompressedfloatformat"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["renderbuffer","creationerror"],"name":"result"}}],[11,"deref","","",105,{"inputs":[{"name":"self"}],"output":{"name":"renderbufferany"}}],[11,"deref_mut","","",105,{"inputs":[{"name":"self"}],"output":{"name":"renderbufferany"}}],[11,"get_id","","",105,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"new","","Builds a new render buffer.",106,{"inputs":[{"name":"f"},{"name":"depthformat"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["depthrenderbuffer","creationerror"],"name":"result"}}],[11,"deref","","",106,{"inputs":[{"name":"self"}],"output":{"name":"renderbufferany"}}],[11,"deref_mut","","",106,{"inputs":[{"name":"self"}],"output":{"name":"renderbufferany"}}],[11,"get_id","","",106,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"new","","Builds a new render buffer.",107,{"inputs":[{"name":"f"},{"name":"stencilformat"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["stencilrenderbuffer","creationerror"],"name":"result"}}],[11,"deref","","",107,{"inputs":[{"name":"self"}],"output":{"name":"renderbufferany"}}],[11,"deref_mut","","",107,{"inputs":[{"name":"self"}],"output":{"name":"renderbufferany"}}],[11,"get_id","","",107,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"new","","Builds a new render buffer.",108,{"inputs":[{"name":"f"},{"name":"depthstencilformat"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["depthstencilrenderbuffer","creationerror"],"name":"result"}}],[11,"deref","","",108,{"inputs":[{"name":"self"}],"output":{"name":"renderbufferany"}}],[11,"deref_mut","","",108,{"inputs":[{"name":"self"}],"output":{"name":"renderbufferany"}}],[11,"get_id","","",108,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"get_dimensions","","Returns the dimensions of the render buffer.",109,null],[11,"get_samples","","Returns the number of samples of the render buffer, or `None` if multisampling isn't enabled.",109,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"option"}}],[11,"get_context","","Returns the context used to create this renderbuffer.",109,{"inputs":[{"name":"self"}],"output":{"name":"rc"}}],[11,"kind","","Returns the kind of renderbuffer.",109,{"inputs":[{"name":"self"}],"output":{"name":"texturekind"}}],[11,"drop","","",109,{"inputs":[{"name":"self"}],"output":null}],[11,"get_id","","",109,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[8,"ToColorAttachment","","Trait for objects that can be used as color attachments.",null,null],[10,"to_color_attachment","","Builds the `ColorAttachment`.",110,{"inputs":[{"name":"self"}],"output":{"name":"colorattachment"}}],[8,"ToDepthAttachment","","Trait for objects that can be used as depth attachments.",null,null],[10,"to_depth_attachment","","Builds the `DepthAttachment`.",111,{"inputs":[{"name":"self"}],"output":{"name":"depthattachment"}}],[8,"ToStencilAttachment","","Trait for objects that can be used as stencil attachments.",null,null],[10,"to_stencil_attachment","","Builds the `StencilAttachment`.",112,{"inputs":[{"name":"self"}],"output":{"name":"stencilattachment"}}],[8,"ToDepthStencilAttachment","","Trait for objects that can be used as depth and stencil attachments.",null,null],[10,"to_depth_stencil_attachment","","Builds the `DepthStencilAttachment`.",113,{"inputs":[{"name":"self"}],"output":{"name":"depthstencilattachment"}}],[11,"new","","Creates a `SimpleFrameBuffer` with a single color attachment and no depth nor stencil buffer.",114,{"inputs":[{"name":"f"},{"name":"c"}],"output":{"generics":["simpleframebuffer","validationerror"],"name":"result"}}],[11,"with_depth_buffer","","Creates a `SimpleFrameBuffer` with a single color attachment and a depth buffer, but no stencil buffer.",114,{"inputs":[{"name":"f"},{"name":"c"},{"name":"d"}],"output":{"generics":["simpleframebuffer","validationerror"],"name":"result"}}],[11,"depth_only","","Creates a `SimpleFrameBuffer` with a single color attachment and no depth nor stencil buffer.",114,{"inputs":[{"name":"f"},{"name":"d"}],"output":{"generics":["simpleframebuffer","validationerror"],"name":"result"}}],[11,"with_depth_and_stencil_buffer","","Creates a `SimpleFrameBuffer` with a single color attachment, a depth buffer, and a stencil buffer.",114,{"inputs":[{"name":"f"},{"name":"c"},{"name":"d"},{"name":"s"}],"output":{"generics":["simpleframebuffer","validationerror"],"name":"result"}}],[11,"depth_and_stencil_only","","Creates a `SimpleFrameBuffer` with a single color attachment and no depth nor stencil buffer.",114,{"inputs":[{"name":"f"},{"name":"d"},{"name":"s"}],"output":{"generics":["simpleframebuffer","validationerror"],"name":"result"}}],[11,"with_stencil_buffer","","Creates a `SimpleFrameBuffer` with a single color attachment and a stencil buffer, but no depth buffer.",114,{"inputs":[{"name":"f"},{"name":"c"},{"name":"s"}],"output":{"generics":["simpleframebuffer","validationerror"],"name":"result"}}],[11,"stencil_only","","Creates a `SimpleFrameBuffer` with a single color attachment and a stencil buffer, but no depth buffer.",114,{"inputs":[{"name":"f"},{"name":"s"}],"output":{"generics":["simpleframebuffer","validationerror"],"name":"result"}}],[11,"with_depth_stencil_buffer","","Creates a `SimpleFrameBuffer` with a single color attachment and a depth-stencil buffer.",114,{"inputs":[{"name":"f"},{"name":"c"},{"name":"d"}],"output":{"generics":["simpleframebuffer","validationerror"],"name":"result"}}],[11,"depth_stencil_only","","Creates a `SimpleFrameBuffer` with a single color attachment and a depth-stencil buffer.",114,{"inputs":[{"name":"f"},{"name":"d"}],"output":{"generics":["simpleframebuffer","validationerror"],"name":"result"}}],[11,"clear","","",114,{"inputs":[{"name":"self"},{"generics":["rect"],"name":"option"},{"name":"option"},{"name":"bool"},{"generics":["f32"],"name":"option"},{"generics":["i32"],"name":"option"}],"output":null}],[11,"get_dimensions","","",114,null],[11,"get_depth_buffer_bits","","",114,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"option"}}],[11,"get_stencil_buffer_bits","","",114,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"option"}}],[11,"draw","","",114,{"inputs":[{"name":"self"},{"name":"v"},{"name":"i"},{"name":"program"},{"name":"u"},{"name":"drawparameters"}],"output":{"generics":["drawerror"],"name":"result"}}],[11,"blit_color","","",114,{"inputs":[{"name":"self"},{"name":"rect"},{"name":"s"},{"name":"blittarget"},{"name":"magnifysamplerfilter"}],"output":null}],[11,"blit_from_frame","","",114,{"inputs":[{"name":"self"},{"name":"rect"},{"name":"blittarget"},{"name":"magnifysamplerfilter"}],"output":null}],[11,"blit_from_simple_framebuffer","","",114,{"inputs":[{"name":"self"},{"name":"simpleframebuffer"},{"name":"rect"},{"name":"blittarget"},{"name":"magnifysamplerfilter"}],"output":null}],[11,"blit_from_multioutput_framebuffer","","",114,{"inputs":[{"name":"self"},{"name":"multioutputframebuffer"},{"name":"rect"},{"name":"blittarget"},{"name":"magnifysamplerfilter"}],"output":null}],[11,"new","","Creates a new `MultiOutputFrameBuffer`.",115,{"inputs":[{"name":"f"},{"name":"i"}],"output":{"generics":["multioutputframebuffer","validationerror"],"name":"result"}}],[11,"with_depth_buffer","","Creates a `MultiOutputFrameBuffer` with a depth buffer.",115,{"inputs":[{"name":"f"},{"name":"i"},{"name":"d"}],"output":{"generics":["multioutputframebuffer","validationerror"],"name":"result"}}],[11,"with_depth_and_stencil_buffer","","Creates a `MultiOutputFrameBuffer` with a depth buffer, and a stencil buffer.",115,{"inputs":[{"name":"f"},{"name":"i"},{"name":"d"},{"name":"s"}],"output":{"generics":["multioutputframebuffer","validationerror"],"name":"result"}}],[11,"with_stencil_buffer","","Creates a `MultiOutputFrameBuffer` with a stencil buffer, but no depth buffer.",115,{"inputs":[{"name":"f"},{"name":"i"},{"name":"s"}],"output":{"generics":["multioutputframebuffer","validationerror"],"name":"result"}}],[11,"with_depth_stencil_buffer","","Creates a `MultiOutputFrameBuffer` with a depth-stencil buffer.",115,{"inputs":[{"name":"f"},{"name":"i"},{"name":"d"}],"output":{"generics":["multioutputframebuffer","validationerror"],"name":"result"}}],[11,"clear","","",115,{"inputs":[{"name":"self"},{"generics":["rect"],"name":"option"},{"name":"option"},{"name":"bool"},{"generics":["f32"],"name":"option"},{"generics":["i32"],"name":"option"}],"output":null}],[11,"get_dimensions","","",115,null],[11,"get_depth_buffer_bits","","",115,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"option"}}],[11,"get_stencil_buffer_bits","","",115,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"option"}}],[11,"draw","","",115,{"inputs":[{"name":"self"},{"name":"v"},{"name":"i"},{"name":"program"},{"name":"u"},{"name":"drawparameters"}],"output":{"generics":["drawerror"],"name":"result"}}],[11,"blit_color","","",115,{"inputs":[{"name":"self"},{"name":"rect"},{"name":"s"},{"name":"blittarget"},{"name":"magnifysamplerfilter"}],"output":null}],[11,"blit_from_frame","","",115,{"inputs":[{"name":"self"},{"name":"rect"},{"name":"blittarget"},{"name":"magnifysamplerfilter"}],"output":null}],[11,"blit_from_simple_framebuffer","","",115,{"inputs":[{"name":"self"},{"name":"simpleframebuffer"},{"name":"rect"},{"name":"blittarget"},{"name":"magnifysamplerfilter"}],"output":null}],[11,"blit_from_multioutput_framebuffer","","",115,{"inputs":[{"name":"self"},{"name":"multioutputframebuffer"},{"name":"rect"},{"name":"blittarget"},{"name":"magnifysamplerfilter"}],"output":null}],[11,"is_supported","","Returns true if empty framebuffers are supported by the backend.",116,{"inputs":[{"name":"c"}],"output":{"name":"bool"}}],[11,"is_layered_supported","","Returns true if layered empty framebuffers are supported by the backend.",116,{"inputs":[{"name":"c"}],"output":{"name":"bool"}}],[11,"get_max_supported_width","","Returns the maximum width of empty framebuffers that the backend supports, or `None` if empty framebuffers are not supported.",116,{"inputs":[{"name":"c"}],"output":{"generics":["u32"],"name":"option"}}],[11,"get_max_supported_height","","Returns the maximum height of empty framebuffers that the backend supports, or `None` if empty framebuffers are not supported.",116,{"inputs":[{"name":"c"}],"output":{"generics":["u32"],"name":"option"}}],[11,"get_max_supported_samples","","Returns the maximum number of samples of empty framebuffers that the backend supports, or `None` if empty framebuffers are not supported.",116,{"inputs":[{"name":"c"}],"output":{"generics":["u32"],"name":"option"}}],[11,"get_max_supported_layers","","Returns the maximum number of layers of empty framebuffers that the backend supports, or `None` if layered empty framebuffers are not supported.",116,{"inputs":[{"name":"c"}],"output":{"generics":["u32"],"name":"option"}}],[11,"new","","Creates a `EmptyFrameBuffer`.",116,{"inputs":[{"name":"f"},{"name":"u32"},{"name":"u32"},{"generics":["u32"],"name":"option"},{"generics":["u32"],"name":"option"},{"name":"bool"}],"output":{"generics":["emptyframebuffer","validationerror"],"name":"result"}}],[11,"clear","","",116,{"inputs":[{"name":"self"},{"generics":["rect"],"name":"option"},{"name":"option"},{"name":"bool"},{"generics":["f32"],"name":"option"},{"generics":["i32"],"name":"option"}],"output":null}],[11,"get_dimensions","","",116,null],[11,"get_depth_buffer_bits","","",116,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"option"}}],[11,"get_stencil_buffer_bits","","",116,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"option"}}],[11,"draw","","",116,{"inputs":[{"name":"self"},{"name":"v"},{"name":"i"},{"name":"program"},{"name":"u"},{"name":"drawparameters"}],"output":{"generics":["drawerror"],"name":"result"}}],[11,"blit_color","","",116,{"inputs":[{"name":"self"},{"name":"rect"},{"name":"s"},{"name":"blittarget"},{"name":"magnifysamplerfilter"}],"output":null}],[11,"blit_from_frame","","",116,{"inputs":[{"name":"self"},{"name":"rect"},{"name":"blittarget"},{"name":"magnifysamplerfilter"}],"output":null}],[11,"blit_from_simple_framebuffer","","",116,{"inputs":[{"name":"self"},{"name":"simpleframebuffer"},{"name":"rect"},{"name":"blittarget"},{"name":"magnifysamplerfilter"}],"output":null}],[11,"blit_from_multioutput_framebuffer","","",116,{"inputs":[{"name":"self"},{"name":"multioutputframebuffer"},{"name":"rect"},{"name":"blittarget"},{"name":"magnifysamplerfilter"}],"output":null}],[11,"clone","","",100,{"inputs":[{"name":"self"}],"output":{"name":"colorattachment"}}],[11,"to_color_attachment","","",100,{"inputs":[{"name":"self"}],"output":{"name":"colorattachment"}}],[11,"clone","","",101,{"inputs":[{"name":"self"}],"output":{"name":"depthattachment"}}],[11,"to_depth_attachment","","",101,{"inputs":[{"name":"self"}],"output":{"name":"depthattachment"}}],[11,"clone","","",102,{"inputs":[{"name":"self"}],"output":{"name":"stencilattachment"}}],[11,"to_stencil_attachment","","",102,{"inputs":[{"name":"self"}],"output":{"name":"stencilattachment"}}],[11,"clone","","",103,{"inputs":[{"name":"self"}],"output":{"name":"depthstencilattachment"}}],[11,"to_depth_stencil_attachment","","",103,{"inputs":[{"name":"self"}],"output":{"name":"depthstencilattachment"}}],[0,"index","glium","In order to draw, you need to provide a way for the video card to know how to link primitives together.",null,null],[3,"IndexBuffer","glium::index","A list of indices loaded in the graphics card's memory.",null,null],[3,"IndexBufferSlice","","Slice of an `IndexBuffer`.",null,null],[3,"IndexBufferAny","","An `IndexBuffer` without any type information.",null,null],[3,"DrawCommandsNoIndicesBuffer","","A buffer containing a list of draw commands.",null,null],[3,"DrawCommandNoIndices","","Represents an element in a list of draw commands.",null,null],[12,"count","","Number of vertices to draw.",117,null],[12,"instance_count","","Number of instances to draw. If it's `0`, nothing will be drawn.",117,null],[12,"first_index","","First vertex to draw in the vertices source.",117,null],[12,"base_instance","","Numero of the first instance to draw.",117,null],[3,"DrawCommandsIndicesBuffer","","A buffer containing a list of draw commands.",null,null],[3,"DrawCommandIndices","","Represents an element in a list of draw commands.",null,null],[12,"count","","Number of indices to use in the index buffer.",118,null],[12,"instance_count","","Number of instances to draw. If it's `0`, nothing will be drawn.",118,null],[12,"first_index","","First index to draw in the index buffer.",118,null],[12,"base_vertex","","Value to add to each index.",118,null],[12,"base_instance","","Numero of the first instance to draw.",118,null],[3,"NoIndices","","Marker that can be used as an indices source when you don't need indices.",null,null],[12,"0","","",119,null],[4,"BufferCreationError","","Error that can happen while creating an index buffer.",null,null],[13,"IndexTypeNotSupported","","The type of index is not supported by the backend.",120,null],[13,"PrimitiveTypeNotSupported","","The type of primitives is not supported by the backend.",120,null],[13,"BufferCreationError","","An error happened while creating the buffer.",120,null],[4,"IndicesSource","","Describes a source of indices used for drawing.",null,null],[13,"IndexBuffer","","A buffer uploaded in video memory.",121,null],[12,"buffer","glium::index::IndicesSource","The buffer.",121,null],[12,"data_type","","Type of indices in the buffer.",121,null],[12,"primitives","","Type of primitives contained in the vertex source.",121,null],[13,"MultidrawArray","glium::index","Use a multidraw indirect buffer without indices.",121,null],[12,"buffer","glium::index::IndicesSource","The buffer.",121,null],[12,"primitives","","Type of primitives contained in the vertex source.",121,null],[13,"MultidrawElement","glium::index","Use a multidraw indirect buffer with indices.",121,null],[12,"commands","glium::index::IndicesSource","The buffer of the commands.",121,null],[12,"indices","","The buffer of the indices.",121,null],[12,"data_type","","Type of indices in the buffer.",121,null],[12,"primitives","","Type of primitives contained in the vertex source.",121,null],[13,"NoIndices","glium::index","Don't use indices. Assemble primitives by using the order in which the vertices are in the vertices source.",121,null],[12,"primitives","glium::index::IndicesSource","Type of primitives contained in the vertex source.",121,null],[4,"PrimitiveType","glium::index","List of available primitives.",null,null],[13,"Points","","Each vertex is an individual point.",122,null],[13,"LinesList","","Vertices are grouped by chunks of two vertices. Each chunk represents a line.",122,null],[13,"LinesListAdjacency","","Vertices are grouped by chunks of four vertices. The second and third vertices of each chunk represents the line.",122,null],[13,"LineStrip","","Each vertex (except the last one) forms a line with the next vertex.",122,null],[13,"LineStripAdjacency","","Similar to `LineStrip`, but with an additional vertex at the beginning and at the end that represent the vertices adjacent to the first and last ones.",122,null],[13,"LineLoop","","Each vertex forms a line with the next vertex. The last vertex form a line with the first one.",122,null],[13,"TrianglesList","","Vertices are grouped by chunks of three vertices. Each chunk represents a triangle.",122,null],[13,"TrianglesListAdjacency","","Vertices are grouped by chunks of six vertices. The first, third and fifth vertices represent a triangle.",122,null],[13,"TriangleStrip","","Each vertex (except the first one and the last one) forms a triangle with the previous and the next vertices.",122,null],[13,"TriangleStripAdjacency","","Each even vertex forms a triangle with vertices `n+2` and `n+4`.",122,null],[13,"TriangleFan","","Starting at the second vertex, each vertex forms a triangle with the next and the first vertices.",122,null],[13,"Patches","","Vertices are grouped by chunks of `vertices_per_patch` vertices.",122,null],[12,"vertices_per_patch","glium::index::PrimitiveType","Number of vertices per patch.",122,null],[4,"IndexType","glium::index","Type of the indices in an index source.",null,null],[13,"U8","","u8",123,null],[13,"U16","","u16",123,null],[13,"U32","","u32",123,null],[11,"fmt","","",120,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",120,{"inputs":[{"name":"self"}],"output":{"name":"creationerror"}}],[11,"fmt","","",120,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",120,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",120,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"from","","",120,{"inputs":[{"name":"buffercreationerror"}],"output":{"name":"creationerror"}}],[11,"fmt","glium","",124,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Builds a new index buffer from a list of indices and a primitive type.",124,null],[11,"dynamic","","Builds a new index buffer from a list of indices and a primitive type.",124,null],[11,"persistent","","Builds a new index buffer from a list of indices and a primitive type.",124,null],[11,"immutable","","Builds a new index buffer from a list of indices and a primitive type.",124,null],[11,"empty","","Builds a new empty index buffer.",124,{"inputs":[{"name":"f"},{"name":"primitivetype"},{"name":"usize"}],"output":{"generics":["indexbuffer","creationerror"],"name":"result"}}],[11,"empty_dynamic","","Builds a new empty index buffer.",124,{"inputs":[{"name":"f"},{"name":"primitivetype"},{"name":"usize"}],"output":{"generics":["indexbuffer","creationerror"],"name":"result"}}],[11,"empty_persistent","","Builds a new empty index buffer.",124,{"inputs":[{"name":"f"},{"name":"primitivetype"},{"name":"usize"}],"output":{"generics":["indexbuffer","creationerror"],"name":"result"}}],[11,"empty_immutable","","Builds a new empty index buffer.",124,{"inputs":[{"name":"f"},{"name":"primitivetype"},{"name":"usize"}],"output":{"generics":["indexbuffer","creationerror"],"name":"result"}}],[11,"get_primitives_type","","Returns the type of primitives associated with this index buffer.",124,{"inputs":[{"name":"self"}],"output":{"name":"primitivetype"}}],[11,"get_indices_type","","Returns the data type of the indices inside this index buffer.",124,{"inputs":[{"name":"self"}],"output":{"name":"indextype"}}],[11,"slice","","Returns `None` if out of range.",124,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"generics":["indexbufferslice"],"name":"option"}}],[11,"deref","","",124,{"inputs":[{"name":"self"}],"output":{"name":"buffer"}}],[11,"deref_mut","","",124,{"inputs":[{"name":"self"}],"output":{"name":"buffer"}}],[11,"from","glium::buffer","",72,{"inputs":[{"name":"indexbuffer"}],"output":{"name":"bufferslice"}}],[11,"from","","",73,{"inputs":[{"name":"indexbuffer"}],"output":{"name":"buffermutslice"}}],[11,"get_id","glium","",124,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from","glium::index","",121,{"inputs":[{"name":"indexbuffer"}],"output":{"name":"indicessource"}}],[11,"fmt","","",125,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_primitives_type","","Returns the type of primitives associated with this index buffer.",125,{"inputs":[{"name":"self"}],"output":{"name":"primitivetype"}}],[11,"get_indices_type","","Returns the data type of the indices inside this index buffer.",125,{"inputs":[{"name":"self"}],"output":{"name":"indextype"}}],[11,"slice","","Returns `None` if out of range.",125,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"generics":["indexbufferslice"],"name":"option"}}],[11,"deref","","",125,{"inputs":[{"name":"self"}],"output":{"name":"bufferslice"}}],[11,"deref_mut","","",125,{"inputs":[{"name":"self"}],"output":{"name":"bufferslice"}}],[11,"from","glium::buffer","",72,{"inputs":[{"name":"indexbufferslice"}],"output":{"name":"bufferslice"}}],[11,"from","glium::index","",121,{"inputs":[{"name":"indexbufferslice"}],"output":{"name":"indicessource"}}],[11,"from","","",121,{"inputs":[{"name":"indexbufferslice"}],"output":{"name":"indicessource"}}],[11,"fmt","","",126,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_primitives_type","","Returns the type of primitives associated with this index buffer.",126,{"inputs":[{"name":"self"}],"output":{"name":"primitivetype"}}],[11,"get_indices_type","","Returns the data type of the indices inside this index buffer.",126,{"inputs":[{"name":"self"}],"output":{"name":"indextype"}}],[11,"deref","","",126,{"inputs":[{"name":"self"}],"output":{"name":"bufferany"}}],[11,"deref_mut","","",126,{"inputs":[{"name":"self"}],"output":{"name":"bufferany"}}],[11,"from","","",126,{"inputs":[{"name":"indexbuffer"}],"output":{"name":"indexbufferany"}}],[11,"from","","",121,{"inputs":[{"name":"indexbufferany"}],"output":{"name":"indicessource"}}],[11,"fmt","","",117,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",117,{"inputs":[{"name":"self"}],"output":{"name":"drawcommandnoindices"}}],[11,"matches","","",117,{"inputs":[{"name":"blocklayout"},{"name":"usize"}],"output":{"generics":["layoutmismatcherror"],"name":"result"}}],[11,"build_layout","","",117,{"inputs":[{"name":"usize"}],"output":{"name":"blocklayout"}}],[11,"fmt","","",118,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",118,{"inputs":[{"name":"self"}],"output":{"name":"drawcommandindices"}}],[11,"matches","","",118,{"inputs":[{"name":"blocklayout"},{"name":"usize"}],"output":{"generics":["layoutmismatcherror"],"name":"result"}}],[11,"build_layout","","",118,{"inputs":[{"name":"usize"}],"output":{"name":"blocklayout"}}],[11,"empty","","Builds an empty buffer.",127,{"inputs":[{"name":"f"},{"name":"usize"}],"output":{"generics":["drawcommandsnoindicesbuffer","buffercreationerror"],"name":"result"}}],[11,"empty_dynamic","","Builds an empty buffer.",127,{"inputs":[{"name":"f"},{"name":"usize"}],"output":{"generics":["drawcommandsnoindicesbuffer","buffercreationerror"],"name":"result"}}],[11,"empty_persistent","","Builds an empty buffer.",127,{"inputs":[{"name":"f"},{"name":"usize"}],"output":{"generics":["drawcommandsnoindicesbuffer","buffercreationerror"],"name":"result"}}],[11,"empty_immutable","","Builds an empty buffer.",127,{"inputs":[{"name":"f"},{"name":"usize"}],"output":{"generics":["drawcommandsnoindicesbuffer","buffercreationerror"],"name":"result"}}],[11,"with_primitive_type","","Builds an indices source from this buffer and a primitives type. This indices source can be passed to the `draw()` function.",127,{"inputs":[{"name":"self"},{"name":"primitivetype"}],"output":{"name":"indicessource"}}],[11,"deref","","",127,{"inputs":[{"name":"self"}],"output":{"name":"buffer"}}],[11,"deref_mut","","",127,{"inputs":[{"name":"self"}],"output":{"name":"buffer"}}],[11,"from","glium::buffer","",72,{"inputs":[{"name":"drawcommandsnoindicesbuffer"}],"output":{"name":"bufferslice"}}],[11,"from","","",73,{"inputs":[{"name":"drawcommandsnoindicesbuffer"}],"output":{"name":"buffermutslice"}}],[11,"empty","glium::index","Builds an empty buffer.",128,{"inputs":[{"name":"f"},{"name":"usize"}],"output":{"generics":["drawcommandsindicesbuffer","buffercreationerror"],"name":"result"}}],[11,"empty_dynamic","","Builds an empty buffer.",128,{"inputs":[{"name":"f"},{"name":"usize"}],"output":{"generics":["drawcommandsindicesbuffer","buffercreationerror"],"name":"result"}}],[11,"empty_persistent","","Builds an empty buffer.",128,{"inputs":[{"name":"f"},{"name":"usize"}],"output":{"generics":["drawcommandsindicesbuffer","buffercreationerror"],"name":"result"}}],[11,"empty_immutable","","Builds an empty buffer.",128,{"inputs":[{"name":"f"},{"name":"usize"}],"output":{"generics":["drawcommandsindicesbuffer","buffercreationerror"],"name":"result"}}],[11,"with_index_buffer","","Builds an indices source from this buffer and a primitives type. This indices source can be passed to the `draw()` function.",128,{"inputs":[{"name":"self"},{"name":"indexbuffer"}],"output":{"name":"indicessource"}}],[11,"deref","","",128,{"inputs":[{"name":"self"}],"output":{"name":"buffer"}}],[11,"deref_mut","","",128,{"inputs":[{"name":"self"}],"output":{"name":"buffer"}}],[11,"from","glium::buffer","",72,{"inputs":[{"name":"drawcommandsindicesbuffer"}],"output":{"name":"bufferslice"}}],[11,"from","","",73,{"inputs":[{"name":"drawcommandsindicesbuffer"}],"output":{"name":"buffermutslice"}}],[8,"Index","glium::index","An index from the index buffer.",null,null],[10,"get_type","","Returns the `IndexType` corresponding to this type.",129,{"inputs":[],"output":{"name":"indextype"}}],[11,"is_supported","","Returns true if this type of index is supported by the backend.",129,{"inputs":[{"name":"c"}],"output":{"name":"bool"}}],[11,"clone","","",121,{"inputs":[{"name":"self"}],"output":{"name":"indicessource"}}],[11,"get_primitives_type","","Returns the type of the primitives.",121,{"inputs":[{"name":"self"}],"output":{"name":"primitivetype"}}],[11,"fmt","","",122,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",122,{"inputs":[{"name":"self"}],"output":{"name":"primitivetype"}}],[11,"eq","","",122,{"inputs":[{"name":"self"},{"name":"primitivetype"}],"output":{"name":"bool"}}],[11,"ne","","",122,{"inputs":[{"name":"self"},{"name":"primitivetype"}],"output":{"name":"bool"}}],[11,"is_supported","","Returns true if the backend supports this type of primitives.",122,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"bool"}}],[11,"clone","","",119,{"inputs":[{"name":"self"}],"output":{"name":"noindices"}}],[11,"fmt","","",119,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",121,{"inputs":[{"name":"noindices"}],"output":{"name":"indicessource"}}],[11,"from","","",121,{"inputs":[{"name":"noindices"}],"output":{"name":"indicessource"}}],[11,"fmt","","",123,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",123,{"inputs":[{"name":"self"}],"output":{"name":"indextype"}}],[11,"eq","","",123,{"inputs":[{"name":"self"},{"name":"indextype"}],"output":{"name":"bool"}}],[11,"get_size","","Returns the size in bytes of each index of this type.",123,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_supported","","Returns true if the backend supports this type of index.",123,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"bool"}}],[0,"pixel_buffer","glium","DEPRECATED. Moved to the `texture` module.",null,null],[0,"program","","Items related to creating an OpenGL program.",null,null],[3,"ComputeShader","glium::program","A combination of compute shaders linked together.",null,null],[3,"ComputeCommand","","Represents a compute shader command waiting to be dispatched.",null,null],[12,"num_groups_x","","Number of X groups.",130,null],[12,"num_groups_y","","Number of Y groups.",130,null],[12,"num_groups_z","","Number of Z groups.",130,null],[3,"Program","","A combination of shaders linked together.",null,null],[3,"Uniform","","Information about a uniform (except its name).",null,null],[12,"location","","The location of the uniform.",131,null],[12,"ty","","Type of the uniform.",131,null],[12,"size","","If it is an array, the number of elements.",131,null],[3,"UniformBlock","","Information about a uniform block (except its name).",null,null],[12,"id","","Identifier of the block.",132,null],[12,"initial_binding","","Initial bind point of the block.",132,null],[12,"size","","Size in bytes of the data in the block.",132,null],[12,"layout","","Layout of the block.",132,null],[3,"Attribute","","Information about an attribute of a program (except its name).",null,null],[12,"location","","The index of the uniform.",133,null],[12,"ty","","Type of the attribute.",133,null],[12,"size","","Number of elements of the attribute.",133,null],[3,"TransformFeedbackVarying","","Describes a varying that is being output with transform feedback.",null,null],[12,"name","","Name of the variable.",134,null],[12,"offset","","Number of bytes between the start of the first element and the start of this one.",134,null],[12,"size","","Size in bytes of this value.",134,null],[12,"ty","","Type of the value.",134,null],[3,"TransformFeedbackBuffer","","Describes the layout of a buffer that can receive transform feedback output.",null,null],[12,"id","","Slot of this buffer.",135,null],[12,"elements","","List of elements inside the buffer.",135,null],[12,"stride","","Size in bytes between two consecutive elements.",135,null],[3,"SubroutineData","","Contains all subroutine data of a program.",null,null],[12,"location_counts","","Number of subroutine uniform locations per shader stage. This is not equal to the number of subroutine uniforms per stage, because users can use `#layout(location=...)`.",136,null],[12,"subroutine_uniforms","","The list of all subroutine uniforms of the program stored in a structured way to enable fast lookups. A subroutine uniform is uniquely defined by a name and a shader stage.",136,null],[3,"SubroutineUniform","","Information about a Subroutine Uniform (except name)",null,null],[12,"index","","The index of the subroutine uniform. Needed to query information from the OpenGL backend.",137,null],[12,"location","","The location of the uniform. This is used to bind subroutines to this subroutine uniform.",137,null],[12,"size","","If the uniform is an array, the size of the array.",137,null],[12,"compatible_subroutines","","A list of subroutines that can potentially be used with this uniform.",137,null],[3,"SourceCode","","Represents the source code of a program.",null,null],[12,"vertex_shader","","Source code of the vertex shader.",138,null],[12,"tessellation_control_shader","","Source code of the optional tessellation control shader.",138,null],[12,"tessellation_evaluation_shader","","Source code of the optional tessellation evaluation shader.",138,null],[12,"geometry_shader","","Source code of the optional geometry shader.",138,null],[12,"fragment_shader","","Source code of the fragment shader.",138,null],[3,"Binary","","Represents the compiled binary data of a program.",null,null],[12,"format","","An implementation-defined format.",139,null],[12,"content","","The binary data.",139,null],[4,"BlockLayout","","Layout of a shader storage buffer or a uniform buffer.",null,null],[13,"Struct","","Multiple elements, each having a name.",140,null],[12,"members","glium::program::BlockLayout","The list of elements, with `name`/`layout` pairs.",140,null],[13,"BasicType","glium::program","A basic element.",140,null],[12,"ty","glium::program::BlockLayout","Type of data.",140,null],[12,"offset_in_buffer","","Offset of this element in bytes from the start of the buffer.",140,null],[13,"Array","glium::program","A fixed-size array.",140,null],[12,"content","glium::program::BlockLayout","Type of data of each element.",140,null],[12,"length","","Number of elements in the array.",140,null],[13,"DynamicSizedArray","glium::program","An array whose size isn't known at compile-time. Can only be used as the last element of a buffer.",140,null],[12,"content","glium::program::BlockLayout","Type of data of each element.",140,null],[4,"OutputPrimitives","glium::program","Type of primitives that is being output by transform feedback.",null,null],[13,"Points","","Points.",141,null],[13,"Lines","","Lines.",141,null],[13,"Triangles","","Triangles.",141,null],[13,"Quads","","Quads.",141,null],[4,"TransformFeedbackMode","","Type of transform feedback. Only used with the legacy interface.",null,null],[13,"Interleaved","","Each value is interleaved in the same buffer.",142,null],[13,"Separate","","Each value will go in a separate buffer.",142,null],[4,"ShaderStage","","The different stages of the program pipeline.",null,null],[13,"Vertex","","",143,null],[13,"Fragment","","",143,null],[13,"TessellationControl","","",143,null],[13,"TessellationEvaluation","","",143,null],[13,"Geometry","","",143,null],[4,"ProgramCreationError","","Error that can be triggered when creating a `Program`.",null,null],[13,"CompilationError","","Error while compiling one of the shaders.",144,null],[13,"LinkingError","","Error while linking the program.",144,null],[13,"ShaderTypeNotSupported","","One of the requested shader types is not supported by the backend.",144,null],[13,"CompilationNotSupported","","The OpenGL implementation doesn't provide a compiler.",144,null],[13,"TransformFeedbackNotSupported","","You have requested transform feedback varyings, but transform feedback is not supported by the backend.",144,null],[13,"PointSizeNotSupported","","You have requested point size setting from the shader, but it's not supported by the backend.",144,null],[13,"BinaryHeaderError","","The glium-specific binary header was not found or is corrupt.",144,null],[4,"ProgramChooserCreationError","","Error type that is returned by the `program!` macro.",null,null],[13,"NoVersion","","No available version has been found.",145,null],[13,"ProgramCreationError","","A version has been found but it triggered the given error.",145,null],[4,"GetBinaryError","","Error while retrieving the binary representation of a program.",null,null],[13,"NotSupported","","The backend doesn't support binary.",146,null],[13,"NoFormats","","The backend does not supply any binary formats.",146,null],[4,"ProgramCreationInput","","Input when creating a program.",null,null],[13,"SourceCode","","Use GLSL source code.",147,null],[12,"vertex_shader","glium::program::ProgramCreationInput","Source code of the vertex shader.",147,null],[12,"tessellation_control_shader","","Source code of the optional tessellation control shader.",147,null],[12,"tessellation_evaluation_shader","","Source code of the optional tessellation evaluation shader.",147,null],[12,"geometry_shader","","Source code of the optional geometry shader.",147,null],[12,"fragment_shader","","Source code of the fragment shader.",147,null],[12,"transform_feedback_varyings","","The list of variables and mode to use for transform feedback.",147,null],[12,"outputs_srgb","","Whether the fragment shader outputs colors in `sRGB` or `RGB`. This is false by default, meaning that the program outputs `RGB`.",147,null],[12,"uses_point_size","","Whether the shader uses point size.",147,null],[13,"Binary","glium::program","Use a precompiled binary.",147,null],[12,"data","glium::program::ProgramCreationInput","The data.",147,null],[12,"outputs_srgb","","See `SourceCode::outputs_srgb`.",147,null],[12,"uses_point_size","","Whether the shader uses point size.",147,null],[5,"is_geometry_shader_supported","glium::program","Returns true if the backend supports geometry shaders.",null,{"inputs":[{"name":"c"}],"output":{"name":"bool"}}],[5,"is_tessellation_shader_supported","","Returns true if the backend supports tessellation shaders.",null,{"inputs":[{"name":"c"}],"output":{"name":"bool"}}],[5,"is_binary_supported","","Returns true if the backend supports creating and retrieving binary format.",null,{"inputs":[{"name":"c"}],"output":{"name":"bool"}}],[5,"is_subroutine_supported","","Returns true if the backend supports shader subroutines.",null,{"inputs":[{"name":"c"}],"output":{"name":"bool"}}],[11,"is_supported","","Returns true if the backend supports compute shaders.",148,{"inputs":[{"name":"c"}],"output":{"name":"bool"}}],[11,"from_source","","Builds a new compute shader from some source code.",148,{"inputs":[{"name":"f"},{"name":"str"}],"output":{"generics":["computeshader","programcreationerror"],"name":"result"}}],[11,"from_binary","","Builds a new compute shader from some binary.",148,{"inputs":[{"name":"f"},{"name":"binary"}],"output":{"generics":["computeshader","programcreationerror"],"name":"result"}}],[11,"execute","","Executes the compute shader.",148,{"inputs":[{"name":"self"},{"name":"u"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":null}],[11,"execute_indirect","","Executes the compute shader.",148,{"inputs":[{"name":"self"},{"name":"u"},{"generics":["computecommand"],"name":"bufferslice"}],"output":null}],[11,"get_binary","","Returns the program's compiled binary.",148,{"inputs":[{"name":"self"}],"output":{"generics":["binary","getbinaryerror"],"name":"result"}}],[11,"get_uniform","","Returns informations about a uniform variable, if it exists.",148,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["uniform"],"name":"option"}}],[11,"uniforms","","Returns an iterator to the list of uniforms.",148,{"inputs":[{"name":"self"}],"output":{"generics":["string","uniform"],"name":"iter"}}],[11,"get_uniform_blocks","","Returns a list of uniform blocks.",148,{"inputs":[{"name":"self"}],"output":{"name":"hashmap"}}],[11,"get_shader_storage_blocks","","Returns the list of shader storage blocks.",148,{"inputs":[{"name":"self"}],"output":{"name":"hashmap"}}],[11,"fmt","","",148,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"get_id","","",148,{"inputs":[{"name":"self"}],"output":{"name":"handle"}}],[11,"fmt","","",130,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",130,{"inputs":[{"name":"self"}],"output":{"name":"computecommand"}}],[11,"matches","","",130,{"inputs":[{"name":"blocklayout"},{"name":"usize"}],"output":{"generics":["layoutmismatcherror"],"name":"result"}}],[11,"build_layout","","",130,{"inputs":[{"name":"usize"}],"output":{"name":"blocklayout"}}],[11,"new","glium","Builds a new program.",149,{"inputs":[{"name":"f"},{"name":"i"}],"output":{"generics":["program","programcreationerror"],"name":"result"}}],[11,"from_source","","Builds a new program from GLSL source code.",149,{"inputs":[{"name":"f"},{"name":"str"},{"name":"str"},{"generics":["str"],"name":"option"}],"output":{"generics":["program","programcreationerror"],"name":"result"}}],[11,"get_binary","","Returns the program's compiled binary.",149,{"inputs":[{"name":"self"}],"output":{"generics":["binary","getbinaryerror"],"name":"result"}}],[11,"get_frag_data_location","","Returns the location of an output fragment, if it exists.",149,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["u32"],"name":"option"}}],[11,"get_uniform","","Returns informations about a uniform variable, if it exists.",149,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["uniform"],"name":"option"}}],[11,"uniforms","","Returns an iterator to the list of uniforms.",149,{"inputs":[{"name":"self"}],"output":{"generics":["string","uniform"],"name":"iter"}}],[11,"get_uniform_blocks","","Returns a list of uniform blocks.",149,{"inputs":[{"name":"self"}],"output":{"name":"hashmap"}}],[11,"get_transform_feedback_buffers","","Returns the list of transform feedback varyings.",149,null],[11,"transform_feedback_matches","","True if the transform feedback output of this program matches the specified `VertexFormat` and `stride`.",149,{"inputs":[{"name":"self"},{"name":"vertexformat"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"get_output_primitives","","Returns the type of geometry that transform feedback would generate, or `None` if it depends on the vertex/index data passed when drawing.",149,{"inputs":[{"name":"self"}],"output":{"generics":["outputprimitives"],"name":"option"}}],[11,"has_tessellation_shaders","","Returns true if the program contains a tessellation stage.",149,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_tessellation_control_shader","","Returns true if the program contains a tessellation control stage.",149,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_tessellation_evaluation_shader","","Returns true if the program contains a tessellation evaluation stage.",149,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_geometry_shader","","Returns true if the program contains a geometry shader.",149,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_attribute","","Returns informations about an attribute, if it exists.",149,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["attribute"],"name":"option"}}],[11,"attributes","","Returns an iterator to the list of attributes.",149,{"inputs":[{"name":"self"}],"output":{"generics":["string","attribute"],"name":"iter"}}],[11,"has_srgb_output","","Returns true if the program has been configured to output sRGB instead of RGB.",149,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_shader_storage_blocks","","Returns the list of shader storage blocks.",149,{"inputs":[{"name":"self"}],"output":{"name":"hashmap"}}],[11,"get_subroutine_uniforms","","Returns the subroutine uniforms of this program.",149,{"inputs":[{"name":"self"}],"output":{"name":"hashmap"}}],[11,"uses_point_size","","Returns true if the program has been configured to use the `gl_PointSize` variable.",149,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",149,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"get_id","","",149,{"inputs":[{"name":"self"}],"output":{"name":"handle"}}],[11,"fmt","glium::program","",131,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",131,{"inputs":[{"name":"self"}],"output":{"name":"uniform"}}],[11,"fmt","","",132,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",132,{"inputs":[{"name":"self"}],"output":{"name":"uniformblock"}}],[11,"fmt","","",140,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",140,{"inputs":[{"name":"self"}],"output":{"name":"blocklayout"}}],[11,"eq","","",140,{"inputs":[{"name":"self"},{"name":"blocklayout"}],"output":{"name":"bool"}}],[11,"ne","","",140,{"inputs":[{"name":"self"},{"name":"blocklayout"}],"output":{"name":"bool"}}],[11,"fmt","","",133,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",133,{"inputs":[{"name":"self"}],"output":{"name":"attribute"}}],[11,"fmt","","",135,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",135,{"inputs":[{"name":"self"}],"output":{"name":"transformfeedbackbuffer"}}],[11,"eq","","",135,{"inputs":[{"name":"self"},{"name":"transformfeedbackbuffer"}],"output":{"name":"bool"}}],[11,"ne","","",135,{"inputs":[{"name":"self"},{"name":"transformfeedbackbuffer"}],"output":{"name":"bool"}}],[11,"fmt","","",134,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",134,{"inputs":[{"name":"self"}],"output":{"name":"transformfeedbackvarying"}}],[11,"eq","","",134,{"inputs":[{"name":"self"},{"name":"transformfeedbackvarying"}],"output":{"name":"bool"}}],[11,"ne","","",134,{"inputs":[{"name":"self"},{"name":"transformfeedbackvarying"}],"output":{"name":"bool"}}],[11,"fmt","","",142,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",142,{"inputs":[{"name":"self"}],"output":{"name":"transformfeedbackmode"}}],[11,"eq","","",142,{"inputs":[{"name":"self"},{"name":"transformfeedbackmode"}],"output":{"name":"bool"}}],[11,"fmt","","",141,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",141,{"inputs":[{"name":"self"}],"output":{"name":"outputprimitives"}}],[11,"eq","","",141,{"inputs":[{"name":"self"},{"name":"outputprimitives"}],"output":{"name":"bool"}}],[11,"fmt","","",136,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",136,{"inputs":[{"name":"self"}],"output":{"name":"subroutinedata"}}],[11,"fmt","","",137,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",137,{"inputs":[{"name":"self"}],"output":{"name":"subroutineuniform"}}],[11,"fmt","","",143,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",143,{"inputs":[{"name":"self"}],"output":{"name":"shaderstage"}}],[11,"eq","","",143,{"inputs":[{"name":"self"},{"name":"shaderstage"}],"output":{"name":"bool"}}],[11,"hash","","",143,null],[11,"to_gl_enum","","Converts the `ShaderStage` to its GLenum equivalent",143,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"clone","","",144,{"inputs":[{"name":"self"}],"output":{"name":"programcreationerror"}}],[11,"fmt","","",144,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",144,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"description","","",144,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",145,{"inputs":[{"name":"self"}],"output":{"name":"programchoosercreationerror"}}],[11,"fmt","","",145,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",145,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"description","","",145,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",145,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"from","","",145,{"inputs":[{"name":"programcreationerror"}],"output":{"name":"programchoosercreationerror"}}],[11,"clone","","",146,{"inputs":[{"name":"self"}],"output":{"name":"getbinaryerror"}}],[11,"fmt","","",146,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",146,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",146,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from","","",147,{"inputs":[{"name":"sourcecode"}],"output":{"name":"programcreationinput"}}],[11,"from","","",147,{"inputs":[{"name":"binary"}],"output":{"name":"programcreationinput"}}],[0,"uniforms","glium","A uniform is a global variable in your program. In order to draw something, you will need to give `glium` the values of all your uniforms. Objects that implement the `Uniform` trait are here to do that.",null,null],[3,"UniformBuffer","glium::uniforms","Buffer that contains a uniform block.",null,null],[3,"Sampler","","A sampler.",null,null],[12,"0","","",150,null],[12,"1","","",150,null],[3,"SamplerBehavior","","Behavior of a sampler.",null,null],[12,"wrap_function","","Functions to use for the X, Y, and Z coordinates.",151,null],[12,"minify_filter","","Filter to use when minifying the texture.",151,null],[12,"magnify_filter","","Filter to use when magnifying the texture.",151,null],[12,"max_anisotropy","","`1` means no anisotropic filtering, any value above `1` sets the max anisotropy.",151,null],[3,"EmptyUniforms","","Object that can be used when you don't have any uniforms.",null,null],[3,"UniformsStorage","","Stores uniforms.",null,null],[4,"SamplerWrapFunction","","Function to use for out-of-bounds samples.",null,null],[13,"Repeat","","Samples at coord `x + 1` map to coord `x`.",152,null],[13,"Mirror","","Samples at coord `x + 1` map to coord `1 - x`.",152,null],[13,"Clamp","","Samples at coord `x + 1` map to coord `1`.",152,null],[13,"MirrorClamp","","Same as Mirror, but only for one repetition,",152,null],[4,"MagnifySamplerFilter","","The function that the GPU will use when loading the value of a texel.",null,null],[13,"Nearest","","The nearest texel will be loaded.",153,null],[13,"Linear","","All nearby texels will be loaded and their values will be merged.",153,null],[4,"MinifySamplerFilter","","The function that the GPU will use when loading the value of a texel.",null,null],[13,"Nearest","","The nearest texel will be loaded.",154,null],[13,"Linear","","All nearby texels will be loaded and their values will be merged.",154,null],[13,"NearestMipmapNearest","","The nearest texel of the nearest mipmap will be loaded.",154,null],[13,"LinearMipmapNearest","","Takes the nearest texel from the two nearest mipmaps, and merges them.",154,null],[13,"NearestMipmapLinear","","Same as `Linear`, but from the nearest mipmap.",154,null],[13,"LinearMipmapLinear","","Same as `Linear`, but from the two nearest mipmaps.",154,null],[4,"UniformValue","","Represents a value to bind to a uniform.",null,null],[13,"Block","","Contains a handle to the buffer, and a function that indicates whether this buffer can be bound on a block with the given layout. The last parameter is a sender which must be used to send a `SyncFence` that expires when the buffer has finished being used.",155,null],[13,"Subroutine","","",155,null],[13,"SignedInt","","",155,null],[13,"UnsignedInt","","",155,null],[13,"Float","","",155,null],[13,"Mat2","","2x2 column-major matrix.",155,null],[13,"Mat3","","3x3 column-major matrix.",155,null],[13,"Mat4","","4x4 column-major matrix.",155,null],[13,"Vec2","","",155,null],[13,"Vec3","","",155,null],[13,"Vec4","","",155,null],[13,"IntVec2","","",155,null],[13,"IntVec3","","",155,null],[13,"IntVec4","","",155,null],[13,"UnsignedIntVec2","","",155,null],[13,"UnsignedIntVec3","","",155,null],[13,"UnsignedIntVec4","","",155,null],[13,"Bool","","",155,null],[13,"BoolVec2","","",155,null],[13,"BoolVec3","","",155,null],[13,"BoolVec4","","",155,null],[13,"Double","","",155,null],[13,"DoubleVec2","","",155,null],[13,"DoubleVec3","","",155,null],[13,"DoubleVec4","","",155,null],[13,"DoubleMat2","","",155,null],[13,"DoubleMat3","","",155,null],[13,"DoubleMat4","","",155,null],[13,"Int64","","",155,null],[13,"Int64Vec2","","",155,null],[13,"Int64Vec3","","",155,null],[13,"Int64Vec4","","",155,null],[13,"UnsignedInt64","","",155,null],[13,"UnsignedInt64Vec2","","",155,null],[13,"UnsignedInt64Vec3","","",155,null],[13,"UnsignedInt64Vec4","","",155,null],[13,"Texture1d","","",155,null],[13,"CompressedTexture1d","","",155,null],[13,"SrgbTexture1d","","",155,null],[13,"CompressedSrgbTexture1d","","",155,null],[13,"IntegralTexture1d","","",155,null],[13,"UnsignedTexture1d","","",155,null],[13,"DepthTexture1d","","",155,null],[13,"Texture2d","","",155,null],[13,"CompressedTexture2d","","",155,null],[13,"SrgbTexture2d","","",155,null],[13,"CompressedSrgbTexture2d","","",155,null],[13,"IntegralTexture2d","","",155,null],[13,"UnsignedTexture2d","","",155,null],[13,"DepthTexture2d","","",155,null],[13,"Texture2dMultisample","","",155,null],[13,"SrgbTexture2dMultisample","","",155,null],[13,"IntegralTexture2dMultisample","","",155,null],[13,"UnsignedTexture2dMultisample","","",155,null],[13,"DepthTexture2dMultisample","","",155,null],[13,"Texture3d","","",155,null],[13,"CompressedTexture3d","","",155,null],[13,"SrgbTexture3d","","",155,null],[13,"CompressedSrgbTexture3d","","",155,null],[13,"IntegralTexture3d","","",155,null],[13,"UnsignedTexture3d","","",155,null],[13,"DepthTexture3d","","",155,null],[13,"Texture1dArray","","",155,null],[13,"CompressedTexture1dArray","","",155,null],[13,"SrgbTexture1dArray","","",155,null],[13,"CompressedSrgbTexture1dArray","","",155,null],[13,"IntegralTexture1dArray","","",155,null],[13,"UnsignedTexture1dArray","","",155,null],[13,"DepthTexture1dArray","","",155,null],[13,"Texture2dArray","","",155,null],[13,"CompressedTexture2dArray","","",155,null],[13,"SrgbTexture2dArray","","",155,null],[13,"CompressedSrgbTexture2dArray","","",155,null],[13,"IntegralTexture2dArray","","",155,null],[13,"UnsignedTexture2dArray","","",155,null],[13,"DepthTexture2dArray","","",155,null],[13,"Texture2dMultisampleArray","","",155,null],[13,"SrgbTexture2dMultisampleArray","","",155,null],[13,"IntegralTexture2dMultisampleArray","","",155,null],[13,"UnsignedTexture2dMultisampleArray","","",155,null],[13,"DepthTexture2dMultisampleArray","","",155,null],[13,"Cubemap","","",155,null],[13,"CompressedCubemap","","",155,null],[13,"SrgbCubemap","","",155,null],[13,"CompressedSrgbCubemap","","",155,null],[13,"IntegralCubemap","","",155,null],[13,"UnsignedCubemap","","",155,null],[13,"DepthCubemap","","",155,null],[13,"CubemapArray","","",155,null],[13,"CompressedCubemapArray","","",155,null],[13,"SrgbCubemapArray","","",155,null],[13,"CompressedSrgbCubemapArray","","",155,null],[13,"IntegralCubemapArray","","",155,null],[13,"UnsignedCubemapArray","","",155,null],[13,"DepthCubemapArray","","",155,null],[13,"BufferTexture","","",155,null],[4,"UniformType","","Type of a uniform in a program.",null,null],[13,"Float","","",156,null],[13,"FloatVec2","","",156,null],[13,"FloatVec3","","",156,null],[13,"FloatVec4","","",156,null],[13,"Double","","",156,null],[13,"DoubleVec2","","",156,null],[13,"DoubleVec3","","",156,null],[13,"DoubleVec4","","",156,null],[13,"Int","","",156,null],[13,"IntVec2","","",156,null],[13,"IntVec3","","",156,null],[13,"IntVec4","","",156,null],[13,"UnsignedInt","","",156,null],[13,"UnsignedIntVec2","","",156,null],[13,"UnsignedIntVec3","","",156,null],[13,"UnsignedIntVec4","","",156,null],[13,"Int64","","",156,null],[13,"Int64Vec2","","",156,null],[13,"Int64Vec3","","",156,null],[13,"Int64Vec4","","",156,null],[13,"UnsignedInt64","","",156,null],[13,"UnsignedInt64Vec2","","",156,null],[13,"UnsignedInt64Vec3","","",156,null],[13,"UnsignedInt64Vec4","","",156,null],[13,"Bool","","",156,null],[13,"BoolVec2","","",156,null],[13,"BoolVec3","","",156,null],[13,"BoolVec4","","",156,null],[13,"FloatMat2","","",156,null],[13,"FloatMat3","","",156,null],[13,"FloatMat4","","",156,null],[13,"FloatMat2x3","","",156,null],[13,"FloatMat2x4","","",156,null],[13,"FloatMat3x2","","",156,null],[13,"FloatMat3x4","","",156,null],[13,"FloatMat4x2","","",156,null],[13,"FloatMat4x3","","",156,null],[13,"DoubleMat2","","",156,null],[13,"DoubleMat3","","",156,null],[13,"DoubleMat4","","",156,null],[13,"DoubleMat2x3","","",156,null],[13,"DoubleMat2x4","","",156,null],[13,"DoubleMat3x2","","",156,null],[13,"DoubleMat3x4","","",156,null],[13,"DoubleMat4x2","","",156,null],[13,"DoubleMat4x3","","",156,null],[13,"Sampler1d","","",156,null],[13,"ISampler1d","","",156,null],[13,"USampler1d","","",156,null],[13,"Sampler2d","","",156,null],[13,"ISampler2d","","",156,null],[13,"USampler2d","","",156,null],[13,"Sampler3d","","",156,null],[13,"ISampler3d","","",156,null],[13,"USampler3d","","",156,null],[13,"Sampler1dArray","","",156,null],[13,"ISampler1dArray","","",156,null],[13,"USampler1dArray","","",156,null],[13,"Sampler2dArray","","",156,null],[13,"ISampler2dArray","","",156,null],[13,"USampler2dArray","","",156,null],[13,"SamplerCube","","",156,null],[13,"ISamplerCube","","",156,null],[13,"USamplerCube","","",156,null],[13,"Sampler2dRect","","",156,null],[13,"ISampler2dRect","","",156,null],[13,"USampler2dRect","","",156,null],[13,"Sampler2dRectShadow","","",156,null],[13,"SamplerCubeArray","","",156,null],[13,"ISamplerCubeArray","","",156,null],[13,"USamplerCubeArray","","",156,null],[13,"SamplerBuffer","","",156,null],[13,"ISamplerBuffer","","",156,null],[13,"USamplerBuffer","","",156,null],[13,"Sampler2dMultisample","","",156,null],[13,"ISampler2dMultisample","","",156,null],[13,"USampler2dMultisample","","",156,null],[13,"Sampler2dMultisampleArray","","",156,null],[13,"ISampler2dMultisampleArray","","",156,null],[13,"USampler2dMultisampleArray","","",156,null],[13,"Sampler1dShadow","","",156,null],[13,"Sampler2dShadow","","",156,null],[13,"SamplerCubeShadow","","",156,null],[13,"Sampler1dArrayShadow","","",156,null],[13,"Sampler2dArrayShadow","","",156,null],[13,"SamplerCubeArrayShadow","","",156,null],[13,"Image1d","","",156,null],[13,"IImage1d","","",156,null],[13,"UImage1d","","",156,null],[13,"Image2d","","",156,null],[13,"IImage2d","","",156,null],[13,"UImage2d","","",156,null],[13,"Image3d","","",156,null],[13,"IImage3d","","",156,null],[13,"UImage3d","","",156,null],[13,"Image2dRect","","",156,null],[13,"IImage2dRect","","",156,null],[13,"UImage2dRect","","",156,null],[13,"ImageCube","","",156,null],[13,"IImageCube","","",156,null],[13,"UImageCube","","",156,null],[13,"ImageBuffer","","",156,null],[13,"IImageBuffer","","",156,null],[13,"UImageBuffer","","",156,null],[13,"Image1dArray","","",156,null],[13,"IImage1dArray","","",156,null],[13,"UImage1dArray","","",156,null],[13,"Image2dArray","","",156,null],[13,"IImage2dArray","","",156,null],[13,"UImage2dArray","","",156,null],[13,"Image2dMultisample","","",156,null],[13,"IImage2dMultisample","","",156,null],[13,"UImage2dMultisample","","",156,null],[13,"Image2dMultisampleArray","","",156,null],[13,"IImage2dMultisampleArray","","",156,null],[13,"UImage2dMultisampleArray","","",156,null],[13,"AtomicCounterUint","","",156,null],[4,"LayoutMismatchError","","Error about a block layout mismatch.",null,null],[13,"TypeMismatch","","There is a mismatch in the type of one element.",157,null],[12,"expected","glium::uniforms::LayoutMismatchError","Type expected by the shader.",157,null],[12,"obtained","","Type that you gave.",157,null],[13,"LayoutMismatch","glium::uniforms","The expected layout is totally different from what we have.",157,null],[12,"expected","glium::uniforms::LayoutMismatchError","Layout expected by the shader.",157,null],[12,"obtained","","Layout of the input.",157,null],[13,"OffsetMismatch","glium::uniforms","The type of data is good, but there is a misalignment.",157,null],[12,"expected","glium::uniforms::LayoutMismatchError","Expected offset of a member.",157,null],[12,"obtained","","Offset of the same member in the input.",157,null],[13,"MemberMismatch","glium::uniforms","There is a mismatch in a submember of this layout.",157,null],[12,"member","glium::uniforms::LayoutMismatchError","Name of the field.",157,null],[12,"err","","The sub-error.",157,null],[13,"MissingField","glium::uniforms","A field is missing in either the expected of the input data layout.",157,null],[12,"name","glium::uniforms::LayoutMismatchError","Name of the field.",157,null],[11,"fmt","glium::uniforms","",158,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_id","","",158,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"new","","Uploads data in the uniforms buffer.",158,{"inputs":[{"name":"f"},{"name":"t"}],"output":{"generics":["uniformbuffer","buffercreationerror"],"name":"result"}}],[11,"dynamic","","Uploads data in the uniforms buffer.",158,{"inputs":[{"name":"f"},{"name":"t"}],"output":{"generics":["uniformbuffer","buffercreationerror"],"name":"result"}}],[11,"persistent","","Uploads data in the uniforms buffer.",158,{"inputs":[{"name":"f"},{"name":"t"}],"output":{"generics":["uniformbuffer","buffercreationerror"],"name":"result"}}],[11,"immutable","","Uploads data in the uniforms buffer.",158,{"inputs":[{"name":"f"},{"name":"t"}],"output":{"generics":["uniformbuffer","buffercreationerror"],"name":"result"}}],[11,"empty","","Creates an empty buffer.",158,{"inputs":[{"name":"f"}],"output":{"generics":["uniformbuffer","buffercreationerror"],"name":"result"}}],[11,"empty_dynamic","","Creates an empty buffer.",158,{"inputs":[{"name":"f"}],"output":{"generics":["uniformbuffer","buffercreationerror"],"name":"result"}}],[11,"empty_persistent","","Creates an empty buffer.",158,{"inputs":[{"name":"f"}],"output":{"generics":["uniformbuffer","buffercreationerror"],"name":"result"}}],[11,"empty_immutable","","Creates an empty buffer.",158,{"inputs":[{"name":"f"}],"output":{"generics":["uniformbuffer","buffercreationerror"],"name":"result"}}],[11,"empty_unsized","","Creates an empty buffer.",158,{"inputs":[{"name":"f"},{"name":"usize"}],"output":{"generics":["uniformbuffer","buffercreationerror"],"name":"result"}}],[11,"empty_unsized_dynamic","","Creates an empty buffer.",158,{"inputs":[{"name":"f"},{"name":"usize"}],"output":{"generics":["uniformbuffer","buffercreationerror"],"name":"result"}}],[11,"empty_unsized_persistent","","Creates an empty buffer.",158,{"inputs":[{"name":"f"},{"name":"usize"}],"output":{"generics":["uniformbuffer","buffercreationerror"],"name":"result"}}],[11,"empty_unsized_immutable","","Creates an empty buffer.",158,{"inputs":[{"name":"f"},{"name":"usize"}],"output":{"generics":["uniformbuffer","buffercreationerror"],"name":"result"}}],[11,"deref","","",158,{"inputs":[{"name":"self"}],"output":{"name":"buffer"}}],[11,"deref_mut","","",158,{"inputs":[{"name":"self"}],"output":{"name":"buffer"}}],[11,"from","glium::buffer","",72,{"inputs":[{"name":"uniformbuffer"}],"output":{"name":"bufferslice"}}],[11,"from","","",73,{"inputs":[{"name":"uniformbuffer"}],"output":{"name":"buffermutslice"}}],[11,"fmt","glium::uniforms","",152,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",152,{"inputs":[{"name":"self"}],"output":{"name":"samplerwrapfunction"}}],[11,"hash","","",152,null],[11,"eq","","",152,{"inputs":[{"name":"self"},{"name":"samplerwrapfunction"}],"output":{"name":"bool"}}],[11,"fmt","","",153,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",153,{"inputs":[{"name":"self"}],"output":{"name":"magnifysamplerfilter"}}],[11,"hash","","",153,null],[11,"eq","","",153,{"inputs":[{"name":"self"},{"name":"magnifysamplerfilter"}],"output":{"name":"bool"}}],[11,"fmt","","",154,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",154,{"inputs":[{"name":"self"}],"output":{"name":"minifysamplerfilter"}}],[11,"hash","","",154,null],[11,"eq","","",154,{"inputs":[{"name":"self"},{"name":"minifysamplerfilter"}],"output":{"name":"bool"}}],[11,"fmt","","",150,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",150,null],[11,"eq","","",150,{"inputs":[{"name":"self"},{"name":"sampler"}],"output":{"name":"bool"}}],[11,"ne","","",150,{"inputs":[{"name":"self"},{"name":"sampler"}],"output":{"name":"bool"}}],[11,"new","","Builds a new `Sampler` with default parameters.",150,{"inputs":[{"name":"t"}],"output":{"name":"sampler"}}],[11,"wrap_function","","Changes the wrap functions of all three coordinates.",150,{"inputs":[{"name":"self"},{"name":"samplerwrapfunction"}],"output":{"name":"sampler"}}],[11,"minify_filter","","Changes the minifying filter of the sampler.",150,{"inputs":[{"name":"self"},{"name":"minifysamplerfilter"}],"output":{"name":"sampler"}}],[11,"magnify_filter","","Changes the magnifying filter of the sampler.",150,{"inputs":[{"name":"self"},{"name":"magnifysamplerfilter"}],"output":{"name":"sampler"}}],[11,"anisotropy","","Changes the magnifying filter of the sampler.",150,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"sampler"}}],[11,"clone","","",150,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",151,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",151,{"inputs":[{"name":"self"}],"output":{"name":"samplerbehavior"}}],[11,"hash","","",151,null],[11,"eq","","",151,{"inputs":[{"name":"self"},{"name":"samplerbehavior"}],"output":{"name":"bool"}}],[11,"ne","","",151,{"inputs":[{"name":"self"},{"name":"samplerbehavior"}],"output":{"name":"bool"}}],[11,"default","","",151,{"inputs":[],"output":{"name":"samplerbehavior"}}],[11,"fmt","","",159,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",159,{"inputs":[{"name":"self"}],"output":{"name":"emptyuniforms"}}],[11,"visit_values","","",159,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"new","","Builds a new storage with a value.",160,{"inputs":[{"name":"str"},{"name":"t"}],"output":{"generics":["emptyuniforms"],"name":"uniformsstorage"}}],[11,"add","","Adds a value to the storage.",160,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u"}],"output":{"generics":["uniformsstorage"],"name":"uniformsstorage"}}],[11,"visit_values","","",160,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"clone","","",156,{"inputs":[{"name":"self"}],"output":{"name":"uniformtype"}}],[11,"fmt","","",156,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",156,{"inputs":[{"name":"self"},{"name":"uniformtype"}],"output":{"name":"bool"}}],[11,"clone","","",155,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"is_usable_with","","Returns true if this value can be used with a uniform of the given type.",155,{"inputs":[{"name":"self"},{"name":"uniformtype"}],"output":{"name":"bool"}}],[8,"Uniforms","","Object that contains the values of all the uniforms to bind to a program.",null,null],[10,"visit_values","","Calls the parameter once with the name and value of each uniform.",161,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[8,"AsUniformValue","","Value that can be used as the value of a uniform.",null,null],[10,"as_uniform_value","","Builds a `UniformValue`.",162,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[8,"UniformBlock","","Objects that are suitable for being inside a uniform block or a SSBO.",null,null],[10,"matches","","Checks whether the uniforms' layout matches the given block if `Self` starts at the given offset.",163,{"inputs":[{"name":"blocklayout"},{"name":"usize"}],"output":{"generics":["layoutmismatcherror"],"name":"result"}}],[10,"build_layout","","Builds the `BlockLayout` corresponding to the current object.",163,{"inputs":[{"name":"usize"}],"output":{"name":"blocklayout"}}],[11,"clone","","",157,{"inputs":[{"name":"self"}],"output":{"name":"layoutmismatcherror"}}],[11,"fmt","","",157,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",157,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",157,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"fmt","","",157,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[0,"vertex","glium","Contains everything related to vertex sources.",null,null],[3,"VertexBuffer","glium::vertex","A list of vertices loaded in the graphics card's memory.",null,null],[3,"VertexBufferAny","","A list of vertices loaded in the graphics card's memory.",null,null],[3,"VertexBufferSlice","","Represents a slice of a `VertexBuffer`.",null,null],[3,"TransformFeedbackSession","","Transform feedback allows you to obtain in a buffer the list of the vertices generated by the vertex shader, geometry shader, or tessellation evaluation shader of your program. This is usually used to cache the result in order to draw the vertices multiple times with multiple different fragment shaders.",null,null],[3,"EmptyVertexAttributes","","Marker that can be passed instead of a buffer to indicate an empty list of buffers.",null,null],[12,"len","","Number of phantom vertices.",164,null],[3,"EmptyInstanceAttributes","","Marker that can be passed instead of a buffer to indicate an empty list of buffers.",null,null],[12,"len","","Number of phantom vertices.",165,null],[3,"PerInstance","","Marker that instructs glium that the buffer is to be used per instance.",null,null],[4,"BufferCreationError","","Error that can happen when creating a vertex buffer.",null,null],[13,"FormatNotSupported","","The vertex format is not supported by the backend.",166,null],[13,"BufferCreationError","","Error while creating the vertex buffer.",166,null],[4,"AttributeType","","",null,null],[13,"I8","","",167,null],[13,"I8I8","","",167,null],[13,"I8I8I8","","",167,null],[13,"I8I8I8I8","","",167,null],[13,"U8","","",167,null],[13,"U8U8","","",167,null],[13,"U8U8U8","","",167,null],[13,"U8U8U8U8","","",167,null],[13,"I16","","",167,null],[13,"I16I16","","",167,null],[13,"I16I16I16","","",167,null],[13,"I16I16I16I16","","",167,null],[13,"U16","","",167,null],[13,"U16U16","","",167,null],[13,"U16U16U16","","",167,null],[13,"U16U16U16U16","","",167,null],[13,"I32","","",167,null],[13,"I32I32","","",167,null],[13,"I32I32I32","","",167,null],[13,"I32I32I32I32","","",167,null],[13,"U32","","",167,null],[13,"U32U32","","",167,null],[13,"U32U32U32","","",167,null],[13,"U32U32U32U32","","",167,null],[13,"I64","","",167,null],[13,"I64I64","","",167,null],[13,"I64I64I64","","",167,null],[13,"I64I64I64I64","","",167,null],[13,"U64","","",167,null],[13,"U64U64","","",167,null],[13,"U64U64U64","","",167,null],[13,"U64U64U64U64","","",167,null],[13,"F16","","",167,null],[13,"F16F16","","",167,null],[13,"F16F16F16","","",167,null],[13,"F16F16F16F16","","",167,null],[13,"F16x2x2","","2x2 matrix of `f16`s",167,null],[13,"F16x2x3","","2x3 matrix of `f16`s",167,null],[13,"F16x2x4","","2x3 matrix of `f16`s",167,null],[13,"F16x3x2","","3x2 matrix of `f16`s",167,null],[13,"F16x3x3","","3x3 matrix of `f16`s",167,null],[13,"F16x3x4","","3x4 matrix of `f16`s",167,null],[13,"F16x4x2","","4x2 matrix of `f16`s",167,null],[13,"F16x4x3","","4x3 matrix of `f16`s",167,null],[13,"F16x4x4","","4x4 matrix of `f16`s",167,null],[13,"F32","","",167,null],[13,"F32F32","","",167,null],[13,"F32F32F32","","",167,null],[13,"F32F32F32F32","","",167,null],[13,"F32x2x2","","2x2 matrix of `f32`s",167,null],[13,"F32x2x3","","2x3 matrix of `f32`s",167,null],[13,"F32x2x4","","2x3 matrix of `f32`s",167,null],[13,"F32x3x2","","3x2 matrix of `f32`s",167,null],[13,"F32x3x3","","3x3 matrix of `f32`s",167,null],[13,"F32x3x4","","3x4 matrix of `f32`s",167,null],[13,"F32x4x2","","4x2 matrix of `f32`s",167,null],[13,"F32x4x3","","4x3 matrix of `f32`s",167,null],[13,"F32x4x4","","4x4 matrix of `f32`s",167,null],[13,"F64","","Warning: using `f64`s can be very slow.",167,null],[13,"F64F64","","Warning: using `f64`s can be very slow.",167,null],[13,"F64F64F64","","Warning: using `f64`s can be very slow.",167,null],[13,"F64F64F64F64","","Warning: using `f64`s can be very slow.",167,null],[13,"F64x2x2","","2x2 matrix of `f64`s Warning: using `f64`s can be very slow.",167,null],[13,"F64x2x3","","2x3 matrix of `f64`s Warning: using `f64`s can be very slow.",167,null],[13,"F64x2x4","","2x3 matrix of `f64`s Warning: using `f64`s can be very slow.",167,null],[13,"F64x3x2","","3x2 matrix of `f64`s Warning: using `f64`s can be very slow.",167,null],[13,"F64x3x3","","3x3 matrix of `f64`s Warning: using `f64`s can be very slow.",167,null],[13,"F64x3x4","","3x4 matrix of `f64`s Warning: using `f64`s can be very slow.",167,null],[13,"F64x4x2","","4x2 matrix of `f64`s Warning: using `f64`s can be very slow.",167,null],[13,"F64x4x3","","4x3 matrix of `f64`s Warning: using `f64`s can be very slow.",167,null],[13,"F64x4x4","","4x4 matrix of `f64`s Warning: using `f64`s can be very slow.",167,null],[13,"I2I10I10I10Reversed","","From MSB to LSB: two bits for the alpha, ten bits for the blue, ten bits for the green, ten bits for the red.",167,null],[13,"U2U10U10U10Reversed","","From MSB to LSB: two bits for the alpha, ten bits for the blue, ten bits for the green, ten bits for the red.",167,null],[13,"I10I10I10I2","","Corresponds to `GL_INT_10_10_10_2`.",167,null],[13,"U10U10U10U2","","Corresponds to `GL_UNSIGNED_INT_10_10_10_2`.",167,null],[13,"F10F11F11UnsignedIntReversed","","Three floating points values turned into unsigned integers./",167,null],[13,"FixedFloatI16U16","","Fixed floating points. A 16bits signed value followed by the 16bits unsigned exponent.",167,null],[4,"VerticesSource","","Describes the source to use for the vertices when drawing.",null,null],[13,"VertexBuffer","","A buffer uploaded in the video memory.",168,null],[13,"Marker","","A marker indicating a \"phantom list of attributes\".",168,null],[12,"len","glium::vertex::VerticesSource","Number of attributes.",168,null],[12,"per_instance","","Whether or not this buffer is \"per instance\" (true) or \"per vertex\" (false).",168,null],[5,"is_transform_feedback_supported","glium::vertex","Returns true if transform feedback is supported by the OpenGL implementation.",null,{"inputs":[{"name":"f"}],"output":{"name":"bool"}}],[11,"clone","","",166,{"inputs":[{"name":"self"}],"output":{"name":"creationerror"}}],[11,"fmt","","",166,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",166,{"inputs":[{"name":"buffercreationerror"}],"output":{"name":"creationerror"}}],[11,"fmt","","",166,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",166,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",166,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"get_id","glium","",169,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",169,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"per_instance","glium::vertex","Creates a marker that instructs glium to use multiple instances.",170,{"inputs":[{"name":"self"}],"output":{"generics":["perinstance","instancingnotsupported"],"name":"result"}}],[11,"new","glium","Builds a new vertex buffer.",169,null],[11,"dynamic","","Builds a new vertex buffer.",169,null],[11,"persistent","","Builds a new vertex buffer.",169,null],[11,"immutable","","Builds a new vertex buffer.",169,null],[11,"empty","","Builds an empty vertex buffer.",169,{"inputs":[{"name":"f"},{"name":"usize"}],"output":{"generics":["vertexbuffer","creationerror"],"name":"result"}}],[11,"empty_dynamic","","Builds an empty vertex buffer.",169,{"inputs":[{"name":"f"},{"name":"usize"}],"output":{"generics":["vertexbuffer","creationerror"],"name":"result"}}],[11,"empty_persistent","","Builds an empty vertex buffer.",169,{"inputs":[{"name":"f"},{"name":"usize"}],"output":{"generics":["vertexbuffer","creationerror"],"name":"result"}}],[11,"empty_immutable","","Builds an empty vertex buffer.",169,{"inputs":[{"name":"f"},{"name":"usize"}],"output":{"generics":["vertexbuffer","creationerror"],"name":"result"}}],[11,"new_raw","","Builds a new vertex buffer from an indeterminate data type and bindings.",169,null],[11,"new_raw_dynamic","","Dynamic version of `new_raw`.",169,null],[11,"slice","","Accesses a slice of the buffer.",169,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"generics":["vertexbufferslice"],"name":"option"}}],[11,"get_bindings","","Returns the associated `VertexFormat`.",169,{"inputs":[{"name":"self"}],"output":{"name":"vertexformat"}}],[11,"per_instance","","Creates a marker that instructs glium to use multiple instances.",169,{"inputs":[{"name":"self"}],"output":{"generics":["perinstance","instancingnotsupported"],"name":"result"}}],[11,"into_vertex_buffer_any","","DEPRECATED: use `.into()` instead. Discard the type information and turn the vertex buffer into a `VertexBufferAny`.",169,{"inputs":[{"name":"self"}],"output":{"name":"vertexbufferany"}}],[11,"from","","",169,{"inputs":[{"name":"buffer"}],"output":{"name":"vertexbuffer"}}],[11,"deref","","",169,{"inputs":[{"name":"self"}],"output":{"name":"buffer"}}],[11,"deref_mut","","",169,{"inputs":[{"name":"self"}],"output":{"name":"buffer"}}],[11,"from","glium::buffer","",72,{"inputs":[{"name":"vertexbuffer"}],"output":{"name":"bufferslice"}}],[11,"from","","",73,{"inputs":[{"name":"vertexbuffer"}],"output":{"name":"buffermutslice"}}],[11,"deref","glium::vertex","",170,{"inputs":[{"name":"self"}],"output":{"name":"bufferslice"}}],[11,"deref_mut","","",170,{"inputs":[{"name":"self"}],"output":{"name":"bufferslice"}}],[11,"from","glium::buffer","",72,{"inputs":[{"name":"vertexbufferslice"}],"output":{"name":"bufferslice"}}],[11,"into","glium::vertex","",170,{"inputs":[{"name":"self"}],"output":{"name":"verticessource"}}],[11,"fmt","","",171,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_elements_size","","Returns the number of bytes between two consecutive elements in the buffer.",171,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","","Returns the number of elements in the buffer.",171,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"get_bindings","","Returns the associated `VertexFormat`.",171,{"inputs":[{"name":"self"}],"output":{"name":"vertexformat"}}],[11,"into_vertex_buffer","","Turns the vertex buffer into a `VertexBuffer` without checking the type.",171,{"inputs":[{"name":"self"}],"output":{"name":"vertexbuffer"}}],[11,"per_instance","","Creates a marker that instructs glium to use multiple instances.",171,{"inputs":[{"name":"self"}],"output":{"generics":["perinstance","instancingnotsupported"],"name":"result"}}],[11,"from","","",171,{"inputs":[{"name":"vertexbuffer"}],"output":{"name":"vertexbufferany"}}],[11,"from","","",171,{"inputs":[{"name":"buffer"}],"output":{"name":"vertexbufferany"}}],[11,"deref","","",171,{"inputs":[{"name":"self"}],"output":{"name":"bufferany"}}],[11,"deref_mut","","",171,{"inputs":[{"name":"self"}],"output":{"name":"bufferany"}}],[11,"clone","","",167,{"inputs":[{"name":"self"}],"output":{"name":"attributetype"}}],[11,"fmt","","",167,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",167,{"inputs":[{"name":"self"},{"name":"attributetype"}],"output":{"name":"bool"}}],[11,"is_supported","","Returns true if the backend supports this type of attribute.",167,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"bool"}}],[11,"get_size_bytes","","Returns the size in bytes of a value of this type.",167,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"get_num_components","","Returns the number of values for this type.",167,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fmt","","",172,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Builds a new transform feedback session.",172,{"inputs":[{"name":"f"},{"name":"program"},{"name":"buffer"}],"output":{"generics":["transformfeedbacksession","transformfeedbacksessioncreationerror"],"name":"result"}}],[11,"drop","","",172,{"inputs":[{"name":"self"}],"output":null}],[6,"VertexFormat","","Describes the layout of each vertex in a vertex buffer.",null,null],[8,"MultiVerticesSource","","Objects that describe multiple vertex sources.",null,null],[16,"Iterator","","Iterator that enumerates each source.",173,null],[10,"iter","","Iterates over the `VerticesSource`.",173,null],[8,"Vertex","","Trait for structures that represent a vertex.",null,null],[10,"build_bindings","","Builds the `VertexFormat` representing the layout of this element.",174,{"inputs":[],"output":{"name":"vertexformat"}}],[11,"is_supported","","Returns true if the backend supports this vertex format.",174,{"inputs":[{"name":"c"}],"output":{"name":"bool"}}],[8,"Attribute","","Trait for types that can be used as vertex attributes.",null,null],[10,"get_type","","Get the type of data.",175,{"inputs":[],"output":{"name":"attributetype"}}],[11,"is_supported","","Returns true if the backend supports this type of attribute.",175,{"inputs":[{"name":"c"}],"output":{"name":"bool"}}],[11,"clone","","",168,{"inputs":[{"name":"self"}],"output":{"name":"verticessource"}}],[11,"into","","",164,{"inputs":[{"name":"self"}],"output":{"name":"verticessource"}}],[11,"into","","",165,{"inputs":[{"name":"self"}],"output":{"name":"verticessource"}}],[11,"into","","",176,{"inputs":[{"name":"self"}],"output":{"name":"verticessource"}}],[0,"texture","glium","A texture is an image loaded in video memory, which can be sampled in your shaders.",null,null],[3,"TextureAny","glium::texture","A texture whose type isn't fixed at compile-time.",null,null],[3,"TextureAnyMipmap","","Represents a specific mipmap of a texture.",null,null],[3,"TextureAnyLayer","","Represents a specific layer of an array texture and 3D textures.",null,null],[3,"TextureAnyLayerMipmap","","Represents a specific layer of a specific mipmap. This is the same as `TextureAnyImage`, except for 3D textures, cubemaps and cubemap arrays.",null,null],[3,"TextureAnyImage","","Represents a specific 2D image of a texture. 1D textures are considered as having a height of 1.",null,null],[3,"RawImage1d","","Represents raw data for a two-dimensional image.",null,null],[12,"data","","A contiguous array of pixel data.",177,null],[12,"width","","Number of pixels per column.",177,null],[12,"format","","Formats of the pixels.",177,null],[3,"RawImage2d","","Represents raw data for a two-dimensional image.",null,null],[12,"data","","A contiguous array of pixel data.",178,null],[12,"width","","Number of pixels per column.",178,null],[12,"height","","Number of pixels per row.",178,null],[12,"format","","Formats of the pixels.",178,null],[3,"RawImage3d","","Represents raw data for a two-dimensional image.",null,null],[12,"data","","A contiguous array of pixel data.",179,null],[12,"width","","Number of pixels per column.",179,null],[12,"height","","Number of pixels per row.",179,null],[12,"depth","","Number of pixels per depth.",179,null],[12,"format","","Formats of the pixels.",179,null],[4,"ClientFormat","","List of client-side pixel formats.",null,null],[13,"U8","","",180,null],[13,"U8U8","","",180,null],[13,"U8U8U8","","",180,null],[13,"U8U8U8U8","","",180,null],[13,"I8","","",180,null],[13,"I8I8","","",180,null],[13,"I8I8I8","","",180,null],[13,"I8I8I8I8","","",180,null],[13,"U16","","",180,null],[13,"U16U16","","",180,null],[13,"U16U16U16","","",180,null],[13,"U16U16U16U16","","",180,null],[13,"I16","","",180,null],[13,"I16I16","","",180,null],[13,"I16I16I16","","",180,null],[13,"I16I16I16I16","","",180,null],[13,"U32","","",180,null],[13,"U32U32","","",180,null],[13,"U32U32U32","","",180,null],[13,"U32U32U32U32","","",180,null],[13,"I32","","",180,null],[13,"I32I32","","",180,null],[13,"I32I32I32","","",180,null],[13,"I32I32I32I32","","",180,null],[13,"U3U3U2","","",180,null],[13,"U5U6U5","","",180,null],[13,"U4U4U4U4","","",180,null],[13,"U5U5U5U1","","",180,null],[13,"U10U10U10U2","","",180,null],[13,"F16","","",180,null],[13,"F16F16","","",180,null],[13,"F16F16F16","","",180,null],[13,"F16F16F16F16","","",180,null],[13,"F32","","",180,null],[13,"F32F32","","",180,null],[13,"F32F32F32","","",180,null],[13,"F32F32F32F32","","",180,null],[4,"TextureFormat","","Format of the internal representation of a texture.",null,null],[13,"UncompressedFloat","","",181,null],[13,"UncompressedIntegral","","",181,null],[13,"UncompressedUnsigned","","",181,null],[13,"Srgb","","",181,null],[13,"CompressedFormat","","",181,null],[13,"CompressedSrgbFormat","","",181,null],[13,"DepthFormat","","",181,null],[13,"StencilFormat","","",181,null],[13,"DepthStencilFormat","","",181,null],[4,"UncompressedFloatFormat","","List of uncompressed pixel formats that contain floating-point-like data.",null,null],[13,"U8","","",182,null],[13,"I8","","",182,null],[13,"U16","","",182,null],[13,"I16","","",182,null],[13,"U8U8","","",182,null],[13,"I8I8","","",182,null],[13,"U16U16","","",182,null],[13,"I16I16","","",182,null],[13,"U3U3U2","","",182,null],[13,"U4U4U4","","",182,null],[13,"U5U5U5","","",182,null],[13,"U8U8U8","","",182,null],[13,"I8I8I8","","",182,null],[13,"U10U10U10","","",182,null],[13,"U12U12U12","","",182,null],[13,"U16U16U16","","",182,null],[13,"I16I16I16","","",182,null],[13,"U2U2U2U2","","",182,null],[13,"U4U4U4U4","","",182,null],[13,"U5U5U5U1","","",182,null],[13,"U8U8U8U8","","",182,null],[13,"I8I8I8I8","","",182,null],[13,"U10U10U10U2","","",182,null],[13,"U12U12U12U12","","",182,null],[13,"U16U16U16U16","","",182,null],[13,"I16I16I16I16","","",182,null],[13,"F16","","",182,null],[13,"F16F16","","",182,null],[13,"F16F16F16","","",182,null],[13,"F16F16F16F16","","",182,null],[13,"F32","","",182,null],[13,"F32F32","","",182,null],[13,"F32F32F32","","",182,null],[13,"F32F32F32F32","","",182,null],[13,"F11F11F10","","",182,null],[13,"F9F9F9","","Uses three components of 9 bits of precision that all share the same exponent.",182,null],[4,"UncompressedIntFormat","","List of uncompressed pixel formats that contain signed integral data.",null,null],[13,"I8","","",183,null],[13,"I16","","",183,null],[13,"I32","","",183,null],[13,"I8I8","","",183,null],[13,"I16I16","","",183,null],[13,"I32I32","","",183,null],[13,"I8I8I8","","",183,null],[13,"I16I16I16","","May not be supported by renderbuffers.",183,null],[13,"I32I32I32","","May not be supported by renderbuffers.",183,null],[13,"I8I8I8I8","","May not be supported by renderbuffers.",183,null],[13,"I16I16I16I16","","",183,null],[13,"I32I32I32I32","","",183,null],[4,"UncompressedUintFormat","","List of uncompressed pixel formats that contain unsigned integral data.",null,null],[13,"U8","","",184,null],[13,"U16","","",184,null],[13,"U32","","",184,null],[13,"U8U8","","",184,null],[13,"U16U16","","",184,null],[13,"U32U32","","",184,null],[13,"U8U8U8","","",184,null],[13,"U16U16U16","","May not be supported by renderbuffers.",184,null],[13,"U32U32U32","","May not be supported by renderbuffers.",184,null],[13,"U8U8U8U8","","May not be supported by renderbuffers.",184,null],[13,"U16U16U16U16","","",184,null],[13,"U32U32U32U32","","",184,null],[13,"U10U10U10U2","","",184,null],[4,"CompressedFormat","","List of compressed texture formats.",null,null],[13,"RgtcFormatU","","Red/green compressed texture with one unsigned component.",185,null],[13,"RgtcFormatI","","Red/green compressed texture with one signed component.",185,null],[13,"RgtcFormatUU","","Red/green compressed texture with two unsigned components.",185,null],[13,"RgtcFormatII","","Red/green compressed texture with two signed components.",185,null],[13,"BptcUnorm4","","BPTC format with four components represented as integers.",185,null],[13,"BptcSignedFloat3","","BPTC format with three components (no alpha) represented as signed floats.",185,null],[13,"BptcUnsignedFloat3","","BPTC format with three components (no alpha) represented as unsigned floats.",185,null],[13,"S3tcDxt1NoAlpha","","S3TC DXT1 without alpha, see https://www.opengl.org/wiki/S3_Texture_Compression.",185,null],[13,"S3tcDxt1Alpha","","S3TC DXT1 with 1-bit alpha, see https://www.opengl.org/wiki/S3_Texture_Compression.",185,null],[13,"S3tcDxt3Alpha","","S3TC DXT3, see https://www.opengl.org/wiki/S3_Texture_Compression.",185,null],[13,"S3tcDxt5Alpha","","S3TC DXT5, see https://www.opengl.org/wiki/S3_Texture_Compression.",185,null],[4,"DepthFormat","","List of formats available for depth textures.",null,null],[13,"I16","","",186,null],[13,"I24","","",186,null],[13,"I32","","May not be supported by all hardware.",186,null],[13,"F32","","",186,null],[4,"DepthStencilFormat","","List of formats available for depth-stencil textures.",null,null],[13,"I24I8","","",187,null],[13,"F32I8","","",187,null],[4,"StencilFormat","","List of formats available for stencil textures.",null,null],[13,"I1","","",188,null],[13,"I4","","",188,null],[13,"I8","","",188,null],[13,"I16","","",188,null],[4,"CompressedSrgbFormat","","List of compressed pixel formats in the sRGB color space.",null,null],[13,"Bptc","","BPTC format. sRGB with alpha. Also called `BC7` by DirectX.",189,null],[13,"S3tcDxt1NoAlpha","","",189,null],[13,"S3tcDxt1Alpha","","",189,null],[13,"S3tcDxt3Alpha","","",189,null],[13,"S3tcDxt5Alpha","","",189,null],[4,"SrgbFormat","","List of uncompressed pixel formats that contain floating-point data in the sRGB color space.",null,null],[13,"U8U8U8","","",190,null],[13,"U8U8U8U8","","",190,null],[4,"Dimensions","","Type of a texture.",null,null],[13,"Texture1d","","",191,null],[12,"width","glium::texture::Dimensions","",191,null],[13,"Texture1dArray","glium::texture","",191,null],[12,"width","glium::texture::Dimensions","",191,null],[12,"array_size","","",191,null],[13,"Texture2d","glium::texture","",191,null],[12,"width","glium::texture::Dimensions","",191,null],[12,"height","","",191,null],[13,"Texture2dArray","glium::texture","",191,null],[12,"width","glium::texture::Dimensions","",191,null],[12,"height","","",191,null],[12,"array_size","","",191,null],[13,"Texture2dMultisample","glium::texture","",191,null],[12,"width","glium::texture::Dimensions","",191,null],[12,"height","","",191,null],[12,"samples","","",191,null],[13,"Texture2dMultisampleArray","glium::texture","",191,null],[12,"width","glium::texture::Dimensions","",191,null],[12,"height","","",191,null],[12,"array_size","","",191,null],[12,"samples","","",191,null],[13,"Texture3d","glium::texture","",191,null],[12,"width","glium::texture::Dimensions","",191,null],[12,"height","","",191,null],[12,"depth","","",191,null],[13,"Cubemap","glium::texture","",191,null],[12,"dimension","glium::texture::Dimensions","",191,null],[13,"CubemapArray","glium::texture","",191,null],[12,"dimension","glium::texture::Dimensions","",191,null],[12,"array_size","","",191,null],[4,"InternalFormat","glium::texture","Internal format of a texture.",null,null],[13,"OneComponent","","The format has one component.",192,null],[12,"ty1","glium::texture::InternalFormat","Type of the first component of the format.",192,null],[12,"bits1","","Number of bits of the first component.",192,null],[13,"TwoComponents","glium::texture","The format has two components.",192,null],[12,"ty1","glium::texture::InternalFormat","Type of the first component of the format.",192,null],[12,"bits1","","Number of bits of the first component.",192,null],[12,"ty2","","Type of the second component.",192,null],[12,"bits2","","Number of bits of the second component.",192,null],[13,"ThreeComponents","glium::texture","The format has three components.",192,null],[12,"ty1","glium::texture::InternalFormat","Type of the first component of the format.",192,null],[12,"bits1","","Number of bits of the first component.",192,null],[12,"ty2","","Type of the second component.",192,null],[12,"bits2","","Number of bits of the second component.",192,null],[12,"ty3","","Type of the third component.",192,null],[12,"bits3","","Number of bits of the third component.",192,null],[13,"FourComponents","glium::texture","The format has four components.",192,null],[12,"ty1","glium::texture::InternalFormat","Type of the first component of the format.",192,null],[12,"bits1","","Number of bits of the first component.",192,null],[12,"ty2","","Type of the second component.",192,null],[12,"bits2","","Number of bits of the second component.",192,null],[12,"ty3","","Type of the third component.",192,null],[12,"bits3","","Number of bits of the third component.",192,null],[12,"ty4","","Type of the fourth component.",192,null],[12,"bits4","","Number of bits of the fourth component.",192,null],[4,"InternalFormatType","glium::texture","Format of a component of an internal format.",null,null],[13,"SignedNormalized","","Floating point texture with signed components.",193,null],[13,"UnsignedNormalized","","Floating point texture with unsigned components.",193,null],[13,"Float","","Floating point texture with floats.",193,null],[13,"Int","","Integral texture.",193,null],[13,"UnsignedInt","","Unsigned texture.",193,null],[4,"GetFormatError","","Error that can happen when retrieving the internal format of a texture.",null,null],[13,"NotSupported","","The backend doesn't support retrieving the internal format.",194,null],[4,"CubeLayer","","Represents a layer of a cubemap.",null,null],[13,"PositiveX","","",195,null],[13,"NegativeX","","",195,null],[13,"PositiveY","","",195,null],[13,"NegativeY","","",195,null],[13,"PositiveZ","","",195,null],[13,"NegativeZ","","",195,null],[4,"TextureKind","","Represents a kind of texture.",null,null],[13,"Float","","",196,null],[13,"Integral","","",196,null],[13,"Unsigned","","",196,null],[13,"Depth","","",196,null],[13,"Stencil","","",196,null],[13,"DepthStencil","","",196,null],[4,"MipmapsOption","","Describes what to do about mipmaps during texture creation.",null,null],[13,"NoMipmap","","No mipmap will be allocated or generated.",197,null],[13,"EmptyMipmaps","","Allocates space for all the possible amount of mipmaps given the texture dimensions.",197,null],[13,"EmptyMipmapsMax","","Allocates space for the specified amount of mipmaps (excluding the top level) but does not generate mipmaps.",197,null],[13,"AutoGeneratedMipmaps","","Allocates and generates mipmaps for all the possible levels given the texture dimensions.",197,null],[13,"AutoGeneratedMipmapsMax","","Allocates and generates mipmaps for the specified amount of mipmaps (excluding the top level) the possible levels given the texture dimensions.",197,null],[4,"CompressedMipmapsOption","","Describes what to do about mipmaps during compressed texture creation.",null,null],[13,"NoMipmap","","No mipmaps will be allocated or generated.",198,null],[13,"EmptyMipmaps","","Allocates space for all the possible amount of mipmaps given the texture dimensions.",198,null],[13,"EmptyMipmapsMax","","Allocates space for the specified amount of mipmaps (excluding the top level) but does not generate mipmaps.",198,null],[4,"TextureCreationError","","Error that can happen when creating a texture.",null,null],[13,"FormatNotSupported","","The requested format is not supported by the backend.",199,null],[13,"DimensionsNotSupported","","The requested texture dimensions are not supported.",199,null],[13,"TypeNotSupported","","The texture format is not supported by the backend.",199,null],[5,"is_texture_1d_supported","","Returns true is one-dimensional textures are supported.",null,{"inputs":[{"name":"c"}],"output":{"name":"bool"}}],[5,"is_texture_2d_supported","","Returns true is two-dimensional textures are supported.",null,{"inputs":[{"name":"c"}],"output":{"name":"bool"}}],[5,"is_texture_3d_supported","","Returns true is three-dimensional textures are supported.",null,{"inputs":[{"name":"c"}],"output":{"name":"bool"}}],[5,"is_texture_1d_array_supported","","Returns true is one-dimensional texture arrays are supported.",null,{"inputs":[{"name":"c"}],"output":{"name":"bool"}}],[5,"is_texture_2d_array_supported","","Returns true is two-dimensional texture arrays are supported.",null,{"inputs":[{"name":"c"}],"output":{"name":"bool"}}],[5,"is_texture_2d_multisample_supported","","Returns true is two-dimensional multisample textures are supported.",null,{"inputs":[{"name":"c"}],"output":{"name":"bool"}}],[5,"is_texture_2d_multisample_array_supported","","Returns true is two-dimensional multisample texture arrays are supported.",null,{"inputs":[{"name":"c"}],"output":{"name":"bool"}}],[5,"is_cubemaps_supported","","Returns true is cubemaps are supported.",null,{"inputs":[{"name":"c"}],"output":{"name":"bool"}}],[5,"is_cubemap_arrays_supported","","Returns true is cubemap arrays are supported.",null,{"inputs":[{"name":"c"}],"output":{"name":"bool"}}],[0,"bindless","","Without bindless textures, using a texture in a shader requires binding the texture to a specific bind point before drawing. This not only slows down rendering, but may also prevent you from grouping multiple draw calls into one because of the limitation to the number of available texture units.",null,null],[3,"ResidentTexture","glium::texture::bindless","A texture that is resident in video memory. This allows you to use bindless textures in your shaders.",null,null],[3,"TextureHandle","","Represents a handle to a texture. Contains a raw pointer to a texture that is hidden from you.",null,null],[3,"BindlessTexturesNotSupportedError","","Bindless textures are not supported.",null,null],[11,"new","","Takes ownership of the given texture and makes it resident.",200,{"inputs":[{"name":"textureany"}],"output":{"generics":["residenttexture","bindlesstexturesnotsupportederror"],"name":"result"}}],[11,"into_inner","","Unwraps the texture and restores it.",200,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"deref","","",200,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"deref_mut","","",200,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"drop","","",200,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",201,{"inputs":[{"name":"self"}],"output":{"name":"texturehandle"}}],[11,"new","","Builds a new handle.",201,{"inputs":[{"name":"residenttexture"},{"name":"samplerbehavior"}],"output":{"name":"texturehandle"}}],[11,"set","","Sets the value to the given texture.",201,{"inputs":[{"name":"self"},{"name":"residenttexture"},{"name":"samplerbehavior"}],"output":null}],[11,"as_uniform_value","","",201,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"matches","","",201,{"inputs":[{"name":"blocklayout"},{"name":"usize"}],"output":{"generics":["layoutmismatcherror"],"name":"result"}}],[11,"build_layout","","",201,{"inputs":[{"name":"usize"}],"output":{"name":"blocklayout"}}],[11,"fmt","","",202,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",202,{"inputs":[{"name":"self"}],"output":{"name":"bindlesstexturesnotsupportederror"}}],[0,"buffer_texture","glium::texture","A `BufferTexture` is a special kind of one-dimensional texture that gets its data from a buffer. Buffer textures have very limited capabilities compared to other texture types.",null,null],[3,"BufferTexture","glium::texture::buffer_texture","A one-dimensional texture that gets its data from a buffer.",null,null],[3,"BufferTextureRef","","Holds a reference to a `BufferTexture`.",null,null],[4,"TextureCreationError","","Error that can happen while building the texture part of a buffer texture.",null,null],[13,"NotSupported","","Buffer textures are not supported at all.",203,null],[13,"FormatNotSupported","","The requested format is not supported in combination with the given texture buffer type.",203,null],[13,"TooLarge","","The size of the buffer that you are trying to bind exceeds `GL_MAX_TEXTURE_BUFFER_SIZE`.",203,null],[4,"CreationError","","Error that can happen while building a buffer texture.",null,null],[13,"BufferCreationError","","Failed to create the buffer.",204,null],[13,"TextureCreationError","","Failed to create the texture.",204,null],[4,"BufferTextureType","","Type of a buffer texture.",null,null],[13,"Float","","The texture will behave as if it contained floating-point data. It can be sampled with a `samplerBuffer` in your GLSL code.",205,null],[13,"Integral","","The texture will behave as if it contained signed integral data. It can be sampled with a `isamplerBuffer` in your GLSL code.",205,null],[13,"Unsigned","","The texture will behave as if it contained unsigned integral data. It can be sampled with a `usamplerBuffer` in your GLSL code.",205,null],[4,"TextureBufferContentType","","",null,null],[13,"U8","","",206,null],[13,"I8","","",206,null],[13,"U16","","",206,null],[13,"I16","","",206,null],[13,"U32","","",206,null],[13,"I32","","",206,null],[13,"U8U8","","",206,null],[13,"I8I8","","",206,null],[13,"U16U16","","",206,null],[13,"I16I16","","",206,null],[13,"U32U32","","",206,null],[13,"I32I32","","",206,null],[13,"U32U32U32","","",206,null],[13,"I32I32I32","","",206,null],[13,"U8U8U8U8","","",206,null],[13,"I8I8I8I8","","",206,null],[13,"U16U16U16U16","","",206,null],[13,"I16I16I16I16","","",206,null],[13,"U32U32U32U32","","",206,null],[13,"I32I32I32I32","","",206,null],[13,"F16","","",206,null],[13,"F32","","",206,null],[13,"F16F16","","",206,null],[13,"F32F32","","",206,null],[13,"F32F32F32","","",206,null],[13,"F16F16F16F16","","",206,null],[13,"F32F32F32F32","","",206,null],[8,"TextureBufferContent","","Trait for data types that can be interpreted by a buffer texture.",null,null],[10,"get_type","","Returns the enumeration corresponding to elements of this data type.",207,{"inputs":[],"output":{"name":"texturebuffercontenttype"}}],[11,"clone","","",203,{"inputs":[{"name":"self"}],"output":{"name":"texturecreationerror"}}],[11,"fmt","","",203,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",203,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",203,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",204,{"inputs":[{"name":"self"}],"output":{"name":"creationerror"}}],[11,"fmt","","",204,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",204,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",204,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",204,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"from","","",204,{"inputs":[{"name":"buffercreationerror"}],"output":{"name":"creationerror"}}],[11,"from","","",204,{"inputs":[{"name":"texturecreationerror"}],"output":{"name":"creationerror"}}],[11,"clone","","",205,{"inputs":[{"name":"self"}],"output":{"name":"buffertexturetype"}}],[11,"fmt","","",205,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",205,{"inputs":[{"name":"self"},{"name":"buffertexturetype"}],"output":{"name":"bool"}}],[11,"new","","Builds a new texture buffer from data.",208,null],[11,"dynamic","","Builds a new texture buffer from data.",208,null],[11,"persistent","","Builds a new texture buffer from data.",208,null],[11,"immutable","","Builds a new texture buffer from data.",208,null],[11,"empty","","Builds a new empty buffer buffer.",208,{"inputs":[{"name":"f"},{"name":"usize"},{"name":"buffertexturetype"}],"output":{"generics":["buffertexture","creationerror"],"name":"result"}}],[11,"empty_dynamic","","Builds a new empty buffer buffer.",208,{"inputs":[{"name":"f"},{"name":"usize"},{"name":"buffertexturetype"}],"output":{"generics":["buffertexture","creationerror"],"name":"result"}}],[11,"empty_persistent","","Builds a new empty buffer buffer.",208,{"inputs":[{"name":"f"},{"name":"usize"},{"name":"buffertexturetype"}],"output":{"generics":["buffertexture","creationerror"],"name":"result"}}],[11,"empty_immutable","","Builds a new empty buffer buffer.",208,{"inputs":[{"name":"f"},{"name":"usize"},{"name":"buffertexturetype"}],"output":{"generics":["buffertexture","creationerror"],"name":"result"}}],[11,"from_buffer","","Builds a new buffer texture by taking ownership of a buffer.",208,{"inputs":[{"name":"f"},{"name":"buffer"},{"name":"buffertexturetype"}],"output":{"generics":["buffertexture"],"name":"result"}}],[11,"deref","","",208,{"inputs":[{"name":"self"}],"output":{"name":"buffer"}}],[11,"deref_mut","","",208,{"inputs":[{"name":"self"}],"output":{"name":"buffer"}}],[11,"drop","","",208,{"inputs":[{"name":"self"}],"output":null}],[11,"as_buffer_texture_ref","","Builds a `BufferTextureRef`.",208,{"inputs":[{"name":"self"}],"output":{"name":"buffertextureref"}}],[11,"as_uniform_value","","",208,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"clone","","",209,{"inputs":[{"name":"self"}],"output":{"name":"buffertextureref"}}],[11,"get_texture_type","","Return the type of the texture.",209,{"inputs":[{"name":"self"}],"output":{"name":"buffertexturetype"}}],[0,"pixel_buffer","glium::texture","Pixel buffers are buffers that contain two-dimensional texture data.",null,null],[3,"PixelBuffer","glium::texture::pixel_buffer","Buffer that stores the content of a texture.",null,null],[11,"new_empty","","Builds a new buffer with an uninitialized content.",210,{"inputs":[{"name":"f"},{"name":"usize"}],"output":{"name":"pixelbuffer"}}],[11,"read_as_texture_2d","","Reads the content of the pixel buffer.",210,{"inputs":[{"name":"self"}],"output":{"generics":["readerror"],"name":"result"}}],[11,"deref","","",210,{"inputs":[{"name":"self"}],"output":{"name":"buffer"}}],[11,"deref_mut","","",210,{"inputs":[{"name":"self"}],"output":{"name":"buffer"}}],[11,"get_id","","",210,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"clone","glium::texture","",191,{"inputs":[{"name":"self"}],"output":{"name":"dimensions"}}],[11,"fmt","","",191,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",191,{"inputs":[{"name":"self"},{"name":"dimensions"}],"output":{"name":"bool"}}],[11,"ne","","",191,{"inputs":[{"name":"self"},{"name":"dimensions"}],"output":{"name":"bool"}}],[11,"get_width","","Returns the width of the texture.",211,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_height","","Returns the height of the texture.",211,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"option"}}],[11,"get_depth","","Returns the depth of the texture.",211,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"option"}}],[11,"kind","","Returns the kind of texture.",211,{"inputs":[{"name":"self"}],"output":{"name":"texturekind"}}],[11,"dimensions","","Returns the dimensions of the texture.",211,{"inputs":[{"name":"self"}],"output":{"name":"dimensions"}}],[11,"get_array_size","","Returns the array size of the texture.",211,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"option"}}],[11,"get_samples","","Returns the number of samples of the texture if it is a multisampling texture.",211,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"option"}}],[11,"first_layer","","Returns a structure that represents the first layer of the texture. All textures have a first layer.",211,{"inputs":[{"name":"self"}],"output":{"name":"textureanylayer"}}],[11,"layer","","Returns a structure that represents a specific layer of the texture.",211,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["textureanylayer"],"name":"option"}}],[11,"get_texture_type","","Returns the type of the texture (1D, 2D, 3D, etc.).",211,{"inputs":[{"name":"self"}],"output":{"name":"dimensions"}}],[11,"get_internal_format","","Determines the internal format of this texture.",211,{"inputs":[{"name":"self"}],"output":{"generics":["internalformat","getformaterror"],"name":"result"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",211,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"main_level","","Returns a structure that represents the main mipmap level of the texture.",211,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"mipmap","","Returns a structure that represents a specific mipmap of the texture.",211,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["textureanymipmap"],"name":"option"}}],[11,"generate_mipmaps","","Binds this texture and generates mipmaps.",211,{"inputs":[{"name":"self"}],"output":null}],[11,"get_id","","",211,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",211,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"drop","","",211,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",212,{"inputs":[{"name":"self"}],"output":{"name":"textureanylayer"}}],[11,"get_texture","","Returns the texture.",212,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"get_samples","","Returns the number of samples of the texture.",212,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"option"}}],[11,"get_layer","","Returns the layer of the texture.",212,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"main_level","","Returns a structure that represents the main mipmap level of this layer of the texture.",212,{"inputs":[{"name":"self"}],"output":{"name":"textureanylayermipmap"}}],[11,"mipmap","","Returns a structure that represents a specific mipmap of this layer of the texture.",212,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["textureanylayermipmap"],"name":"option"}}],[11,"clone","","",213,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"get_width","","Returns the width of the mipmap.",213,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_height","","Returns the height of the mipmap.",213,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"option"}}],[11,"get_depth","","Returns the depth of the mipmap.",213,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"option"}}],[11,"get_samples","","Returns the number of samples of the texture.",213,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"option"}}],[11,"get_texture","","Returns the texture.",213,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"get_level","","Returns the level of the texture.",213,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"first_layer","","Returns a structure that represents the first layer of this mipmap of the texture. All textures have a first layer.",213,{"inputs":[{"name":"self"}],"output":{"name":"textureanylayermipmap"}}],[11,"layer","","Returns a structure that represents a specific layer of this mipmap of the texture.",213,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["textureanylayermipmap"],"name":"option"}}],[11,"get_array_size","","Returns the array size of the texture.",213,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"option"}}],[11,"raw_upload_from_pixel_buffer","","Uploads data to the texture from a buffer.",213,{"inputs":[{"name":"self"},{"name":"bufferslice"},{"generics":["u32"],"name":"range"},{"generics":["u32"],"name":"range"},{"generics":["u32"],"name":"range"}],"output":null}],[11,"raw_upload_from_pixel_buffer_inverted","","Uploads data to the texture from a buffer. The R, G and B components are flipped.",213,{"inputs":[{"name":"self"},{"name":"bufferslice"},{"generics":["u32"],"name":"range"},{"generics":["u32"],"name":"range"},{"generics":["u32"],"name":"range"}],"output":null}],[11,"clone","","",214,{"inputs":[{"name":"self"}],"output":{"name":"textureanylayermipmap"}}],[11,"get_texture","","Returns the texture.",214,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"get_level","","Returns the level of the texture.",214,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_layer","","Returns the layer of the texture.",214,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_width","","Returns the width of this texture slice.",214,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_height","","Returns the height of this texture slice.",214,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"option"}}],[11,"get_samples","","Returns the number of samples of the texture.",214,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"option"}}],[11,"into_image","","Turns this into an image.",214,{"inputs":[{"name":"self"},{"generics":["cubelayer"],"name":"option"}],"output":{"generics":["textureanyimage"],"name":"option"}}],[11,"clone","","",215,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"get_texture","","Returns the texture.",215,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"get_level","","Returns the level of the texture.",215,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_layer","","Returns the layer of the texture.",215,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_cubemap_layer","","Returns the cubemap layer of this image, or `None` if the texture is not a cubemap.",215,{"inputs":[{"name":"self"}],"output":{"generics":["cubelayer"],"name":"option"}}],[11,"get_width","","Returns the width of this texture slice.",215,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_height","","Returns the height of this texture slice.",215,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"option"}}],[11,"get_samples","","Returns the number of samples of the texture.",215,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"option"}}],[11,"raw_read","","Reads the content of the image.",215,{"inputs":[{"name":"self"},{"name":"rect"}],"output":{"name":"t"}}],[11,"raw_read_to_pixel_buffer","","Reads the content of the image to a pixel buffer.",215,{"inputs":[{"name":"self"},{"name":"rect"},{"name":"pixelbuffer"}],"output":null}],[11,"raw_clear_buffer","","Clears the content of the texture to a specific value.",215,{"inputs":[{"name":"self"},{"name":"d"}],"output":null}],[11,"clone","","",194,{"inputs":[{"name":"self"}],"output":{"name":"getformaterror"}}],[11,"fmt","","",194,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",194,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",194,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",192,{"inputs":[{"name":"self"}],"output":{"name":"internalformat"}}],[11,"fmt","","",192,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",192,{"inputs":[{"name":"self"},{"name":"internalformat"}],"output":{"name":"bool"}}],[11,"ne","","",192,{"inputs":[{"name":"self"},{"name":"internalformat"}],"output":{"name":"bool"}}],[11,"get_total_bits","","Returns the total number of bits of this format.",192,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",193,{"inputs":[{"name":"self"}],"output":{"name":"internalformattype"}}],[11,"fmt","","",193,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",193,{"inputs":[{"name":"self"},{"name":"internalformattype"}],"output":{"name":"bool"}}],[0,"texture1d","","Contains the implementation of `Texture1d`.",null,null],[3,"Texture1d","glium::texture::texture1d","A one-dimensional texture  containing floating-point data.",null,null],[3,"Texture1dMipmap","","Represents a single mipmap level of a `Texture1d`.",null,null],[11,"get_id","","",216,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",216,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"deref","","",216,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",150,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::texture1d","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",216,{"inputs":[{"name":"self"}],"output":{"generics":["texture1d"],"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",216,{"inputs":[{"name":"self"}],"output":{"generics":["internalformat","getformaterror"],"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",216,{"inputs":[{"name":"f"},{"name":"t"}],"output":{"generics":["texture1d","texturecreationerror"],"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",216,{"inputs":[{"name":"f"},{"name":"t"},{"name":"mipmapsoption"}],"output":{"generics":["texture1d","texturecreationerror"],"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",216,{"inputs":[{"name":"f"},{"name":"t"},{"name":"uncompressedfloatformat"},{"name":"mipmapsoption"}],"output":{"generics":["texture1d","texturecreationerror"],"name":"result"}}],[11,"empty","","Creates an empty texture.",216,{"inputs":[{"name":"f"},{"name":"u32"}],"output":{"generics":["texture1d","texturecreationerror"],"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",216,{"inputs":[{"name":"f"},{"name":"uncompressedfloatformat"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"generics":["texture1d","texturecreationerror"],"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",216,{"inputs":[{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"generics":["texture1d","texturecreationerror"],"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",216,{"inputs":[{"name":"f"},{"name":"uncompressedfloatformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"texture1d"}}],[11,"width","","Returns the width of that image.",216,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",216,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",216,{"inputs":[{"name":"self"}],"output":{"generics":["residenttexture","bindlesstexturesnotsupportederror"],"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",216,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["texture1dmipmap"],"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",216,{"inputs":[{"name":"self"}],"output":{"name":"texture1dmipmap"}}],[11,"clone","","",217,{"inputs":[{"name":"self"}],"output":{"name":"texture1dmipmap"}}],[11,"deref","","",217,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",217,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",217,{"inputs":[{"name":"self"}],"output":{"name":"texture1d"}}],[11,"get_level","","Returns the texture level.",217,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into","","",217,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",217,{"inputs":[{"name":"self"}],"output":{"name":"colorattachment"}}],[0,"compressed_texture1d","glium::texture","Contains the implementation of `CompressedTexture1d`.",null,null],[3,"CompressedTexture1d","glium::texture::compressed_texture1d","A compressed one-dimensional texture  containing floating-point data.",null,null],[3,"CompressedTexture1dMipmap","","Represents a single mipmap level of a `CompressedTexture1d`.",null,null],[11,"get_id","","",218,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",218,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"deref","","",218,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",150,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::compressed_texture1d","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",218,{"inputs":[{"name":"self"}],"output":{"generics":["compressedtexture1d"],"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",218,{"inputs":[{"name":"self"}],"output":{"generics":["internalformat","getformaterror"],"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",218,{"inputs":[{"name":"f"},{"name":"t"}],"output":{"generics":["compressedtexture1d","texturecreationerror"],"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",218,{"inputs":[{"name":"f"},{"name":"t"},{"name":"compressedmipmapsoption"}],"output":{"generics":["compressedtexture1d","texturecreationerror"],"name":"result"}}],[11,"with_compressed_data","","Builds a new texture with a specific format. The input data must also be of the specified compressed format.",218,null],[11,"with_format","","Builds a new texture with a specific format.",218,{"inputs":[{"name":"f"},{"name":"t"},{"name":"compressedformat"},{"name":"compressedmipmapsoption"}],"output":{"generics":["compressedtexture1d","texturecreationerror"],"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",218,{"inputs":[{"name":"f"},{"name":"compressedformat"},{"name":"compressedmipmapsoption"},{"name":"u32"}],"output":{"generics":["compressedtexture1d","texturecreationerror"],"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",218,{"inputs":[{"name":"f"},{"name":"compressedformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"compressedtexture1d"}}],[11,"width","","Returns the width of that image.",218,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",218,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"read_compressed_data","","Reads the content of the texture to RAM without decompressing it before.",218,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",218,{"inputs":[{"name":"self"}],"output":{"generics":["residenttexture","bindlesstexturesnotsupportederror"],"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",218,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["compressedtexture1dmipmap"],"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",218,{"inputs":[{"name":"self"}],"output":{"name":"compressedtexture1dmipmap"}}],[11,"clone","","",219,{"inputs":[{"name":"self"}],"output":{"name":"compressedtexture1dmipmap"}}],[11,"deref","","",219,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",219,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"read_compressed_data","","Reads the content of the texture level to RAM without decompressing it before.",219,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_texture","","Returns the corresponding texture.",219,{"inputs":[{"name":"self"}],"output":{"name":"compressedtexture1d"}}],[11,"get_level","","Returns the texture level.",219,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into","","",219,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[0,"srgb_texture1d","glium::texture","Contains the implementation of `SrgbTexture1d`.",null,null],[3,"SrgbTexture1d","glium::texture::srgb_texture1d","A one-dimensional texture  containing sRGB floating-point data.",null,null],[3,"SrgbTexture1dMipmap","","Represents a single mipmap level of a `SrgbTexture1d`.",null,null],[11,"get_id","","",220,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",220,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"deref","","",220,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",150,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::srgb_texture1d","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",220,{"inputs":[{"name":"self"}],"output":{"generics":["srgbtexture1d"],"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",220,{"inputs":[{"name":"self"}],"output":{"generics":["internalformat","getformaterror"],"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",220,{"inputs":[{"name":"f"},{"name":"t"}],"output":{"generics":["srgbtexture1d","texturecreationerror"],"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",220,{"inputs":[{"name":"f"},{"name":"t"},{"name":"mipmapsoption"}],"output":{"generics":["srgbtexture1d","texturecreationerror"],"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",220,{"inputs":[{"name":"f"},{"name":"t"},{"name":"srgbformat"},{"name":"mipmapsoption"}],"output":{"generics":["srgbtexture1d","texturecreationerror"],"name":"result"}}],[11,"empty","","Creates an empty texture.",220,{"inputs":[{"name":"f"},{"name":"u32"}],"output":{"generics":["srgbtexture1d","texturecreationerror"],"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",220,{"inputs":[{"name":"f"},{"name":"srgbformat"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"generics":["srgbtexture1d","texturecreationerror"],"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",220,{"inputs":[{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"generics":["srgbtexture1d","texturecreationerror"],"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",220,{"inputs":[{"name":"f"},{"name":"srgbformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"srgbtexture1d"}}],[11,"width","","Returns the width of that image.",220,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",220,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",220,{"inputs":[{"name":"self"}],"output":{"generics":["residenttexture","bindlesstexturesnotsupportederror"],"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",220,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["srgbtexture1dmipmap"],"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",220,{"inputs":[{"name":"self"}],"output":{"name":"srgbtexture1dmipmap"}}],[11,"clone","","",221,{"inputs":[{"name":"self"}],"output":{"name":"srgbtexture1dmipmap"}}],[11,"deref","","",221,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",221,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",221,{"inputs":[{"name":"self"}],"output":{"name":"srgbtexture1d"}}],[11,"get_level","","Returns the texture level.",221,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into","","",221,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",221,{"inputs":[{"name":"self"}],"output":{"name":"colorattachment"}}],[0,"compressed_srgb_texture1d","glium::texture","Contains the implementation of `CompressedSrgbTexture1d`.",null,null],[3,"CompressedSrgbTexture1d","glium::texture::compressed_srgb_texture1d","A compressed one-dimensional texture  containing sRGB floating-point data.",null,null],[3,"CompressedSrgbTexture1dMipmap","","Represents a single mipmap level of a `CompressedSrgbTexture1d`.",null,null],[11,"get_id","","",222,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",222,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"deref","","",222,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",150,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::compressed_srgb_texture1d","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",222,{"inputs":[{"name":"self"}],"output":{"generics":["compressedsrgbtexture1d"],"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",222,{"inputs":[{"name":"self"}],"output":{"generics":["internalformat","getformaterror"],"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",222,{"inputs":[{"name":"f"},{"name":"t"}],"output":{"generics":["compressedsrgbtexture1d","texturecreationerror"],"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",222,{"inputs":[{"name":"f"},{"name":"t"},{"name":"compressedmipmapsoption"}],"output":{"generics":["compressedsrgbtexture1d","texturecreationerror"],"name":"result"}}],[11,"with_compressed_data","","Builds a new texture with a specific format. The input data must also be of the specified compressed format.",222,null],[11,"with_format","","Builds a new texture with a specific format.",222,{"inputs":[{"name":"f"},{"name":"t"},{"name":"compressedsrgbformat"},{"name":"compressedmipmapsoption"}],"output":{"generics":["compressedsrgbtexture1d","texturecreationerror"],"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",222,{"inputs":[{"name":"f"},{"name":"compressedsrgbformat"},{"name":"compressedmipmapsoption"},{"name":"u32"}],"output":{"generics":["compressedsrgbtexture1d","texturecreationerror"],"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",222,{"inputs":[{"name":"f"},{"name":"compressedsrgbformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"compressedsrgbtexture1d"}}],[11,"width","","Returns the width of that image.",222,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",222,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"read_compressed_data","","Reads the content of the texture to RAM without decompressing it before.",222,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",222,{"inputs":[{"name":"self"}],"output":{"generics":["residenttexture","bindlesstexturesnotsupportederror"],"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",222,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["compressedsrgbtexture1dmipmap"],"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",222,{"inputs":[{"name":"self"}],"output":{"name":"compressedsrgbtexture1dmipmap"}}],[11,"clone","","",223,{"inputs":[{"name":"self"}],"output":{"name":"compressedsrgbtexture1dmipmap"}}],[11,"deref","","",223,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",223,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"read_compressed_data","","Reads the content of the texture level to RAM without decompressing it before.",223,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_texture","","Returns the corresponding texture.",223,{"inputs":[{"name":"self"}],"output":{"name":"compressedsrgbtexture1d"}}],[11,"get_level","","Returns the texture level.",223,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into","","",223,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[0,"integral_texture1d","glium::texture","Contains the implementation of `IntegralTexture1d`.",null,null],[3,"IntegralTexture1d","glium::texture::integral_texture1d","A one-dimensional texture  containing signed integral data.",null,null],[3,"IntegralTexture1dMipmap","","Represents a single mipmap level of a `IntegralTexture1d`.",null,null],[11,"get_id","","",224,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",224,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"deref","","",224,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",150,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::integral_texture1d","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",224,{"inputs":[{"name":"self"}],"output":{"generics":["integraltexture1d"],"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",224,{"inputs":[{"name":"self"}],"output":{"generics":["internalformat","getformaterror"],"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",224,{"inputs":[{"name":"f"},{"name":"t"}],"output":{"generics":["integraltexture1d","texturecreationerror"],"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",224,{"inputs":[{"name":"f"},{"name":"t"},{"name":"mipmapsoption"}],"output":{"generics":["integraltexture1d","texturecreationerror"],"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",224,{"inputs":[{"name":"f"},{"name":"t"},{"name":"uncompressedintformat"},{"name":"mipmapsoption"}],"output":{"generics":["integraltexture1d","texturecreationerror"],"name":"result"}}],[11,"empty","","Creates an empty texture.",224,{"inputs":[{"name":"f"},{"name":"u32"}],"output":{"generics":["integraltexture1d","texturecreationerror"],"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",224,{"inputs":[{"name":"f"},{"name":"uncompressedintformat"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"generics":["integraltexture1d","texturecreationerror"],"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",224,{"inputs":[{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"generics":["integraltexture1d","texturecreationerror"],"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",224,{"inputs":[{"name":"f"},{"name":"uncompressedintformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"integraltexture1d"}}],[11,"width","","Returns the width of that image.",224,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",224,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",224,{"inputs":[{"name":"self"}],"output":{"generics":["residenttexture","bindlesstexturesnotsupportederror"],"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",224,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["integraltexture1dmipmap"],"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",224,{"inputs":[{"name":"self"}],"output":{"name":"integraltexture1dmipmap"}}],[11,"clone","","",225,{"inputs":[{"name":"self"}],"output":{"name":"integraltexture1dmipmap"}}],[11,"deref","","",225,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",225,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",225,{"inputs":[{"name":"self"}],"output":{"name":"integraltexture1d"}}],[11,"get_level","","Returns the texture level.",225,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into","","",225,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",225,{"inputs":[{"name":"self"}],"output":{"name":"colorattachment"}}],[0,"unsigned_texture1d","glium::texture","Contains the implementation of `UnsignedTexture1d`.",null,null],[3,"UnsignedTexture1d","glium::texture::unsigned_texture1d","A one-dimensional texture  containing unsigned integral data.",null,null],[3,"UnsignedTexture1dMipmap","","Represents a single mipmap level of a `UnsignedTexture1d`.",null,null],[11,"get_id","","",226,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",226,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"deref","","",226,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",150,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::unsigned_texture1d","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",226,{"inputs":[{"name":"self"}],"output":{"generics":["unsignedtexture1d"],"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",226,{"inputs":[{"name":"self"}],"output":{"generics":["internalformat","getformaterror"],"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",226,{"inputs":[{"name":"f"},{"name":"t"}],"output":{"generics":["unsignedtexture1d","texturecreationerror"],"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",226,{"inputs":[{"name":"f"},{"name":"t"},{"name":"mipmapsoption"}],"output":{"generics":["unsignedtexture1d","texturecreationerror"],"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",226,{"inputs":[{"name":"f"},{"name":"t"},{"name":"uncompresseduintformat"},{"name":"mipmapsoption"}],"output":{"generics":["unsignedtexture1d","texturecreationerror"],"name":"result"}}],[11,"empty","","Creates an empty texture.",226,{"inputs":[{"name":"f"},{"name":"u32"}],"output":{"generics":["unsignedtexture1d","texturecreationerror"],"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",226,{"inputs":[{"name":"f"},{"name":"uncompresseduintformat"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"generics":["unsignedtexture1d","texturecreationerror"],"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",226,{"inputs":[{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"generics":["unsignedtexture1d","texturecreationerror"],"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",226,{"inputs":[{"name":"f"},{"name":"uncompresseduintformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"unsignedtexture1d"}}],[11,"width","","Returns the width of that image.",226,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",226,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",226,{"inputs":[{"name":"self"}],"output":{"generics":["residenttexture","bindlesstexturesnotsupportederror"],"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",226,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["unsignedtexture1dmipmap"],"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",226,{"inputs":[{"name":"self"}],"output":{"name":"unsignedtexture1dmipmap"}}],[11,"clone","","",227,{"inputs":[{"name":"self"}],"output":{"name":"unsignedtexture1dmipmap"}}],[11,"deref","","",227,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",227,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",227,{"inputs":[{"name":"self"}],"output":{"name":"unsignedtexture1d"}}],[11,"get_level","","Returns the texture level.",227,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into","","",227,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",227,{"inputs":[{"name":"self"}],"output":{"name":"colorattachment"}}],[0,"depth_texture1d","glium::texture","Contains the implementation of `DepthTexture1d`.",null,null],[3,"DepthTexture1d","glium::texture::depth_texture1d","A one-dimensional texture  containing depth data.",null,null],[3,"DepthTexture1dMipmap","","Represents a single mipmap level of a `DepthTexture1d`.",null,null],[11,"get_id","","",228,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",228,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"deref","","",228,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",150,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::depth_texture1d","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",228,{"inputs":[{"name":"self"}],"output":{"generics":["depthtexture1d"],"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",228,{"inputs":[{"name":"self"}],"output":{"generics":["internalformat","getformaterror"],"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",228,{"inputs":[{"name":"f"},{"name":"t"}],"output":{"generics":["depthtexture1d","texturecreationerror"],"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",228,{"inputs":[{"name":"f"},{"name":"t"},{"name":"mipmapsoption"}],"output":{"generics":["depthtexture1d","texturecreationerror"],"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",228,{"inputs":[{"name":"f"},{"name":"t"},{"name":"depthformat"},{"name":"mipmapsoption"}],"output":{"generics":["depthtexture1d","texturecreationerror"],"name":"result"}}],[11,"empty","","Creates an empty texture.",228,{"inputs":[{"name":"f"},{"name":"u32"}],"output":{"generics":["depthtexture1d","texturecreationerror"],"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",228,{"inputs":[{"name":"f"},{"name":"depthformat"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"generics":["depthtexture1d","texturecreationerror"],"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",228,{"inputs":[{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"generics":["depthtexture1d","texturecreationerror"],"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",228,{"inputs":[{"name":"f"},{"name":"depthformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"depthtexture1d"}}],[11,"width","","Returns the width of that image.",228,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",228,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",228,{"inputs":[{"name":"self"}],"output":{"generics":["residenttexture","bindlesstexturesnotsupportederror"],"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",228,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["depthtexture1dmipmap"],"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",228,{"inputs":[{"name":"self"}],"output":{"name":"depthtexture1dmipmap"}}],[11,"clone","","",229,{"inputs":[{"name":"self"}],"output":{"name":"depthtexture1dmipmap"}}],[11,"deref","","",229,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",229,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",229,{"inputs":[{"name":"self"}],"output":{"name":"depthtexture1d"}}],[11,"get_level","","Returns the texture level.",229,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into","","",229,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"to_depth_attachment","","",229,{"inputs":[{"name":"self"}],"output":{"name":"depthattachment"}}],[0,"stencil_texture1d","glium::texture","Contains the implementation of `StencilTexture1d`.",null,null],[3,"StencilTexture1d","glium::texture::stencil_texture1d","A one-dimensional texture  containing stencil data.",null,null],[3,"StencilTexture1dMipmap","","Represents a single mipmap level of a `StencilTexture1d`.",null,null],[11,"get_id","","",230,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",230,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"deref","","",230,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"get_internal_format","","Determines the internal format of this texture.",230,{"inputs":[{"name":"self"}],"output":{"generics":["internalformat","getformaterror"],"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",230,{"inputs":[{"name":"f"},{"name":"t"}],"output":{"generics":["stenciltexture1d","texturecreationerror"],"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",230,{"inputs":[{"name":"f"},{"name":"t"},{"name":"mipmapsoption"}],"output":{"generics":["stenciltexture1d","texturecreationerror"],"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",230,{"inputs":[{"name":"f"},{"name":"t"},{"name":"stencilformat"},{"name":"mipmapsoption"}],"output":{"generics":["stenciltexture1d","texturecreationerror"],"name":"result"}}],[11,"empty","","Creates an empty texture.",230,{"inputs":[{"name":"f"},{"name":"u32"}],"output":{"generics":["stenciltexture1d","texturecreationerror"],"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",230,{"inputs":[{"name":"f"},{"name":"stencilformat"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"generics":["stenciltexture1d","texturecreationerror"],"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",230,{"inputs":[{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"generics":["stenciltexture1d","texturecreationerror"],"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",230,{"inputs":[{"name":"f"},{"name":"stencilformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"stenciltexture1d"}}],[11,"width","","Returns the width of that image.",230,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",230,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",230,{"inputs":[{"name":"self"}],"output":{"generics":["residenttexture","bindlesstexturesnotsupportederror"],"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",230,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["stenciltexture1dmipmap"],"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",230,{"inputs":[{"name":"self"}],"output":{"name":"stenciltexture1dmipmap"}}],[11,"clone","","",231,{"inputs":[{"name":"self"}],"output":{"name":"stenciltexture1dmipmap"}}],[11,"deref","","",231,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",231,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",231,{"inputs":[{"name":"self"}],"output":{"name":"stenciltexture1d"}}],[11,"get_level","","Returns the texture level.",231,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into","","",231,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"to_stencil_attachment","","",231,{"inputs":[{"name":"self"}],"output":{"name":"stencilattachment"}}],[0,"depth_stencil_texture1d","glium::texture","Contains the implementation of `DepthStencilTexture1d`.",null,null],[3,"DepthStencilTexture1d","glium::texture::depth_stencil_texture1d","A one-dimensional texture  containing both depth and stencil data.",null,null],[3,"DepthStencilTexture1dMipmap","","Represents a single mipmap level of a `DepthStencilTexture1d`.",null,null],[11,"get_id","","",232,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",232,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"deref","","",232,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"get_internal_format","","Determines the internal format of this texture.",232,{"inputs":[{"name":"self"}],"output":{"generics":["internalformat","getformaterror"],"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",232,{"inputs":[{"name":"f"},{"name":"t"}],"output":{"generics":["depthstenciltexture1d","texturecreationerror"],"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",232,{"inputs":[{"name":"f"},{"name":"t"},{"name":"mipmapsoption"}],"output":{"generics":["depthstenciltexture1d","texturecreationerror"],"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",232,{"inputs":[{"name":"f"},{"name":"t"},{"name":"depthstencilformat"},{"name":"mipmapsoption"}],"output":{"generics":["depthstenciltexture1d","texturecreationerror"],"name":"result"}}],[11,"empty","","Creates an empty texture.",232,{"inputs":[{"name":"f"},{"name":"u32"}],"output":{"generics":["depthstenciltexture1d","texturecreationerror"],"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",232,{"inputs":[{"name":"f"},{"name":"depthstencilformat"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"generics":["depthstenciltexture1d","texturecreationerror"],"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",232,{"inputs":[{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"generics":["depthstenciltexture1d","texturecreationerror"],"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",232,{"inputs":[{"name":"f"},{"name":"depthstencilformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"depthstenciltexture1d"}}],[11,"width","","Returns the width of that image.",232,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",232,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",232,{"inputs":[{"name":"self"}],"output":{"generics":["residenttexture","bindlesstexturesnotsupportederror"],"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",232,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["depthstenciltexture1dmipmap"],"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",232,{"inputs":[{"name":"self"}],"output":{"name":"depthstenciltexture1dmipmap"}}],[11,"clone","","",233,{"inputs":[{"name":"self"}],"output":{"name":"depthstenciltexture1dmipmap"}}],[11,"deref","","",233,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",233,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",233,{"inputs":[{"name":"self"}],"output":{"name":"depthstenciltexture1d"}}],[11,"get_level","","Returns the texture level.",233,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into","","",233,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"to_depth_stencil_attachment","","",233,{"inputs":[{"name":"self"}],"output":{"name":"depthstencilattachment"}}],[0,"texture2d","glium::texture","Contains the implementation of `Texture2d`.",null,null],[3,"Texture2d","glium::texture::texture2d","A two-dimensional texture  containing floating-point data.",null,null],[3,"Texture2dMipmap","","Represents a single mipmap level of a `Texture2d`.",null,null],[11,"get_id","","",234,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",234,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"deref","","",234,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",150,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::texture2d","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",234,{"inputs":[{"name":"self"}],"output":{"generics":["texture2d"],"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",234,{"inputs":[{"name":"self"}],"output":{"generics":["internalformat","getformaterror"],"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",234,{"inputs":[{"name":"f"},{"name":"t"}],"output":{"generics":["texture2d","texturecreationerror"],"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",234,{"inputs":[{"name":"f"},{"name":"t"},{"name":"mipmapsoption"}],"output":{"generics":["texture2d","texturecreationerror"],"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",234,{"inputs":[{"name":"f"},{"name":"t"},{"name":"uncompressedfloatformat"},{"name":"mipmapsoption"}],"output":{"generics":["texture2d","texturecreationerror"],"name":"result"}}],[11,"empty","","Creates an empty texture.",234,{"inputs":[{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["texture2d","texturecreationerror"],"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",234,{"inputs":[{"name":"f"},{"name":"uncompressedfloatformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["texture2d","texturecreationerror"],"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",234,{"inputs":[{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["texture2d","texturecreationerror"],"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",234,{"inputs":[{"name":"f"},{"name":"uncompressedfloatformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"texture2d"}}],[11,"width","","Returns the width of that image.",234,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",234,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",234,null],[11,"as_surface","","Starts drawing on the texture.",234,{"inputs":[{"name":"self"}],"output":{"name":"simpleframebuffer"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",234,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"read","","Reads the content of the texture to RAM. This method may only read `U8U8U8U8` data, as it is the only format guaranteed to be supported across all OpenGL versions.",234,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"read_to_pixel_buffer","","Reads the content of the texture into a buffer in video memory. This method may only read `U8U8U8U8` data, as it is the only format guaranteed to be supported across all OpenGL versions.",234,{"inputs":[{"name":"self"}],"output":{"name":"pixelbuffer"}}],[11,"unchecked_read","","Unsafely reads the content of the texture to RAM in the specified pixel format. It is possible that the current OpenGL context does not support the given format, in which case the returned data will be invalid.",234,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"unchecked_read_to_pixel_buffer","","Unsafely reads the content of the texture into a buffer in video memory. It is possible that the current OpenGL context does not support the given format, in which case the returned data will be invalid.",234,{"inputs":[{"name":"self"}],"output":{"name":"pixelbuffer"}}],[11,"write","","Uploads some data in the texture.",234,{"inputs":[{"name":"self"},{"name":"rect"},{"name":"t"}],"output":null}],[11,"resident","","Turns the texture into a `ResidentTexture`.",234,{"inputs":[{"name":"self"}],"output":{"generics":["residenttexture","bindlesstexturesnotsupportederror"],"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",234,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["texture2dmipmap"],"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",234,{"inputs":[{"name":"self"}],"output":{"name":"texture2dmipmap"}}],[11,"clone","","",235,{"inputs":[{"name":"self"}],"output":{"name":"texture2dmipmap"}}],[11,"deref","","",235,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",235,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",235,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",235,null],[11,"write","","Uploads some data in the texture level.",235,{"inputs":[{"name":"self"},{"name":"rect"},{"name":"t"}],"output":null}],[11,"get_texture","","Returns the corresponding texture.",235,{"inputs":[{"name":"self"}],"output":{"name":"texture2d"}}],[11,"get_level","","Returns the texture level.",235,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into","","",235,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",235,{"inputs":[{"name":"self"}],"output":{"name":"colorattachment"}}],[0,"compressed_texture2d","glium::texture","Contains the implementation of `CompressedTexture2d`.",null,null],[3,"CompressedTexture2d","glium::texture::compressed_texture2d","A compressed two-dimensional texture  containing floating-point data.",null,null],[3,"CompressedTexture2dMipmap","","Represents a single mipmap level of a `CompressedTexture2d`.",null,null],[11,"get_id","","",236,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",236,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"deref","","",236,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",150,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::compressed_texture2d","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",236,{"inputs":[{"name":"self"}],"output":{"generics":["compressedtexture2d"],"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",236,{"inputs":[{"name":"self"}],"output":{"generics":["internalformat","getformaterror"],"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",236,{"inputs":[{"name":"f"},{"name":"t"}],"output":{"generics":["compressedtexture2d","texturecreationerror"],"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",236,{"inputs":[{"name":"f"},{"name":"t"},{"name":"compressedmipmapsoption"}],"output":{"generics":["compressedtexture2d","texturecreationerror"],"name":"result"}}],[11,"with_compressed_data","","Builds a new texture with a specific format. The input data must also be of the specified compressed format.",236,null],[11,"with_format","","Builds a new texture with a specific format.",236,{"inputs":[{"name":"f"},{"name":"t"},{"name":"compressedformat"},{"name":"compressedmipmapsoption"}],"output":{"generics":["compressedtexture2d","texturecreationerror"],"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",236,{"inputs":[{"name":"f"},{"name":"compressedformat"},{"name":"compressedmipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["compressedtexture2d","texturecreationerror"],"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",236,{"inputs":[{"name":"f"},{"name":"compressedformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"compressedtexture2d"}}],[11,"width","","Returns the width of that image.",236,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",236,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",236,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",236,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"read","","Reads the content of the texture to RAM. This method may only read `U8U8U8U8` data, as it is the only format guaranteed to be supported across all OpenGL versions.",236,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"read_to_pixel_buffer","","Reads the content of the texture into a buffer in video memory. This method may only read `U8U8U8U8` data, as it is the only format guaranteed to be supported across all OpenGL versions.",236,{"inputs":[{"name":"self"}],"output":{"name":"pixelbuffer"}}],[11,"unchecked_read","","Unsafely reads the content of the texture to RAM in the specified pixel format. It is possible that the current OpenGL context does not support the given format, in which case the returned data will be invalid.",236,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"unchecked_read_to_pixel_buffer","","Unsafely reads the content of the texture into a buffer in video memory. It is possible that the current OpenGL context does not support the given format, in which case the returned data will be invalid.",236,{"inputs":[{"name":"self"}],"output":{"name":"pixelbuffer"}}],[11,"read_compressed_data","","Reads the content of the texture to RAM without decompressing it before.",236,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"write","","Uploads some data in the texture.",236,{"inputs":[{"name":"self"},{"name":"rect"},{"name":"t"}],"output":null}],[11,"write_compressed_data","","Uploads some data in the texture by using a compressed format as input.",236,null],[11,"resident","","Turns the texture into a `ResidentTexture`.",236,{"inputs":[{"name":"self"}],"output":{"generics":["residenttexture","bindlesstexturesnotsupportederror"],"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",236,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["compressedtexture2dmipmap"],"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",236,{"inputs":[{"name":"self"}],"output":{"name":"compressedtexture2dmipmap"}}],[11,"clone","","",237,{"inputs":[{"name":"self"}],"output":{"name":"compressedtexture2dmipmap"}}],[11,"deref","","",237,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",237,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",237,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",237,null],[11,"write","","Uploads some data in the texture level.",237,{"inputs":[{"name":"self"},{"name":"rect"},{"name":"t"}],"output":null}],[11,"write_compressed_data","","Uploads some data in the texture level by using a compressed format as input.",237,null],[11,"read_compressed_data","","Reads the content of the texture level to RAM without decompressing it before.",237,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_texture","","Returns the corresponding texture.",237,{"inputs":[{"name":"self"}],"output":{"name":"compressedtexture2d"}}],[11,"get_level","","Returns the texture level.",237,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into","","",237,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[0,"srgb_texture2d","glium::texture","Contains the implementation of `SrgbTexture2d`.",null,null],[3,"SrgbTexture2d","glium::texture::srgb_texture2d","A two-dimensional texture  containing sRGB floating-point data.",null,null],[3,"SrgbTexture2dMipmap","","Represents a single mipmap level of a `SrgbTexture2d`.",null,null],[11,"get_id","","",238,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",238,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"deref","","",238,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",150,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::srgb_texture2d","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",238,{"inputs":[{"name":"self"}],"output":{"generics":["srgbtexture2d"],"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",238,{"inputs":[{"name":"self"}],"output":{"generics":["internalformat","getformaterror"],"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",238,{"inputs":[{"name":"f"},{"name":"t"}],"output":{"generics":["srgbtexture2d","texturecreationerror"],"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",238,{"inputs":[{"name":"f"},{"name":"t"},{"name":"mipmapsoption"}],"output":{"generics":["srgbtexture2d","texturecreationerror"],"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",238,{"inputs":[{"name":"f"},{"name":"t"},{"name":"srgbformat"},{"name":"mipmapsoption"}],"output":{"generics":["srgbtexture2d","texturecreationerror"],"name":"result"}}],[11,"empty","","Creates an empty texture.",238,{"inputs":[{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["srgbtexture2d","texturecreationerror"],"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",238,{"inputs":[{"name":"f"},{"name":"srgbformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["srgbtexture2d","texturecreationerror"],"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",238,{"inputs":[{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["srgbtexture2d","texturecreationerror"],"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",238,{"inputs":[{"name":"f"},{"name":"srgbformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"srgbtexture2d"}}],[11,"width","","Returns the width of that image.",238,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",238,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",238,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",238,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"read","","Reads the content of the texture to RAM. This method may only read `U8U8U8U8` data, as it is the only format guaranteed to be supported across all OpenGL versions.",238,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"read_to_pixel_buffer","","Reads the content of the texture into a buffer in video memory. This method may only read `U8U8U8U8` data, as it is the only format guaranteed to be supported across all OpenGL versions.",238,{"inputs":[{"name":"self"}],"output":{"name":"pixelbuffer"}}],[11,"unchecked_read","","Unsafely reads the content of the texture to RAM in the specified pixel format. It is possible that the current OpenGL context does not support the given format, in which case the returned data will be invalid.",238,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"unchecked_read_to_pixel_buffer","","Unsafely reads the content of the texture into a buffer in video memory. It is possible that the current OpenGL context does not support the given format, in which case the returned data will be invalid.",238,{"inputs":[{"name":"self"}],"output":{"name":"pixelbuffer"}}],[11,"write","","Uploads some data in the texture.",238,{"inputs":[{"name":"self"},{"name":"rect"},{"name":"t"}],"output":null}],[11,"resident","","Turns the texture into a `ResidentTexture`.",238,{"inputs":[{"name":"self"}],"output":{"generics":["residenttexture","bindlesstexturesnotsupportederror"],"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",238,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["srgbtexture2dmipmap"],"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",238,{"inputs":[{"name":"self"}],"output":{"name":"srgbtexture2dmipmap"}}],[11,"clone","","",239,{"inputs":[{"name":"self"}],"output":{"name":"srgbtexture2dmipmap"}}],[11,"deref","","",239,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",239,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",239,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",239,null],[11,"write","","Uploads some data in the texture level.",239,{"inputs":[{"name":"self"},{"name":"rect"},{"name":"t"}],"output":null}],[11,"get_texture","","Returns the corresponding texture.",239,{"inputs":[{"name":"self"}],"output":{"name":"srgbtexture2d"}}],[11,"get_level","","Returns the texture level.",239,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into","","",239,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",239,{"inputs":[{"name":"self"}],"output":{"name":"colorattachment"}}],[0,"compressed_srgb_texture2d","glium::texture","Contains the implementation of `CompressedSrgbTexture2d`.",null,null],[3,"CompressedSrgbTexture2d","glium::texture::compressed_srgb_texture2d","A compressed two-dimensional texture  containing sRGB floating-point data.",null,null],[3,"CompressedSrgbTexture2dMipmap","","Represents a single mipmap level of a `CompressedSrgbTexture2d`.",null,null],[11,"get_id","","",240,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",240,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"deref","","",240,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",150,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::compressed_srgb_texture2d","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",240,{"inputs":[{"name":"self"}],"output":{"generics":["compressedsrgbtexture2d"],"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",240,{"inputs":[{"name":"self"}],"output":{"generics":["internalformat","getformaterror"],"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",240,{"inputs":[{"name":"f"},{"name":"t"}],"output":{"generics":["compressedsrgbtexture2d","texturecreationerror"],"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",240,{"inputs":[{"name":"f"},{"name":"t"},{"name":"compressedmipmapsoption"}],"output":{"generics":["compressedsrgbtexture2d","texturecreationerror"],"name":"result"}}],[11,"with_compressed_data","","Builds a new texture with a specific format. The input data must also be of the specified compressed format.",240,null],[11,"with_format","","Builds a new texture with a specific format.",240,{"inputs":[{"name":"f"},{"name":"t"},{"name":"compressedsrgbformat"},{"name":"compressedmipmapsoption"}],"output":{"generics":["compressedsrgbtexture2d","texturecreationerror"],"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",240,{"inputs":[{"name":"f"},{"name":"compressedsrgbformat"},{"name":"compressedmipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["compressedsrgbtexture2d","texturecreationerror"],"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",240,{"inputs":[{"name":"f"},{"name":"compressedsrgbformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"compressedsrgbtexture2d"}}],[11,"width","","Returns the width of that image.",240,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",240,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",240,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",240,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"read","","Reads the content of the texture to RAM. This method may only read `U8U8U8U8` data, as it is the only format guaranteed to be supported across all OpenGL versions.",240,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"read_to_pixel_buffer","","Reads the content of the texture into a buffer in video memory. This method may only read `U8U8U8U8` data, as it is the only format guaranteed to be supported across all OpenGL versions.",240,{"inputs":[{"name":"self"}],"output":{"name":"pixelbuffer"}}],[11,"unchecked_read","","Unsafely reads the content of the texture to RAM in the specified pixel format. It is possible that the current OpenGL context does not support the given format, in which case the returned data will be invalid.",240,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"unchecked_read_to_pixel_buffer","","Unsafely reads the content of the texture into a buffer in video memory. It is possible that the current OpenGL context does not support the given format, in which case the returned data will be invalid.",240,{"inputs":[{"name":"self"}],"output":{"name":"pixelbuffer"}}],[11,"read_compressed_data","","Reads the content of the texture to RAM without decompressing it before.",240,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"write","","Uploads some data in the texture.",240,{"inputs":[{"name":"self"},{"name":"rect"},{"name":"t"}],"output":null}],[11,"write_compressed_data","","Uploads some data in the texture by using a compressed format as input.",240,null],[11,"resident","","Turns the texture into a `ResidentTexture`.",240,{"inputs":[{"name":"self"}],"output":{"generics":["residenttexture","bindlesstexturesnotsupportederror"],"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",240,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["compressedsrgbtexture2dmipmap"],"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",240,{"inputs":[{"name":"self"}],"output":{"name":"compressedsrgbtexture2dmipmap"}}],[11,"clone","","",241,{"inputs":[{"name":"self"}],"output":{"name":"compressedsrgbtexture2dmipmap"}}],[11,"deref","","",241,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",241,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",241,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",241,null],[11,"write","","Uploads some data in the texture level.",241,{"inputs":[{"name":"self"},{"name":"rect"},{"name":"t"}],"output":null}],[11,"write_compressed_data","","Uploads some data in the texture level by using a compressed format as input.",241,null],[11,"read_compressed_data","","Reads the content of the texture level to RAM without decompressing it before.",241,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_texture","","Returns the corresponding texture.",241,{"inputs":[{"name":"self"}],"output":{"name":"compressedsrgbtexture2d"}}],[11,"get_level","","Returns the texture level.",241,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into","","",241,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[0,"integral_texture2d","glium::texture","Contains the implementation of `IntegralTexture2d`.",null,null],[3,"IntegralTexture2d","glium::texture::integral_texture2d","A two-dimensional texture  containing signed integral data.",null,null],[3,"IntegralTexture2dMipmap","","Represents a single mipmap level of a `IntegralTexture2d`.",null,null],[11,"get_id","","",242,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",242,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"deref","","",242,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",150,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::integral_texture2d","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",242,{"inputs":[{"name":"self"}],"output":{"generics":["integraltexture2d"],"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",242,{"inputs":[{"name":"self"}],"output":{"generics":["internalformat","getformaterror"],"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",242,{"inputs":[{"name":"f"},{"name":"t"}],"output":{"generics":["integraltexture2d","texturecreationerror"],"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",242,{"inputs":[{"name":"f"},{"name":"t"},{"name":"mipmapsoption"}],"output":{"generics":["integraltexture2d","texturecreationerror"],"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",242,{"inputs":[{"name":"f"},{"name":"t"},{"name":"uncompressedintformat"},{"name":"mipmapsoption"}],"output":{"generics":["integraltexture2d","texturecreationerror"],"name":"result"}}],[11,"empty","","Creates an empty texture.",242,{"inputs":[{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["integraltexture2d","texturecreationerror"],"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",242,{"inputs":[{"name":"f"},{"name":"uncompressedintformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["integraltexture2d","texturecreationerror"],"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",242,{"inputs":[{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["integraltexture2d","texturecreationerror"],"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",242,{"inputs":[{"name":"f"},{"name":"uncompressedintformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"integraltexture2d"}}],[11,"width","","Returns the width of that image.",242,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",242,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",242,null],[11,"as_surface","","Starts drawing on the texture.",242,{"inputs":[{"name":"self"}],"output":{"name":"simpleframebuffer"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",242,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",242,{"inputs":[{"name":"self"}],"output":{"generics":["residenttexture","bindlesstexturesnotsupportederror"],"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",242,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["integraltexture2dmipmap"],"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",242,{"inputs":[{"name":"self"}],"output":{"name":"integraltexture2dmipmap"}}],[11,"clone","","",243,{"inputs":[{"name":"self"}],"output":{"name":"integraltexture2dmipmap"}}],[11,"deref","","",243,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",243,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",243,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",243,null],[11,"get_texture","","Returns the corresponding texture.",243,{"inputs":[{"name":"self"}],"output":{"name":"integraltexture2d"}}],[11,"get_level","","Returns the texture level.",243,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into","","",243,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",243,{"inputs":[{"name":"self"}],"output":{"name":"colorattachment"}}],[0,"unsigned_texture2d","glium::texture","Contains the implementation of `UnsignedTexture2d`.",null,null],[3,"UnsignedTexture2d","glium::texture::unsigned_texture2d","A two-dimensional texture  containing unsigned integral data.",null,null],[3,"UnsignedTexture2dMipmap","","Represents a single mipmap level of a `UnsignedTexture2d`.",null,null],[11,"get_id","","",244,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",244,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"deref","","",244,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",150,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::unsigned_texture2d","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",244,{"inputs":[{"name":"self"}],"output":{"generics":["unsignedtexture2d"],"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",244,{"inputs":[{"name":"self"}],"output":{"generics":["internalformat","getformaterror"],"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",244,{"inputs":[{"name":"f"},{"name":"t"}],"output":{"generics":["unsignedtexture2d","texturecreationerror"],"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",244,{"inputs":[{"name":"f"},{"name":"t"},{"name":"mipmapsoption"}],"output":{"generics":["unsignedtexture2d","texturecreationerror"],"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",244,{"inputs":[{"name":"f"},{"name":"t"},{"name":"uncompresseduintformat"},{"name":"mipmapsoption"}],"output":{"generics":["unsignedtexture2d","texturecreationerror"],"name":"result"}}],[11,"empty","","Creates an empty texture.",244,{"inputs":[{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["unsignedtexture2d","texturecreationerror"],"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",244,{"inputs":[{"name":"f"},{"name":"uncompresseduintformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["unsignedtexture2d","texturecreationerror"],"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",244,{"inputs":[{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["unsignedtexture2d","texturecreationerror"],"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",244,{"inputs":[{"name":"f"},{"name":"uncompresseduintformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"unsignedtexture2d"}}],[11,"width","","Returns the width of that image.",244,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",244,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",244,null],[11,"as_surface","","Starts drawing on the texture.",244,{"inputs":[{"name":"self"}],"output":{"name":"simpleframebuffer"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",244,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",244,{"inputs":[{"name":"self"}],"output":{"generics":["residenttexture","bindlesstexturesnotsupportederror"],"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",244,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["unsignedtexture2dmipmap"],"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",244,{"inputs":[{"name":"self"}],"output":{"name":"unsignedtexture2dmipmap"}}],[11,"clone","","",245,{"inputs":[{"name":"self"}],"output":{"name":"unsignedtexture2dmipmap"}}],[11,"deref","","",245,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",245,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",245,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",245,null],[11,"get_texture","","Returns the corresponding texture.",245,{"inputs":[{"name":"self"}],"output":{"name":"unsignedtexture2d"}}],[11,"get_level","","Returns the texture level.",245,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into","","",245,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",245,{"inputs":[{"name":"self"}],"output":{"name":"colorattachment"}}],[0,"depth_texture2d","glium::texture","Contains the implementation of `DepthTexture2d`.",null,null],[3,"DepthTexture2d","glium::texture::depth_texture2d","A two-dimensional texture  containing depth data.",null,null],[3,"DepthTexture2dMipmap","","Represents a single mipmap level of a `DepthTexture2d`.",null,null],[11,"get_id","","",246,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",246,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"deref","","",246,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",150,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::depth_texture2d","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",246,{"inputs":[{"name":"self"}],"output":{"generics":["depthtexture2d"],"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",246,{"inputs":[{"name":"self"}],"output":{"generics":["internalformat","getformaterror"],"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",246,{"inputs":[{"name":"f"},{"name":"t"}],"output":{"generics":["depthtexture2d","texturecreationerror"],"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",246,{"inputs":[{"name":"f"},{"name":"t"},{"name":"mipmapsoption"}],"output":{"generics":["depthtexture2d","texturecreationerror"],"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",246,{"inputs":[{"name":"f"},{"name":"t"},{"name":"depthformat"},{"name":"mipmapsoption"}],"output":{"generics":["depthtexture2d","texturecreationerror"],"name":"result"}}],[11,"empty","","Creates an empty texture.",246,{"inputs":[{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["depthtexture2d","texturecreationerror"],"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",246,{"inputs":[{"name":"f"},{"name":"depthformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["depthtexture2d","texturecreationerror"],"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",246,{"inputs":[{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["depthtexture2d","texturecreationerror"],"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",246,{"inputs":[{"name":"f"},{"name":"depthformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"depthtexture2d"}}],[11,"width","","Returns the width of that image.",246,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",246,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",246,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",246,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",246,{"inputs":[{"name":"self"}],"output":{"generics":["residenttexture","bindlesstexturesnotsupportederror"],"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",246,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["depthtexture2dmipmap"],"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",246,{"inputs":[{"name":"self"}],"output":{"name":"depthtexture2dmipmap"}}],[11,"clone","","",247,{"inputs":[{"name":"self"}],"output":{"name":"depthtexture2dmipmap"}}],[11,"deref","","",247,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",247,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",247,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",247,null],[11,"get_texture","","Returns the corresponding texture.",247,{"inputs":[{"name":"self"}],"output":{"name":"depthtexture2d"}}],[11,"get_level","","Returns the texture level.",247,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into","","",247,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"to_depth_attachment","","",247,{"inputs":[{"name":"self"}],"output":{"name":"depthattachment"}}],[0,"stencil_texture2d","glium::texture","Contains the implementation of `StencilTexture2d`.",null,null],[3,"StencilTexture2d","glium::texture::stencil_texture2d","A two-dimensional texture  containing stencil data.",null,null],[3,"StencilTexture2dMipmap","","Represents a single mipmap level of a `StencilTexture2d`.",null,null],[11,"get_id","","",248,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",248,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"deref","","",248,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"get_internal_format","","Determines the internal format of this texture.",248,{"inputs":[{"name":"self"}],"output":{"generics":["internalformat","getformaterror"],"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",248,{"inputs":[{"name":"f"},{"name":"t"}],"output":{"generics":["stenciltexture2d","texturecreationerror"],"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",248,{"inputs":[{"name":"f"},{"name":"t"},{"name":"mipmapsoption"}],"output":{"generics":["stenciltexture2d","texturecreationerror"],"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",248,{"inputs":[{"name":"f"},{"name":"t"},{"name":"stencilformat"},{"name":"mipmapsoption"}],"output":{"generics":["stenciltexture2d","texturecreationerror"],"name":"result"}}],[11,"empty","","Creates an empty texture.",248,{"inputs":[{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["stenciltexture2d","texturecreationerror"],"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",248,{"inputs":[{"name":"f"},{"name":"stencilformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["stenciltexture2d","texturecreationerror"],"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",248,{"inputs":[{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["stenciltexture2d","texturecreationerror"],"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",248,{"inputs":[{"name":"f"},{"name":"stencilformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"stenciltexture2d"}}],[11,"width","","Returns the width of that image.",248,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",248,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",248,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",248,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",248,{"inputs":[{"name":"self"}],"output":{"generics":["residenttexture","bindlesstexturesnotsupportederror"],"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",248,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["stenciltexture2dmipmap"],"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",248,{"inputs":[{"name":"self"}],"output":{"name":"stenciltexture2dmipmap"}}],[11,"clone","","",249,{"inputs":[{"name":"self"}],"output":{"name":"stenciltexture2dmipmap"}}],[11,"deref","","",249,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",249,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",249,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",249,null],[11,"get_texture","","Returns the corresponding texture.",249,{"inputs":[{"name":"self"}],"output":{"name":"stenciltexture2d"}}],[11,"get_level","","Returns the texture level.",249,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into","","",249,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"to_stencil_attachment","","",249,{"inputs":[{"name":"self"}],"output":{"name":"stencilattachment"}}],[0,"depth_stencil_texture2d","glium::texture","Contains the implementation of `DepthStencilTexture2d`.",null,null],[3,"DepthStencilTexture2d","glium::texture::depth_stencil_texture2d","A two-dimensional texture  containing both depth and stencil data.",null,null],[3,"DepthStencilTexture2dMipmap","","Represents a single mipmap level of a `DepthStencilTexture2d`.",null,null],[11,"get_id","","",250,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",250,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"deref","","",250,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"get_internal_format","","Determines the internal format of this texture.",250,{"inputs":[{"name":"self"}],"output":{"generics":["internalformat","getformaterror"],"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",250,{"inputs":[{"name":"f"},{"name":"t"}],"output":{"generics":["depthstenciltexture2d","texturecreationerror"],"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",250,{"inputs":[{"name":"f"},{"name":"t"},{"name":"mipmapsoption"}],"output":{"generics":["depthstenciltexture2d","texturecreationerror"],"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",250,{"inputs":[{"name":"f"},{"name":"t"},{"name":"depthstencilformat"},{"name":"mipmapsoption"}],"output":{"generics":["depthstenciltexture2d","texturecreationerror"],"name":"result"}}],[11,"empty","","Creates an empty texture.",250,{"inputs":[{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["depthstenciltexture2d","texturecreationerror"],"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",250,{"inputs":[{"name":"f"},{"name":"depthstencilformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["depthstenciltexture2d","texturecreationerror"],"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",250,{"inputs":[{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["depthstenciltexture2d","texturecreationerror"],"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",250,{"inputs":[{"name":"f"},{"name":"depthstencilformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"depthstenciltexture2d"}}],[11,"width","","Returns the width of that image.",250,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",250,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",250,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",250,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",250,{"inputs":[{"name":"self"}],"output":{"generics":["residenttexture","bindlesstexturesnotsupportederror"],"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",250,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["depthstenciltexture2dmipmap"],"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",250,{"inputs":[{"name":"self"}],"output":{"name":"depthstenciltexture2dmipmap"}}],[11,"clone","","",251,{"inputs":[{"name":"self"}],"output":{"name":"depthstenciltexture2dmipmap"}}],[11,"deref","","",251,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",251,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",251,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",251,null],[11,"get_texture","","Returns the corresponding texture.",251,{"inputs":[{"name":"self"}],"output":{"name":"depthstenciltexture2d"}}],[11,"get_level","","Returns the texture level.",251,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into","","",251,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"to_depth_stencil_attachment","","",251,{"inputs":[{"name":"self"}],"output":{"name":"depthstencilattachment"}}],[0,"texture2d_multisample","glium::texture","Contains the implementation of `Texture2dMultisample`.",null,null],[3,"Texture2dMultisample","glium::texture::texture2d_multisample","A two-dimensional texture  containing floating-point data.",null,null],[3,"Texture2dMultisampleMipmap","","Represents a single mipmap level of a `Texture2dMultisample`.",null,null],[11,"get_id","","",252,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",252,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"deref","","",252,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",150,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::texture2d_multisample","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",252,{"inputs":[{"name":"self"}],"output":{"generics":["texture2dmultisample"],"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",252,{"inputs":[{"name":"self"}],"output":{"generics":["internalformat","getformaterror"],"name":"result"}}],[11,"empty","","Creates an empty texture.",252,{"inputs":[{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["texture2dmultisample","texturecreationerror"],"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",252,{"inputs":[{"name":"f"},{"name":"uncompressedfloatformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["texture2dmultisample","texturecreationerror"],"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",252,{"inputs":[{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["texture2dmultisample","texturecreationerror"],"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",252,{"inputs":[{"name":"f"},{"name":"uncompressedfloatformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"texture2dmultisample"}}],[11,"width","","Returns the width of that image.",252,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",252,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",252,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",252,null],[11,"as_surface","","Starts drawing on the texture.",252,{"inputs":[{"name":"self"}],"output":{"name":"simpleframebuffer"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",252,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",252,{"inputs":[{"name":"self"}],"output":{"generics":["residenttexture","bindlesstexturesnotsupportederror"],"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",252,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["texture2dmultisamplemipmap"],"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",252,{"inputs":[{"name":"self"}],"output":{"name":"texture2dmultisamplemipmap"}}],[11,"clone","","",253,{"inputs":[{"name":"self"}],"output":{"name":"texture2dmultisamplemipmap"}}],[11,"deref","","",253,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",253,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",253,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",253,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",253,null],[11,"get_texture","","Returns the corresponding texture.",253,{"inputs":[{"name":"self"}],"output":{"name":"texture2dmultisample"}}],[11,"get_level","","Returns the texture level.",253,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into","","",253,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",253,{"inputs":[{"name":"self"}],"output":{"name":"colorattachment"}}],[0,"integral_texture2d_multisample","glium::texture","Contains the implementation of `IntegralTexture2dMultisample`.",null,null],[3,"IntegralTexture2dMultisample","glium::texture::integral_texture2d_multisample","A two-dimensional texture  containing signed integral data.",null,null],[3,"IntegralTexture2dMultisampleMipmap","","Represents a single mipmap level of a `IntegralTexture2dMultisample`.",null,null],[11,"get_id","","",254,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",254,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"deref","","",254,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",150,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::integral_texture2d_multisample","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",254,{"inputs":[{"name":"self"}],"output":{"generics":["integraltexture2dmultisample"],"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",254,{"inputs":[{"name":"self"}],"output":{"generics":["internalformat","getformaterror"],"name":"result"}}],[11,"empty","","Creates an empty texture.",254,{"inputs":[{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["integraltexture2dmultisample","texturecreationerror"],"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",254,{"inputs":[{"name":"f"},{"name":"uncompressedintformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["integraltexture2dmultisample","texturecreationerror"],"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",254,{"inputs":[{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["integraltexture2dmultisample","texturecreationerror"],"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",254,{"inputs":[{"name":"f"},{"name":"uncompressedintformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"integraltexture2dmultisample"}}],[11,"width","","Returns the width of that image.",254,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",254,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",254,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",254,null],[11,"as_surface","","Starts drawing on the texture.",254,{"inputs":[{"name":"self"}],"output":{"name":"simpleframebuffer"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",254,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",254,{"inputs":[{"name":"self"}],"output":{"generics":["residenttexture","bindlesstexturesnotsupportederror"],"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",254,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["integraltexture2dmultisamplemipmap"],"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",254,{"inputs":[{"name":"self"}],"output":{"name":"integraltexture2dmultisamplemipmap"}}],[11,"clone","","",255,{"inputs":[{"name":"self"}],"output":{"name":"integraltexture2dmultisamplemipmap"}}],[11,"deref","","",255,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",255,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",255,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",255,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",255,null],[11,"get_texture","","Returns the corresponding texture.",255,{"inputs":[{"name":"self"}],"output":{"name":"integraltexture2dmultisample"}}],[11,"get_level","","Returns the texture level.",255,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into","","",255,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",255,{"inputs":[{"name":"self"}],"output":{"name":"colorattachment"}}],[0,"srgb_texture2d_multisample","glium::texture","Contains the implementation of `SrgbTexture2dMultisample`.",null,null],[3,"SrgbTexture2dMultisample","glium::texture::srgb_texture2d_multisample","A two-dimensional texture  containing sRGB floating-point data.",null,null],[3,"SrgbTexture2dMultisampleMipmap","","Represents a single mipmap level of a `SrgbTexture2dMultisample`.",null,null],[11,"get_id","","",256,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",256,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"deref","","",256,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",150,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::srgb_texture2d_multisample","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",256,{"inputs":[{"name":"self"}],"output":{"generics":["srgbtexture2dmultisample"],"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",256,{"inputs":[{"name":"self"}],"output":{"generics":["internalformat","getformaterror"],"name":"result"}}],[11,"empty","","Creates an empty texture.",256,{"inputs":[{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["srgbtexture2dmultisample","texturecreationerror"],"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",256,{"inputs":[{"name":"f"},{"name":"srgbformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["srgbtexture2dmultisample","texturecreationerror"],"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",256,{"inputs":[{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["srgbtexture2dmultisample","texturecreationerror"],"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",256,{"inputs":[{"name":"f"},{"name":"srgbformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"srgbtexture2dmultisample"}}],[11,"width","","Returns the width of that image.",256,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",256,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",256,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",256,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",256,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",256,{"inputs":[{"name":"self"}],"output":{"generics":["residenttexture","bindlesstexturesnotsupportederror"],"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",256,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["srgbtexture2dmultisamplemipmap"],"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",256,{"inputs":[{"name":"self"}],"output":{"name":"srgbtexture2dmultisamplemipmap"}}],[11,"clone","","",257,{"inputs":[{"name":"self"}],"output":{"name":"srgbtexture2dmultisamplemipmap"}}],[11,"deref","","",257,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",257,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",257,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",257,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",257,null],[11,"get_texture","","Returns the corresponding texture.",257,{"inputs":[{"name":"self"}],"output":{"name":"srgbtexture2dmultisample"}}],[11,"get_level","","Returns the texture level.",257,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into","","",257,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",257,{"inputs":[{"name":"self"}],"output":{"name":"colorattachment"}}],[0,"unsigned_texture2d_multisample","glium::texture","Contains the implementation of `UnsignedTexture2dMultisample`.",null,null],[3,"UnsignedTexture2dMultisample","glium::texture::unsigned_texture2d_multisample","A two-dimensional texture  containing unsigned integral data.",null,null],[3,"UnsignedTexture2dMultisampleMipmap","","Represents a single mipmap level of a `UnsignedTexture2dMultisample`.",null,null],[11,"get_id","","",258,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",258,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"deref","","",258,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",150,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::unsigned_texture2d_multisample","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",258,{"inputs":[{"name":"self"}],"output":{"generics":["unsignedtexture2dmultisample"],"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",258,{"inputs":[{"name":"self"}],"output":{"generics":["internalformat","getformaterror"],"name":"result"}}],[11,"empty","","Creates an empty texture.",258,{"inputs":[{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["unsignedtexture2dmultisample","texturecreationerror"],"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",258,{"inputs":[{"name":"f"},{"name":"uncompresseduintformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["unsignedtexture2dmultisample","texturecreationerror"],"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",258,{"inputs":[{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["unsignedtexture2dmultisample","texturecreationerror"],"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",258,{"inputs":[{"name":"f"},{"name":"uncompresseduintformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"unsignedtexture2dmultisample"}}],[11,"width","","Returns the width of that image.",258,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",258,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",258,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",258,null],[11,"as_surface","","Starts drawing on the texture.",258,{"inputs":[{"name":"self"}],"output":{"name":"simpleframebuffer"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",258,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",258,{"inputs":[{"name":"self"}],"output":{"generics":["residenttexture","bindlesstexturesnotsupportederror"],"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",258,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["unsignedtexture2dmultisamplemipmap"],"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",258,{"inputs":[{"name":"self"}],"output":{"name":"unsignedtexture2dmultisamplemipmap"}}],[11,"clone","","",259,{"inputs":[{"name":"self"}],"output":{"name":"unsignedtexture2dmultisamplemipmap"}}],[11,"deref","","",259,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",259,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",259,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",259,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",259,null],[11,"get_texture","","Returns the corresponding texture.",259,{"inputs":[{"name":"self"}],"output":{"name":"unsignedtexture2dmultisample"}}],[11,"get_level","","Returns the texture level.",259,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into","","",259,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",259,{"inputs":[{"name":"self"}],"output":{"name":"colorattachment"}}],[0,"depth_texture2d_multisample","glium::texture","Contains the implementation of `DepthTexture2dMultisample`.",null,null],[3,"DepthTexture2dMultisample","glium::texture::depth_texture2d_multisample","A two-dimensional texture  containing depth data.",null,null],[3,"DepthTexture2dMultisampleMipmap","","Represents a single mipmap level of a `DepthTexture2dMultisample`.",null,null],[11,"get_id","","",260,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",260,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"deref","","",260,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",150,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::depth_texture2d_multisample","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",260,{"inputs":[{"name":"self"}],"output":{"generics":["depthtexture2dmultisample"],"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",260,{"inputs":[{"name":"self"}],"output":{"generics":["internalformat","getformaterror"],"name":"result"}}],[11,"empty","","Creates an empty texture.",260,{"inputs":[{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["depthtexture2dmultisample","texturecreationerror"],"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",260,{"inputs":[{"name":"f"},{"name":"depthformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["depthtexture2dmultisample","texturecreationerror"],"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",260,{"inputs":[{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["depthtexture2dmultisample","texturecreationerror"],"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",260,{"inputs":[{"name":"f"},{"name":"depthformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"depthtexture2dmultisample"}}],[11,"width","","Returns the width of that image.",260,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",260,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",260,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",260,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",260,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",260,{"inputs":[{"name":"self"}],"output":{"generics":["residenttexture","bindlesstexturesnotsupportederror"],"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",260,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["depthtexture2dmultisamplemipmap"],"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",260,{"inputs":[{"name":"self"}],"output":{"name":"depthtexture2dmultisamplemipmap"}}],[11,"clone","","",261,{"inputs":[{"name":"self"}],"output":{"name":"depthtexture2dmultisamplemipmap"}}],[11,"deref","","",261,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",261,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",261,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",261,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",261,null],[11,"get_texture","","Returns the corresponding texture.",261,{"inputs":[{"name":"self"}],"output":{"name":"depthtexture2dmultisample"}}],[11,"get_level","","Returns the texture level.",261,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into","","",261,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"to_depth_attachment","","",261,{"inputs":[{"name":"self"}],"output":{"name":"depthattachment"}}],[0,"stencil_texture2d_multisample","glium::texture","Contains the implementation of `StencilTexture2dMultisample`.",null,null],[3,"StencilTexture2dMultisample","glium::texture::stencil_texture2d_multisample","A two-dimensional texture  containing stencil data.",null,null],[3,"StencilTexture2dMultisampleMipmap","","Represents a single mipmap level of a `StencilTexture2dMultisample`.",null,null],[11,"get_id","","",262,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",262,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"deref","","",262,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"get_internal_format","","Determines the internal format of this texture.",262,{"inputs":[{"name":"self"}],"output":{"generics":["internalformat","getformaterror"],"name":"result"}}],[11,"empty","","Creates an empty texture.",262,{"inputs":[{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["stenciltexture2dmultisample","texturecreationerror"],"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",262,{"inputs":[{"name":"f"},{"name":"stencilformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["stenciltexture2dmultisample","texturecreationerror"],"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",262,{"inputs":[{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["stenciltexture2dmultisample","texturecreationerror"],"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",262,{"inputs":[{"name":"f"},{"name":"stencilformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"stenciltexture2dmultisample"}}],[11,"width","","Returns the width of that image.",262,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",262,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",262,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",262,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",262,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",262,{"inputs":[{"name":"self"}],"output":{"generics":["residenttexture","bindlesstexturesnotsupportederror"],"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",262,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["stenciltexture2dmultisamplemipmap"],"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",262,{"inputs":[{"name":"self"}],"output":{"name":"stenciltexture2dmultisamplemipmap"}}],[11,"clone","","",263,{"inputs":[{"name":"self"}],"output":{"name":"stenciltexture2dmultisamplemipmap"}}],[11,"deref","","",263,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",263,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",263,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",263,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",263,null],[11,"get_texture","","Returns the corresponding texture.",263,{"inputs":[{"name":"self"}],"output":{"name":"stenciltexture2dmultisample"}}],[11,"get_level","","Returns the texture level.",263,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into","","",263,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"to_stencil_attachment","","",263,{"inputs":[{"name":"self"}],"output":{"name":"stencilattachment"}}],[0,"depth_stencil_texture2d_multisample","glium::texture","Contains the implementation of `DepthStencilTexture2dMultisample`.",null,null],[3,"DepthStencilTexture2dMultisample","glium::texture::depth_stencil_texture2d_multisample","A two-dimensional texture  containing both depth and stencil data.",null,null],[3,"DepthStencilTexture2dMultisampleMipmap","","Represents a single mipmap level of a `DepthStencilTexture2dMultisample`.",null,null],[11,"get_id","","",264,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",264,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"deref","","",264,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"get_internal_format","","Determines the internal format of this texture.",264,{"inputs":[{"name":"self"}],"output":{"generics":["internalformat","getformaterror"],"name":"result"}}],[11,"empty","","Creates an empty texture.",264,{"inputs":[{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["depthstenciltexture2dmultisample","texturecreationerror"],"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",264,{"inputs":[{"name":"f"},{"name":"depthstencilformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["depthstenciltexture2dmultisample","texturecreationerror"],"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",264,{"inputs":[{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["depthstenciltexture2dmultisample","texturecreationerror"],"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",264,{"inputs":[{"name":"f"},{"name":"depthstencilformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"depthstenciltexture2dmultisample"}}],[11,"width","","Returns the width of that image.",264,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",264,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",264,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",264,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",264,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",264,{"inputs":[{"name":"self"}],"output":{"generics":["residenttexture","bindlesstexturesnotsupportederror"],"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",264,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["depthstenciltexture2dmultisamplemipmap"],"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",264,{"inputs":[{"name":"self"}],"output":{"name":"depthstenciltexture2dmultisamplemipmap"}}],[11,"clone","","",265,{"inputs":[{"name":"self"}],"output":{"name":"depthstenciltexture2dmultisamplemipmap"}}],[11,"deref","","",265,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",265,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",265,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",265,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",265,null],[11,"get_texture","","Returns the corresponding texture.",265,{"inputs":[{"name":"self"}],"output":{"name":"depthstenciltexture2dmultisample"}}],[11,"get_level","","Returns the texture level.",265,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into","","",265,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"to_depth_stencil_attachment","","",265,{"inputs":[{"name":"self"}],"output":{"name":"depthstencilattachment"}}],[0,"texture3d","glium::texture","Contains the implementation of `Texture3d`.",null,null],[3,"Texture3d","glium::texture::texture3d","A three-dimensional texture  containing floating-point data.",null,null],[3,"Texture3dMipmap","","Represents a single mipmap level of a `Texture3d`.",null,null],[11,"get_id","","",266,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",266,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"deref","","",266,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",150,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::texture3d","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",266,{"inputs":[{"name":"self"}],"output":{"generics":["texture3d"],"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",266,{"inputs":[{"name":"self"}],"output":{"generics":["internalformat","getformaterror"],"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",266,{"inputs":[{"name":"f"},{"name":"t"}],"output":{"generics":["texture3d","texturecreationerror"],"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",266,{"inputs":[{"name":"f"},{"name":"t"},{"name":"mipmapsoption"}],"output":{"generics":["texture3d","texturecreationerror"],"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",266,{"inputs":[{"name":"f"},{"name":"t"},{"name":"uncompressedfloatformat"},{"name":"mipmapsoption"}],"output":{"generics":["texture3d","texturecreationerror"],"name":"result"}}],[11,"empty","","Creates an empty texture.",266,{"inputs":[{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["texture3d","texturecreationerror"],"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",266,{"inputs":[{"name":"f"},{"name":"uncompressedfloatformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["texture3d","texturecreationerror"],"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",266,{"inputs":[{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["texture3d","texturecreationerror"],"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",266,{"inputs":[{"name":"f"},{"name":"uncompressedfloatformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"texture3d"}}],[11,"width","","Returns the width of that image.",266,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",266,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"depth","","Returns the depth of that image.",266,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width, height and depth of that image.",266,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",266,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",266,{"inputs":[{"name":"self"}],"output":{"generics":["residenttexture","bindlesstexturesnotsupportederror"],"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",266,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["texture3dmipmap"],"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",266,{"inputs":[{"name":"self"}],"output":{"name":"texture3dmipmap"}}],[11,"clone","","",267,{"inputs":[{"name":"self"}],"output":{"name":"texture3dmipmap"}}],[11,"deref","","",267,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",267,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",267,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"depth","","Returns the depth of that image.",267,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width, height and depth of that image.",267,null],[11,"get_texture","","Returns the corresponding texture.",267,{"inputs":[{"name":"self"}],"output":{"name":"texture3d"}}],[11,"get_level","","Returns the texture level.",267,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into","","",267,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",267,{"inputs":[{"name":"self"}],"output":{"name":"colorattachment"}}],[0,"compressed_texture3d","glium::texture","Contains the implementation of `CompressedTexture3d`.",null,null],[3,"CompressedTexture3d","glium::texture::compressed_texture3d","A compressed three-dimensional texture  containing floating-point data.",null,null],[3,"CompressedTexture3dMipmap","","Represents a single mipmap level of a `CompressedTexture3d`.",null,null],[11,"get_id","","",268,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",268,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"deref","","",268,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",150,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::compressed_texture3d","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",268,{"inputs":[{"name":"self"}],"output":{"generics":["compressedtexture3d"],"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",268,{"inputs":[{"name":"self"}],"output":{"generics":["internalformat","getformaterror"],"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",268,{"inputs":[{"name":"f"},{"name":"t"}],"output":{"generics":["compressedtexture3d","texturecreationerror"],"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",268,{"inputs":[{"name":"f"},{"name":"t"},{"name":"compressedmipmapsoption"}],"output":{"generics":["compressedtexture3d","texturecreationerror"],"name":"result"}}],[11,"with_compressed_data","","Builds a new texture with a specific format. The input data must also be of the specified compressed format.",268,null],[11,"with_format","","Builds a new texture with a specific format.",268,{"inputs":[{"name":"f"},{"name":"t"},{"name":"compressedformat"},{"name":"compressedmipmapsoption"}],"output":{"generics":["compressedtexture3d","texturecreationerror"],"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",268,{"inputs":[{"name":"f"},{"name":"compressedformat"},{"name":"compressedmipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["compressedtexture3d","texturecreationerror"],"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",268,{"inputs":[{"name":"f"},{"name":"compressedformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"compressedtexture3d"}}],[11,"width","","Returns the width of that image.",268,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",268,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"depth","","Returns the depth of that image.",268,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width, height and depth of that image.",268,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",268,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"read_compressed_data","","Reads the content of the texture to RAM without decompressing it before.",268,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",268,{"inputs":[{"name":"self"}],"output":{"generics":["residenttexture","bindlesstexturesnotsupportederror"],"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",268,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["compressedtexture3dmipmap"],"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",268,{"inputs":[{"name":"self"}],"output":{"name":"compressedtexture3dmipmap"}}],[11,"clone","","",269,{"inputs":[{"name":"self"}],"output":{"name":"compressedtexture3dmipmap"}}],[11,"deref","","",269,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",269,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",269,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"depth","","Returns the depth of that image.",269,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width, height and depth of that image.",269,null],[11,"read_compressed_data","","Reads the content of the texture level to RAM without decompressing it before.",269,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_texture","","Returns the corresponding texture.",269,{"inputs":[{"name":"self"}],"output":{"name":"compressedtexture3d"}}],[11,"get_level","","Returns the texture level.",269,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into","","",269,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[0,"srgb_texture3d","glium::texture","Contains the implementation of `SrgbTexture3d`.",null,null],[3,"SrgbTexture3d","glium::texture::srgb_texture3d","A three-dimensional texture  containing sRGB floating-point data.",null,null],[3,"SrgbTexture3dMipmap","","Represents a single mipmap level of a `SrgbTexture3d`.",null,null],[11,"get_id","","",270,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",270,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"deref","","",270,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",150,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::srgb_texture3d","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",270,{"inputs":[{"name":"self"}],"output":{"generics":["srgbtexture3d"],"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",270,{"inputs":[{"name":"self"}],"output":{"generics":["internalformat","getformaterror"],"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",270,{"inputs":[{"name":"f"},{"name":"t"}],"output":{"generics":["srgbtexture3d","texturecreationerror"],"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",270,{"inputs":[{"name":"f"},{"name":"t"},{"name":"mipmapsoption"}],"output":{"generics":["srgbtexture3d","texturecreationerror"],"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",270,{"inputs":[{"name":"f"},{"name":"t"},{"name":"srgbformat"},{"name":"mipmapsoption"}],"output":{"generics":["srgbtexture3d","texturecreationerror"],"name":"result"}}],[11,"empty","","Creates an empty texture.",270,{"inputs":[{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["srgbtexture3d","texturecreationerror"],"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",270,{"inputs":[{"name":"f"},{"name":"srgbformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["srgbtexture3d","texturecreationerror"],"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",270,{"inputs":[{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["srgbtexture3d","texturecreationerror"],"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",270,{"inputs":[{"name":"f"},{"name":"srgbformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"srgbtexture3d"}}],[11,"width","","Returns the width of that image.",270,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",270,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"depth","","Returns the depth of that image.",270,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width, height and depth of that image.",270,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",270,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",270,{"inputs":[{"name":"self"}],"output":{"generics":["residenttexture","bindlesstexturesnotsupportederror"],"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",270,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["srgbtexture3dmipmap"],"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",270,{"inputs":[{"name":"self"}],"output":{"name":"srgbtexture3dmipmap"}}],[11,"clone","","",271,{"inputs":[{"name":"self"}],"output":{"name":"srgbtexture3dmipmap"}}],[11,"deref","","",271,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",271,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",271,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"depth","","Returns the depth of that image.",271,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width, height and depth of that image.",271,null],[11,"get_texture","","Returns the corresponding texture.",271,{"inputs":[{"name":"self"}],"output":{"name":"srgbtexture3d"}}],[11,"get_level","","Returns the texture level.",271,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into","","",271,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",271,{"inputs":[{"name":"self"}],"output":{"name":"colorattachment"}}],[0,"compressed_srgb_texture3d","glium::texture","Contains the implementation of `CompressedSrgbTexture3d`.",null,null],[3,"CompressedSrgbTexture3d","glium::texture::compressed_srgb_texture3d","A compressed three-dimensional texture  containing sRGB floating-point data.",null,null],[3,"CompressedSrgbTexture3dMipmap","","Represents a single mipmap level of a `CompressedSrgbTexture3d`.",null,null],[11,"get_id","","",272,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",272,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"deref","","",272,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",150,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::compressed_srgb_texture3d","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",272,{"inputs":[{"name":"self"}],"output":{"generics":["compressedsrgbtexture3d"],"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",272,{"inputs":[{"name":"self"}],"output":{"generics":["internalformat","getformaterror"],"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",272,{"inputs":[{"name":"f"},{"name":"t"}],"output":{"generics":["compressedsrgbtexture3d","texturecreationerror"],"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",272,{"inputs":[{"name":"f"},{"name":"t"},{"name":"compressedmipmapsoption"}],"output":{"generics":["compressedsrgbtexture3d","texturecreationerror"],"name":"result"}}],[11,"with_compressed_data","","Builds a new texture with a specific format. The input data must also be of the specified compressed format.",272,null],[11,"with_format","","Builds a new texture with a specific format.",272,{"inputs":[{"name":"f"},{"name":"t"},{"name":"compressedsrgbformat"},{"name":"compressedmipmapsoption"}],"output":{"generics":["compressedsrgbtexture3d","texturecreationerror"],"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",272,{"inputs":[{"name":"f"},{"name":"compressedsrgbformat"},{"name":"compressedmipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["compressedsrgbtexture3d","texturecreationerror"],"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",272,{"inputs":[{"name":"f"},{"name":"compressedsrgbformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"compressedsrgbtexture3d"}}],[11,"width","","Returns the width of that image.",272,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",272,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"depth","","Returns the depth of that image.",272,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width, height and depth of that image.",272,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",272,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"read_compressed_data","","Reads the content of the texture to RAM without decompressing it before.",272,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",272,{"inputs":[{"name":"self"}],"output":{"generics":["residenttexture","bindlesstexturesnotsupportederror"],"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",272,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["compressedsrgbtexture3dmipmap"],"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",272,{"inputs":[{"name":"self"}],"output":{"name":"compressedsrgbtexture3dmipmap"}}],[11,"clone","","",273,{"inputs":[{"name":"self"}],"output":{"name":"compressedsrgbtexture3dmipmap"}}],[11,"deref","","",273,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",273,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",273,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"depth","","Returns the depth of that image.",273,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width, height and depth of that image.",273,null],[11,"read_compressed_data","","Reads the content of the texture level to RAM without decompressing it before.",273,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_texture","","Returns the corresponding texture.",273,{"inputs":[{"name":"self"}],"output":{"name":"compressedsrgbtexture3d"}}],[11,"get_level","","Returns the texture level.",273,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into","","",273,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[0,"integral_texture3d","glium::texture","Contains the implementation of `IntegralTexture3d`.",null,null],[3,"IntegralTexture3d","glium::texture::integral_texture3d","A three-dimensional texture  containing signed integral data.",null,null],[3,"IntegralTexture3dMipmap","","Represents a single mipmap level of a `IntegralTexture3d`.",null,null],[11,"get_id","","",274,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",274,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"deref","","",274,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",150,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::integral_texture3d","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",274,{"inputs":[{"name":"self"}],"output":{"generics":["integraltexture3d"],"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",274,{"inputs":[{"name":"self"}],"output":{"generics":["internalformat","getformaterror"],"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",274,{"inputs":[{"name":"f"},{"name":"t"}],"output":{"generics":["integraltexture3d","texturecreationerror"],"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",274,{"inputs":[{"name":"f"},{"name":"t"},{"name":"mipmapsoption"}],"output":{"generics":["integraltexture3d","texturecreationerror"],"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",274,{"inputs":[{"name":"f"},{"name":"t"},{"name":"uncompressedintformat"},{"name":"mipmapsoption"}],"output":{"generics":["integraltexture3d","texturecreationerror"],"name":"result"}}],[11,"empty","","Creates an empty texture.",274,{"inputs":[{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["integraltexture3d","texturecreationerror"],"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",274,{"inputs":[{"name":"f"},{"name":"uncompressedintformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["integraltexture3d","texturecreationerror"],"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",274,{"inputs":[{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["integraltexture3d","texturecreationerror"],"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",274,{"inputs":[{"name":"f"},{"name":"uncompressedintformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"integraltexture3d"}}],[11,"width","","Returns the width of that image.",274,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",274,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"depth","","Returns the depth of that image.",274,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width, height and depth of that image.",274,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",274,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",274,{"inputs":[{"name":"self"}],"output":{"generics":["residenttexture","bindlesstexturesnotsupportederror"],"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",274,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["integraltexture3dmipmap"],"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",274,{"inputs":[{"name":"self"}],"output":{"name":"integraltexture3dmipmap"}}],[11,"clone","","",275,{"inputs":[{"name":"self"}],"output":{"name":"integraltexture3dmipmap"}}],[11,"deref","","",275,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",275,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",275,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"depth","","Returns the depth of that image.",275,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width, height and depth of that image.",275,null],[11,"get_texture","","Returns the corresponding texture.",275,{"inputs":[{"name":"self"}],"output":{"name":"integraltexture3d"}}],[11,"get_level","","Returns the texture level.",275,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into","","",275,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",275,{"inputs":[{"name":"self"}],"output":{"name":"colorattachment"}}],[0,"unsigned_texture3d","glium::texture","Contains the implementation of `UnsignedTexture3d`.",null,null],[3,"UnsignedTexture3d","glium::texture::unsigned_texture3d","A three-dimensional texture  containing unsigned integral data.",null,null],[3,"UnsignedTexture3dMipmap","","Represents a single mipmap level of a `UnsignedTexture3d`.",null,null],[11,"get_id","","",276,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",276,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"deref","","",276,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",150,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::unsigned_texture3d","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",276,{"inputs":[{"name":"self"}],"output":{"generics":["unsignedtexture3d"],"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",276,{"inputs":[{"name":"self"}],"output":{"generics":["internalformat","getformaterror"],"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",276,{"inputs":[{"name":"f"},{"name":"t"}],"output":{"generics":["unsignedtexture3d","texturecreationerror"],"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",276,{"inputs":[{"name":"f"},{"name":"t"},{"name":"mipmapsoption"}],"output":{"generics":["unsignedtexture3d","texturecreationerror"],"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",276,{"inputs":[{"name":"f"},{"name":"t"},{"name":"uncompresseduintformat"},{"name":"mipmapsoption"}],"output":{"generics":["unsignedtexture3d","texturecreationerror"],"name":"result"}}],[11,"empty","","Creates an empty texture.",276,{"inputs":[{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["unsignedtexture3d","texturecreationerror"],"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",276,{"inputs":[{"name":"f"},{"name":"uncompresseduintformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["unsignedtexture3d","texturecreationerror"],"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",276,{"inputs":[{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["unsignedtexture3d","texturecreationerror"],"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",276,{"inputs":[{"name":"f"},{"name":"uncompresseduintformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"unsignedtexture3d"}}],[11,"width","","Returns the width of that image.",276,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",276,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"depth","","Returns the depth of that image.",276,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width, height and depth of that image.",276,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",276,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",276,{"inputs":[{"name":"self"}],"output":{"generics":["residenttexture","bindlesstexturesnotsupportederror"],"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",276,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["unsignedtexture3dmipmap"],"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",276,{"inputs":[{"name":"self"}],"output":{"name":"unsignedtexture3dmipmap"}}],[11,"clone","","",277,{"inputs":[{"name":"self"}],"output":{"name":"unsignedtexture3dmipmap"}}],[11,"deref","","",277,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",277,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",277,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"depth","","Returns the depth of that image.",277,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width, height and depth of that image.",277,null],[11,"get_texture","","Returns the corresponding texture.",277,{"inputs":[{"name":"self"}],"output":{"name":"unsignedtexture3d"}}],[11,"get_level","","Returns the texture level.",277,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into","","",277,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",277,{"inputs":[{"name":"self"}],"output":{"name":"colorattachment"}}],[0,"depth_texture3d","glium::texture","Contains the implementation of `DepthTexture3d`.",null,null],[3,"DepthTexture3d","glium::texture::depth_texture3d","A three-dimensional texture  containing depth data.",null,null],[3,"DepthTexture3dMipmap","","Represents a single mipmap level of a `DepthTexture3d`.",null,null],[11,"get_id","","",278,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",278,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"deref","","",278,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",150,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::depth_texture3d","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",278,{"inputs":[{"name":"self"}],"output":{"generics":["depthtexture3d"],"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",278,{"inputs":[{"name":"self"}],"output":{"generics":["internalformat","getformaterror"],"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",278,{"inputs":[{"name":"f"},{"name":"t"}],"output":{"generics":["depthtexture3d","texturecreationerror"],"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",278,{"inputs":[{"name":"f"},{"name":"t"},{"name":"mipmapsoption"}],"output":{"generics":["depthtexture3d","texturecreationerror"],"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",278,{"inputs":[{"name":"f"},{"name":"t"},{"name":"depthformat"},{"name":"mipmapsoption"}],"output":{"generics":["depthtexture3d","texturecreationerror"],"name":"result"}}],[11,"empty","","Creates an empty texture.",278,{"inputs":[{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["depthtexture3d","texturecreationerror"],"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",278,{"inputs":[{"name":"f"},{"name":"depthformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["depthtexture3d","texturecreationerror"],"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",278,{"inputs":[{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["depthtexture3d","texturecreationerror"],"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",278,{"inputs":[{"name":"f"},{"name":"depthformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"depthtexture3d"}}],[11,"width","","Returns the width of that image.",278,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",278,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"depth","","Returns the depth of that image.",278,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width, height and depth of that image.",278,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",278,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",278,{"inputs":[{"name":"self"}],"output":{"generics":["residenttexture","bindlesstexturesnotsupportederror"],"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",278,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["depthtexture3dmipmap"],"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",278,{"inputs":[{"name":"self"}],"output":{"name":"depthtexture3dmipmap"}}],[11,"clone","","",279,{"inputs":[{"name":"self"}],"output":{"name":"depthtexture3dmipmap"}}],[11,"deref","","",279,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",279,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",279,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"depth","","Returns the depth of that image.",279,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width, height and depth of that image.",279,null],[11,"get_texture","","Returns the corresponding texture.",279,{"inputs":[{"name":"self"}],"output":{"name":"depthtexture3d"}}],[11,"get_level","","Returns the texture level.",279,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into","","",279,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"to_depth_attachment","","",279,{"inputs":[{"name":"self"}],"output":{"name":"depthattachment"}}],[0,"depth_stencil_texture3d","glium::texture","Contains the implementation of `DepthStencilTexture3d`.",null,null],[3,"DepthStencilTexture3d","glium::texture::depth_stencil_texture3d","A three-dimensional texture  containing both depth and stencil data.",null,null],[3,"DepthStencilTexture3dMipmap","","Represents a single mipmap level of a `DepthStencilTexture3d`.",null,null],[11,"get_id","","",280,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",280,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"deref","","",280,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"get_internal_format","","Determines the internal format of this texture.",280,{"inputs":[{"name":"self"}],"output":{"generics":["internalformat","getformaterror"],"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",280,{"inputs":[{"name":"f"},{"name":"t"}],"output":{"generics":["depthstenciltexture3d","texturecreationerror"],"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",280,{"inputs":[{"name":"f"},{"name":"t"},{"name":"mipmapsoption"}],"output":{"generics":["depthstenciltexture3d","texturecreationerror"],"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",280,{"inputs":[{"name":"f"},{"name":"t"},{"name":"depthstencilformat"},{"name":"mipmapsoption"}],"output":{"generics":["depthstenciltexture3d","texturecreationerror"],"name":"result"}}],[11,"empty","","Creates an empty texture.",280,{"inputs":[{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["depthstenciltexture3d","texturecreationerror"],"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",280,{"inputs":[{"name":"f"},{"name":"depthstencilformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["depthstenciltexture3d","texturecreationerror"],"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",280,{"inputs":[{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["depthstenciltexture3d","texturecreationerror"],"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",280,{"inputs":[{"name":"f"},{"name":"depthstencilformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"depthstenciltexture3d"}}],[11,"width","","Returns the width of that image.",280,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",280,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"depth","","Returns the depth of that image.",280,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width, height and depth of that image.",280,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",280,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",280,{"inputs":[{"name":"self"}],"output":{"generics":["residenttexture","bindlesstexturesnotsupportederror"],"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",280,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["depthstenciltexture3dmipmap"],"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",280,{"inputs":[{"name":"self"}],"output":{"name":"depthstenciltexture3dmipmap"}}],[11,"clone","","",281,{"inputs":[{"name":"self"}],"output":{"name":"depthstenciltexture3dmipmap"}}],[11,"deref","","",281,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",281,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",281,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"depth","","Returns the depth of that image.",281,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width, height and depth of that image.",281,null],[11,"get_texture","","Returns the corresponding texture.",281,{"inputs":[{"name":"self"}],"output":{"name":"depthstenciltexture3d"}}],[11,"get_level","","Returns the texture level.",281,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into","","",281,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"to_depth_stencil_attachment","","",281,{"inputs":[{"name":"self"}],"output":{"name":"depthstencilattachment"}}],[0,"texture1d_array","glium::texture","Contains the implementation of `Texture1dArray`.",null,null],[3,"Texture1dArray","glium::texture::texture1d_array","An array of one-dimensional textures  containing floating-point data.",null,null],[3,"Texture1dArrayLayer","","Represents a single layer of a `Texture1dArray`.",null,null],[3,"Texture1dArrayMipmap","","Represents a single mipmap level of a `Texture1dArray`.",null,null],[3,"Texture1dArrayLayerMipmap","","Represents a single layer of a mipmap level of a `Texture1dArray`.",null,null],[11,"get_id","","",282,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",282,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"deref","","",282,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",150,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::texture1d_array","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",282,{"inputs":[{"name":"self"}],"output":{"generics":["texture1darray"],"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",282,{"inputs":[{"name":"self"}],"output":{"generics":["internalformat","getformaterror"],"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",282,{"inputs":[{"name":"f"},{"name":"vec"}],"output":{"generics":["texture1darray","texturecreationerror"],"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",282,{"inputs":[{"name":"f"},{"name":"vec"},{"name":"mipmapsoption"}],"output":{"generics":["texture1darray","texturecreationerror"],"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",282,{"inputs":[{"name":"f"},{"name":"vec"},{"name":"uncompressedfloatformat"},{"name":"mipmapsoption"}],"output":{"generics":["texture1darray","texturecreationerror"],"name":"result"}}],[11,"empty","","Creates an empty texture.",282,{"inputs":[{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["texture1darray","texturecreationerror"],"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",282,{"inputs":[{"name":"f"},{"name":"uncompressedfloatformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["texture1darray","texturecreationerror"],"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",282,{"inputs":[{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["texture1darray","texturecreationerror"],"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",282,{"inputs":[{"name":"f"},{"name":"uncompressedfloatformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"texture1darray"}}],[11,"width","","Returns the width of that image.",282,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",282,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",282,{"inputs":[{"name":"self"}],"output":{"generics":["residenttexture","bindlesstexturesnotsupportederror"],"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",282,{"inputs":[{"name":"self"}],"output":{"name":"texture1darraylayer"}}],[11,"layer","","Access a single layer of this texture.",282,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["texture1darraylayer"],"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",282,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["texture1darraymipmap"],"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",282,{"inputs":[{"name":"self"}],"output":{"name":"texture1darraymipmap"}}],[11,"clone","","",283,{"inputs":[{"name":"self"}],"output":{"name":"texture1darraylayer"}}],[11,"width","","Returns the width of that image.",283,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",283,{"inputs":[{"name":"self"}],"output":{"name":"texture1darray"}}],[11,"get_layer","","Returns the layer index.",283,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",283,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",283,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["texture1darraylayermipmap"],"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",283,{"inputs":[{"name":"self"}],"output":{"name":"texture1darraylayermipmap"}}],[11,"clone","","",284,{"inputs":[{"name":"self"}],"output":{"name":"texture1darraymipmap"}}],[11,"deref","","",284,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",284,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",284,{"inputs":[{"name":"self"}],"output":{"name":"texture1darray"}}],[11,"get_level","","Returns the texture level.",284,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",284,{"inputs":[{"name":"self"}],"output":{"name":"texture1darraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",284,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["texture1darraylayermipmap"],"name":"option"}}],[11,"clone","","",285,{"inputs":[{"name":"self"}],"output":{"name":"texture1darraylayermipmap"}}],[11,"width","","Returns the width of that image.",285,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into","","",285,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",285,{"inputs":[{"name":"self"}],"output":{"name":"colorattachment"}}],[0,"compressed_texture1d_array","glium::texture","Contains the implementation of `CompressedTexture1dArray`.",null,null],[3,"CompressedTexture1dArray","glium::texture::compressed_texture1d_array","An array of compressed one-dimensional textures  containing floating-point data.",null,null],[3,"CompressedTexture1dArrayLayer","","Represents a single layer of a `CompressedTexture1dArray`.",null,null],[3,"CompressedTexture1dArrayMipmap","","Represents a single mipmap level of a `CompressedTexture1dArray`.",null,null],[3,"CompressedTexture1dArrayLayerMipmap","","Represents a single layer of a mipmap level of a `CompressedTexture1dArray`.",null,null],[11,"get_id","","",286,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",286,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"deref","","",286,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",150,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::compressed_texture1d_array","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",286,{"inputs":[{"name":"self"}],"output":{"generics":["compressedtexture1darray"],"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",286,{"inputs":[{"name":"self"}],"output":{"generics":["internalformat","getformaterror"],"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",286,{"inputs":[{"name":"f"},{"name":"vec"}],"output":{"generics":["compressedtexture1darray","texturecreationerror"],"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",286,{"inputs":[{"name":"f"},{"name":"vec"},{"name":"compressedmipmapsoption"}],"output":{"generics":["compressedtexture1darray","texturecreationerror"],"name":"result"}}],[11,"with_compressed_data","","Builds a new texture with a specific format. The input data must also be of the specified compressed format.",286,{"inputs":[{"name":"f"},{"name":"vec"},{"name":"u32"},{"name":"u32"},{"name":"compressedformat"},{"name":"compressedmipmapsoption"}],"output":{"generics":["compressedtexture1darray","texturecreationerror"],"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",286,{"inputs":[{"name":"f"},{"name":"vec"},{"name":"compressedformat"},{"name":"compressedmipmapsoption"}],"output":{"generics":["compressedtexture1darray","texturecreationerror"],"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",286,{"inputs":[{"name":"f"},{"name":"compressedformat"},{"name":"compressedmipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["compressedtexture1darray","texturecreationerror"],"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",286,{"inputs":[{"name":"f"},{"name":"compressedformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"compressedtexture1darray"}}],[11,"width","","Returns the width of that image.",286,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",286,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",286,{"inputs":[{"name":"self"}],"output":{"generics":["residenttexture","bindlesstexturesnotsupportederror"],"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",286,{"inputs":[{"name":"self"}],"output":{"name":"compressedtexture1darraylayer"}}],[11,"layer","","Access a single layer of this texture.",286,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["compressedtexture1darraylayer"],"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",286,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["compressedtexture1darraymipmap"],"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",286,{"inputs":[{"name":"self"}],"output":{"name":"compressedtexture1darraymipmap"}}],[11,"clone","","",287,{"inputs":[{"name":"self"}],"output":{"name":"compressedtexture1darraylayer"}}],[11,"width","","Returns the width of that image.",287,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",287,{"inputs":[{"name":"self"}],"output":{"name":"compressedtexture1darray"}}],[11,"get_layer","","Returns the layer index.",287,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",287,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",287,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["compressedtexture1darraylayermipmap"],"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",287,{"inputs":[{"name":"self"}],"output":{"name":"compressedtexture1darraylayermipmap"}}],[11,"clone","","",288,{"inputs":[{"name":"self"}],"output":{"name":"compressedtexture1darraymipmap"}}],[11,"deref","","",288,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",288,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",288,{"inputs":[{"name":"self"}],"output":{"name":"compressedtexture1darray"}}],[11,"get_level","","Returns the texture level.",288,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",288,{"inputs":[{"name":"self"}],"output":{"name":"compressedtexture1darraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",288,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["compressedtexture1darraylayermipmap"],"name":"option"}}],[11,"clone","","",289,{"inputs":[{"name":"self"}],"output":{"name":"compressedtexture1darraylayermipmap"}}],[11,"width","","Returns the width of that image.",289,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into","","",289,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[0,"srgb_texture1d_array","glium::texture","Contains the implementation of `SrgbTexture1dArray`.",null,null],[3,"SrgbTexture1dArray","glium::texture::srgb_texture1d_array","An array of one-dimensional textures  containing sRGB floating-point data.",null,null],[3,"SrgbTexture1dArrayLayer","","Represents a single layer of a `SrgbTexture1dArray`.",null,null],[3,"SrgbTexture1dArrayMipmap","","Represents a single mipmap level of a `SrgbTexture1dArray`.",null,null],[3,"SrgbTexture1dArrayLayerMipmap","","Represents a single layer of a mipmap level of a `SrgbTexture1dArray`.",null,null],[11,"get_id","","",290,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",290,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"deref","","",290,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",150,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::srgb_texture1d_array","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",290,{"inputs":[{"name":"self"}],"output":{"generics":["srgbtexture1darray"],"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",290,{"inputs":[{"name":"self"}],"output":{"generics":["internalformat","getformaterror"],"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",290,{"inputs":[{"name":"f"},{"name":"vec"}],"output":{"generics":["srgbtexture1darray","texturecreationerror"],"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",290,{"inputs":[{"name":"f"},{"name":"vec"},{"name":"mipmapsoption"}],"output":{"generics":["srgbtexture1darray","texturecreationerror"],"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",290,{"inputs":[{"name":"f"},{"name":"vec"},{"name":"srgbformat"},{"name":"mipmapsoption"}],"output":{"generics":["srgbtexture1darray","texturecreationerror"],"name":"result"}}],[11,"empty","","Creates an empty texture.",290,{"inputs":[{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["srgbtexture1darray","texturecreationerror"],"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",290,{"inputs":[{"name":"f"},{"name":"srgbformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["srgbtexture1darray","texturecreationerror"],"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",290,{"inputs":[{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["srgbtexture1darray","texturecreationerror"],"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",290,{"inputs":[{"name":"f"},{"name":"srgbformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"srgbtexture1darray"}}],[11,"width","","Returns the width of that image.",290,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",290,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",290,{"inputs":[{"name":"self"}],"output":{"generics":["residenttexture","bindlesstexturesnotsupportederror"],"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",290,{"inputs":[{"name":"self"}],"output":{"name":"srgbtexture1darraylayer"}}],[11,"layer","","Access a single layer of this texture.",290,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["srgbtexture1darraylayer"],"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",290,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["srgbtexture1darraymipmap"],"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",290,{"inputs":[{"name":"self"}],"output":{"name":"srgbtexture1darraymipmap"}}],[11,"clone","","",291,{"inputs":[{"name":"self"}],"output":{"name":"srgbtexture1darraylayer"}}],[11,"width","","Returns the width of that image.",291,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",291,{"inputs":[{"name":"self"}],"output":{"name":"srgbtexture1darray"}}],[11,"get_layer","","Returns the layer index.",291,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",291,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",291,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["srgbtexture1darraylayermipmap"],"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",291,{"inputs":[{"name":"self"}],"output":{"name":"srgbtexture1darraylayermipmap"}}],[11,"clone","","",292,{"inputs":[{"name":"self"}],"output":{"name":"srgbtexture1darraymipmap"}}],[11,"deref","","",292,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",292,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",292,{"inputs":[{"name":"self"}],"output":{"name":"srgbtexture1darray"}}],[11,"get_level","","Returns the texture level.",292,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",292,{"inputs":[{"name":"self"}],"output":{"name":"srgbtexture1darraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",292,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["srgbtexture1darraylayermipmap"],"name":"option"}}],[11,"clone","","",293,{"inputs":[{"name":"self"}],"output":{"name":"srgbtexture1darraylayermipmap"}}],[11,"width","","Returns the width of that image.",293,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into","","",293,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",293,{"inputs":[{"name":"self"}],"output":{"name":"colorattachment"}}],[0,"compressed_srgb_texture1d_array","glium::texture","Contains the implementation of `CompressedSrgbTexture1dArray`.",null,null],[3,"CompressedSrgbTexture1dArray","glium::texture::compressed_srgb_texture1d_array","An array of compressed one-dimensional textures  containing sRGB floating-point data.",null,null],[3,"CompressedSrgbTexture1dArrayLayer","","Represents a single layer of a `CompressedSrgbTexture1dArray`.",null,null],[3,"CompressedSrgbTexture1dArrayMipmap","","Represents a single mipmap level of a `CompressedSrgbTexture1dArray`.",null,null],[3,"CompressedSrgbTexture1dArrayLayerMipmap","","Represents a single layer of a mipmap level of a `CompressedSrgbTexture1dArray`.",null,null],[11,"get_id","","",294,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",294,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"deref","","",294,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",150,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::compressed_srgb_texture1d_array","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",294,{"inputs":[{"name":"self"}],"output":{"generics":["compressedsrgbtexture1darray"],"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",294,{"inputs":[{"name":"self"}],"output":{"generics":["internalformat","getformaterror"],"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",294,{"inputs":[{"name":"f"},{"name":"vec"}],"output":{"generics":["compressedsrgbtexture1darray","texturecreationerror"],"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",294,{"inputs":[{"name":"f"},{"name":"vec"},{"name":"compressedmipmapsoption"}],"output":{"generics":["compressedsrgbtexture1darray","texturecreationerror"],"name":"result"}}],[11,"with_compressed_data","","Builds a new texture with a specific format. The input data must also be of the specified compressed format.",294,{"inputs":[{"name":"f"},{"name":"vec"},{"name":"u32"},{"name":"u32"},{"name":"compressedsrgbformat"},{"name":"compressedmipmapsoption"}],"output":{"generics":["compressedsrgbtexture1darray","texturecreationerror"],"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",294,{"inputs":[{"name":"f"},{"name":"vec"},{"name":"compressedsrgbformat"},{"name":"compressedmipmapsoption"}],"output":{"generics":["compressedsrgbtexture1darray","texturecreationerror"],"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",294,{"inputs":[{"name":"f"},{"name":"compressedsrgbformat"},{"name":"compressedmipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["compressedsrgbtexture1darray","texturecreationerror"],"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",294,{"inputs":[{"name":"f"},{"name":"compressedsrgbformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"compressedsrgbtexture1darray"}}],[11,"width","","Returns the width of that image.",294,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",294,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",294,{"inputs":[{"name":"self"}],"output":{"generics":["residenttexture","bindlesstexturesnotsupportederror"],"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",294,{"inputs":[{"name":"self"}],"output":{"name":"compressedsrgbtexture1darraylayer"}}],[11,"layer","","Access a single layer of this texture.",294,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["compressedsrgbtexture1darraylayer"],"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",294,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["compressedsrgbtexture1darraymipmap"],"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",294,{"inputs":[{"name":"self"}],"output":{"name":"compressedsrgbtexture1darraymipmap"}}],[11,"clone","","",295,{"inputs":[{"name":"self"}],"output":{"name":"compressedsrgbtexture1darraylayer"}}],[11,"width","","Returns the width of that image.",295,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",295,{"inputs":[{"name":"self"}],"output":{"name":"compressedsrgbtexture1darray"}}],[11,"get_layer","","Returns the layer index.",295,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",295,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",295,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["compressedsrgbtexture1darraylayermipmap"],"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",295,{"inputs":[{"name":"self"}],"output":{"name":"compressedsrgbtexture1darraylayermipmap"}}],[11,"clone","","",296,{"inputs":[{"name":"self"}],"output":{"name":"compressedsrgbtexture1darraymipmap"}}],[11,"deref","","",296,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",296,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",296,{"inputs":[{"name":"self"}],"output":{"name":"compressedsrgbtexture1darray"}}],[11,"get_level","","Returns the texture level.",296,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",296,{"inputs":[{"name":"self"}],"output":{"name":"compressedsrgbtexture1darraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",296,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["compressedsrgbtexture1darraylayermipmap"],"name":"option"}}],[11,"clone","","",297,{"inputs":[{"name":"self"}],"output":{"name":"compressedsrgbtexture1darraylayermipmap"}}],[11,"width","","Returns the width of that image.",297,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into","","",297,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[0,"integral_texture1d_array","glium::texture","Contains the implementation of `IntegralTexture1dArray`.",null,null],[3,"IntegralTexture1dArray","glium::texture::integral_texture1d_array","An array of one-dimensional textures  containing signed integral data.",null,null],[3,"IntegralTexture1dArrayLayer","","Represents a single layer of a `IntegralTexture1dArray`.",null,null],[3,"IntegralTexture1dArrayMipmap","","Represents a single mipmap level of a `IntegralTexture1dArray`.",null,null],[3,"IntegralTexture1dArrayLayerMipmap","","Represents a single layer of a mipmap level of a `IntegralTexture1dArray`.",null,null],[11,"get_id","","",298,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",298,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"deref","","",298,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",150,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::integral_texture1d_array","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",298,{"inputs":[{"name":"self"}],"output":{"generics":["integraltexture1darray"],"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",298,{"inputs":[{"name":"self"}],"output":{"generics":["internalformat","getformaterror"],"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",298,{"inputs":[{"name":"f"},{"name":"vec"}],"output":{"generics":["integraltexture1darray","texturecreationerror"],"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",298,{"inputs":[{"name":"f"},{"name":"vec"},{"name":"mipmapsoption"}],"output":{"generics":["integraltexture1darray","texturecreationerror"],"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",298,{"inputs":[{"name":"f"},{"name":"vec"},{"name":"uncompressedintformat"},{"name":"mipmapsoption"}],"output":{"generics":["integraltexture1darray","texturecreationerror"],"name":"result"}}],[11,"empty","","Creates an empty texture.",298,{"inputs":[{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["integraltexture1darray","texturecreationerror"],"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",298,{"inputs":[{"name":"f"},{"name":"uncompressedintformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["integraltexture1darray","texturecreationerror"],"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",298,{"inputs":[{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["integraltexture1darray","texturecreationerror"],"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",298,{"inputs":[{"name":"f"},{"name":"uncompressedintformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"integraltexture1darray"}}],[11,"width","","Returns the width of that image.",298,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",298,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",298,{"inputs":[{"name":"self"}],"output":{"generics":["residenttexture","bindlesstexturesnotsupportederror"],"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",298,{"inputs":[{"name":"self"}],"output":{"name":"integraltexture1darraylayer"}}],[11,"layer","","Access a single layer of this texture.",298,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["integraltexture1darraylayer"],"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",298,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["integraltexture1darraymipmap"],"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",298,{"inputs":[{"name":"self"}],"output":{"name":"integraltexture1darraymipmap"}}],[11,"clone","","",299,{"inputs":[{"name":"self"}],"output":{"name":"integraltexture1darraylayer"}}],[11,"width","","Returns the width of that image.",299,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",299,{"inputs":[{"name":"self"}],"output":{"name":"integraltexture1darray"}}],[11,"get_layer","","Returns the layer index.",299,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",299,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",299,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["integraltexture1darraylayermipmap"],"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",299,{"inputs":[{"name":"self"}],"output":{"name":"integraltexture1darraylayermipmap"}}],[11,"clone","","",300,{"inputs":[{"name":"self"}],"output":{"name":"integraltexture1darraymipmap"}}],[11,"deref","","",300,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",300,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",300,{"inputs":[{"name":"self"}],"output":{"name":"integraltexture1darray"}}],[11,"get_level","","Returns the texture level.",300,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",300,{"inputs":[{"name":"self"}],"output":{"name":"integraltexture1darraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",300,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["integraltexture1darraylayermipmap"],"name":"option"}}],[11,"clone","","",301,{"inputs":[{"name":"self"}],"output":{"name":"integraltexture1darraylayermipmap"}}],[11,"width","","Returns the width of that image.",301,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into","","",301,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",301,{"inputs":[{"name":"self"}],"output":{"name":"colorattachment"}}],[0,"unsigned_texture1d_array","glium::texture","Contains the implementation of `UnsignedTexture1dArray`.",null,null],[3,"UnsignedTexture1dArray","glium::texture::unsigned_texture1d_array","An array of one-dimensional textures  containing unsigned integral data.",null,null],[3,"UnsignedTexture1dArrayLayer","","Represents a single layer of a `UnsignedTexture1dArray`.",null,null],[3,"UnsignedTexture1dArrayMipmap","","Represents a single mipmap level of a `UnsignedTexture1dArray`.",null,null],[3,"UnsignedTexture1dArrayLayerMipmap","","Represents a single layer of a mipmap level of a `UnsignedTexture1dArray`.",null,null],[11,"get_id","","",302,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",302,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"deref","","",302,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",150,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::unsigned_texture1d_array","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",302,{"inputs":[{"name":"self"}],"output":{"generics":["unsignedtexture1darray"],"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",302,{"inputs":[{"name":"self"}],"output":{"generics":["internalformat","getformaterror"],"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",302,{"inputs":[{"name":"f"},{"name":"vec"}],"output":{"generics":["unsignedtexture1darray","texturecreationerror"],"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",302,{"inputs":[{"name":"f"},{"name":"vec"},{"name":"mipmapsoption"}],"output":{"generics":["unsignedtexture1darray","texturecreationerror"],"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",302,{"inputs":[{"name":"f"},{"name":"vec"},{"name":"uncompresseduintformat"},{"name":"mipmapsoption"}],"output":{"generics":["unsignedtexture1darray","texturecreationerror"],"name":"result"}}],[11,"empty","","Creates an empty texture.",302,{"inputs":[{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["unsignedtexture1darray","texturecreationerror"],"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",302,{"inputs":[{"name":"f"},{"name":"uncompresseduintformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["unsignedtexture1darray","texturecreationerror"],"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",302,{"inputs":[{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["unsignedtexture1darray","texturecreationerror"],"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",302,{"inputs":[{"name":"f"},{"name":"uncompresseduintformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"unsignedtexture1darray"}}],[11,"width","","Returns the width of that image.",302,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",302,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",302,{"inputs":[{"name":"self"}],"output":{"generics":["residenttexture","bindlesstexturesnotsupportederror"],"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",302,{"inputs":[{"name":"self"}],"output":{"name":"unsignedtexture1darraylayer"}}],[11,"layer","","Access a single layer of this texture.",302,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["unsignedtexture1darraylayer"],"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",302,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["unsignedtexture1darraymipmap"],"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",302,{"inputs":[{"name":"self"}],"output":{"name":"unsignedtexture1darraymipmap"}}],[11,"clone","","",303,{"inputs":[{"name":"self"}],"output":{"name":"unsignedtexture1darraylayer"}}],[11,"width","","Returns the width of that image.",303,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",303,{"inputs":[{"name":"self"}],"output":{"name":"unsignedtexture1darray"}}],[11,"get_layer","","Returns the layer index.",303,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",303,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",303,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["unsignedtexture1darraylayermipmap"],"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",303,{"inputs":[{"name":"self"}],"output":{"name":"unsignedtexture1darraylayermipmap"}}],[11,"clone","","",304,{"inputs":[{"name":"self"}],"output":{"name":"unsignedtexture1darraymipmap"}}],[11,"deref","","",304,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",304,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",304,{"inputs":[{"name":"self"}],"output":{"name":"unsignedtexture1darray"}}],[11,"get_level","","Returns the texture level.",304,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",304,{"inputs":[{"name":"self"}],"output":{"name":"unsignedtexture1darraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",304,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["unsignedtexture1darraylayermipmap"],"name":"option"}}],[11,"clone","","",305,{"inputs":[{"name":"self"}],"output":{"name":"unsignedtexture1darraylayermipmap"}}],[11,"width","","Returns the width of that image.",305,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into","","",305,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",305,{"inputs":[{"name":"self"}],"output":{"name":"colorattachment"}}],[0,"depth_texture1d_array","glium::texture","Contains the implementation of `DepthTexture1dArray`.",null,null],[3,"DepthTexture1dArray","glium::texture::depth_texture1d_array","An array of one-dimensional textures  containing depth data.",null,null],[3,"DepthTexture1dArrayLayer","","Represents a single layer of a `DepthTexture1dArray`.",null,null],[3,"DepthTexture1dArrayMipmap","","Represents a single mipmap level of a `DepthTexture1dArray`.",null,null],[3,"DepthTexture1dArrayLayerMipmap","","Represents a single layer of a mipmap level of a `DepthTexture1dArray`.",null,null],[11,"get_id","","",306,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",306,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"deref","","",306,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",150,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::depth_texture1d_array","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",306,{"inputs":[{"name":"self"}],"output":{"generics":["depthtexture1darray"],"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",306,{"inputs":[{"name":"self"}],"output":{"generics":["internalformat","getformaterror"],"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",306,{"inputs":[{"name":"f"},{"name":"vec"}],"output":{"generics":["depthtexture1darray","texturecreationerror"],"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",306,{"inputs":[{"name":"f"},{"name":"vec"},{"name":"mipmapsoption"}],"output":{"generics":["depthtexture1darray","texturecreationerror"],"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",306,{"inputs":[{"name":"f"},{"name":"vec"},{"name":"depthformat"},{"name":"mipmapsoption"}],"output":{"generics":["depthtexture1darray","texturecreationerror"],"name":"result"}}],[11,"empty","","Creates an empty texture.",306,{"inputs":[{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["depthtexture1darray","texturecreationerror"],"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",306,{"inputs":[{"name":"f"},{"name":"depthformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["depthtexture1darray","texturecreationerror"],"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",306,{"inputs":[{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["depthtexture1darray","texturecreationerror"],"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",306,{"inputs":[{"name":"f"},{"name":"depthformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"depthtexture1darray"}}],[11,"width","","Returns the width of that image.",306,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",306,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",306,{"inputs":[{"name":"self"}],"output":{"generics":["residenttexture","bindlesstexturesnotsupportederror"],"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",306,{"inputs":[{"name":"self"}],"output":{"name":"depthtexture1darraylayer"}}],[11,"layer","","Access a single layer of this texture.",306,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["depthtexture1darraylayer"],"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",306,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["depthtexture1darraymipmap"],"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",306,{"inputs":[{"name":"self"}],"output":{"name":"depthtexture1darraymipmap"}}],[11,"clone","","",307,{"inputs":[{"name":"self"}],"output":{"name":"depthtexture1darraylayer"}}],[11,"width","","Returns the width of that image.",307,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",307,{"inputs":[{"name":"self"}],"output":{"name":"depthtexture1darray"}}],[11,"get_layer","","Returns the layer index.",307,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",307,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",307,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["depthtexture1darraylayermipmap"],"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",307,{"inputs":[{"name":"self"}],"output":{"name":"depthtexture1darraylayermipmap"}}],[11,"clone","","",308,{"inputs":[{"name":"self"}],"output":{"name":"depthtexture1darraymipmap"}}],[11,"deref","","",308,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",308,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",308,{"inputs":[{"name":"self"}],"output":{"name":"depthtexture1darray"}}],[11,"get_level","","Returns the texture level.",308,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",308,{"inputs":[{"name":"self"}],"output":{"name":"depthtexture1darraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",308,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["depthtexture1darraylayermipmap"],"name":"option"}}],[11,"clone","","",309,{"inputs":[{"name":"self"}],"output":{"name":"depthtexture1darraylayermipmap"}}],[11,"width","","Returns the width of that image.",309,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into","","",309,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"to_depth_attachment","","",309,{"inputs":[{"name":"self"}],"output":{"name":"depthattachment"}}],[0,"stencil_texture1d_array","glium::texture","Contains the implementation of `StencilTexture1dArray`.",null,null],[3,"StencilTexture1dArray","glium::texture::stencil_texture1d_array","An array of one-dimensional textures  containing stencil data.",null,null],[3,"StencilTexture1dArrayLayer","","Represents a single layer of a `StencilTexture1dArray`.",null,null],[3,"StencilTexture1dArrayMipmap","","Represents a single mipmap level of a `StencilTexture1dArray`.",null,null],[3,"StencilTexture1dArrayLayerMipmap","","Represents a single layer of a mipmap level of a `StencilTexture1dArray`.",null,null],[11,"get_id","","",310,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",310,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"deref","","",310,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"get_internal_format","","Determines the internal format of this texture.",310,{"inputs":[{"name":"self"}],"output":{"generics":["internalformat","getformaterror"],"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",310,{"inputs":[{"name":"f"},{"name":"vec"}],"output":{"generics":["stenciltexture1darray","texturecreationerror"],"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",310,{"inputs":[{"name":"f"},{"name":"vec"},{"name":"mipmapsoption"}],"output":{"generics":["stenciltexture1darray","texturecreationerror"],"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",310,{"inputs":[{"name":"f"},{"name":"vec"},{"name":"stencilformat"},{"name":"mipmapsoption"}],"output":{"generics":["stenciltexture1darray","texturecreationerror"],"name":"result"}}],[11,"empty","","Creates an empty texture.",310,{"inputs":[{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["stenciltexture1darray","texturecreationerror"],"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",310,{"inputs":[{"name":"f"},{"name":"stencilformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["stenciltexture1darray","texturecreationerror"],"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",310,{"inputs":[{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["stenciltexture1darray","texturecreationerror"],"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",310,{"inputs":[{"name":"f"},{"name":"stencilformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"stenciltexture1darray"}}],[11,"width","","Returns the width of that image.",310,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",310,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",310,{"inputs":[{"name":"self"}],"output":{"generics":["residenttexture","bindlesstexturesnotsupportederror"],"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",310,{"inputs":[{"name":"self"}],"output":{"name":"stenciltexture1darraylayer"}}],[11,"layer","","Access a single layer of this texture.",310,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["stenciltexture1darraylayer"],"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",310,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["stenciltexture1darraymipmap"],"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",310,{"inputs":[{"name":"self"}],"output":{"name":"stenciltexture1darraymipmap"}}],[11,"clone","","",311,{"inputs":[{"name":"self"}],"output":{"name":"stenciltexture1darraylayer"}}],[11,"width","","Returns the width of that image.",311,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",311,{"inputs":[{"name":"self"}],"output":{"name":"stenciltexture1darray"}}],[11,"get_layer","","Returns the layer index.",311,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",311,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",311,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["stenciltexture1darraylayermipmap"],"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",311,{"inputs":[{"name":"self"}],"output":{"name":"stenciltexture1darraylayermipmap"}}],[11,"clone","","",312,{"inputs":[{"name":"self"}],"output":{"name":"stenciltexture1darraymipmap"}}],[11,"deref","","",312,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",312,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",312,{"inputs":[{"name":"self"}],"output":{"name":"stenciltexture1darray"}}],[11,"get_level","","Returns the texture level.",312,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",312,{"inputs":[{"name":"self"}],"output":{"name":"stenciltexture1darraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",312,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["stenciltexture1darraylayermipmap"],"name":"option"}}],[11,"clone","","",313,{"inputs":[{"name":"self"}],"output":{"name":"stenciltexture1darraylayermipmap"}}],[11,"width","","Returns the width of that image.",313,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into","","",313,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"to_stencil_attachment","","",313,{"inputs":[{"name":"self"}],"output":{"name":"stencilattachment"}}],[0,"depth_stencil_texture1d_array","glium::texture","Contains the implementation of `DepthStencilTexture1dArray`.",null,null],[3,"DepthStencilTexture1dArray","glium::texture::depth_stencil_texture1d_array","An array of one-dimensional textures  containing both depth and stencil data.",null,null],[3,"DepthStencilTexture1dArrayLayer","","Represents a single layer of a `DepthStencilTexture1dArray`.",null,null],[3,"DepthStencilTexture1dArrayMipmap","","Represents a single mipmap level of a `DepthStencilTexture1dArray`.",null,null],[3,"DepthStencilTexture1dArrayLayerMipmap","","Represents a single layer of a mipmap level of a `DepthStencilTexture1dArray`.",null,null],[11,"get_id","","",314,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",314,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"deref","","",314,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"get_internal_format","","Determines the internal format of this texture.",314,{"inputs":[{"name":"self"}],"output":{"generics":["internalformat","getformaterror"],"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",314,{"inputs":[{"name":"f"},{"name":"vec"}],"output":{"generics":["depthstenciltexture1darray","texturecreationerror"],"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",314,{"inputs":[{"name":"f"},{"name":"vec"},{"name":"mipmapsoption"}],"output":{"generics":["depthstenciltexture1darray","texturecreationerror"],"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",314,{"inputs":[{"name":"f"},{"name":"vec"},{"name":"depthstencilformat"},{"name":"mipmapsoption"}],"output":{"generics":["depthstenciltexture1darray","texturecreationerror"],"name":"result"}}],[11,"empty","","Creates an empty texture.",314,{"inputs":[{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["depthstenciltexture1darray","texturecreationerror"],"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",314,{"inputs":[{"name":"f"},{"name":"depthstencilformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["depthstenciltexture1darray","texturecreationerror"],"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",314,{"inputs":[{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["depthstenciltexture1darray","texturecreationerror"],"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",314,{"inputs":[{"name":"f"},{"name":"depthstencilformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"depthstenciltexture1darray"}}],[11,"width","","Returns the width of that image.",314,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",314,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",314,{"inputs":[{"name":"self"}],"output":{"generics":["residenttexture","bindlesstexturesnotsupportederror"],"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",314,{"inputs":[{"name":"self"}],"output":{"name":"depthstenciltexture1darraylayer"}}],[11,"layer","","Access a single layer of this texture.",314,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["depthstenciltexture1darraylayer"],"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",314,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["depthstenciltexture1darraymipmap"],"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",314,{"inputs":[{"name":"self"}],"output":{"name":"depthstenciltexture1darraymipmap"}}],[11,"clone","","",315,{"inputs":[{"name":"self"}],"output":{"name":"depthstenciltexture1darraylayer"}}],[11,"width","","Returns the width of that image.",315,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",315,{"inputs":[{"name":"self"}],"output":{"name":"depthstenciltexture1darray"}}],[11,"get_layer","","Returns the layer index.",315,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",315,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",315,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["depthstenciltexture1darraylayermipmap"],"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",315,{"inputs":[{"name":"self"}],"output":{"name":"depthstenciltexture1darraylayermipmap"}}],[11,"clone","","",316,{"inputs":[{"name":"self"}],"output":{"name":"depthstenciltexture1darraymipmap"}}],[11,"deref","","",316,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",316,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",316,{"inputs":[{"name":"self"}],"output":{"name":"depthstenciltexture1darray"}}],[11,"get_level","","Returns the texture level.",316,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",316,{"inputs":[{"name":"self"}],"output":{"name":"depthstenciltexture1darraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",316,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["depthstenciltexture1darraylayermipmap"],"name":"option"}}],[11,"clone","","",317,{"inputs":[{"name":"self"}],"output":{"name":"depthstenciltexture1darraylayermipmap"}}],[11,"width","","Returns the width of that image.",317,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into","","",317,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"to_depth_stencil_attachment","","",317,{"inputs":[{"name":"self"}],"output":{"name":"depthstencilattachment"}}],[0,"texture2d_array","glium::texture","Contains the implementation of `Texture2dArray`.",null,null],[3,"Texture2dArray","glium::texture::texture2d_array","An array of two-dimensional textures  containing floating-point data.",null,null],[3,"Texture2dArrayLayer","","Represents a single layer of a `Texture2dArray`.",null,null],[3,"Texture2dArrayMipmap","","Represents a single mipmap level of a `Texture2dArray`.",null,null],[3,"Texture2dArrayLayerMipmap","","Represents a single layer of a mipmap level of a `Texture2dArray`.",null,null],[11,"get_id","","",318,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",318,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"deref","","",318,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",150,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::texture2d_array","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",318,{"inputs":[{"name":"self"}],"output":{"generics":["texture2darray"],"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",318,{"inputs":[{"name":"self"}],"output":{"generics":["internalformat","getformaterror"],"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",318,{"inputs":[{"name":"f"},{"name":"vec"}],"output":{"generics":["texture2darray","texturecreationerror"],"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",318,{"inputs":[{"name":"f"},{"name":"vec"},{"name":"mipmapsoption"}],"output":{"generics":["texture2darray","texturecreationerror"],"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",318,{"inputs":[{"name":"f"},{"name":"vec"},{"name":"uncompressedfloatformat"},{"name":"mipmapsoption"}],"output":{"generics":["texture2darray","texturecreationerror"],"name":"result"}}],[11,"empty","","Creates an empty texture.",318,{"inputs":[{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["texture2darray","texturecreationerror"],"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",318,{"inputs":[{"name":"f"},{"name":"uncompressedfloatformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["texture2darray","texturecreationerror"],"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",318,{"inputs":[{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["texture2darray","texturecreationerror"],"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",318,{"inputs":[{"name":"f"},{"name":"uncompressedfloatformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"texture2darray"}}],[11,"width","","Returns the width of that image.",318,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",318,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",318,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",318,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",318,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",318,{"inputs":[{"name":"self"}],"output":{"generics":["residenttexture","bindlesstexturesnotsupportederror"],"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",318,{"inputs":[{"name":"self"}],"output":{"name":"texture2darraylayer"}}],[11,"layer","","Access a single layer of this texture.",318,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["texture2darraylayer"],"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",318,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["texture2darraymipmap"],"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",318,{"inputs":[{"name":"self"}],"output":{"name":"texture2darraymipmap"}}],[11,"clone","","",319,{"inputs":[{"name":"self"}],"output":{"name":"texture2darraylayer"}}],[11,"width","","Returns the width of that image.",319,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",319,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",319,null],[11,"get_texture","","Returns the corresponding texture.",319,{"inputs":[{"name":"self"}],"output":{"name":"texture2darray"}}],[11,"get_layer","","Returns the layer index.",319,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",319,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",319,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["texture2darraylayermipmap"],"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",319,{"inputs":[{"name":"self"}],"output":{"name":"texture2darraylayermipmap"}}],[11,"clone","","",320,{"inputs":[{"name":"self"}],"output":{"name":"texture2darraymipmap"}}],[11,"deref","","",320,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",320,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",320,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",320,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",320,null],[11,"get_texture","","Returns the corresponding texture.",320,{"inputs":[{"name":"self"}],"output":{"name":"texture2darray"}}],[11,"get_level","","Returns the texture level.",320,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",320,{"inputs":[{"name":"self"}],"output":{"name":"texture2darraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",320,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["texture2darraylayermipmap"],"name":"option"}}],[11,"clone","","",321,{"inputs":[{"name":"self"}],"output":{"name":"texture2darraylayermipmap"}}],[11,"width","","Returns the width of that image.",321,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",321,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",321,null],[11,"into","","",321,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",321,{"inputs":[{"name":"self"}],"output":{"name":"colorattachment"}}],[0,"compressed_texture2d_array","glium::texture","Contains the implementation of `CompressedTexture2dArray`.",null,null],[3,"CompressedTexture2dArray","glium::texture::compressed_texture2d_array","An array of compressed two-dimensional textures  containing floating-point data.",null,null],[3,"CompressedTexture2dArrayLayer","","Represents a single layer of a `CompressedTexture2dArray`.",null,null],[3,"CompressedTexture2dArrayMipmap","","Represents a single mipmap level of a `CompressedTexture2dArray`.",null,null],[3,"CompressedTexture2dArrayLayerMipmap","","Represents a single layer of a mipmap level of a `CompressedTexture2dArray`.",null,null],[11,"get_id","","",322,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",322,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"deref","","",322,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",150,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::compressed_texture2d_array","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",322,{"inputs":[{"name":"self"}],"output":{"generics":["compressedtexture2darray"],"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",322,{"inputs":[{"name":"self"}],"output":{"generics":["internalformat","getformaterror"],"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",322,{"inputs":[{"name":"f"},{"name":"vec"}],"output":{"generics":["compressedtexture2darray","texturecreationerror"],"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",322,{"inputs":[{"name":"f"},{"name":"vec"},{"name":"compressedmipmapsoption"}],"output":{"generics":["compressedtexture2darray","texturecreationerror"],"name":"result"}}],[11,"with_compressed_data","","Builds a new texture with a specific format. The input data must also be of the specified compressed format.",322,{"inputs":[{"name":"f"},{"name":"vec"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"compressedformat"},{"name":"compressedmipmapsoption"}],"output":{"generics":["compressedtexture2darray","texturecreationerror"],"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",322,{"inputs":[{"name":"f"},{"name":"vec"},{"name":"compressedformat"},{"name":"compressedmipmapsoption"}],"output":{"generics":["compressedtexture2darray","texturecreationerror"],"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",322,{"inputs":[{"name":"f"},{"name":"compressedformat"},{"name":"compressedmipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["compressedtexture2darray","texturecreationerror"],"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",322,{"inputs":[{"name":"f"},{"name":"compressedformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"compressedtexture2darray"}}],[11,"width","","Returns the width of that image.",322,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",322,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",322,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",322,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",322,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",322,{"inputs":[{"name":"self"}],"output":{"generics":["residenttexture","bindlesstexturesnotsupportederror"],"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",322,{"inputs":[{"name":"self"}],"output":{"name":"compressedtexture2darraylayer"}}],[11,"layer","","Access a single layer of this texture.",322,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["compressedtexture2darraylayer"],"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",322,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["compressedtexture2darraymipmap"],"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",322,{"inputs":[{"name":"self"}],"output":{"name":"compressedtexture2darraymipmap"}}],[11,"clone","","",323,{"inputs":[{"name":"self"}],"output":{"name":"compressedtexture2darraylayer"}}],[11,"width","","Returns the width of that image.",323,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",323,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",323,null],[11,"get_texture","","Returns the corresponding texture.",323,{"inputs":[{"name":"self"}],"output":{"name":"compressedtexture2darray"}}],[11,"get_layer","","Returns the layer index.",323,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",323,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",323,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["compressedtexture2darraylayermipmap"],"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",323,{"inputs":[{"name":"self"}],"output":{"name":"compressedtexture2darraylayermipmap"}}],[11,"clone","","",324,{"inputs":[{"name":"self"}],"output":{"name":"compressedtexture2darraymipmap"}}],[11,"deref","","",324,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",324,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",324,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",324,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",324,null],[11,"get_texture","","Returns the corresponding texture.",324,{"inputs":[{"name":"self"}],"output":{"name":"compressedtexture2darray"}}],[11,"get_level","","Returns the texture level.",324,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",324,{"inputs":[{"name":"self"}],"output":{"name":"compressedtexture2darraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",324,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["compressedtexture2darraylayermipmap"],"name":"option"}}],[11,"clone","","",325,{"inputs":[{"name":"self"}],"output":{"name":"compressedtexture2darraylayermipmap"}}],[11,"width","","Returns the width of that image.",325,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",325,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",325,null],[11,"into","","",325,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[0,"srgb_texture2d_array","glium::texture","Contains the implementation of `SrgbTexture2dArray`.",null,null],[3,"SrgbTexture2dArray","glium::texture::srgb_texture2d_array","An array of two-dimensional textures  containing sRGB floating-point data.",null,null],[3,"SrgbTexture2dArrayLayer","","Represents a single layer of a `SrgbTexture2dArray`.",null,null],[3,"SrgbTexture2dArrayMipmap","","Represents a single mipmap level of a `SrgbTexture2dArray`.",null,null],[3,"SrgbTexture2dArrayLayerMipmap","","Represents a single layer of a mipmap level of a `SrgbTexture2dArray`.",null,null],[11,"get_id","","",326,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",326,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"deref","","",326,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",150,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::srgb_texture2d_array","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",326,{"inputs":[{"name":"self"}],"output":{"generics":["srgbtexture2darray"],"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",326,{"inputs":[{"name":"self"}],"output":{"generics":["internalformat","getformaterror"],"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",326,{"inputs":[{"name":"f"},{"name":"vec"}],"output":{"generics":["srgbtexture2darray","texturecreationerror"],"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",326,{"inputs":[{"name":"f"},{"name":"vec"},{"name":"mipmapsoption"}],"output":{"generics":["srgbtexture2darray","texturecreationerror"],"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",326,{"inputs":[{"name":"f"},{"name":"vec"},{"name":"srgbformat"},{"name":"mipmapsoption"}],"output":{"generics":["srgbtexture2darray","texturecreationerror"],"name":"result"}}],[11,"empty","","Creates an empty texture.",326,{"inputs":[{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["srgbtexture2darray","texturecreationerror"],"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",326,{"inputs":[{"name":"f"},{"name":"srgbformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["srgbtexture2darray","texturecreationerror"],"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",326,{"inputs":[{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["srgbtexture2darray","texturecreationerror"],"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",326,{"inputs":[{"name":"f"},{"name":"srgbformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"srgbtexture2darray"}}],[11,"width","","Returns the width of that image.",326,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",326,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",326,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",326,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",326,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",326,{"inputs":[{"name":"self"}],"output":{"generics":["residenttexture","bindlesstexturesnotsupportederror"],"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",326,{"inputs":[{"name":"self"}],"output":{"name":"srgbtexture2darraylayer"}}],[11,"layer","","Access a single layer of this texture.",326,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["srgbtexture2darraylayer"],"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",326,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["srgbtexture2darraymipmap"],"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",326,{"inputs":[{"name":"self"}],"output":{"name":"srgbtexture2darraymipmap"}}],[11,"clone","","",327,{"inputs":[{"name":"self"}],"output":{"name":"srgbtexture2darraylayer"}}],[11,"width","","Returns the width of that image.",327,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",327,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",327,null],[11,"get_texture","","Returns the corresponding texture.",327,{"inputs":[{"name":"self"}],"output":{"name":"srgbtexture2darray"}}],[11,"get_layer","","Returns the layer index.",327,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",327,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",327,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["srgbtexture2darraylayermipmap"],"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",327,{"inputs":[{"name":"self"}],"output":{"name":"srgbtexture2darraylayermipmap"}}],[11,"clone","","",328,{"inputs":[{"name":"self"}],"output":{"name":"srgbtexture2darraymipmap"}}],[11,"deref","","",328,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",328,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",328,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",328,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",328,null],[11,"get_texture","","Returns the corresponding texture.",328,{"inputs":[{"name":"self"}],"output":{"name":"srgbtexture2darray"}}],[11,"get_level","","Returns the texture level.",328,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",328,{"inputs":[{"name":"self"}],"output":{"name":"srgbtexture2darraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",328,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["srgbtexture2darraylayermipmap"],"name":"option"}}],[11,"clone","","",329,{"inputs":[{"name":"self"}],"output":{"name":"srgbtexture2darraylayermipmap"}}],[11,"width","","Returns the width of that image.",329,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",329,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",329,null],[11,"into","","",329,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",329,{"inputs":[{"name":"self"}],"output":{"name":"colorattachment"}}],[0,"compressed_srgb_texture2d_array","glium::texture","Contains the implementation of `CompressedSrgbTexture2dArray`.",null,null],[3,"CompressedSrgbTexture2dArray","glium::texture::compressed_srgb_texture2d_array","An array of compressed two-dimensional textures  containing sRGB floating-point data.",null,null],[3,"CompressedSrgbTexture2dArrayLayer","","Represents a single layer of a `CompressedSrgbTexture2dArray`.",null,null],[3,"CompressedSrgbTexture2dArrayMipmap","","Represents a single mipmap level of a `CompressedSrgbTexture2dArray`.",null,null],[3,"CompressedSrgbTexture2dArrayLayerMipmap","","Represents a single layer of a mipmap level of a `CompressedSrgbTexture2dArray`.",null,null],[11,"get_id","","",330,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",330,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"deref","","",330,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",150,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::compressed_srgb_texture2d_array","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",330,{"inputs":[{"name":"self"}],"output":{"generics":["compressedsrgbtexture2darray"],"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",330,{"inputs":[{"name":"self"}],"output":{"generics":["internalformat","getformaterror"],"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",330,{"inputs":[{"name":"f"},{"name":"vec"}],"output":{"generics":["compressedsrgbtexture2darray","texturecreationerror"],"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",330,{"inputs":[{"name":"f"},{"name":"vec"},{"name":"compressedmipmapsoption"}],"output":{"generics":["compressedsrgbtexture2darray","texturecreationerror"],"name":"result"}}],[11,"with_compressed_data","","Builds a new texture with a specific format. The input data must also be of the specified compressed format.",330,{"inputs":[{"name":"f"},{"name":"vec"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"compressedsrgbformat"},{"name":"compressedmipmapsoption"}],"output":{"generics":["compressedsrgbtexture2darray","texturecreationerror"],"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",330,{"inputs":[{"name":"f"},{"name":"vec"},{"name":"compressedsrgbformat"},{"name":"compressedmipmapsoption"}],"output":{"generics":["compressedsrgbtexture2darray","texturecreationerror"],"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",330,{"inputs":[{"name":"f"},{"name":"compressedsrgbformat"},{"name":"compressedmipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["compressedsrgbtexture2darray","texturecreationerror"],"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",330,{"inputs":[{"name":"f"},{"name":"compressedsrgbformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"compressedsrgbtexture2darray"}}],[11,"width","","Returns the width of that image.",330,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",330,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",330,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",330,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",330,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",330,{"inputs":[{"name":"self"}],"output":{"generics":["residenttexture","bindlesstexturesnotsupportederror"],"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",330,{"inputs":[{"name":"self"}],"output":{"name":"compressedsrgbtexture2darraylayer"}}],[11,"layer","","Access a single layer of this texture.",330,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["compressedsrgbtexture2darraylayer"],"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",330,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["compressedsrgbtexture2darraymipmap"],"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",330,{"inputs":[{"name":"self"}],"output":{"name":"compressedsrgbtexture2darraymipmap"}}],[11,"clone","","",331,{"inputs":[{"name":"self"}],"output":{"name":"compressedsrgbtexture2darraylayer"}}],[11,"width","","Returns the width of that image.",331,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",331,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",331,null],[11,"get_texture","","Returns the corresponding texture.",331,{"inputs":[{"name":"self"}],"output":{"name":"compressedsrgbtexture2darray"}}],[11,"get_layer","","Returns the layer index.",331,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",331,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",331,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["compressedsrgbtexture2darraylayermipmap"],"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",331,{"inputs":[{"name":"self"}],"output":{"name":"compressedsrgbtexture2darraylayermipmap"}}],[11,"clone","","",332,{"inputs":[{"name":"self"}],"output":{"name":"compressedsrgbtexture2darraymipmap"}}],[11,"deref","","",332,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",332,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",332,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",332,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",332,null],[11,"get_texture","","Returns the corresponding texture.",332,{"inputs":[{"name":"self"}],"output":{"name":"compressedsrgbtexture2darray"}}],[11,"get_level","","Returns the texture level.",332,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",332,{"inputs":[{"name":"self"}],"output":{"name":"compressedsrgbtexture2darraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",332,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["compressedsrgbtexture2darraylayermipmap"],"name":"option"}}],[11,"clone","","",333,{"inputs":[{"name":"self"}],"output":{"name":"compressedsrgbtexture2darraylayermipmap"}}],[11,"width","","Returns the width of that image.",333,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",333,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",333,null],[11,"into","","",333,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[0,"integral_texture2d_array","glium::texture","Contains the implementation of `IntegralTexture2dArray`.",null,null],[3,"IntegralTexture2dArray","glium::texture::integral_texture2d_array","An array of two-dimensional textures  containing signed integral data.",null,null],[3,"IntegralTexture2dArrayLayer","","Represents a single layer of a `IntegralTexture2dArray`.",null,null],[3,"IntegralTexture2dArrayMipmap","","Represents a single mipmap level of a `IntegralTexture2dArray`.",null,null],[3,"IntegralTexture2dArrayLayerMipmap","","Represents a single layer of a mipmap level of a `IntegralTexture2dArray`.",null,null],[11,"get_id","","",334,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",334,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"deref","","",334,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",150,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::integral_texture2d_array","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",334,{"inputs":[{"name":"self"}],"output":{"generics":["integraltexture2darray"],"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",334,{"inputs":[{"name":"self"}],"output":{"generics":["internalformat","getformaterror"],"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",334,{"inputs":[{"name":"f"},{"name":"vec"}],"output":{"generics":["integraltexture2darray","texturecreationerror"],"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",334,{"inputs":[{"name":"f"},{"name":"vec"},{"name":"mipmapsoption"}],"output":{"generics":["integraltexture2darray","texturecreationerror"],"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",334,{"inputs":[{"name":"f"},{"name":"vec"},{"name":"uncompressedintformat"},{"name":"mipmapsoption"}],"output":{"generics":["integraltexture2darray","texturecreationerror"],"name":"result"}}],[11,"empty","","Creates an empty texture.",334,{"inputs":[{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["integraltexture2darray","texturecreationerror"],"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",334,{"inputs":[{"name":"f"},{"name":"uncompressedintformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["integraltexture2darray","texturecreationerror"],"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",334,{"inputs":[{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["integraltexture2darray","texturecreationerror"],"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",334,{"inputs":[{"name":"f"},{"name":"uncompressedintformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"integraltexture2darray"}}],[11,"width","","Returns the width of that image.",334,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",334,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",334,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",334,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",334,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",334,{"inputs":[{"name":"self"}],"output":{"generics":["residenttexture","bindlesstexturesnotsupportederror"],"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",334,{"inputs":[{"name":"self"}],"output":{"name":"integraltexture2darraylayer"}}],[11,"layer","","Access a single layer of this texture.",334,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["integraltexture2darraylayer"],"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",334,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["integraltexture2darraymipmap"],"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",334,{"inputs":[{"name":"self"}],"output":{"name":"integraltexture2darraymipmap"}}],[11,"clone","","",335,{"inputs":[{"name":"self"}],"output":{"name":"integraltexture2darraylayer"}}],[11,"width","","Returns the width of that image.",335,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",335,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",335,null],[11,"get_texture","","Returns the corresponding texture.",335,{"inputs":[{"name":"self"}],"output":{"name":"integraltexture2darray"}}],[11,"get_layer","","Returns the layer index.",335,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",335,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",335,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["integraltexture2darraylayermipmap"],"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",335,{"inputs":[{"name":"self"}],"output":{"name":"integraltexture2darraylayermipmap"}}],[11,"clone","","",336,{"inputs":[{"name":"self"}],"output":{"name":"integraltexture2darraymipmap"}}],[11,"deref","","",336,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",336,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",336,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",336,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",336,null],[11,"get_texture","","Returns the corresponding texture.",336,{"inputs":[{"name":"self"}],"output":{"name":"integraltexture2darray"}}],[11,"get_level","","Returns the texture level.",336,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",336,{"inputs":[{"name":"self"}],"output":{"name":"integraltexture2darraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",336,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["integraltexture2darraylayermipmap"],"name":"option"}}],[11,"clone","","",337,{"inputs":[{"name":"self"}],"output":{"name":"integraltexture2darraylayermipmap"}}],[11,"width","","Returns the width of that image.",337,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",337,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",337,null],[11,"into","","",337,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",337,{"inputs":[{"name":"self"}],"output":{"name":"colorattachment"}}],[0,"unsigned_texture2d_array","glium::texture","Contains the implementation of `UnsignedTexture2dArray`.",null,null],[3,"UnsignedTexture2dArray","glium::texture::unsigned_texture2d_array","An array of two-dimensional textures  containing unsigned integral data.",null,null],[3,"UnsignedTexture2dArrayLayer","","Represents a single layer of a `UnsignedTexture2dArray`.",null,null],[3,"UnsignedTexture2dArrayMipmap","","Represents a single mipmap level of a `UnsignedTexture2dArray`.",null,null],[3,"UnsignedTexture2dArrayLayerMipmap","","Represents a single layer of a mipmap level of a `UnsignedTexture2dArray`.",null,null],[11,"get_id","","",338,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",338,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"deref","","",338,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",150,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::unsigned_texture2d_array","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",338,{"inputs":[{"name":"self"}],"output":{"generics":["unsignedtexture2darray"],"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",338,{"inputs":[{"name":"self"}],"output":{"generics":["internalformat","getformaterror"],"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",338,{"inputs":[{"name":"f"},{"name":"vec"}],"output":{"generics":["unsignedtexture2darray","texturecreationerror"],"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",338,{"inputs":[{"name":"f"},{"name":"vec"},{"name":"mipmapsoption"}],"output":{"generics":["unsignedtexture2darray","texturecreationerror"],"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",338,{"inputs":[{"name":"f"},{"name":"vec"},{"name":"uncompresseduintformat"},{"name":"mipmapsoption"}],"output":{"generics":["unsignedtexture2darray","texturecreationerror"],"name":"result"}}],[11,"empty","","Creates an empty texture.",338,{"inputs":[{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["unsignedtexture2darray","texturecreationerror"],"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",338,{"inputs":[{"name":"f"},{"name":"uncompresseduintformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["unsignedtexture2darray","texturecreationerror"],"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",338,{"inputs":[{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["unsignedtexture2darray","texturecreationerror"],"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",338,{"inputs":[{"name":"f"},{"name":"uncompresseduintformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"unsignedtexture2darray"}}],[11,"width","","Returns the width of that image.",338,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",338,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",338,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",338,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",338,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",338,{"inputs":[{"name":"self"}],"output":{"generics":["residenttexture","bindlesstexturesnotsupportederror"],"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",338,{"inputs":[{"name":"self"}],"output":{"name":"unsignedtexture2darraylayer"}}],[11,"layer","","Access a single layer of this texture.",338,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["unsignedtexture2darraylayer"],"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",338,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["unsignedtexture2darraymipmap"],"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",338,{"inputs":[{"name":"self"}],"output":{"name":"unsignedtexture2darraymipmap"}}],[11,"clone","","",339,{"inputs":[{"name":"self"}],"output":{"name":"unsignedtexture2darraylayer"}}],[11,"width","","Returns the width of that image.",339,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",339,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",339,null],[11,"get_texture","","Returns the corresponding texture.",339,{"inputs":[{"name":"self"}],"output":{"name":"unsignedtexture2darray"}}],[11,"get_layer","","Returns the layer index.",339,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",339,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",339,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["unsignedtexture2darraylayermipmap"],"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",339,{"inputs":[{"name":"self"}],"output":{"name":"unsignedtexture2darraylayermipmap"}}],[11,"clone","","",340,{"inputs":[{"name":"self"}],"output":{"name":"unsignedtexture2darraymipmap"}}],[11,"deref","","",340,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",340,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",340,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",340,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",340,null],[11,"get_texture","","Returns the corresponding texture.",340,{"inputs":[{"name":"self"}],"output":{"name":"unsignedtexture2darray"}}],[11,"get_level","","Returns the texture level.",340,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",340,{"inputs":[{"name":"self"}],"output":{"name":"unsignedtexture2darraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",340,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["unsignedtexture2darraylayermipmap"],"name":"option"}}],[11,"clone","","",341,{"inputs":[{"name":"self"}],"output":{"name":"unsignedtexture2darraylayermipmap"}}],[11,"width","","Returns the width of that image.",341,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",341,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",341,null],[11,"into","","",341,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",341,{"inputs":[{"name":"self"}],"output":{"name":"colorattachment"}}],[0,"depth_texture2d_array","glium::texture","Contains the implementation of `DepthTexture2dArray`.",null,null],[3,"DepthTexture2dArray","glium::texture::depth_texture2d_array","An array of two-dimensional textures  containing depth data.",null,null],[3,"DepthTexture2dArrayLayer","","Represents a single layer of a `DepthTexture2dArray`.",null,null],[3,"DepthTexture2dArrayMipmap","","Represents a single mipmap level of a `DepthTexture2dArray`.",null,null],[3,"DepthTexture2dArrayLayerMipmap","","Represents a single layer of a mipmap level of a `DepthTexture2dArray`.",null,null],[11,"get_id","","",342,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",342,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"deref","","",342,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",150,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::depth_texture2d_array","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",342,{"inputs":[{"name":"self"}],"output":{"generics":["depthtexture2darray"],"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",342,{"inputs":[{"name":"self"}],"output":{"generics":["internalformat","getformaterror"],"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",342,{"inputs":[{"name":"f"},{"name":"vec"}],"output":{"generics":["depthtexture2darray","texturecreationerror"],"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",342,{"inputs":[{"name":"f"},{"name":"vec"},{"name":"mipmapsoption"}],"output":{"generics":["depthtexture2darray","texturecreationerror"],"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",342,{"inputs":[{"name":"f"},{"name":"vec"},{"name":"depthformat"},{"name":"mipmapsoption"}],"output":{"generics":["depthtexture2darray","texturecreationerror"],"name":"result"}}],[11,"empty","","Creates an empty texture.",342,{"inputs":[{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["depthtexture2darray","texturecreationerror"],"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",342,{"inputs":[{"name":"f"},{"name":"depthformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["depthtexture2darray","texturecreationerror"],"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",342,{"inputs":[{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["depthtexture2darray","texturecreationerror"],"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",342,{"inputs":[{"name":"f"},{"name":"depthformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"depthtexture2darray"}}],[11,"width","","Returns the width of that image.",342,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",342,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",342,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",342,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",342,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",342,{"inputs":[{"name":"self"}],"output":{"generics":["residenttexture","bindlesstexturesnotsupportederror"],"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",342,{"inputs":[{"name":"self"}],"output":{"name":"depthtexture2darraylayer"}}],[11,"layer","","Access a single layer of this texture.",342,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["depthtexture2darraylayer"],"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",342,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["depthtexture2darraymipmap"],"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",342,{"inputs":[{"name":"self"}],"output":{"name":"depthtexture2darraymipmap"}}],[11,"clone","","",343,{"inputs":[{"name":"self"}],"output":{"name":"depthtexture2darraylayer"}}],[11,"width","","Returns the width of that image.",343,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",343,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",343,null],[11,"get_texture","","Returns the corresponding texture.",343,{"inputs":[{"name":"self"}],"output":{"name":"depthtexture2darray"}}],[11,"get_layer","","Returns the layer index.",343,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",343,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",343,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["depthtexture2darraylayermipmap"],"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",343,{"inputs":[{"name":"self"}],"output":{"name":"depthtexture2darraylayermipmap"}}],[11,"clone","","",344,{"inputs":[{"name":"self"}],"output":{"name":"depthtexture2darraymipmap"}}],[11,"deref","","",344,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",344,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",344,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",344,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",344,null],[11,"get_texture","","Returns the corresponding texture.",344,{"inputs":[{"name":"self"}],"output":{"name":"depthtexture2darray"}}],[11,"get_level","","Returns the texture level.",344,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",344,{"inputs":[{"name":"self"}],"output":{"name":"depthtexture2darraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",344,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["depthtexture2darraylayermipmap"],"name":"option"}}],[11,"clone","","",345,{"inputs":[{"name":"self"}],"output":{"name":"depthtexture2darraylayermipmap"}}],[11,"width","","Returns the width of that image.",345,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",345,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",345,null],[11,"into","","",345,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"to_depth_attachment","","",345,{"inputs":[{"name":"self"}],"output":{"name":"depthattachment"}}],[0,"stencil_texture2d_array","glium::texture","Contains the implementation of `StencilTexture2dArray`.",null,null],[3,"StencilTexture2dArray","glium::texture::stencil_texture2d_array","An array of two-dimensional textures  containing stencil data.",null,null],[3,"StencilTexture2dArrayLayer","","Represents a single layer of a `StencilTexture2dArray`.",null,null],[3,"StencilTexture2dArrayMipmap","","Represents a single mipmap level of a `StencilTexture2dArray`.",null,null],[3,"StencilTexture2dArrayLayerMipmap","","Represents a single layer of a mipmap level of a `StencilTexture2dArray`.",null,null],[11,"get_id","","",346,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",346,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"deref","","",346,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"get_internal_format","","Determines the internal format of this texture.",346,{"inputs":[{"name":"self"}],"output":{"generics":["internalformat","getformaterror"],"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",346,{"inputs":[{"name":"f"},{"name":"vec"}],"output":{"generics":["stenciltexture2darray","texturecreationerror"],"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",346,{"inputs":[{"name":"f"},{"name":"vec"},{"name":"mipmapsoption"}],"output":{"generics":["stenciltexture2darray","texturecreationerror"],"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",346,{"inputs":[{"name":"f"},{"name":"vec"},{"name":"stencilformat"},{"name":"mipmapsoption"}],"output":{"generics":["stenciltexture2darray","texturecreationerror"],"name":"result"}}],[11,"empty","","Creates an empty texture.",346,{"inputs":[{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["stenciltexture2darray","texturecreationerror"],"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",346,{"inputs":[{"name":"f"},{"name":"stencilformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["stenciltexture2darray","texturecreationerror"],"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",346,{"inputs":[{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["stenciltexture2darray","texturecreationerror"],"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",346,{"inputs":[{"name":"f"},{"name":"stencilformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"stenciltexture2darray"}}],[11,"width","","Returns the width of that image.",346,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",346,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",346,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",346,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",346,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",346,{"inputs":[{"name":"self"}],"output":{"generics":["residenttexture","bindlesstexturesnotsupportederror"],"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",346,{"inputs":[{"name":"self"}],"output":{"name":"stenciltexture2darraylayer"}}],[11,"layer","","Access a single layer of this texture.",346,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["stenciltexture2darraylayer"],"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",346,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["stenciltexture2darraymipmap"],"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",346,{"inputs":[{"name":"self"}],"output":{"name":"stenciltexture2darraymipmap"}}],[11,"clone","","",347,{"inputs":[{"name":"self"}],"output":{"name":"stenciltexture2darraylayer"}}],[11,"width","","Returns the width of that image.",347,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",347,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",347,null],[11,"get_texture","","Returns the corresponding texture.",347,{"inputs":[{"name":"self"}],"output":{"name":"stenciltexture2darray"}}],[11,"get_layer","","Returns the layer index.",347,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",347,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",347,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["stenciltexture2darraylayermipmap"],"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",347,{"inputs":[{"name":"self"}],"output":{"name":"stenciltexture2darraylayermipmap"}}],[11,"clone","","",348,{"inputs":[{"name":"self"}],"output":{"name":"stenciltexture2darraymipmap"}}],[11,"deref","","",348,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",348,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",348,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",348,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",348,null],[11,"get_texture","","Returns the corresponding texture.",348,{"inputs":[{"name":"self"}],"output":{"name":"stenciltexture2darray"}}],[11,"get_level","","Returns the texture level.",348,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",348,{"inputs":[{"name":"self"}],"output":{"name":"stenciltexture2darraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",348,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["stenciltexture2darraylayermipmap"],"name":"option"}}],[11,"clone","","",349,{"inputs":[{"name":"self"}],"output":{"name":"stenciltexture2darraylayermipmap"}}],[11,"width","","Returns the width of that image.",349,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",349,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",349,null],[11,"into","","",349,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"to_stencil_attachment","","",349,{"inputs":[{"name":"self"}],"output":{"name":"stencilattachment"}}],[0,"depth_stencil_texture2d_array","glium::texture","Contains the implementation of `DepthStencilTexture2dArray`.",null,null],[3,"DepthStencilTexture2dArray","glium::texture::depth_stencil_texture2d_array","An array of two-dimensional textures  containing both depth and stencil data.",null,null],[3,"DepthStencilTexture2dArrayLayer","","Represents a single layer of a `DepthStencilTexture2dArray`.",null,null],[3,"DepthStencilTexture2dArrayMipmap","","Represents a single mipmap level of a `DepthStencilTexture2dArray`.",null,null],[3,"DepthStencilTexture2dArrayLayerMipmap","","Represents a single layer of a mipmap level of a `DepthStencilTexture2dArray`.",null,null],[11,"get_id","","",350,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",350,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"deref","","",350,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"get_internal_format","","Determines the internal format of this texture.",350,{"inputs":[{"name":"self"}],"output":{"generics":["internalformat","getformaterror"],"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",350,{"inputs":[{"name":"f"},{"name":"vec"}],"output":{"generics":["depthstenciltexture2darray","texturecreationerror"],"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",350,{"inputs":[{"name":"f"},{"name":"vec"},{"name":"mipmapsoption"}],"output":{"generics":["depthstenciltexture2darray","texturecreationerror"],"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",350,{"inputs":[{"name":"f"},{"name":"vec"},{"name":"depthstencilformat"},{"name":"mipmapsoption"}],"output":{"generics":["depthstenciltexture2darray","texturecreationerror"],"name":"result"}}],[11,"empty","","Creates an empty texture.",350,{"inputs":[{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["depthstenciltexture2darray","texturecreationerror"],"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",350,{"inputs":[{"name":"f"},{"name":"depthstencilformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["depthstenciltexture2darray","texturecreationerror"],"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",350,{"inputs":[{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["depthstenciltexture2darray","texturecreationerror"],"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",350,{"inputs":[{"name":"f"},{"name":"depthstencilformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"depthstenciltexture2darray"}}],[11,"width","","Returns the width of that image.",350,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",350,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",350,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",350,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",350,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",350,{"inputs":[{"name":"self"}],"output":{"generics":["residenttexture","bindlesstexturesnotsupportederror"],"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",350,{"inputs":[{"name":"self"}],"output":{"name":"depthstenciltexture2darraylayer"}}],[11,"layer","","Access a single layer of this texture.",350,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["depthstenciltexture2darraylayer"],"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",350,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["depthstenciltexture2darraymipmap"],"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",350,{"inputs":[{"name":"self"}],"output":{"name":"depthstenciltexture2darraymipmap"}}],[11,"clone","","",351,{"inputs":[{"name":"self"}],"output":{"name":"depthstenciltexture2darraylayer"}}],[11,"width","","Returns the width of that image.",351,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",351,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",351,null],[11,"get_texture","","Returns the corresponding texture.",351,{"inputs":[{"name":"self"}],"output":{"name":"depthstenciltexture2darray"}}],[11,"get_layer","","Returns the layer index.",351,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",351,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",351,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["depthstenciltexture2darraylayermipmap"],"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",351,{"inputs":[{"name":"self"}],"output":{"name":"depthstenciltexture2darraylayermipmap"}}],[11,"clone","","",352,{"inputs":[{"name":"self"}],"output":{"name":"depthstenciltexture2darraymipmap"}}],[11,"deref","","",352,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",352,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",352,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",352,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",352,null],[11,"get_texture","","Returns the corresponding texture.",352,{"inputs":[{"name":"self"}],"output":{"name":"depthstenciltexture2darray"}}],[11,"get_level","","Returns the texture level.",352,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",352,{"inputs":[{"name":"self"}],"output":{"name":"depthstenciltexture2darraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",352,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["depthstenciltexture2darraylayermipmap"],"name":"option"}}],[11,"clone","","",353,{"inputs":[{"name":"self"}],"output":{"name":"depthstenciltexture2darraylayermipmap"}}],[11,"width","","Returns the width of that image.",353,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",353,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",353,null],[11,"into","","",353,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"to_depth_stencil_attachment","","",353,{"inputs":[{"name":"self"}],"output":{"name":"depthstencilattachment"}}],[0,"texture2d_multisample_array","glium::texture","Contains the implementation of `Texture2dMultisampleArray`.",null,null],[3,"Texture2dMultisampleArray","glium::texture::texture2d_multisample_array","An array of two-dimensional textures  containing floating-point data.",null,null],[3,"Texture2dMultisampleArrayLayer","","Represents a single layer of a `Texture2dMultisampleArray`.",null,null],[3,"Texture2dMultisampleArrayMipmap","","Represents a single mipmap level of a `Texture2dMultisampleArray`.",null,null],[3,"Texture2dMultisampleArrayLayerMipmap","","Represents a single layer of a mipmap level of a `Texture2dMultisampleArray`.",null,null],[11,"get_id","","",354,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",354,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"deref","","",354,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",150,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::texture2d_multisample_array","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",354,{"inputs":[{"name":"self"}],"output":{"generics":["texture2dmultisamplearray"],"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",354,{"inputs":[{"name":"self"}],"output":{"generics":["internalformat","getformaterror"],"name":"result"}}],[11,"empty","","Creates an empty texture.",354,{"inputs":[{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["texture2dmultisamplearray","texturecreationerror"],"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",354,{"inputs":[{"name":"f"},{"name":"uncompressedfloatformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["texture2dmultisamplearray","texturecreationerror"],"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",354,{"inputs":[{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["texture2dmultisamplearray","texturecreationerror"],"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",354,{"inputs":[{"name":"f"},{"name":"uncompressedfloatformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"texture2dmultisamplearray"}}],[11,"width","","Returns the width of that image.",354,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",354,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",354,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",354,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",354,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",354,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",354,{"inputs":[{"name":"self"}],"output":{"generics":["residenttexture","bindlesstexturesnotsupportederror"],"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",354,{"inputs":[{"name":"self"}],"output":{"name":"texture2dmultisamplearraylayer"}}],[11,"layer","","Access a single layer of this texture.",354,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["texture2dmultisamplearraylayer"],"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",354,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["texture2dmultisamplearraymipmap"],"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",354,{"inputs":[{"name":"self"}],"output":{"name":"texture2dmultisamplearraymipmap"}}],[11,"clone","","",355,{"inputs":[{"name":"self"}],"output":{"name":"texture2dmultisamplearraylayer"}}],[11,"width","","Returns the width of that image.",355,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",355,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",355,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",355,null],[11,"get_texture","","Returns the corresponding texture.",355,{"inputs":[{"name":"self"}],"output":{"name":"texture2dmultisamplearray"}}],[11,"get_layer","","Returns the layer index.",355,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",355,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",355,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["texture2dmultisamplearraylayermipmap"],"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",355,{"inputs":[{"name":"self"}],"output":{"name":"texture2dmultisamplearraylayermipmap"}}],[11,"clone","","",356,{"inputs":[{"name":"self"}],"output":{"name":"texture2dmultisamplearraymipmap"}}],[11,"deref","","",356,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",356,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",356,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",356,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",356,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",356,null],[11,"get_texture","","Returns the corresponding texture.",356,{"inputs":[{"name":"self"}],"output":{"name":"texture2dmultisamplearray"}}],[11,"get_level","","Returns the texture level.",356,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",356,{"inputs":[{"name":"self"}],"output":{"name":"texture2dmultisamplearraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",356,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["texture2dmultisamplearraylayermipmap"],"name":"option"}}],[11,"clone","","",357,{"inputs":[{"name":"self"}],"output":{"name":"texture2dmultisamplearraylayermipmap"}}],[11,"width","","Returns the width of that image.",357,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",357,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",357,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",357,null],[11,"into","","",357,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",357,{"inputs":[{"name":"self"}],"output":{"name":"colorattachment"}}],[0,"srgb_texture2d_multisample_array","glium::texture","Contains the implementation of `SrgbTexture2dMultisampleArray`.",null,null],[3,"SrgbTexture2dMultisampleArray","glium::texture::srgb_texture2d_multisample_array","An array of two-dimensional textures  containing sRGB floating-point data.",null,null],[3,"SrgbTexture2dMultisampleArrayLayer","","Represents a single layer of a `SrgbTexture2dMultisampleArray`.",null,null],[3,"SrgbTexture2dMultisampleArrayMipmap","","Represents a single mipmap level of a `SrgbTexture2dMultisampleArray`.",null,null],[3,"SrgbTexture2dMultisampleArrayLayerMipmap","","Represents a single layer of a mipmap level of a `SrgbTexture2dMultisampleArray`.",null,null],[11,"get_id","","",358,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",358,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"deref","","",358,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",150,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::srgb_texture2d_multisample_array","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",358,{"inputs":[{"name":"self"}],"output":{"generics":["srgbtexture2dmultisamplearray"],"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",358,{"inputs":[{"name":"self"}],"output":{"generics":["internalformat","getformaterror"],"name":"result"}}],[11,"empty","","Creates an empty texture.",358,{"inputs":[{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["srgbtexture2dmultisamplearray","texturecreationerror"],"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",358,{"inputs":[{"name":"f"},{"name":"srgbformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["srgbtexture2dmultisamplearray","texturecreationerror"],"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",358,{"inputs":[{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["srgbtexture2dmultisamplearray","texturecreationerror"],"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",358,{"inputs":[{"name":"f"},{"name":"srgbformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"srgbtexture2dmultisamplearray"}}],[11,"width","","Returns the width of that image.",358,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",358,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",358,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",358,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",358,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",358,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",358,{"inputs":[{"name":"self"}],"output":{"generics":["residenttexture","bindlesstexturesnotsupportederror"],"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",358,{"inputs":[{"name":"self"}],"output":{"name":"srgbtexture2dmultisamplearraylayer"}}],[11,"layer","","Access a single layer of this texture.",358,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["srgbtexture2dmultisamplearraylayer"],"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",358,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["srgbtexture2dmultisamplearraymipmap"],"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",358,{"inputs":[{"name":"self"}],"output":{"name":"srgbtexture2dmultisamplearraymipmap"}}],[11,"clone","","",359,{"inputs":[{"name":"self"}],"output":{"name":"srgbtexture2dmultisamplearraylayer"}}],[11,"width","","Returns the width of that image.",359,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",359,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",359,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",359,null],[11,"get_texture","","Returns the corresponding texture.",359,{"inputs":[{"name":"self"}],"output":{"name":"srgbtexture2dmultisamplearray"}}],[11,"get_layer","","Returns the layer index.",359,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",359,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",359,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["srgbtexture2dmultisamplearraylayermipmap"],"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",359,{"inputs":[{"name":"self"}],"output":{"name":"srgbtexture2dmultisamplearraylayermipmap"}}],[11,"clone","","",360,{"inputs":[{"name":"self"}],"output":{"name":"srgbtexture2dmultisamplearraymipmap"}}],[11,"deref","","",360,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",360,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",360,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",360,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",360,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",360,null],[11,"get_texture","","Returns the corresponding texture.",360,{"inputs":[{"name":"self"}],"output":{"name":"srgbtexture2dmultisamplearray"}}],[11,"get_level","","Returns the texture level.",360,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",360,{"inputs":[{"name":"self"}],"output":{"name":"srgbtexture2dmultisamplearraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",360,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["srgbtexture2dmultisamplearraylayermipmap"],"name":"option"}}],[11,"clone","","",361,{"inputs":[{"name":"self"}],"output":{"name":"srgbtexture2dmultisamplearraylayermipmap"}}],[11,"width","","Returns the width of that image.",361,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",361,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",361,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",361,null],[11,"into","","",361,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",361,{"inputs":[{"name":"self"}],"output":{"name":"colorattachment"}}],[0,"integral_texture2d_multisample_array","glium::texture","Contains the implementation of `IntegralTexture2dMultisampleArray`.",null,null],[3,"IntegralTexture2dMultisampleArray","glium::texture::integral_texture2d_multisample_array","An array of two-dimensional textures  containing signed integral data.",null,null],[3,"IntegralTexture2dMultisampleArrayLayer","","Represents a single layer of a `IntegralTexture2dMultisampleArray`.",null,null],[3,"IntegralTexture2dMultisampleArrayMipmap","","Represents a single mipmap level of a `IntegralTexture2dMultisampleArray`.",null,null],[3,"IntegralTexture2dMultisampleArrayLayerMipmap","","Represents a single layer of a mipmap level of a `IntegralTexture2dMultisampleArray`.",null,null],[11,"get_id","","",362,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",362,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"deref","","",362,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",150,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::integral_texture2d_multisample_array","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",362,{"inputs":[{"name":"self"}],"output":{"generics":["integraltexture2dmultisamplearray"],"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",362,{"inputs":[{"name":"self"}],"output":{"generics":["internalformat","getformaterror"],"name":"result"}}],[11,"empty","","Creates an empty texture.",362,{"inputs":[{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["integraltexture2dmultisamplearray","texturecreationerror"],"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",362,{"inputs":[{"name":"f"},{"name":"uncompressedintformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["integraltexture2dmultisamplearray","texturecreationerror"],"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",362,{"inputs":[{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["integraltexture2dmultisamplearray","texturecreationerror"],"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",362,{"inputs":[{"name":"f"},{"name":"uncompressedintformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"integraltexture2dmultisamplearray"}}],[11,"width","","Returns the width of that image.",362,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",362,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",362,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",362,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",362,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",362,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",362,{"inputs":[{"name":"self"}],"output":{"generics":["residenttexture","bindlesstexturesnotsupportederror"],"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",362,{"inputs":[{"name":"self"}],"output":{"name":"integraltexture2dmultisamplearraylayer"}}],[11,"layer","","Access a single layer of this texture.",362,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["integraltexture2dmultisamplearraylayer"],"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",362,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["integraltexture2dmultisamplearraymipmap"],"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",362,{"inputs":[{"name":"self"}],"output":{"name":"integraltexture2dmultisamplearraymipmap"}}],[11,"clone","","",363,{"inputs":[{"name":"self"}],"output":{"name":"integraltexture2dmultisamplearraylayer"}}],[11,"width","","Returns the width of that image.",363,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",363,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",363,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",363,null],[11,"get_texture","","Returns the corresponding texture.",363,{"inputs":[{"name":"self"}],"output":{"name":"integraltexture2dmultisamplearray"}}],[11,"get_layer","","Returns the layer index.",363,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",363,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",363,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["integraltexture2dmultisamplearraylayermipmap"],"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",363,{"inputs":[{"name":"self"}],"output":{"name":"integraltexture2dmultisamplearraylayermipmap"}}],[11,"clone","","",364,{"inputs":[{"name":"self"}],"output":{"name":"integraltexture2dmultisamplearraymipmap"}}],[11,"deref","","",364,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",364,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",364,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",364,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",364,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",364,null],[11,"get_texture","","Returns the corresponding texture.",364,{"inputs":[{"name":"self"}],"output":{"name":"integraltexture2dmultisamplearray"}}],[11,"get_level","","Returns the texture level.",364,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",364,{"inputs":[{"name":"self"}],"output":{"name":"integraltexture2dmultisamplearraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",364,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["integraltexture2dmultisamplearraylayermipmap"],"name":"option"}}],[11,"clone","","",365,{"inputs":[{"name":"self"}],"output":{"name":"integraltexture2dmultisamplearraylayermipmap"}}],[11,"width","","Returns the width of that image.",365,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",365,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",365,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",365,null],[11,"into","","",365,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",365,{"inputs":[{"name":"self"}],"output":{"name":"colorattachment"}}],[0,"unsigned_texture2d_multisample_array","glium::texture","Contains the implementation of `UnsignedTexture2dMultisampleArray`.",null,null],[3,"UnsignedTexture2dMultisampleArray","glium::texture::unsigned_texture2d_multisample_array","An array of two-dimensional textures  containing unsigned integral data.",null,null],[3,"UnsignedTexture2dMultisampleArrayLayer","","Represents a single layer of a `UnsignedTexture2dMultisampleArray`.",null,null],[3,"UnsignedTexture2dMultisampleArrayMipmap","","Represents a single mipmap level of a `UnsignedTexture2dMultisampleArray`.",null,null],[3,"UnsignedTexture2dMultisampleArrayLayerMipmap","","Represents a single layer of a mipmap level of a `UnsignedTexture2dMultisampleArray`.",null,null],[11,"get_id","","",366,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",366,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"deref","","",366,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",150,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::unsigned_texture2d_multisample_array","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",366,{"inputs":[{"name":"self"}],"output":{"generics":["unsignedtexture2dmultisamplearray"],"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",366,{"inputs":[{"name":"self"}],"output":{"generics":["internalformat","getformaterror"],"name":"result"}}],[11,"empty","","Creates an empty texture.",366,{"inputs":[{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["unsignedtexture2dmultisamplearray","texturecreationerror"],"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",366,{"inputs":[{"name":"f"},{"name":"uncompresseduintformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["unsignedtexture2dmultisamplearray","texturecreationerror"],"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",366,{"inputs":[{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["unsignedtexture2dmultisamplearray","texturecreationerror"],"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",366,{"inputs":[{"name":"f"},{"name":"uncompresseduintformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"unsignedtexture2dmultisamplearray"}}],[11,"width","","Returns the width of that image.",366,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",366,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",366,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",366,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",366,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",366,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",366,{"inputs":[{"name":"self"}],"output":{"generics":["residenttexture","bindlesstexturesnotsupportederror"],"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",366,{"inputs":[{"name":"self"}],"output":{"name":"unsignedtexture2dmultisamplearraylayer"}}],[11,"layer","","Access a single layer of this texture.",366,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["unsignedtexture2dmultisamplearraylayer"],"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",366,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["unsignedtexture2dmultisamplearraymipmap"],"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",366,{"inputs":[{"name":"self"}],"output":{"name":"unsignedtexture2dmultisamplearraymipmap"}}],[11,"clone","","",367,{"inputs":[{"name":"self"}],"output":{"name":"unsignedtexture2dmultisamplearraylayer"}}],[11,"width","","Returns the width of that image.",367,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",367,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",367,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",367,null],[11,"get_texture","","Returns the corresponding texture.",367,{"inputs":[{"name":"self"}],"output":{"name":"unsignedtexture2dmultisamplearray"}}],[11,"get_layer","","Returns the layer index.",367,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",367,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",367,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["unsignedtexture2dmultisamplearraylayermipmap"],"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",367,{"inputs":[{"name":"self"}],"output":{"name":"unsignedtexture2dmultisamplearraylayermipmap"}}],[11,"clone","","",368,{"inputs":[{"name":"self"}],"output":{"name":"unsignedtexture2dmultisamplearraymipmap"}}],[11,"deref","","",368,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",368,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",368,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",368,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",368,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",368,null],[11,"get_texture","","Returns the corresponding texture.",368,{"inputs":[{"name":"self"}],"output":{"name":"unsignedtexture2dmultisamplearray"}}],[11,"get_level","","Returns the texture level.",368,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",368,{"inputs":[{"name":"self"}],"output":{"name":"unsignedtexture2dmultisamplearraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",368,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["unsignedtexture2dmultisamplearraylayermipmap"],"name":"option"}}],[11,"clone","","",369,{"inputs":[{"name":"self"}],"output":{"name":"unsignedtexture2dmultisamplearraylayermipmap"}}],[11,"width","","Returns the width of that image.",369,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",369,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",369,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",369,null],[11,"into","","",369,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",369,{"inputs":[{"name":"self"}],"output":{"name":"colorattachment"}}],[0,"depth_texture2d_multisample_array","glium::texture","Contains the implementation of `DepthTexture2dMultisampleArray`.",null,null],[3,"DepthTexture2dMultisampleArray","glium::texture::depth_texture2d_multisample_array","An array of two-dimensional textures  containing depth data.",null,null],[3,"DepthTexture2dMultisampleArrayLayer","","Represents a single layer of a `DepthTexture2dMultisampleArray`.",null,null],[3,"DepthTexture2dMultisampleArrayMipmap","","Represents a single mipmap level of a `DepthTexture2dMultisampleArray`.",null,null],[3,"DepthTexture2dMultisampleArrayLayerMipmap","","Represents a single layer of a mipmap level of a `DepthTexture2dMultisampleArray`.",null,null],[11,"get_id","","",370,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",370,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"deref","","",370,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",150,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::depth_texture2d_multisample_array","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",370,{"inputs":[{"name":"self"}],"output":{"generics":["depthtexture2dmultisamplearray"],"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",370,{"inputs":[{"name":"self"}],"output":{"generics":["internalformat","getformaterror"],"name":"result"}}],[11,"empty","","Creates an empty texture.",370,{"inputs":[{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["depthtexture2dmultisamplearray","texturecreationerror"],"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",370,{"inputs":[{"name":"f"},{"name":"depthformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["depthtexture2dmultisamplearray","texturecreationerror"],"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",370,{"inputs":[{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["depthtexture2dmultisamplearray","texturecreationerror"],"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",370,{"inputs":[{"name":"f"},{"name":"depthformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"depthtexture2dmultisamplearray"}}],[11,"width","","Returns the width of that image.",370,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",370,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",370,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",370,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",370,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",370,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",370,{"inputs":[{"name":"self"}],"output":{"generics":["residenttexture","bindlesstexturesnotsupportederror"],"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",370,{"inputs":[{"name":"self"}],"output":{"name":"depthtexture2dmultisamplearraylayer"}}],[11,"layer","","Access a single layer of this texture.",370,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["depthtexture2dmultisamplearraylayer"],"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",370,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["depthtexture2dmultisamplearraymipmap"],"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",370,{"inputs":[{"name":"self"}],"output":{"name":"depthtexture2dmultisamplearraymipmap"}}],[11,"clone","","",371,{"inputs":[{"name":"self"}],"output":{"name":"depthtexture2dmultisamplearraylayer"}}],[11,"width","","Returns the width of that image.",371,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",371,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",371,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",371,null],[11,"get_texture","","Returns the corresponding texture.",371,{"inputs":[{"name":"self"}],"output":{"name":"depthtexture2dmultisamplearray"}}],[11,"get_layer","","Returns the layer index.",371,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",371,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",371,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["depthtexture2dmultisamplearraylayermipmap"],"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",371,{"inputs":[{"name":"self"}],"output":{"name":"depthtexture2dmultisamplearraylayermipmap"}}],[11,"clone","","",372,{"inputs":[{"name":"self"}],"output":{"name":"depthtexture2dmultisamplearraymipmap"}}],[11,"deref","","",372,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",372,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",372,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",372,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",372,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",372,null],[11,"get_texture","","Returns the corresponding texture.",372,{"inputs":[{"name":"self"}],"output":{"name":"depthtexture2dmultisamplearray"}}],[11,"get_level","","Returns the texture level.",372,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",372,{"inputs":[{"name":"self"}],"output":{"name":"depthtexture2dmultisamplearraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",372,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["depthtexture2dmultisamplearraylayermipmap"],"name":"option"}}],[11,"clone","","",373,{"inputs":[{"name":"self"}],"output":{"name":"depthtexture2dmultisamplearraylayermipmap"}}],[11,"width","","Returns the width of that image.",373,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",373,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",373,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",373,null],[11,"into","","",373,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"to_depth_attachment","","",373,{"inputs":[{"name":"self"}],"output":{"name":"depthattachment"}}],[0,"stencil_texture2d_multisample_array","glium::texture","Contains the implementation of `StencilTexture2dMultisampleArray`.",null,null],[3,"StencilTexture2dMultisampleArray","glium::texture::stencil_texture2d_multisample_array","An array of two-dimensional textures  containing stencil data.",null,null],[3,"StencilTexture2dMultisampleArrayLayer","","Represents a single layer of a `StencilTexture2dMultisampleArray`.",null,null],[3,"StencilTexture2dMultisampleArrayMipmap","","Represents a single mipmap level of a `StencilTexture2dMultisampleArray`.",null,null],[3,"StencilTexture2dMultisampleArrayLayerMipmap","","Represents a single layer of a mipmap level of a `StencilTexture2dMultisampleArray`.",null,null],[11,"get_id","","",374,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",374,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"deref","","",374,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"get_internal_format","","Determines the internal format of this texture.",374,{"inputs":[{"name":"self"}],"output":{"generics":["internalformat","getformaterror"],"name":"result"}}],[11,"empty","","Creates an empty texture.",374,{"inputs":[{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["stenciltexture2dmultisamplearray","texturecreationerror"],"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",374,{"inputs":[{"name":"f"},{"name":"stencilformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["stenciltexture2dmultisamplearray","texturecreationerror"],"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",374,{"inputs":[{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["stenciltexture2dmultisamplearray","texturecreationerror"],"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",374,{"inputs":[{"name":"f"},{"name":"stencilformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"stenciltexture2dmultisamplearray"}}],[11,"width","","Returns the width of that image.",374,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",374,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",374,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",374,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",374,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",374,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",374,{"inputs":[{"name":"self"}],"output":{"generics":["residenttexture","bindlesstexturesnotsupportederror"],"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",374,{"inputs":[{"name":"self"}],"output":{"name":"stenciltexture2dmultisamplearraylayer"}}],[11,"layer","","Access a single layer of this texture.",374,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["stenciltexture2dmultisamplearraylayer"],"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",374,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["stenciltexture2dmultisamplearraymipmap"],"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",374,{"inputs":[{"name":"self"}],"output":{"name":"stenciltexture2dmultisamplearraymipmap"}}],[11,"clone","","",375,{"inputs":[{"name":"self"}],"output":{"name":"stenciltexture2dmultisamplearraylayer"}}],[11,"width","","Returns the width of that image.",375,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",375,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",375,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",375,null],[11,"get_texture","","Returns the corresponding texture.",375,{"inputs":[{"name":"self"}],"output":{"name":"stenciltexture2dmultisamplearray"}}],[11,"get_layer","","Returns the layer index.",375,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",375,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",375,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["stenciltexture2dmultisamplearraylayermipmap"],"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",375,{"inputs":[{"name":"self"}],"output":{"name":"stenciltexture2dmultisamplearraylayermipmap"}}],[11,"clone","","",376,{"inputs":[{"name":"self"}],"output":{"name":"stenciltexture2dmultisamplearraymipmap"}}],[11,"deref","","",376,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",376,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",376,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",376,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",376,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",376,null],[11,"get_texture","","Returns the corresponding texture.",376,{"inputs":[{"name":"self"}],"output":{"name":"stenciltexture2dmultisamplearray"}}],[11,"get_level","","Returns the texture level.",376,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",376,{"inputs":[{"name":"self"}],"output":{"name":"stenciltexture2dmultisamplearraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",376,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["stenciltexture2dmultisamplearraylayermipmap"],"name":"option"}}],[11,"clone","","",377,{"inputs":[{"name":"self"}],"output":{"name":"stenciltexture2dmultisamplearraylayermipmap"}}],[11,"width","","Returns the width of that image.",377,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",377,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",377,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",377,null],[11,"into","","",377,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"to_stencil_attachment","","",377,{"inputs":[{"name":"self"}],"output":{"name":"stencilattachment"}}],[0,"depth_stencil_texture2d_multisample_array","glium::texture","Contains the implementation of `DepthStencilTexture2dMultisampleArray`.",null,null],[3,"DepthStencilTexture2dMultisampleArray","glium::texture::depth_stencil_texture2d_multisample_array","An array of two-dimensional textures  containing both depth and stencil data.",null,null],[3,"DepthStencilTexture2dMultisampleArrayLayer","","Represents a single layer of a `DepthStencilTexture2dMultisampleArray`.",null,null],[3,"DepthStencilTexture2dMultisampleArrayMipmap","","Represents a single mipmap level of a `DepthStencilTexture2dMultisampleArray`.",null,null],[3,"DepthStencilTexture2dMultisampleArrayLayerMipmap","","Represents a single layer of a mipmap level of a `DepthStencilTexture2dMultisampleArray`.",null,null],[11,"get_id","","",378,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",378,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"deref","","",378,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"get_internal_format","","Determines the internal format of this texture.",378,{"inputs":[{"name":"self"}],"output":{"generics":["internalformat","getformaterror"],"name":"result"}}],[11,"empty","","Creates an empty texture.",378,{"inputs":[{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["depthstenciltexture2dmultisamplearray","texturecreationerror"],"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",378,{"inputs":[{"name":"f"},{"name":"depthstencilformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["depthstenciltexture2dmultisamplearray","texturecreationerror"],"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",378,{"inputs":[{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["depthstenciltexture2dmultisamplearray","texturecreationerror"],"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",378,{"inputs":[{"name":"f"},{"name":"depthstencilformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"depthstenciltexture2dmultisamplearray"}}],[11,"width","","Returns the width of that image.",378,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",378,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",378,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",378,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",378,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",378,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",378,{"inputs":[{"name":"self"}],"output":{"generics":["residenttexture","bindlesstexturesnotsupportederror"],"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",378,{"inputs":[{"name":"self"}],"output":{"name":"depthstenciltexture2dmultisamplearraylayer"}}],[11,"layer","","Access a single layer of this texture.",378,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["depthstenciltexture2dmultisamplearraylayer"],"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",378,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["depthstenciltexture2dmultisamplearraymipmap"],"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",378,{"inputs":[{"name":"self"}],"output":{"name":"depthstenciltexture2dmultisamplearraymipmap"}}],[11,"clone","","",379,{"inputs":[{"name":"self"}],"output":{"name":"depthstenciltexture2dmultisamplearraylayer"}}],[11,"width","","Returns the width of that image.",379,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",379,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",379,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",379,null],[11,"get_texture","","Returns the corresponding texture.",379,{"inputs":[{"name":"self"}],"output":{"name":"depthstenciltexture2dmultisamplearray"}}],[11,"get_layer","","Returns the layer index.",379,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",379,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",379,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["depthstenciltexture2dmultisamplearraylayermipmap"],"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",379,{"inputs":[{"name":"self"}],"output":{"name":"depthstenciltexture2dmultisamplearraylayermipmap"}}],[11,"clone","","",380,{"inputs":[{"name":"self"}],"output":{"name":"depthstenciltexture2dmultisamplearraymipmap"}}],[11,"deref","","",380,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",380,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",380,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",380,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",380,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",380,null],[11,"get_texture","","Returns the corresponding texture.",380,{"inputs":[{"name":"self"}],"output":{"name":"depthstenciltexture2dmultisamplearray"}}],[11,"get_level","","Returns the texture level.",380,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",380,{"inputs":[{"name":"self"}],"output":{"name":"depthstenciltexture2dmultisamplearraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",380,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["depthstenciltexture2dmultisamplearraylayermipmap"],"name":"option"}}],[11,"clone","","",381,{"inputs":[{"name":"self"}],"output":{"name":"depthstenciltexture2dmultisamplearraylayermipmap"}}],[11,"width","","Returns the width of that image.",381,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",381,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",381,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",381,null],[11,"into","","",381,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"to_depth_stencil_attachment","","",381,{"inputs":[{"name":"self"}],"output":{"name":"depthstencilattachment"}}],[0,"cubemap","glium::texture","Contains the implementation of `Cubemap`.",null,null],[3,"Cubemap","glium::texture::cubemap","A cube texture  containing floating-point data.",null,null],[3,"CubemapMipmap","","Represents a single mipmap level of a `Cubemap`.",null,null],[3,"CubemapImage","","Represents a single image of a mipmap level of a layer of `Cubemap`.",null,null],[11,"get_id","","",382,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",382,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"deref","","",382,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",150,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::cubemap","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",382,{"inputs":[{"name":"self"}],"output":{"generics":["cubemap"],"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",382,{"inputs":[{"name":"self"}],"output":{"generics":["internalformat","getformaterror"],"name":"result"}}],[11,"empty","","Creates an empty texture.",382,{"inputs":[{"name":"f"},{"name":"u32"}],"output":{"generics":["cubemap","texturecreationerror"],"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",382,{"inputs":[{"name":"f"},{"name":"uncompressedfloatformat"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"generics":["cubemap","texturecreationerror"],"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",382,{"inputs":[{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"generics":["cubemap","texturecreationerror"],"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",382,{"inputs":[{"name":"f"},{"name":"uncompressedfloatformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"cubemap"}}],[11,"width","","Returns the width of that image.",382,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",382,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",382,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",382,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",382,{"inputs":[{"name":"self"}],"output":{"generics":["residenttexture","bindlesstexturesnotsupportederror"],"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",382,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["cubemapmipmap"],"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",382,{"inputs":[{"name":"self"}],"output":{"name":"cubemapmipmap"}}],[11,"clone","","",383,{"inputs":[{"name":"self"}],"output":{"name":"cubemapmipmap"}}],[11,"deref","","",383,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",383,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",383,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",383,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",383,{"inputs":[{"name":"self"}],"output":{"name":"cubemap"}}],[11,"get_level","","Returns the texture level.",383,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"image","","Provides an object representing a single layer of this cubemap.",383,{"inputs":[{"name":"self"},{"name":"cubelayer"}],"output":{"name":"cubemapimage"}}],[11,"clone","","",384,{"inputs":[{"name":"self"}],"output":{"name":"cubemapimage"}}],[11,"width","","Returns the width of that image.",384,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",384,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",384,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into","","",384,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",384,{"inputs":[{"name":"self"}],"output":{"name":"colorattachment"}}],[0,"compressed_cubemap","glium::texture","Contains the implementation of `CompressedCubemap`.",null,null],[3,"CompressedCubemap","glium::texture::compressed_cubemap","A compressed cube texture  containing floating-point data.",null,null],[3,"CompressedCubemapMipmap","","Represents a single mipmap level of a `CompressedCubemap`.",null,null],[3,"CompressedCubemapImage","","Represents a single image of a mipmap level of a layer of `CompressedCubemap`.",null,null],[11,"get_id","","",385,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",385,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"deref","","",385,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",150,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::compressed_cubemap","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",385,{"inputs":[{"name":"self"}],"output":{"generics":["compressedcubemap"],"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",385,{"inputs":[{"name":"self"}],"output":{"generics":["internalformat","getformaterror"],"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",385,{"inputs":[{"name":"f"},{"name":"compressedformat"},{"name":"compressedmipmapsoption"},{"name":"u32"}],"output":{"generics":["compressedcubemap","texturecreationerror"],"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",385,{"inputs":[{"name":"f"},{"name":"compressedformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"compressedcubemap"}}],[11,"width","","Returns the width of that image.",385,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",385,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",385,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",385,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"read_compressed_data","","Reads the content of the texture to RAM without decompressing it before.",385,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",385,{"inputs":[{"name":"self"}],"output":{"generics":["residenttexture","bindlesstexturesnotsupportederror"],"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",385,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["compressedcubemapmipmap"],"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",385,{"inputs":[{"name":"self"}],"output":{"name":"compressedcubemapmipmap"}}],[11,"clone","","",386,{"inputs":[{"name":"self"}],"output":{"name":"compressedcubemapmipmap"}}],[11,"deref","","",386,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",386,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",386,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",386,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"read_compressed_data","","Reads the content of the texture level to RAM without decompressing it before.",386,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_texture","","Returns the corresponding texture.",386,{"inputs":[{"name":"self"}],"output":{"name":"compressedcubemap"}}],[11,"get_level","","Returns the texture level.",386,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"image","","Provides an object representing a single layer of this cubemap.",386,{"inputs":[{"name":"self"},{"name":"cubelayer"}],"output":{"name":"compressedcubemapimage"}}],[11,"clone","","",387,{"inputs":[{"name":"self"}],"output":{"name":"compressedcubemapimage"}}],[11,"width","","Returns the width of that image.",387,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",387,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",387,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into","","",387,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[0,"srgb_cubemap","glium::texture","Contains the implementation of `SrgbCubemap`.",null,null],[3,"SrgbCubemap","glium::texture::srgb_cubemap","A cube texture  containing sRGB floating-point data.",null,null],[3,"SrgbCubemapMipmap","","Represents a single mipmap level of a `SrgbCubemap`.",null,null],[3,"SrgbCubemapImage","","Represents a single image of a mipmap level of a layer of `SrgbCubemap`.",null,null],[11,"get_id","","",388,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",388,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"deref","","",388,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",150,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::srgb_cubemap","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",388,{"inputs":[{"name":"self"}],"output":{"generics":["srgbcubemap"],"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",388,{"inputs":[{"name":"self"}],"output":{"generics":["internalformat","getformaterror"],"name":"result"}}],[11,"empty","","Creates an empty texture.",388,{"inputs":[{"name":"f"},{"name":"u32"}],"output":{"generics":["srgbcubemap","texturecreationerror"],"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",388,{"inputs":[{"name":"f"},{"name":"srgbformat"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"generics":["srgbcubemap","texturecreationerror"],"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",388,{"inputs":[{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"generics":["srgbcubemap","texturecreationerror"],"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",388,{"inputs":[{"name":"f"},{"name":"srgbformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"srgbcubemap"}}],[11,"width","","Returns the width of that image.",388,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",388,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",388,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",388,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",388,{"inputs":[{"name":"self"}],"output":{"generics":["residenttexture","bindlesstexturesnotsupportederror"],"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",388,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["srgbcubemapmipmap"],"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",388,{"inputs":[{"name":"self"}],"output":{"name":"srgbcubemapmipmap"}}],[11,"clone","","",389,{"inputs":[{"name":"self"}],"output":{"name":"srgbcubemapmipmap"}}],[11,"deref","","",389,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",389,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",389,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",389,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",389,{"inputs":[{"name":"self"}],"output":{"name":"srgbcubemap"}}],[11,"get_level","","Returns the texture level.",389,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"image","","Provides an object representing a single layer of this cubemap.",389,{"inputs":[{"name":"self"},{"name":"cubelayer"}],"output":{"name":"srgbcubemapimage"}}],[11,"clone","","",390,{"inputs":[{"name":"self"}],"output":{"name":"srgbcubemapimage"}}],[11,"width","","Returns the width of that image.",390,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",390,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",390,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into","","",390,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",390,{"inputs":[{"name":"self"}],"output":{"name":"colorattachment"}}],[0,"compressed_srgb_cubemap","glium::texture","Contains the implementation of `CompressedSrgbCubemap`.",null,null],[3,"CompressedSrgbCubemap","glium::texture::compressed_srgb_cubemap","A compressed cube texture  containing sRGB floating-point data.",null,null],[3,"CompressedSrgbCubemapMipmap","","Represents a single mipmap level of a `CompressedSrgbCubemap`.",null,null],[3,"CompressedSrgbCubemapImage","","Represents a single image of a mipmap level of a layer of `CompressedSrgbCubemap`.",null,null],[11,"get_id","","",391,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",391,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"deref","","",391,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",150,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::compressed_srgb_cubemap","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",391,{"inputs":[{"name":"self"}],"output":{"generics":["compressedsrgbcubemap"],"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",391,{"inputs":[{"name":"self"}],"output":{"generics":["internalformat","getformaterror"],"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",391,{"inputs":[{"name":"f"},{"name":"compressedsrgbformat"},{"name":"compressedmipmapsoption"},{"name":"u32"}],"output":{"generics":["compressedsrgbcubemap","texturecreationerror"],"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",391,{"inputs":[{"name":"f"},{"name":"compressedsrgbformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"compressedsrgbcubemap"}}],[11,"width","","Returns the width of that image.",391,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",391,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",391,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",391,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"read_compressed_data","","Reads the content of the texture to RAM without decompressing it before.",391,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",391,{"inputs":[{"name":"self"}],"output":{"generics":["residenttexture","bindlesstexturesnotsupportederror"],"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",391,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["compressedsrgbcubemapmipmap"],"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",391,{"inputs":[{"name":"self"}],"output":{"name":"compressedsrgbcubemapmipmap"}}],[11,"clone","","",392,{"inputs":[{"name":"self"}],"output":{"name":"compressedsrgbcubemapmipmap"}}],[11,"deref","","",392,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",392,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",392,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",392,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"read_compressed_data","","Reads the content of the texture level to RAM without decompressing it before.",392,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_texture","","Returns the corresponding texture.",392,{"inputs":[{"name":"self"}],"output":{"name":"compressedsrgbcubemap"}}],[11,"get_level","","Returns the texture level.",392,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"image","","Provides an object representing a single layer of this cubemap.",392,{"inputs":[{"name":"self"},{"name":"cubelayer"}],"output":{"name":"compressedsrgbcubemapimage"}}],[11,"clone","","",393,{"inputs":[{"name":"self"}],"output":{"name":"compressedsrgbcubemapimage"}}],[11,"width","","Returns the width of that image.",393,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",393,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",393,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into","","",393,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[0,"integral_cubemap","glium::texture","Contains the implementation of `IntegralCubemap`.",null,null],[3,"IntegralCubemap","glium::texture::integral_cubemap","A cube texture  containing signed integral data.",null,null],[3,"IntegralCubemapMipmap","","Represents a single mipmap level of a `IntegralCubemap`.",null,null],[3,"IntegralCubemapImage","","Represents a single image of a mipmap level of a layer of `IntegralCubemap`.",null,null],[11,"get_id","","",394,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",394,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"deref","","",394,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",150,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::integral_cubemap","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",394,{"inputs":[{"name":"self"}],"output":{"generics":["integralcubemap"],"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",394,{"inputs":[{"name":"self"}],"output":{"generics":["internalformat","getformaterror"],"name":"result"}}],[11,"empty","","Creates an empty texture.",394,{"inputs":[{"name":"f"},{"name":"u32"}],"output":{"generics":["integralcubemap","texturecreationerror"],"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",394,{"inputs":[{"name":"f"},{"name":"uncompressedintformat"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"generics":["integralcubemap","texturecreationerror"],"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",394,{"inputs":[{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"generics":["integralcubemap","texturecreationerror"],"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",394,{"inputs":[{"name":"f"},{"name":"uncompressedintformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"integralcubemap"}}],[11,"width","","Returns the width of that image.",394,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",394,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",394,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",394,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",394,{"inputs":[{"name":"self"}],"output":{"generics":["residenttexture","bindlesstexturesnotsupportederror"],"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",394,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["integralcubemapmipmap"],"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",394,{"inputs":[{"name":"self"}],"output":{"name":"integralcubemapmipmap"}}],[11,"clone","","",395,{"inputs":[{"name":"self"}],"output":{"name":"integralcubemapmipmap"}}],[11,"deref","","",395,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",395,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",395,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",395,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",395,{"inputs":[{"name":"self"}],"output":{"name":"integralcubemap"}}],[11,"get_level","","Returns the texture level.",395,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"image","","Provides an object representing a single layer of this cubemap.",395,{"inputs":[{"name":"self"},{"name":"cubelayer"}],"output":{"name":"integralcubemapimage"}}],[11,"clone","","",396,{"inputs":[{"name":"self"}],"output":{"name":"integralcubemapimage"}}],[11,"width","","Returns the width of that image.",396,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",396,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",396,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into","","",396,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",396,{"inputs":[{"name":"self"}],"output":{"name":"colorattachment"}}],[0,"unsigned_cubemap","glium::texture","Contains the implementation of `UnsignedCubemap`.",null,null],[3,"UnsignedCubemap","glium::texture::unsigned_cubemap","A cube texture  containing unsigned integral data.",null,null],[3,"UnsignedCubemapMipmap","","Represents a single mipmap level of a `UnsignedCubemap`.",null,null],[3,"UnsignedCubemapImage","","Represents a single image of a mipmap level of a layer of `UnsignedCubemap`.",null,null],[11,"get_id","","",397,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",397,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"deref","","",397,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",150,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::unsigned_cubemap","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",397,{"inputs":[{"name":"self"}],"output":{"generics":["unsignedcubemap"],"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",397,{"inputs":[{"name":"self"}],"output":{"generics":["internalformat","getformaterror"],"name":"result"}}],[11,"empty","","Creates an empty texture.",397,{"inputs":[{"name":"f"},{"name":"u32"}],"output":{"generics":["unsignedcubemap","texturecreationerror"],"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",397,{"inputs":[{"name":"f"},{"name":"uncompresseduintformat"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"generics":["unsignedcubemap","texturecreationerror"],"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",397,{"inputs":[{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"generics":["unsignedcubemap","texturecreationerror"],"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",397,{"inputs":[{"name":"f"},{"name":"uncompresseduintformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"unsignedcubemap"}}],[11,"width","","Returns the width of that image.",397,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",397,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",397,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",397,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",397,{"inputs":[{"name":"self"}],"output":{"generics":["residenttexture","bindlesstexturesnotsupportederror"],"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",397,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["unsignedcubemapmipmap"],"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",397,{"inputs":[{"name":"self"}],"output":{"name":"unsignedcubemapmipmap"}}],[11,"clone","","",398,{"inputs":[{"name":"self"}],"output":{"name":"unsignedcubemapmipmap"}}],[11,"deref","","",398,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",398,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",398,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",398,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",398,{"inputs":[{"name":"self"}],"output":{"name":"unsignedcubemap"}}],[11,"get_level","","Returns the texture level.",398,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"image","","Provides an object representing a single layer of this cubemap.",398,{"inputs":[{"name":"self"},{"name":"cubelayer"}],"output":{"name":"unsignedcubemapimage"}}],[11,"clone","","",399,{"inputs":[{"name":"self"}],"output":{"name":"unsignedcubemapimage"}}],[11,"width","","Returns the width of that image.",399,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",399,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",399,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into","","",399,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",399,{"inputs":[{"name":"self"}],"output":{"name":"colorattachment"}}],[0,"depth_cubemap","glium::texture","Contains the implementation of `DepthCubemap`.",null,null],[3,"DepthCubemap","glium::texture::depth_cubemap","A cube texture  containing depth data.",null,null],[3,"DepthCubemapMipmap","","Represents a single mipmap level of a `DepthCubemap`.",null,null],[3,"DepthCubemapImage","","Represents a single image of a mipmap level of a layer of `DepthCubemap`.",null,null],[11,"get_id","","",400,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",400,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"deref","","",400,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",150,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::depth_cubemap","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",400,{"inputs":[{"name":"self"}],"output":{"generics":["depthcubemap"],"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",400,{"inputs":[{"name":"self"}],"output":{"generics":["internalformat","getformaterror"],"name":"result"}}],[11,"empty","","Creates an empty texture.",400,{"inputs":[{"name":"f"},{"name":"u32"}],"output":{"generics":["depthcubemap","texturecreationerror"],"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",400,{"inputs":[{"name":"f"},{"name":"depthformat"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"generics":["depthcubemap","texturecreationerror"],"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",400,{"inputs":[{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"generics":["depthcubemap","texturecreationerror"],"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",400,{"inputs":[{"name":"f"},{"name":"depthformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"depthcubemap"}}],[11,"width","","Returns the width of that image.",400,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",400,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",400,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",400,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",400,{"inputs":[{"name":"self"}],"output":{"generics":["residenttexture","bindlesstexturesnotsupportederror"],"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",400,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["depthcubemapmipmap"],"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",400,{"inputs":[{"name":"self"}],"output":{"name":"depthcubemapmipmap"}}],[11,"clone","","",401,{"inputs":[{"name":"self"}],"output":{"name":"depthcubemapmipmap"}}],[11,"deref","","",401,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",401,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",401,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",401,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",401,{"inputs":[{"name":"self"}],"output":{"name":"depthcubemap"}}],[11,"get_level","","Returns the texture level.",401,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"image","","Provides an object representing a single layer of this cubemap.",401,{"inputs":[{"name":"self"},{"name":"cubelayer"}],"output":{"name":"depthcubemapimage"}}],[11,"clone","","",402,{"inputs":[{"name":"self"}],"output":{"name":"depthcubemapimage"}}],[11,"width","","Returns the width of that image.",402,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",402,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",402,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into","","",402,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"to_depth_attachment","","",402,{"inputs":[{"name":"self"}],"output":{"name":"depthattachment"}}],[0,"stencil_cubemap","glium::texture","Contains the implementation of `StencilCubemap`.",null,null],[3,"StencilCubemap","glium::texture::stencil_cubemap","A cube texture  containing stencil data.",null,null],[3,"StencilCubemapMipmap","","Represents a single mipmap level of a `StencilCubemap`.",null,null],[3,"StencilCubemapImage","","Represents a single image of a mipmap level of a layer of `StencilCubemap`.",null,null],[11,"get_id","","",403,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",403,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"deref","","",403,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"get_internal_format","","Determines the internal format of this texture.",403,{"inputs":[{"name":"self"}],"output":{"generics":["internalformat","getformaterror"],"name":"result"}}],[11,"empty","","Creates an empty texture.",403,{"inputs":[{"name":"f"},{"name":"u32"}],"output":{"generics":["stencilcubemap","texturecreationerror"],"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",403,{"inputs":[{"name":"f"},{"name":"stencilformat"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"generics":["stencilcubemap","texturecreationerror"],"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",403,{"inputs":[{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"generics":["stencilcubemap","texturecreationerror"],"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",403,{"inputs":[{"name":"f"},{"name":"stencilformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"stencilcubemap"}}],[11,"width","","Returns the width of that image.",403,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",403,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",403,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",403,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",403,{"inputs":[{"name":"self"}],"output":{"generics":["residenttexture","bindlesstexturesnotsupportederror"],"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",403,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["stencilcubemapmipmap"],"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",403,{"inputs":[{"name":"self"}],"output":{"name":"stencilcubemapmipmap"}}],[11,"clone","","",404,{"inputs":[{"name":"self"}],"output":{"name":"stencilcubemapmipmap"}}],[11,"deref","","",404,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",404,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",404,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",404,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",404,{"inputs":[{"name":"self"}],"output":{"name":"stencilcubemap"}}],[11,"get_level","","Returns the texture level.",404,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"image","","Provides an object representing a single layer of this cubemap.",404,{"inputs":[{"name":"self"},{"name":"cubelayer"}],"output":{"name":"stencilcubemapimage"}}],[11,"clone","","",405,{"inputs":[{"name":"self"}],"output":{"name":"stencilcubemapimage"}}],[11,"width","","Returns the width of that image.",405,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",405,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",405,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into","","",405,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"to_stencil_attachment","","",405,{"inputs":[{"name":"self"}],"output":{"name":"stencilattachment"}}],[0,"depth_stencil_cubemap","glium::texture","Contains the implementation of `DepthStencilCubemap`.",null,null],[3,"DepthStencilCubemap","glium::texture::depth_stencil_cubemap","A cube texture  containing both depth and stencil data.",null,null],[3,"DepthStencilCubemapMipmap","","Represents a single mipmap level of a `DepthStencilCubemap`.",null,null],[3,"DepthStencilCubemapImage","","Represents a single image of a mipmap level of a layer of `DepthStencilCubemap`.",null,null],[11,"get_id","","",406,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",406,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"deref","","",406,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"get_internal_format","","Determines the internal format of this texture.",406,{"inputs":[{"name":"self"}],"output":{"generics":["internalformat","getformaterror"],"name":"result"}}],[11,"empty","","Creates an empty texture.",406,{"inputs":[{"name":"f"},{"name":"u32"}],"output":{"generics":["depthstencilcubemap","texturecreationerror"],"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",406,{"inputs":[{"name":"f"},{"name":"depthstencilformat"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"generics":["depthstencilcubemap","texturecreationerror"],"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",406,{"inputs":[{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"generics":["depthstencilcubemap","texturecreationerror"],"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",406,{"inputs":[{"name":"f"},{"name":"depthstencilformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"depthstencilcubemap"}}],[11,"width","","Returns the width of that image.",406,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",406,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",406,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",406,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",406,{"inputs":[{"name":"self"}],"output":{"generics":["residenttexture","bindlesstexturesnotsupportederror"],"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",406,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["depthstencilcubemapmipmap"],"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",406,{"inputs":[{"name":"self"}],"output":{"name":"depthstencilcubemapmipmap"}}],[11,"clone","","",407,{"inputs":[{"name":"self"}],"output":{"name":"depthstencilcubemapmipmap"}}],[11,"deref","","",407,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",407,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",407,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",407,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",407,{"inputs":[{"name":"self"}],"output":{"name":"depthstencilcubemap"}}],[11,"get_level","","Returns the texture level.",407,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"image","","Provides an object representing a single layer of this cubemap.",407,{"inputs":[{"name":"self"},{"name":"cubelayer"}],"output":{"name":"depthstencilcubemapimage"}}],[11,"clone","","",408,{"inputs":[{"name":"self"}],"output":{"name":"depthstencilcubemapimage"}}],[11,"width","","Returns the width of that image.",408,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",408,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",408,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into","","",408,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"to_depth_stencil_attachment","","",408,{"inputs":[{"name":"self"}],"output":{"name":"depthstencilattachment"}}],[0,"cubemap_array","glium::texture","Contains the implementation of `CubemapArray`.",null,null],[3,"CubemapArray","glium::texture::cubemap_array","An array of cube textures  containing floating-point data.",null,null],[3,"CubemapArrayLayer","","Represents a single layer of a `CubemapArray`.",null,null],[3,"CubemapArrayMipmap","","Represents a single mipmap level of a `CubemapArray`.",null,null],[3,"CubemapArrayLayerMipmap","","Represents a single layer of a mipmap level of a `CubemapArray`.",null,null],[3,"CubemapArrayImage","","Represents a single image of a mipmap level of a layer of `CubemapArray`.",null,null],[11,"get_id","","",409,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",409,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"deref","","",409,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",150,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::cubemap_array","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",409,{"inputs":[{"name":"self"}],"output":{"generics":["cubemaparray"],"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",409,{"inputs":[{"name":"self"}],"output":{"generics":["internalformat","getformaterror"],"name":"result"}}],[11,"empty","","Creates an empty texture.",409,{"inputs":[{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["cubemaparray","texturecreationerror"],"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",409,{"inputs":[{"name":"f"},{"name":"uncompressedfloatformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["cubemaparray","texturecreationerror"],"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",409,{"inputs":[{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["cubemaparray","texturecreationerror"],"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",409,{"inputs":[{"name":"f"},{"name":"uncompressedfloatformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"cubemaparray"}}],[11,"width","","Returns the width of that image.",409,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",409,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",409,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",409,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",409,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",409,{"inputs":[{"name":"self"}],"output":{"generics":["residenttexture","bindlesstexturesnotsupportederror"],"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",409,{"inputs":[{"name":"self"}],"output":{"name":"cubemaparraylayer"}}],[11,"layer","","Access a single layer of this texture.",409,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["cubemaparraylayer"],"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",409,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["cubemaparraymipmap"],"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",409,{"inputs":[{"name":"self"}],"output":{"name":"cubemaparraymipmap"}}],[11,"clone","","",410,{"inputs":[{"name":"self"}],"output":{"name":"cubemaparraylayer"}}],[11,"width","","Returns the width of that image.",410,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",410,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",410,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",410,{"inputs":[{"name":"self"}],"output":{"name":"cubemaparray"}}],[11,"get_layer","","Returns the layer index.",410,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",410,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",410,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["cubemaparraylayermipmap"],"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",410,{"inputs":[{"name":"self"}],"output":{"name":"cubemaparraylayermipmap"}}],[11,"clone","","",411,{"inputs":[{"name":"self"}],"output":{"name":"cubemaparraymipmap"}}],[11,"deref","","",411,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",411,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",411,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",411,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",411,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",411,{"inputs":[{"name":"self"}],"output":{"name":"cubemaparray"}}],[11,"get_level","","Returns the texture level.",411,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",411,{"inputs":[{"name":"self"}],"output":{"name":"cubemaparraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",411,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["cubemaparraylayermipmap"],"name":"option"}}],[11,"clone","","",412,{"inputs":[{"name":"self"}],"output":{"name":"cubemaparraylayermipmap"}}],[11,"width","","Returns the width of that image.",412,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",412,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",412,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"image","","Provides an object representing a single layer of this cubemap.",412,{"inputs":[{"name":"self"},{"name":"cubelayer"}],"output":{"name":"cubemaparrayimage"}}],[11,"clone","","",413,{"inputs":[{"name":"self"}],"output":{"name":"cubemaparrayimage"}}],[11,"width","","Returns the width of that image.",413,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",413,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",413,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into","","",413,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",413,{"inputs":[{"name":"self"}],"output":{"name":"colorattachment"}}],[0,"compressed_cubemap_array","glium::texture","Contains the implementation of `CompressedCubemapArray`.",null,null],[3,"CompressedCubemapArray","glium::texture::compressed_cubemap_array","An array of compressed cube textures  containing floating-point data.",null,null],[3,"CompressedCubemapArrayLayer","","Represents a single layer of a `CompressedCubemapArray`.",null,null],[3,"CompressedCubemapArrayMipmap","","Represents a single mipmap level of a `CompressedCubemapArray`.",null,null],[3,"CompressedCubemapArrayLayerMipmap","","Represents a single layer of a mipmap level of a `CompressedCubemapArray`.",null,null],[3,"CompressedCubemapArrayImage","","Represents a single image of a mipmap level of a layer of `CompressedCubemapArray`.",null,null],[11,"get_id","","",414,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",414,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"deref","","",414,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",150,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::compressed_cubemap_array","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",414,{"inputs":[{"name":"self"}],"output":{"generics":["compressedcubemaparray"],"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",414,{"inputs":[{"name":"self"}],"output":{"generics":["internalformat","getformaterror"],"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",414,{"inputs":[{"name":"f"},{"name":"compressedformat"},{"name":"compressedmipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["compressedcubemaparray","texturecreationerror"],"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",414,{"inputs":[{"name":"f"},{"name":"compressedformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"compressedcubemaparray"}}],[11,"width","","Returns the width of that image.",414,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",414,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",414,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",414,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",414,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",414,{"inputs":[{"name":"self"}],"output":{"generics":["residenttexture","bindlesstexturesnotsupportederror"],"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",414,{"inputs":[{"name":"self"}],"output":{"name":"compressedcubemaparraylayer"}}],[11,"layer","","Access a single layer of this texture.",414,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["compressedcubemaparraylayer"],"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",414,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["compressedcubemaparraymipmap"],"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",414,{"inputs":[{"name":"self"}],"output":{"name":"compressedcubemaparraymipmap"}}],[11,"clone","","",415,{"inputs":[{"name":"self"}],"output":{"name":"compressedcubemaparraylayer"}}],[11,"width","","Returns the width of that image.",415,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",415,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",415,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",415,{"inputs":[{"name":"self"}],"output":{"name":"compressedcubemaparray"}}],[11,"get_layer","","Returns the layer index.",415,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",415,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",415,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["compressedcubemaparraylayermipmap"],"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",415,{"inputs":[{"name":"self"}],"output":{"name":"compressedcubemaparraylayermipmap"}}],[11,"clone","","",416,{"inputs":[{"name":"self"}],"output":{"name":"compressedcubemaparraymipmap"}}],[11,"deref","","",416,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",416,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",416,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",416,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",416,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",416,{"inputs":[{"name":"self"}],"output":{"name":"compressedcubemaparray"}}],[11,"get_level","","Returns the texture level.",416,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",416,{"inputs":[{"name":"self"}],"output":{"name":"compressedcubemaparraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",416,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["compressedcubemaparraylayermipmap"],"name":"option"}}],[11,"clone","","",417,{"inputs":[{"name":"self"}],"output":{"name":"compressedcubemaparraylayermipmap"}}],[11,"width","","Returns the width of that image.",417,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",417,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",417,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"image","","Provides an object representing a single layer of this cubemap.",417,{"inputs":[{"name":"self"},{"name":"cubelayer"}],"output":{"name":"compressedcubemaparrayimage"}}],[11,"clone","","",418,{"inputs":[{"name":"self"}],"output":{"name":"compressedcubemaparrayimage"}}],[11,"width","","Returns the width of that image.",418,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",418,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",418,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into","","",418,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[0,"srgb_cubemap_array","glium::texture","Contains the implementation of `SrgbCubemapArray`.",null,null],[3,"SrgbCubemapArray","glium::texture::srgb_cubemap_array","An array of cube textures  containing sRGB floating-point data.",null,null],[3,"SrgbCubemapArrayLayer","","Represents a single layer of a `SrgbCubemapArray`.",null,null],[3,"SrgbCubemapArrayMipmap","","Represents a single mipmap level of a `SrgbCubemapArray`.",null,null],[3,"SrgbCubemapArrayLayerMipmap","","Represents a single layer of a mipmap level of a `SrgbCubemapArray`.",null,null],[3,"SrgbCubemapArrayImage","","Represents a single image of a mipmap level of a layer of `SrgbCubemapArray`.",null,null],[11,"get_id","","",419,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",419,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"deref","","",419,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",150,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::srgb_cubemap_array","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",419,{"inputs":[{"name":"self"}],"output":{"generics":["srgbcubemaparray"],"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",419,{"inputs":[{"name":"self"}],"output":{"generics":["internalformat","getformaterror"],"name":"result"}}],[11,"empty","","Creates an empty texture.",419,{"inputs":[{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["srgbcubemaparray","texturecreationerror"],"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",419,{"inputs":[{"name":"f"},{"name":"srgbformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["srgbcubemaparray","texturecreationerror"],"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",419,{"inputs":[{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["srgbcubemaparray","texturecreationerror"],"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",419,{"inputs":[{"name":"f"},{"name":"srgbformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"srgbcubemaparray"}}],[11,"width","","Returns the width of that image.",419,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",419,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",419,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",419,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",419,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",419,{"inputs":[{"name":"self"}],"output":{"generics":["residenttexture","bindlesstexturesnotsupportederror"],"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",419,{"inputs":[{"name":"self"}],"output":{"name":"srgbcubemaparraylayer"}}],[11,"layer","","Access a single layer of this texture.",419,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["srgbcubemaparraylayer"],"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",419,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["srgbcubemaparraymipmap"],"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",419,{"inputs":[{"name":"self"}],"output":{"name":"srgbcubemaparraymipmap"}}],[11,"clone","","",420,{"inputs":[{"name":"self"}],"output":{"name":"srgbcubemaparraylayer"}}],[11,"width","","Returns the width of that image.",420,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",420,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",420,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",420,{"inputs":[{"name":"self"}],"output":{"name":"srgbcubemaparray"}}],[11,"get_layer","","Returns the layer index.",420,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",420,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",420,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["srgbcubemaparraylayermipmap"],"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",420,{"inputs":[{"name":"self"}],"output":{"name":"srgbcubemaparraylayermipmap"}}],[11,"clone","","",421,{"inputs":[{"name":"self"}],"output":{"name":"srgbcubemaparraymipmap"}}],[11,"deref","","",421,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",421,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",421,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",421,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",421,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",421,{"inputs":[{"name":"self"}],"output":{"name":"srgbcubemaparray"}}],[11,"get_level","","Returns the texture level.",421,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",421,{"inputs":[{"name":"self"}],"output":{"name":"srgbcubemaparraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",421,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["srgbcubemaparraylayermipmap"],"name":"option"}}],[11,"clone","","",422,{"inputs":[{"name":"self"}],"output":{"name":"srgbcubemaparraylayermipmap"}}],[11,"width","","Returns the width of that image.",422,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",422,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",422,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"image","","Provides an object representing a single layer of this cubemap.",422,{"inputs":[{"name":"self"},{"name":"cubelayer"}],"output":{"name":"srgbcubemaparrayimage"}}],[11,"clone","","",423,{"inputs":[{"name":"self"}],"output":{"name":"srgbcubemaparrayimage"}}],[11,"width","","Returns the width of that image.",423,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",423,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",423,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into","","",423,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",423,{"inputs":[{"name":"self"}],"output":{"name":"colorattachment"}}],[0,"compressed_srgb_cubemap_array","glium::texture","Contains the implementation of `CompressedSrgbCubemapArray`.",null,null],[3,"CompressedSrgbCubemapArray","glium::texture::compressed_srgb_cubemap_array","An array of compressed cube textures  containing sRGB floating-point data.",null,null],[3,"CompressedSrgbCubemapArrayLayer","","Represents a single layer of a `CompressedSrgbCubemapArray`.",null,null],[3,"CompressedSrgbCubemapArrayMipmap","","Represents a single mipmap level of a `CompressedSrgbCubemapArray`.",null,null],[3,"CompressedSrgbCubemapArrayLayerMipmap","","Represents a single layer of a mipmap level of a `CompressedSrgbCubemapArray`.",null,null],[3,"CompressedSrgbCubemapArrayImage","","Represents a single image of a mipmap level of a layer of `CompressedSrgbCubemapArray`.",null,null],[11,"get_id","","",424,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",424,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"deref","","",424,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",150,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::compressed_srgb_cubemap_array","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",424,{"inputs":[{"name":"self"}],"output":{"generics":["compressedsrgbcubemaparray"],"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",424,{"inputs":[{"name":"self"}],"output":{"generics":["internalformat","getformaterror"],"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",424,{"inputs":[{"name":"f"},{"name":"compressedsrgbformat"},{"name":"compressedmipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["compressedsrgbcubemaparray","texturecreationerror"],"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",424,{"inputs":[{"name":"f"},{"name":"compressedsrgbformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"compressedsrgbcubemaparray"}}],[11,"width","","Returns the width of that image.",424,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",424,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",424,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",424,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",424,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",424,{"inputs":[{"name":"self"}],"output":{"generics":["residenttexture","bindlesstexturesnotsupportederror"],"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",424,{"inputs":[{"name":"self"}],"output":{"name":"compressedsrgbcubemaparraylayer"}}],[11,"layer","","Access a single layer of this texture.",424,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["compressedsrgbcubemaparraylayer"],"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",424,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["compressedsrgbcubemaparraymipmap"],"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",424,{"inputs":[{"name":"self"}],"output":{"name":"compressedsrgbcubemaparraymipmap"}}],[11,"clone","","",425,{"inputs":[{"name":"self"}],"output":{"name":"compressedsrgbcubemaparraylayer"}}],[11,"width","","Returns the width of that image.",425,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",425,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",425,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",425,{"inputs":[{"name":"self"}],"output":{"name":"compressedsrgbcubemaparray"}}],[11,"get_layer","","Returns the layer index.",425,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",425,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",425,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["compressedsrgbcubemaparraylayermipmap"],"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",425,{"inputs":[{"name":"self"}],"output":{"name":"compressedsrgbcubemaparraylayermipmap"}}],[11,"clone","","",426,{"inputs":[{"name":"self"}],"output":{"name":"compressedsrgbcubemaparraymipmap"}}],[11,"deref","","",426,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",426,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",426,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",426,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",426,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",426,{"inputs":[{"name":"self"}],"output":{"name":"compressedsrgbcubemaparray"}}],[11,"get_level","","Returns the texture level.",426,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",426,{"inputs":[{"name":"self"}],"output":{"name":"compressedsrgbcubemaparraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",426,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["compressedsrgbcubemaparraylayermipmap"],"name":"option"}}],[11,"clone","","",427,{"inputs":[{"name":"self"}],"output":{"name":"compressedsrgbcubemaparraylayermipmap"}}],[11,"width","","Returns the width of that image.",427,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",427,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",427,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"image","","Provides an object representing a single layer of this cubemap.",427,{"inputs":[{"name":"self"},{"name":"cubelayer"}],"output":{"name":"compressedsrgbcubemaparrayimage"}}],[11,"clone","","",428,{"inputs":[{"name":"self"}],"output":{"name":"compressedsrgbcubemaparrayimage"}}],[11,"width","","Returns the width of that image.",428,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",428,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",428,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into","","",428,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[0,"integral_cubemap_array","glium::texture","Contains the implementation of `IntegralCubemapArray`.",null,null],[3,"IntegralCubemapArray","glium::texture::integral_cubemap_array","An array of cube textures  containing signed integral data.",null,null],[3,"IntegralCubemapArrayLayer","","Represents a single layer of a `IntegralCubemapArray`.",null,null],[3,"IntegralCubemapArrayMipmap","","Represents a single mipmap level of a `IntegralCubemapArray`.",null,null],[3,"IntegralCubemapArrayLayerMipmap","","Represents a single layer of a mipmap level of a `IntegralCubemapArray`.",null,null],[3,"IntegralCubemapArrayImage","","Represents a single image of a mipmap level of a layer of `IntegralCubemapArray`.",null,null],[11,"get_id","","",429,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",429,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"deref","","",429,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",150,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::integral_cubemap_array","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",429,{"inputs":[{"name":"self"}],"output":{"generics":["integralcubemaparray"],"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",429,{"inputs":[{"name":"self"}],"output":{"generics":["internalformat","getformaterror"],"name":"result"}}],[11,"empty","","Creates an empty texture.",429,{"inputs":[{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["integralcubemaparray","texturecreationerror"],"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",429,{"inputs":[{"name":"f"},{"name":"uncompressedintformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["integralcubemaparray","texturecreationerror"],"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",429,{"inputs":[{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["integralcubemaparray","texturecreationerror"],"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",429,{"inputs":[{"name":"f"},{"name":"uncompressedintformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"integralcubemaparray"}}],[11,"width","","Returns the width of that image.",429,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",429,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",429,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",429,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",429,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",429,{"inputs":[{"name":"self"}],"output":{"generics":["residenttexture","bindlesstexturesnotsupportederror"],"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",429,{"inputs":[{"name":"self"}],"output":{"name":"integralcubemaparraylayer"}}],[11,"layer","","Access a single layer of this texture.",429,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["integralcubemaparraylayer"],"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",429,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["integralcubemaparraymipmap"],"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",429,{"inputs":[{"name":"self"}],"output":{"name":"integralcubemaparraymipmap"}}],[11,"clone","","",430,{"inputs":[{"name":"self"}],"output":{"name":"integralcubemaparraylayer"}}],[11,"width","","Returns the width of that image.",430,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",430,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",430,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",430,{"inputs":[{"name":"self"}],"output":{"name":"integralcubemaparray"}}],[11,"get_layer","","Returns the layer index.",430,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",430,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",430,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["integralcubemaparraylayermipmap"],"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",430,{"inputs":[{"name":"self"}],"output":{"name":"integralcubemaparraylayermipmap"}}],[11,"clone","","",431,{"inputs":[{"name":"self"}],"output":{"name":"integralcubemaparraymipmap"}}],[11,"deref","","",431,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",431,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",431,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",431,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",431,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",431,{"inputs":[{"name":"self"}],"output":{"name":"integralcubemaparray"}}],[11,"get_level","","Returns the texture level.",431,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",431,{"inputs":[{"name":"self"}],"output":{"name":"integralcubemaparraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",431,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["integralcubemaparraylayermipmap"],"name":"option"}}],[11,"clone","","",432,{"inputs":[{"name":"self"}],"output":{"name":"integralcubemaparraylayermipmap"}}],[11,"width","","Returns the width of that image.",432,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",432,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",432,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"image","","Provides an object representing a single layer of this cubemap.",432,{"inputs":[{"name":"self"},{"name":"cubelayer"}],"output":{"name":"integralcubemaparrayimage"}}],[11,"clone","","",433,{"inputs":[{"name":"self"}],"output":{"name":"integralcubemaparrayimage"}}],[11,"width","","Returns the width of that image.",433,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",433,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",433,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into","","",433,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",433,{"inputs":[{"name":"self"}],"output":{"name":"colorattachment"}}],[0,"unsigned_cubemap_array","glium::texture","Contains the implementation of `UnsignedCubemapArray`.",null,null],[3,"UnsignedCubemapArray","glium::texture::unsigned_cubemap_array","An array of cube textures  containing unsigned integral data.",null,null],[3,"UnsignedCubemapArrayLayer","","Represents a single layer of a `UnsignedCubemapArray`.",null,null],[3,"UnsignedCubemapArrayMipmap","","Represents a single mipmap level of a `UnsignedCubemapArray`.",null,null],[3,"UnsignedCubemapArrayLayerMipmap","","Represents a single layer of a mipmap level of a `UnsignedCubemapArray`.",null,null],[3,"UnsignedCubemapArrayImage","","Represents a single image of a mipmap level of a layer of `UnsignedCubemapArray`.",null,null],[11,"get_id","","",434,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",434,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"deref","","",434,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",150,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::unsigned_cubemap_array","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",434,{"inputs":[{"name":"self"}],"output":{"generics":["unsignedcubemaparray"],"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",434,{"inputs":[{"name":"self"}],"output":{"generics":["internalformat","getformaterror"],"name":"result"}}],[11,"empty","","Creates an empty texture.",434,{"inputs":[{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["unsignedcubemaparray","texturecreationerror"],"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",434,{"inputs":[{"name":"f"},{"name":"uncompresseduintformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["unsignedcubemaparray","texturecreationerror"],"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",434,{"inputs":[{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["unsignedcubemaparray","texturecreationerror"],"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",434,{"inputs":[{"name":"f"},{"name":"uncompresseduintformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"unsignedcubemaparray"}}],[11,"width","","Returns the width of that image.",434,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",434,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",434,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",434,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",434,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",434,{"inputs":[{"name":"self"}],"output":{"generics":["residenttexture","bindlesstexturesnotsupportederror"],"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",434,{"inputs":[{"name":"self"}],"output":{"name":"unsignedcubemaparraylayer"}}],[11,"layer","","Access a single layer of this texture.",434,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["unsignedcubemaparraylayer"],"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",434,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["unsignedcubemaparraymipmap"],"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",434,{"inputs":[{"name":"self"}],"output":{"name":"unsignedcubemaparraymipmap"}}],[11,"clone","","",435,{"inputs":[{"name":"self"}],"output":{"name":"unsignedcubemaparraylayer"}}],[11,"width","","Returns the width of that image.",435,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",435,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",435,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",435,{"inputs":[{"name":"self"}],"output":{"name":"unsignedcubemaparray"}}],[11,"get_layer","","Returns the layer index.",435,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",435,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",435,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["unsignedcubemaparraylayermipmap"],"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",435,{"inputs":[{"name":"self"}],"output":{"name":"unsignedcubemaparraylayermipmap"}}],[11,"clone","","",436,{"inputs":[{"name":"self"}],"output":{"name":"unsignedcubemaparraymipmap"}}],[11,"deref","","",436,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",436,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",436,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",436,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",436,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",436,{"inputs":[{"name":"self"}],"output":{"name":"unsignedcubemaparray"}}],[11,"get_level","","Returns the texture level.",436,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",436,{"inputs":[{"name":"self"}],"output":{"name":"unsignedcubemaparraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",436,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["unsignedcubemaparraylayermipmap"],"name":"option"}}],[11,"clone","","",437,{"inputs":[{"name":"self"}],"output":{"name":"unsignedcubemaparraylayermipmap"}}],[11,"width","","Returns the width of that image.",437,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",437,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",437,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"image","","Provides an object representing a single layer of this cubemap.",437,{"inputs":[{"name":"self"},{"name":"cubelayer"}],"output":{"name":"unsignedcubemaparrayimage"}}],[11,"clone","","",438,{"inputs":[{"name":"self"}],"output":{"name":"unsignedcubemaparrayimage"}}],[11,"width","","Returns the width of that image.",438,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",438,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",438,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into","","",438,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",438,{"inputs":[{"name":"self"}],"output":{"name":"colorattachment"}}],[0,"depth_cubemap_array","glium::texture","Contains the implementation of `DepthCubemapArray`.",null,null],[3,"DepthCubemapArray","glium::texture::depth_cubemap_array","An array of cube textures  containing depth data.",null,null],[3,"DepthCubemapArrayLayer","","Represents a single layer of a `DepthCubemapArray`.",null,null],[3,"DepthCubemapArrayMipmap","","Represents a single mipmap level of a `DepthCubemapArray`.",null,null],[3,"DepthCubemapArrayLayerMipmap","","Represents a single layer of a mipmap level of a `DepthCubemapArray`.",null,null],[3,"DepthCubemapArrayImage","","Represents a single image of a mipmap level of a layer of `DepthCubemapArray`.",null,null],[11,"get_id","","",439,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",439,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"deref","","",439,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",150,{"inputs":[{"name":"self"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::depth_cubemap_array","Builds a `Sampler` marker object that allows you to indicate how the texture should be sampled from inside a shader.",439,{"inputs":[{"name":"self"}],"output":{"generics":["depthcubemaparray"],"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",439,{"inputs":[{"name":"self"}],"output":{"generics":["internalformat","getformaterror"],"name":"result"}}],[11,"empty","","Creates an empty texture.",439,{"inputs":[{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["depthcubemaparray","texturecreationerror"],"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",439,{"inputs":[{"name":"f"},{"name":"depthformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["depthcubemaparray","texturecreationerror"],"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",439,{"inputs":[{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["depthcubemaparray","texturecreationerror"],"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",439,{"inputs":[{"name":"f"},{"name":"depthformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"depthcubemaparray"}}],[11,"width","","Returns the width of that image.",439,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",439,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",439,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",439,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",439,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",439,{"inputs":[{"name":"self"}],"output":{"generics":["residenttexture","bindlesstexturesnotsupportederror"],"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",439,{"inputs":[{"name":"self"}],"output":{"name":"depthcubemaparraylayer"}}],[11,"layer","","Access a single layer of this texture.",439,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["depthcubemaparraylayer"],"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",439,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["depthcubemaparraymipmap"],"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",439,{"inputs":[{"name":"self"}],"output":{"name":"depthcubemaparraymipmap"}}],[11,"clone","","",440,{"inputs":[{"name":"self"}],"output":{"name":"depthcubemaparraylayer"}}],[11,"width","","Returns the width of that image.",440,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",440,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",440,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",440,{"inputs":[{"name":"self"}],"output":{"name":"depthcubemaparray"}}],[11,"get_layer","","Returns the layer index.",440,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",440,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",440,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["depthcubemaparraylayermipmap"],"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",440,{"inputs":[{"name":"self"}],"output":{"name":"depthcubemaparraylayermipmap"}}],[11,"clone","","",441,{"inputs":[{"name":"self"}],"output":{"name":"depthcubemaparraymipmap"}}],[11,"deref","","",441,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",441,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",441,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",441,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",441,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",441,{"inputs":[{"name":"self"}],"output":{"name":"depthcubemaparray"}}],[11,"get_level","","Returns the texture level.",441,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",441,{"inputs":[{"name":"self"}],"output":{"name":"depthcubemaparraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",441,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["depthcubemaparraylayermipmap"],"name":"option"}}],[11,"clone","","",442,{"inputs":[{"name":"self"}],"output":{"name":"depthcubemaparraylayermipmap"}}],[11,"width","","Returns the width of that image.",442,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",442,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",442,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"image","","Provides an object representing a single layer of this cubemap.",442,{"inputs":[{"name":"self"},{"name":"cubelayer"}],"output":{"name":"depthcubemaparrayimage"}}],[11,"clone","","",443,{"inputs":[{"name":"self"}],"output":{"name":"depthcubemaparrayimage"}}],[11,"width","","Returns the width of that image.",443,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",443,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",443,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into","","",443,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"to_depth_attachment","","",443,{"inputs":[{"name":"self"}],"output":{"name":"depthattachment"}}],[0,"stencil_cubemap_array","glium::texture","Contains the implementation of `StencilCubemapArray`.",null,null],[3,"StencilCubemapArray","glium::texture::stencil_cubemap_array","An array of cube textures  containing stencil data.",null,null],[3,"StencilCubemapArrayLayer","","Represents a single layer of a `StencilCubemapArray`.",null,null],[3,"StencilCubemapArrayMipmap","","Represents a single mipmap level of a `StencilCubemapArray`.",null,null],[3,"StencilCubemapArrayLayerMipmap","","Represents a single layer of a mipmap level of a `StencilCubemapArray`.",null,null],[3,"StencilCubemapArrayImage","","Represents a single image of a mipmap level of a layer of `StencilCubemapArray`.",null,null],[11,"get_id","","",444,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",444,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"deref","","",444,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"get_internal_format","","Determines the internal format of this texture.",444,{"inputs":[{"name":"self"}],"output":{"generics":["internalformat","getformaterror"],"name":"result"}}],[11,"empty","","Creates an empty texture.",444,{"inputs":[{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["stencilcubemaparray","texturecreationerror"],"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",444,{"inputs":[{"name":"f"},{"name":"stencilformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["stencilcubemaparray","texturecreationerror"],"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",444,{"inputs":[{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["stencilcubemaparray","texturecreationerror"],"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",444,{"inputs":[{"name":"f"},{"name":"stencilformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"stencilcubemaparray"}}],[11,"width","","Returns the width of that image.",444,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",444,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",444,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",444,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",444,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",444,{"inputs":[{"name":"self"}],"output":{"generics":["residenttexture","bindlesstexturesnotsupportederror"],"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",444,{"inputs":[{"name":"self"}],"output":{"name":"stencilcubemaparraylayer"}}],[11,"layer","","Access a single layer of this texture.",444,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["stencilcubemaparraylayer"],"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",444,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["stencilcubemaparraymipmap"],"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",444,{"inputs":[{"name":"self"}],"output":{"name":"stencilcubemaparraymipmap"}}],[11,"clone","","",445,{"inputs":[{"name":"self"}],"output":{"name":"stencilcubemaparraylayer"}}],[11,"width","","Returns the width of that image.",445,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",445,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",445,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",445,{"inputs":[{"name":"self"}],"output":{"name":"stencilcubemaparray"}}],[11,"get_layer","","Returns the layer index.",445,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",445,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",445,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["stencilcubemaparraylayermipmap"],"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",445,{"inputs":[{"name":"self"}],"output":{"name":"stencilcubemaparraylayermipmap"}}],[11,"clone","","",446,{"inputs":[{"name":"self"}],"output":{"name":"stencilcubemaparraymipmap"}}],[11,"deref","","",446,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",446,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",446,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",446,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",446,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",446,{"inputs":[{"name":"self"}],"output":{"name":"stencilcubemaparray"}}],[11,"get_level","","Returns the texture level.",446,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",446,{"inputs":[{"name":"self"}],"output":{"name":"stencilcubemaparraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",446,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["stencilcubemaparraylayermipmap"],"name":"option"}}],[11,"clone","","",447,{"inputs":[{"name":"self"}],"output":{"name":"stencilcubemaparraylayermipmap"}}],[11,"width","","Returns the width of that image.",447,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",447,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",447,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"image","","Provides an object representing a single layer of this cubemap.",447,{"inputs":[{"name":"self"},{"name":"cubelayer"}],"output":{"name":"stencilcubemaparrayimage"}}],[11,"clone","","",448,{"inputs":[{"name":"self"}],"output":{"name":"stencilcubemaparrayimage"}}],[11,"width","","Returns the width of that image.",448,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",448,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",448,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into","","",448,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"to_stencil_attachment","","",448,{"inputs":[{"name":"self"}],"output":{"name":"stencilattachment"}}],[0,"depth_stencil_cubemap_array","glium::texture","Contains the implementation of `DepthStencilCubemapArray`.",null,null],[3,"DepthStencilCubemapArray","glium::texture::depth_stencil_cubemap_array","An array of cube textures  containing both depth and stencil data.",null,null],[3,"DepthStencilCubemapArrayLayer","","Represents a single layer of a `DepthStencilCubemapArray`.",null,null],[3,"DepthStencilCubemapArrayMipmap","","Represents a single mipmap level of a `DepthStencilCubemapArray`.",null,null],[3,"DepthStencilCubemapArrayLayerMipmap","","Represents a single layer of a mipmap level of a `DepthStencilCubemapArray`.",null,null],[3,"DepthStencilCubemapArrayImage","","Represents a single image of a mipmap level of a layer of `DepthStencilCubemapArray`.",null,null],[11,"get_id","","",449,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"fmt","","",449,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"deref","","",449,{"inputs":[{"name":"self"}],"output":{"name":"textureany"}}],[11,"get_internal_format","","Determines the internal format of this texture.",449,{"inputs":[{"name":"self"}],"output":{"generics":["internalformat","getformaterror"],"name":"result"}}],[11,"empty","","Creates an empty texture.",449,{"inputs":[{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["depthstencilcubemaparray","texturecreationerror"],"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",449,{"inputs":[{"name":"f"},{"name":"depthstencilformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["depthstencilcubemaparray","texturecreationerror"],"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",449,{"inputs":[{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["depthstencilcubemaparray","texturecreationerror"],"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture. If `owned` is true, this reference will take ownership of the texture and be responsible for cleaning it up. Otherwise, the texture must be cleaned up externally, but only after this reference's lifetime has ended.",449,{"inputs":[{"name":"f"},{"name":"depthstencilformat"},{"name":"c_uint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"depthstencilcubemaparray"}}],[11,"width","","Returns the width of that image.",449,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",449,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",449,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",449,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",449,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",449,{"inputs":[{"name":"self"}],"output":{"generics":["residenttexture","bindlesstexturesnotsupportederror"],"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",449,{"inputs":[{"name":"self"}],"output":{"name":"depthstencilcubemaparraylayer"}}],[11,"layer","","Access a single layer of this texture.",449,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["depthstencilcubemaparraylayer"],"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",449,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["depthstencilcubemaparraymipmap"],"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",449,{"inputs":[{"name":"self"}],"output":{"name":"depthstencilcubemaparraymipmap"}}],[11,"clone","","",450,{"inputs":[{"name":"self"}],"output":{"name":"depthstencilcubemaparraylayer"}}],[11,"width","","Returns the width of that image.",450,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",450,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",450,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",450,{"inputs":[{"name":"self"}],"output":{"name":"depthstencilcubemaparray"}}],[11,"get_layer","","Returns the layer index.",450,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",450,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",450,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["depthstencilcubemaparraylayermipmap"],"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",450,{"inputs":[{"name":"self"}],"output":{"name":"depthstencilcubemaparraylayermipmap"}}],[11,"clone","","",451,{"inputs":[{"name":"self"}],"output":{"name":"depthstencilcubemaparraymipmap"}}],[11,"deref","","",451,{"inputs":[{"name":"self"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",451,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",451,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",451,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",451,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",451,{"inputs":[{"name":"self"}],"output":{"name":"depthstencilcubemaparray"}}],[11,"get_level","","Returns the texture level.",451,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",451,{"inputs":[{"name":"self"}],"output":{"name":"depthstencilcubemaparraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",451,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["depthstencilcubemaparraylayermipmap"],"name":"option"}}],[11,"clone","","",452,{"inputs":[{"name":"self"}],"output":{"name":"depthstencilcubemaparraylayermipmap"}}],[11,"width","","Returns the width of that image.",452,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",452,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",452,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"image","","Provides an object representing a single layer of this cubemap.",452,{"inputs":[{"name":"self"},{"name":"cubelayer"}],"output":{"name":"depthstencilcubemaparrayimage"}}],[11,"clone","","",453,{"inputs":[{"name":"self"}],"output":{"name":"depthstencilcubemaparrayimage"}}],[11,"width","","Returns the width of that image.",453,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",453,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",453,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"into","","",453,{"inputs":[{"name":"self"}],"output":{"name":"textureanyimage"}}],[11,"to_depth_stencil_attachment","","",453,{"inputs":[{"name":"self"}],"output":{"name":"depthstencilattachment"}}],[8,"PixelValue","glium::texture","A trait that must be implemented for any type that can represent the value of a pixel.",null,null],[10,"get_format","","Returns corresponding client format.",454,{"inputs":[],"output":{"name":"clientformat"}}],[8,"Texture1dDataSource","","Trait that describes data for a one-dimensional texture.",null,null],[16,"Data","","The type of each pixel.",455,null],[10,"into_raw","","Returns the raw representation of the data.",455,{"inputs":[{"name":"self"}],"output":{"name":"rawimage1d"}}],[8,"Texture1dDataSink","","Trait that describes types that can be built from one-dimensional texture data.",null,null],[10,"from_raw","","Builds a new object from raw data.",456,{"inputs":[{"name":"cow"},{"name":"u32"}],"output":{"name":"self"}}],[8,"Texture2dDataSource","","Trait that describes data for a two-dimensional texture.",null,null],[16,"Data","","The type of each pixel.",457,null],[10,"into_raw","","Returns the raw representation of the data.",457,{"inputs":[{"name":"self"}],"output":{"name":"rawimage2d"}}],[8,"Texture2dDataSink","","Trait that describes types that can be built from two-dimensional texture data.",null,null],[10,"from_raw","","Builds a new object from raw data.",458,{"inputs":[{"name":"cow"},{"name":"u32"},{"name":"u32"}],"output":{"name":"self"}}],[8,"ToClientFormat","","",null,null],[10,"rgb_format","","",459,{"inputs":[],"output":{"name":"clientformat"}}],[10,"rgba_format","","",459,{"inputs":[],"output":{"name":"clientformat"}}],[8,"Texture3dDataSource","","Trait that describes data for a two-dimensional texture.",null,null],[16,"Data","","The type of each pixel.",460,null],[10,"into_raw","","Returns the raw representation of the data.",460,{"inputs":[{"name":"self"}],"output":{"name":"rawimage3d"}}],[8,"Texture3dDataSink","","Trait that describes types that can be built from one-dimensional texture data.",null,null],[10,"from_raw","","Builds a new object from raw data.",461,{"inputs":[{"name":"cow"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"self"}}],[11,"clone","","",195,{"inputs":[{"name":"self"}],"output":{"name":"cubelayer"}}],[11,"fmt","","",195,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",195,{"inputs":[{"name":"self"},{"name":"cubelayer"}],"output":{"name":"bool"}}],[11,"hash","","",195,null],[11,"get_layer_index","","In some situations whole cubemaps can be bound at once. If this is the case, each layer of the cubemap has a specific index.",195,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",196,{"inputs":[{"name":"self"}],"output":{"name":"texturekind"}}],[11,"fmt","","",196,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",196,{"inputs":[{"name":"self"},{"name":"texturekind"}],"output":{"name":"bool"}}],[11,"hash","","",196,null],[11,"fmt","","",197,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",197,{"inputs":[{"name":"self"}],"output":{"name":"mipmapsoption"}}],[11,"eq","","",197,{"inputs":[{"name":"self"},{"name":"mipmapsoption"}],"output":{"name":"bool"}}],[11,"ne","","",197,{"inputs":[{"name":"self"},{"name":"mipmapsoption"}],"output":{"name":"bool"}}],[11,"from","","",197,{"inputs":[{"name":"compressedmipmapsoption"}],"output":{"name":"mipmapsoption"}}],[11,"fmt","","",198,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",198,{"inputs":[{"name":"self"}],"output":{"name":"compressedmipmapsoption"}}],[11,"eq","","",198,{"inputs":[{"name":"self"},{"name":"compressedmipmapsoption"}],"output":{"name":"bool"}}],[11,"ne","","",198,{"inputs":[{"name":"self"},{"name":"compressedmipmapsoption"}],"output":{"name":"bool"}}],[11,"into_raw","","",177,{"inputs":[{"name":"self"}],"output":{"name":"rawimage1d"}}],[11,"from_raw_rgb","","Builds a raw image from a vector of interleaved RGB values.",178,null],[11,"from_raw_rgba","","Builds a raw image from a vector of interleaved RGBA values.",178,null],[11,"from_raw_rgb_reversed","","Builds a raw image from a vector of interleaved RGB values, flipping it vertically.",178,null],[11,"from_raw_rgba_reversed","","Builds a raw image from a vector of interleaved RGBA values, flipping it vertically.",178,null],[11,"from_vec_raw1d","","Transforms a Vec into a RawImage2d",178,{"inputs":[{"name":"vec"}],"output":{"name":"rawimage2d"}}],[11,"into_raw","","",178,{"inputs":[{"name":"self"}],"output":{"name":"rawimage2d"}}],[11,"from_raw","","",178,{"inputs":[{"name":"cow"},{"name":"u32"},{"name":"u32"}],"output":{"name":"self"}}],[11,"from_raw","","",178,{"inputs":[{"name":"cow"},{"name":"u32"},{"name":"u32"}],"output":{"name":"self"}}],[11,"from_raw","","",178,{"inputs":[{"name":"cow"},{"name":"u32"},{"name":"u32"}],"output":{"name":"self"}}],[11,"from_raw","","",178,{"inputs":[{"name":"cow"},{"name":"u32"},{"name":"u32"}],"output":{"name":"self"}}],[11,"from_raw","","",178,{"inputs":[{"name":"cow"},{"name":"u32"},{"name":"u32"}],"output":{"name":"self"}}],[11,"from_raw","","",178,{"inputs":[{"name":"cow"},{"name":"u32"},{"name":"u32"}],"output":{"name":"self"}}],[11,"from_raw","","",178,{"inputs":[{"name":"cow"},{"name":"u32"},{"name":"u32"}],"output":{"name":"self"}}],[11,"from_raw","","",178,{"inputs":[{"name":"cow"},{"name":"u32"},{"name":"u32"}],"output":{"name":"self"}}],[11,"from_raw","","",178,{"inputs":[{"name":"cow"},{"name":"u32"},{"name":"u32"}],"output":{"name":"self"}}],[11,"from_raw","","",178,{"inputs":[{"name":"cow"},{"name":"u32"},{"name":"u32"}],"output":{"name":"self"}}],[11,"from_raw","","",178,{"inputs":[{"name":"cow"},{"name":"u32"},{"name":"u32"}],"output":{"name":"self"}}],[11,"from_raw","","",178,{"inputs":[{"name":"cow"},{"name":"u32"},{"name":"u32"}],"output":{"name":"self"}}],[11,"from_raw","","",178,{"inputs":[{"name":"cow"},{"name":"u32"},{"name":"u32"}],"output":{"name":"self"}}],[11,"from_raw","","",178,{"inputs":[{"name":"cow"},{"name":"u32"},{"name":"u32"}],"output":{"name":"self"}}],[11,"from_raw","","",178,{"inputs":[{"name":"cow"},{"name":"u32"},{"name":"u32"}],"output":{"name":"self"}}],[11,"from_raw","","",178,{"inputs":[{"name":"cow"},{"name":"u32"},{"name":"u32"}],"output":{"name":"self"}}],[11,"from_raw","","",178,{"inputs":[{"name":"cow"},{"name":"u32"},{"name":"u32"}],"output":{"name":"self"}}],[11,"from_raw","","",178,{"inputs":[{"name":"cow"},{"name":"u32"},{"name":"u32"}],"output":{"name":"self"}}],[11,"from_raw","","",178,{"inputs":[{"name":"cow"},{"name":"u32"},{"name":"u32"}],"output":{"name":"self"}}],[11,"from_raw","","",178,{"inputs":[{"name":"cow"},{"name":"u32"},{"name":"u32"}],"output":{"name":"self"}}],[11,"from_raw","","",178,{"inputs":[{"name":"cow"},{"name":"u32"},{"name":"u32"}],"output":{"name":"self"}}],[11,"from_raw","","",178,{"inputs":[{"name":"cow"},{"name":"u32"},{"name":"u32"}],"output":{"name":"self"}}],[11,"from_raw","","",178,{"inputs":[{"name":"cow"},{"name":"u32"},{"name":"u32"}],"output":{"name":"self"}}],[11,"from_raw","","",178,{"inputs":[{"name":"cow"},{"name":"u32"},{"name":"u32"}],"output":{"name":"self"}}],[11,"from_raw","","",178,{"inputs":[{"name":"cow"},{"name":"u32"},{"name":"u32"}],"output":{"name":"self"}}],[11,"from_raw","","",178,{"inputs":[{"name":"cow"},{"name":"u32"},{"name":"u32"}],"output":{"name":"self"}}],[11,"from_raw","","",178,{"inputs":[{"name":"cow"},{"name":"u32"},{"name":"u32"}],"output":{"name":"self"}}],[11,"from_raw","","",178,{"inputs":[{"name":"cow"},{"name":"u32"},{"name":"u32"}],"output":{"name":"self"}}],[11,"from_vec_raw2d","","Transforms a Vec into a RawImage3d",179,{"inputs":[{"name":"vec"}],"output":{"name":"rawimage3d"}}],[11,"into_raw","","",179,{"inputs":[{"name":"self"}],"output":{"name":"rawimage3d"}}],[11,"fmt","","",199,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",199,{"inputs":[{"name":"self"}],"output":{"name":"texturecreationerror"}}],[11,"eq","","",199,{"inputs":[{"name":"self"},{"name":"texturecreationerror"}],"output":{"name":"bool"}}],[11,"fmt","","",199,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",199,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from","","",199,{"inputs":[{"name":"formatnotsupportederror"}],"output":{"name":"texturecreationerror"}}],[11,"fmt","glium","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"profile"}}],[11,"clone","glium::backend","",54,{"inputs":[{"name":"self"}],"output":{"name":"releasebehavior"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",54,{"inputs":[{"name":"self"},{"name":"releasebehavior"}],"output":{"name":"bool"}}],[11,"new","","Builds a new context.",462,{"inputs":[{"name":"b"},{"name":"bool"},{"name":"debugcallbackbehavior"}],"output":{"generics":["rc","incompatibleopengl"],"name":"result"}}],[11,"get_framebuffer_dimensions","","Calls `get_framebuffer_dimensions` on the backend object stored by this context.",462,null],[11,"rebuild","","Changes the OpenGL context associated with this context.",462,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"generics":["incompatibleopengl"],"name":"result"}}],[11,"swap_buffers","","Swaps the buffers in the backend.",462,{"inputs":[{"name":"self"}],"output":{"generics":["swapbufferserror"],"name":"result"}}],[11,"get_version","","DEPRECATED. Use `get_opengl_version` instead.",462,{"inputs":[{"name":"self"}],"output":{"name":"version"}}],[11,"get_opengl_version","","Returns the OpenGL version detected by this context.",462,{"inputs":[{"name":"self"}],"output":{"name":"version"}}],[11,"get_supported_glsl_version","","Returns the GLSL version guaranteed to be supported.",462,{"inputs":[{"name":"self"}],"output":{"name":"version"}}],[11,"is_glsl_version_supported","","Returns true if the given GLSL version is supported.",462,{"inputs":[{"name":"self"},{"name":"version"}],"output":{"name":"bool"}}],[11,"get_opengl_version_string","","Returns a string containing this GL version or release number used by this context.",462,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"get_opengl_vendor_string","","Returns a string containing the company responsible for this GL implementation.",462,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"get_opengl_renderer_string","","Returns a string containing the name of the GL renderer used by this context.",462,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"is_debug","","Returns true if the context is in debug mode.",462,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_forward_compatible","","Returns true if the context is in \"forward-compatible\" mode.",462,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_opengl_profile","","Returns this context's OpenGL profile if available.",462,{"inputs":[{"name":"self"}],"output":{"generics":["profile"],"name":"option"}}],[11,"is_robust","","Returns true if out-of-bound buffer access from the GPU side (inside a program) cannot result in a crash.",462,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_context_loss_possible","","Returns true if a context loss is possible.",462,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_context_lost","","Returns true if the context has been lost and needs to be recreated.",462,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_release_behavior","","Returns the behavior when the current OpenGL context is changed.",462,{"inputs":[{"name":"self"}],"output":{"name":"releasebehavior"}}],[11,"get_max_anisotropy_support","","Returns the maximum value that can be used for anisotropic filtering, or `None` if the hardware doesn't support it.",462,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"option"}}],[11,"get_max_viewport_dimensions","","Returns the maximum dimensions of the viewport.",462,null],[11,"release_shader_compiler","","Releases the shader compiler, indicating that no new programs will be created for a while.",462,{"inputs":[{"name":"self"}],"output":null}],[11,"get_free_video_memory","","Returns an estimate of the amount of video memory available in bytes.",462,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"read_front_buffer","","Reads the content of the front buffer.",462,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"exec_in_context","","Execute an arbitrary closure with the OpenGL context active. Useful if another component needs to directly manipulate OpenGL state.",462,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"assert_no_error","","Asserts that there are no OpenGL errors pending.",462,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[11,"synchronize","","DEPRECATED. Renamed `finish`.",462,{"inputs":[{"name":"self"}],"output":null}],[11,"finish","","Calls `glFinish()`. This waits until all the previously issued commands have finished being executed.",462,{"inputs":[{"name":"self"}],"output":null}],[11,"flush","","Calls `glFlush()`. This starts executing the commands that you have issued if it is not yet the case.",462,{"inputs":[{"name":"self"}],"output":null}],[11,"insert_debug_marker","","Inserts a debugging string in the commands queue. If you use an OpenGL debugger, you will be able to see that string.",462,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"debug_insert_debug_marker","","Same as `insert_debug_marker`, except that if you don't compile with `debug_assertions` it is a no-op and returns `Ok`.",462,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"get_version","","",462,{"inputs":[{"name":"self"}],"output":{"name":"version"}}],[11,"get_extensions","","",462,{"inputs":[{"name":"self"}],"output":{"name":"extensionslist"}}],[11,"get_capabilities","","",462,{"inputs":[{"name":"self"}],"output":{"name":"capabilities"}}],[11,"drop","","",462,{"inputs":[{"name":"self"}],"output":null}],[11,"default","glium::debug","",77,{"inputs":[],"output":{"name":"debugcallbackbehavior"}}],[11,"clone","glium::framebuffer","",99,{"inputs":[{"name":"self"}],"output":{"name":"validationerror"}}],[11,"fmt","","",99,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",99,{"inputs":[{"name":"self"},{"name":"validationerror"}],"output":{"name":"bool"}}],[11,"ne","","",99,{"inputs":[{"name":"self"},{"name":"validationerror"}],"output":{"name":"bool"}}],[11,"fmt","","",99,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",99,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","glium::texture","",180,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",180,{"inputs":[{"name":"self"}],"output":{"name":"clientformat"}}],[11,"eq","","",180,{"inputs":[{"name":"self"},{"name":"clientformat"}],"output":{"name":"bool"}}],[11,"get_size","","Returns the size in bytes of a pixel of this type.",180,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"get_num_components","","Returns the number of components of this client format.",180,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"fmt","","",182,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",182,{"inputs":[{"name":"self"}],"output":{"name":"uncompressedfloatformat"}}],[11,"hash","","",182,null],[11,"eq","","",182,{"inputs":[{"name":"self"},{"name":"uncompressedfloatformat"}],"output":{"name":"bool"}}],[11,"get_formats_list","","Returns a list of all the possible values of this enumeration.",182,{"inputs":[],"output":{"generics":["uncompressedfloatformat"],"name":"vec"}}],[11,"to_texture_format","","Turns this format into a more generic `TextureFormat`.",182,{"inputs":[{"name":"self"}],"output":{"name":"textureformat"}}],[11,"is_supported","","Returns true if this format is supported by the backend.",182,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"bool"}}],[11,"is_color_renderable","","Returns true if a texture or renderbuffer with this format can be used as a framebuffer attachment.",182,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"bool"}}],[11,"fmt","","",190,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",190,{"inputs":[{"name":"self"}],"output":{"name":"srgbformat"}}],[11,"hash","","",190,null],[11,"eq","","",190,{"inputs":[{"name":"self"},{"name":"srgbformat"}],"output":{"name":"bool"}}],[11,"get_formats_list","","Returns a list of all the possible values of this enumeration.",190,{"inputs":[],"output":{"generics":["srgbformat"],"name":"vec"}}],[11,"to_texture_format","","Turns this format into a more generic `TextureFormat`.",190,{"inputs":[{"name":"self"}],"output":{"name":"textureformat"}}],[11,"is_supported","","Returns true if this format is supported by the backend.",190,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"bool"}}],[11,"is_color_renderable","","Returns true if a texture or renderbuffer with this format can be used as a framebuffer attachment.",190,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"bool"}}],[11,"fmt","","",183,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",183,{"inputs":[{"name":"self"}],"output":{"name":"uncompressedintformat"}}],[11,"hash","","",183,null],[11,"eq","","",183,{"inputs":[{"name":"self"},{"name":"uncompressedintformat"}],"output":{"name":"bool"}}],[11,"get_formats_list","","Returns a list of all the possible values of this enumeration.",183,{"inputs":[],"output":{"generics":["uncompressedintformat"],"name":"vec"}}],[11,"to_texture_format","","Turns this format into a more generic `TextureFormat`.",183,{"inputs":[{"name":"self"}],"output":{"name":"textureformat"}}],[11,"is_supported","","Returns true if this format is supported by the backend.",183,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"bool"}}],[11,"is_color_renderable","","Returns true if a texture or renderbuffer with this format can be used as a framebuffer attachment.",183,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"bool"}}],[11,"fmt","","",184,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",184,{"inputs":[{"name":"self"}],"output":{"name":"uncompresseduintformat"}}],[11,"hash","","",184,null],[11,"eq","","",184,{"inputs":[{"name":"self"},{"name":"uncompresseduintformat"}],"output":{"name":"bool"}}],[11,"get_formats_list","","Returns a list of all the possible values of this enumeration.",184,{"inputs":[],"output":{"generics":["uncompresseduintformat"],"name":"vec"}}],[11,"to_texture_format","","Turns this format into a more generic `TextureFormat`.",184,{"inputs":[{"name":"self"}],"output":{"name":"textureformat"}}],[11,"is_supported","","Returns true if this format is supported by the backend.",184,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"bool"}}],[11,"is_color_renderable","","Returns true if a texture or renderbuffer with this format can be used as a framebuffer attachment.",184,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"bool"}}],[11,"fmt","","",185,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",185,{"inputs":[{"name":"self"}],"output":{"name":"compressedformat"}}],[11,"hash","","",185,null],[11,"eq","","",185,{"inputs":[{"name":"self"},{"name":"compressedformat"}],"output":{"name":"bool"}}],[11,"get_formats_list","","Returns a list of all the possible values of this enumeration.",185,{"inputs":[],"output":{"generics":["compressedformat"],"name":"vec"}}],[11,"to_texture_format","","Turns this format into a more generic `TextureFormat`.",185,{"inputs":[{"name":"self"}],"output":{"name":"textureformat"}}],[11,"is_supported","","Returns true if this format is supported by the backend.",185,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"bool"}}],[11,"fmt","","",189,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",189,{"inputs":[{"name":"self"}],"output":{"name":"compressedsrgbformat"}}],[11,"hash","","",189,null],[11,"eq","","",189,{"inputs":[{"name":"self"},{"name":"compressedsrgbformat"}],"output":{"name":"bool"}}],[11,"get_formats_list","","Returns a list of all the possible values of this enumeration.",189,{"inputs":[],"output":{"generics":["compressedsrgbformat"],"name":"vec"}}],[11,"to_texture_format","","Turns this format into a more generic `TextureFormat`.",189,{"inputs":[{"name":"self"}],"output":{"name":"textureformat"}}],[11,"is_supported","","Returns true if this format is supported by the backend.",189,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"bool"}}],[11,"fmt","","",186,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",186,{"inputs":[{"name":"self"}],"output":{"name":"depthformat"}}],[11,"hash","","",186,null],[11,"eq","","",186,{"inputs":[{"name":"self"},{"name":"depthformat"}],"output":{"name":"bool"}}],[11,"get_formats_list","","Returns a list of all the possible values of this enumeration.",186,{"inputs":[],"output":{"generics":["depthformat"],"name":"vec"}}],[11,"to_texture_format","","Turns this format into a more generic `TextureFormat`.",186,{"inputs":[{"name":"self"}],"output":{"name":"textureformat"}}],[11,"is_supported","","Returns true if this format is supported by the backend.",186,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"bool"}}],[11,"fmt","","",187,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",187,{"inputs":[{"name":"self"}],"output":{"name":"depthstencilformat"}}],[11,"hash","","",187,null],[11,"eq","","",187,{"inputs":[{"name":"self"},{"name":"depthstencilformat"}],"output":{"name":"bool"}}],[11,"get_formats_list","","Returns a list of all the possible values of this enumeration.",187,{"inputs":[],"output":{"generics":["depthstencilformat"],"name":"vec"}}],[11,"to_texture_format","","Turns this format into a more generic `TextureFormat`.",187,{"inputs":[{"name":"self"}],"output":{"name":"textureformat"}}],[11,"is_supported","","Returns true if this format is supported by the backend.",187,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"bool"}}],[11,"fmt","","",188,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",188,{"inputs":[{"name":"self"}],"output":{"name":"stencilformat"}}],[11,"hash","","",188,null],[11,"eq","","",188,{"inputs":[{"name":"self"},{"name":"stencilformat"}],"output":{"name":"bool"}}],[11,"get_formats_list","","Returns a list of all the possible values of this enumeration.",188,{"inputs":[],"output":{"generics":["stencilformat"],"name":"vec"}}],[11,"to_texture_format","","Turns this format into a more generic `TextureFormat`.",188,{"inputs":[{"name":"self"}],"output":{"name":"textureformat"}}],[11,"is_supported_for_textures","","Returns true if this format is supported by the backend for textures.",188,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"bool"}}],[11,"is_supported_for_renderbuffers","","Returns true if this format is supported by the backend for renderbuffers.",188,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"bool"}}],[11,"fmt","","",181,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",181,{"inputs":[{"name":"self"}],"output":{"name":"textureformat"}}],[11,"hash","","",181,null],[11,"eq","","",181,{"inputs":[{"name":"self"},{"name":"textureformat"}],"output":{"name":"bool"}}],[11,"ne","","",181,{"inputs":[{"name":"self"},{"name":"textureformat"}],"output":{"name":"bool"}}],[11,"get_formats_list","","Returns a list of all the possible values of this enumeration.",181,{"inputs":[],"output":{"generics":["textureformat"],"name":"vec"}}],[11,"is_supported_for_textures","","Returns true if this format is supported by the backend for textures.",181,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"bool"}}],[11,"is_supported_for_renderbuffers","","Returns true if this format is supported by the backend for renderbuffers.",181,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"bool"}}],[11,"is_renderable","","Returns true if the format is color-renderable, depth-renderable, depth-stencil-renderable or stencil-renderable.",181,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"bool"}}],[11,"new","glium","Builds a new `SyncFence` that is injected in the server.",463,{"inputs":[{"name":"f"}],"output":{"generics":["syncfence","syncnotsupportederror"],"name":"result"}}],[11,"wait","","Blocks until the operation has finished on the server.",463,{"inputs":[{"name":"self"}],"output":null}],[11,"drop","","",463,{"inputs":[{"name":"self"}],"output":null}],[11,"into_sync_fence","","Turns the prototype into a real fence.",464,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"syncfence"}}],[11,"drop","","",464,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"version"}}],[11,"eq","","",39,{"inputs":[{"name":"self"},{"name":"version"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"self"},{"name":"version"}],"output":{"name":"bool"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"api"}}],[11,"eq","","",49,{"inputs":[{"name":"self"},{"name":"api"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",39,{"inputs":[{"name":"self"},{"name":"version"}],"output":{"generics":["ordering"],"name":"option"}}],[6,"VertexFormat","","Describes the layout of each vertex in a vertex buffer.",null,null],[8,"CapabilitiesSource","","Trait for objects that describe the capabilities of an OpenGL backend.",null,null],[10,"get_version","","Returns the version of the backend.",465,{"inputs":[{"name":"self"}],"output":{"name":"version"}}],[10,"get_extensions","","Returns the list of extensions that are supported.",465,{"inputs":[{"name":"self"}],"output":{"name":"extensionslist"}}],[10,"get_capabilities","","Returns the capabilities of the backend.",465,{"inputs":[{"name":"self"}],"output":{"name":"capabilities"}}],[8,"GlObject","","Trait for objects that are OpenGL objects.",null,null],[16,"Id","","The type of identifier for this object.",466,null],[10,"get_id","","Returns the id of the object.",466,null],[8,"Surface","","Object that can be drawn upon.",null,null],[10,"clear","","Clears some attachments of the target.",467,{"inputs":[{"name":"self"},{"generics":["rect"],"name":"option"},{"name":"option"},{"name":"bool"},{"generics":["f32"],"name":"option"},{"generics":["i32"],"name":"option"}],"output":null}],[11,"clear_color","","Clears the color attachment of the target.",467,{"inputs":[{"name":"self"},{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":null}],[11,"clear_color_srgb","","Clears the color attachment of the target. The color is in sRGB format.",467,{"inputs":[{"name":"self"},{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":null}],[11,"clear_depth","","Clears the depth attachment of the target.",467,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[11,"clear_stencil","","Clears the stencil attachment of the target.",467,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"clear_color_and_depth","","Clears the color and depth attachments of the target.",467,null],[11,"clear_color_srgb_and_depth","","Clears the color and depth attachments of the target. The color is in sRGB format.",467,null],[11,"clear_color_and_stencil","","Clears the color and stencil attachments of the target.",467,null],[11,"clear_color_srgb_and_stencil","","Clears the color and stencil attachments of the target. The color is in sRGB format.",467,null],[11,"clear_depth_and_stencil","","Clears the depth and stencil attachments of the target.",467,{"inputs":[{"name":"self"},{"name":"f32"},{"name":"i32"}],"output":null}],[11,"clear_all","","Clears the color, depth and stencil attachments of the target.",467,null],[11,"clear_all_srgb","","Clears the color, depth and stencil attachments of the target. The color is in sRGB format.",467,null],[10,"get_dimensions","","Returns the dimensions in pixels of the target.",467,null],[10,"get_depth_buffer_bits","","Returns the number of bits of each pixel of the depth buffer.",467,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"option"}}],[11,"has_depth_buffer","","Returns true if the surface has a depth buffer available.",467,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_stencil_buffer_bits","","Returns the number of bits of each pixel of the stencil buffer.",467,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"option"}}],[11,"has_stencil_buffer","","Returns true if the surface has a stencil buffer available.",467,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"draw","","Draws.",467,{"inputs":[{"name":"self"},{"name":"v"},{"name":"i"},{"name":"program"},{"name":"u"},{"name":"drawparameters"}],"output":{"generics":["drawerror"],"name":"result"}}],[10,"blit_from_frame","","Blits from the default framebuffer.",467,{"inputs":[{"name":"self"},{"name":"rect"},{"name":"blittarget"},{"name":"magnifysamplerfilter"}],"output":null}],[10,"blit_from_simple_framebuffer","","Blits from a simple framebuffer.",467,{"inputs":[{"name":"self"},{"name":"simpleframebuffer"},{"name":"rect"},{"name":"blittarget"},{"name":"magnifysamplerfilter"}],"output":null}],[10,"blit_from_multioutput_framebuffer","","Blits from a multi-output framebuffer.",467,{"inputs":[{"name":"self"},{"name":"multioutputframebuffer"},{"name":"rect"},{"name":"blittarget"},{"name":"magnifysamplerfilter"}],"output":null}],[10,"blit_color","","Copies a rectangle of pixels from this surface to another surface.",467,{"inputs":[{"name":"self"},{"name":"rect"},{"name":"s"},{"name":"blittarget"},{"name":"magnifysamplerfilter"}],"output":null}],[11,"blit_whole_color_to","","Copies the entire surface to a target surface. See `blit_color`.",467,{"inputs":[{"name":"self"},{"name":"s"},{"name":"blittarget"},{"name":"magnifysamplerfilter"}],"output":null}],[11,"fill","","Copies the entire surface to the entire target. See `blit_color`.",467,{"inputs":[{"name":"self"},{"name":"s"},{"name":"magnifysamplerfilter"}],"output":null}],[11,"eq","","",50,{"inputs":[{"name":"self"},{"name":"handle"}],"output":{"name":"bool"}}],[11,"ne","","",50,{"inputs":[{"name":"self"},{"name":"handle"}],"output":{"name":"bool"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"handle"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",50,null],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"rawuniformvalue"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"rect"}}],[11,"default","","",40,{"inputs":[],"output":{"name":"rect"}}],[11,"eq","","",40,{"inputs":[{"name":"self"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"self"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"blittarget"}}],[11,"default","","",41,{"inputs":[],"output":{"name":"blittarget"}}],[11,"eq","","",41,{"inputs":[{"name":"self"},{"name":"blittarget"}],"output":{"name":"bool"}}],[11,"ne","","",41,{"inputs":[{"name":"self"},{"name":"blittarget"}],"output":{"name":"bool"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"drawerror"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",52,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",52,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"swapbufferserror"}}],[11,"eq","","",53,{"inputs":[{"name":"self"},{"name":"swapbufferserror"}],"output":{"name":"bool"}}],[11,"description","","",53,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"new","","Builds a new `Frame`. Use the `draw` function on `Display` instead of this function.",468,null],[11,"finish","","Stop drawing, swap the buffers, and consume the Frame.",468,{"inputs":[{"name":"self"}],"output":{"generics":["swapbufferserror"],"name":"result"}}],[11,"set_finish","","Stop drawing, swap the buffers.",468,{"inputs":[{"name":"self"}],"output":{"generics":["swapbufferserror"],"name":"result"}}],[11,"clear","","",468,{"inputs":[{"name":"self"},{"generics":["rect"],"name":"option"},{"name":"option"},{"name":"bool"},{"generics":["f32"],"name":"option"},{"generics":["i32"],"name":"option"}],"output":null}],[11,"get_dimensions","","",468,null],[11,"get_depth_buffer_bits","","",468,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"option"}}],[11,"get_stencil_buffer_bits","","",468,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"option"}}],[11,"draw","","",468,{"inputs":[{"name":"self"},{"name":"v"},{"name":"i"},{"name":"program"},{"name":"u"},{"name":"drawparameters"}],"output":{"generics":["drawerror"],"name":"result"}}],[11,"blit_color","","",468,{"inputs":[{"name":"self"},{"name":"rect"},{"name":"s"},{"name":"blittarget"},{"name":"magnifysamplerfilter"}],"output":null}],[11,"blit_from_frame","","",468,{"inputs":[{"name":"self"},{"name":"rect"},{"name":"blittarget"},{"name":"magnifysamplerfilter"}],"output":null}],[11,"blit_from_simple_framebuffer","","",468,{"inputs":[{"name":"self"},{"name":"simpleframebuffer"},{"name":"rect"},{"name":"blittarget"},{"name":"magnifysamplerfilter"}],"output":null}],[11,"blit_from_multioutput_framebuffer","","",468,{"inputs":[{"name":"self"},{"name":"multioutputframebuffer"},{"name":"rect"},{"name":"blittarget"},{"name":"magnifysamplerfilter"}],"output":null}],[11,"drop","","",468,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"incompatibleopengl"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",42,{"inputs":[{"name":"self"},{"name":"incompatibleopengl"}],"output":{"name":"bool"}}],[11,"ne","","",42,{"inputs":[{"name":"self"},{"name":"incompatibleopengl"}],"output":{"name":"bool"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",42,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[14,"assert_no_gl_error","","Calls the `assert_no_error` method on a `glium::Display` instance with file and line number information.",null,null],[14,"uniform","","Returns an implementation-defined type which implements the `Uniform` trait.",null,null],[14,"implement_vertex","","Implements the `glium::vertex::Vertex` trait for the given type.",null,null],[14,"implement_buffer_content","","Implements the `glium::buffer::Content` trait for the given type.",null,null],[14,"implement_uniform_block","","Implements the `glium::uniforms::UniformBlock` trait for the given type.",null,null],[14,"program","","Builds a program depending on the GLSL version supported by the backend.",null,null],[11,"fmt","glium::glutin::os::unix","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","glium::glutin","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"default","","",17,{"inputs":[],"output":{"name":"pixelformatrequirements"}}],[11,"default","","",18,{"inputs":[],"output":{"name":"glattributes"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"api"}],"output":{"name":"bool"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"robustness"}],"output":{"name":"bool"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"glprofile"}],"output":{"name":"bool"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"releasebehavior"}],"output":{"name":"bool"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"make_current","","Creates a new OpenGL context Sets the context as the current context.",469,{"inputs":[{"name":"self"}],"output":{"generics":["contexterror"],"name":"result"}}],[11,"is_current","","Returns true if this context is the current one in this thread.",469,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_proc_address","","Returns the address of an OpenGL function.",469,null],[11,"get_api","","Returns the API that is currently provided by this window.",469,{"inputs":[{"name":"self"}],"output":{"name":"api"}}],[11,"swap_buffers","","",469,{"inputs":[{"name":"self"}],"output":{"generics":["contexterror"],"name":"result"}}],[11,"get_pixel_format","","",469,{"inputs":[{"name":"self"}],"output":{"name":"pixelformat"}}],[11,"resize","","",469,null],[11,"make_current","","",470,{"inputs":[{"name":"self"}],"output":{"generics":["contexterror"],"name":"result"}}],[11,"is_current","","",470,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_proc_address","","",470,null],[11,"swap_buffers","","",470,{"inputs":[{"name":"self"}],"output":{"generics":["contexterror"],"name":"result"}}],[11,"get_api","","",470,{"inputs":[{"name":"self"}],"output":{"name":"api"}}],[11,"get_pixel_format","","",470,{"inputs":[{"name":"self"}],"output":{"name":"pixelformat"}}],[11,"resize","","",470,null],[11,"make_current","","",471,{"inputs":[{"name":"self"}],"output":{"generics":["contexterror"],"name":"result"}}],[11,"is_current","","",471,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_proc_address","","",471,null],[11,"swap_buffers","","",471,{"inputs":[{"name":"self"}],"output":{"generics":["contexterror"],"name":"result"}}],[11,"get_api","","",471,{"inputs":[{"name":"self"}],"output":{"name":"api"}}],[11,"get_pixel_format","","",471,{"inputs":[{"name":"self"}],"output":{"name":"pixelformat"}}],[11,"resize","","",471,null],[11,"raw_handle","","",470,null],[11,"raw_handle","","",469,null],[11,"from","","",9,{"inputs":[{"name":"creationerror"}],"output":{"name":"creationerror"}}],[11,"description","","",9,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",9,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"description","","",10,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"headlessrendererbuilder"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"robustness"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"glprofile"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"api"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"releasebehavior"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"pixelformat"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"pixelformatrequirements"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"glrequest"}}],[11,"clone","glium::glutin::os::unix","",3,{"inputs":[{"name":"self"}],"output":{"name":"rawhandle"}}],[11,"clone","glium::glutin","",18,{"inputs":[{"name":"self"}],"output":{"name":"glattributes"}}],[11,"new","","Creates a new Window for platforms where this is appropriate.",472,{"inputs":[{"name":"eventsloop"}],"output":{"generics":["window","creationerror"],"name":"result"}}],[11,"set_title","","Modifies the title of the window.",472,null],[11,"show","","Shows the window if it was hidden.",472,null],[11,"hide","","Hides the window if it was visible.",472,null],[11,"get_position","","Returns the position of the top-left hand corner of the window relative to the  top-left hand corner of the desktop.",472,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"set_position","","Modifies the position of the window.",472,null],[11,"get_inner_size","","Returns the size in pixels of the client area of the window.",472,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_inner_size_points","","Returns the size in points of the client area of the window.",472,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_inner_size_pixels","","Returns the size in pixels of the client area of the window.",472,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_outer_size","","Returns the size in pixels of the window.",472,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"set_inner_size","","Modifies the inner size of the window.",472,null],[11,"platform_display","","DEPRECATED. Gets the native platform specific display for this window. This is typically only required when integrating with other libraries that need this information.",472,null],[11,"platform_window","","DEPRECATED. Gets the native platform specific window handle. This is typically only required when integrating with other libraries that need this information.",472,null],[11,"set_cursor","","Modifies the mouse cursor of the window. Has no effect on Android.",472,null],[11,"hidpi_factor","","Returns the ratio between the backing framebuffer resolution and the window size in screen pixels. This is typically one for a normal display and two for a retina display.",472,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"set_cursor_position","","Changes the position of the cursor in window coordinates.",472,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":{"name":"result"}}],[11,"set_cursor_state","","Sets how winit handles the cursor. See the documentation of `CursorState` for details.",472,{"inputs":[{"name":"self"},{"name":"cursorstate"}],"output":{"generics":["string"],"name":"result"}}],[11,"set_maximized","","Sets the window to maximized or back",472,null],[11,"set_fullscreen","","Sets the window to fullscreen or back",472,null],[11,"set_decorations","","Turn window decorations on or off.",472,null],[11,"get_current_monitor","","Returns the current monitor the window is on or the primary monitor is nothing matches",472,{"inputs":[{"name":"self"}],"output":{"name":"monitorid"}}],[11,"id","","",472,{"inputs":[{"name":"self"}],"output":{"name":"windowid"}}],[11,"deref","","",471,null],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",473,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",474,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",475,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","glium::glutin::os::unix","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","glium::glutin","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"default","","",34,{"inputs":[],"output":{"name":"windowattributes"}}],[11,"default","","",26,{"inputs":[],"output":{"name":"modifiersstate"}}],[11,"native_id","","",476,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"partial_cmp","","",473,{"inputs":[{"name":"self"},{"name":"deviceid"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",473,{"inputs":[{"name":"self"},{"name":"deviceid"}],"output":{"name":"bool"}}],[11,"le","","",473,{"inputs":[{"name":"self"},{"name":"deviceid"}],"output":{"name":"bool"}}],[11,"gt","","",473,{"inputs":[{"name":"self"},{"name":"deviceid"}],"output":{"name":"bool"}}],[11,"ge","","",473,{"inputs":[{"name":"self"},{"name":"deviceid"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",474,{"inputs":[{"name":"self"},{"name":"windowid"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",474,{"inputs":[{"name":"self"},{"name":"windowid"}],"output":{"name":"bool"}}],[11,"le","","",474,{"inputs":[{"name":"self"},{"name":"windowid"}],"output":{"name":"bool"}}],[11,"gt","","",474,{"inputs":[{"name":"self"},{"name":"windowid"}],"output":{"name":"bool"}}],[11,"ge","","",474,{"inputs":[{"name":"self"},{"name":"windowid"}],"output":{"name":"bool"}}],[11,"eq","","",475,{"inputs":[{"name":"self"},{"name":"eventsloopclosed"}],"output":{"name":"bool"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"virtualkeycode"}],"output":{"name":"bool"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"mousebutton"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"self"},{"name":"mousebutton"}],"output":{"name":"bool"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"controlflow"}],"output":{"name":"bool"}}],[11,"eq","","",473,{"inputs":[{"name":"self"},{"name":"deviceid"}],"output":{"name":"bool"}}],[11,"ne","","",473,{"inputs":[{"name":"self"},{"name":"deviceid"}],"output":{"name":"bool"}}],[11,"eq","","",474,{"inputs":[{"name":"self"},{"name":"windowid"}],"output":{"name":"bool"}}],[11,"ne","","",474,{"inputs":[{"name":"self"},{"name":"windowid"}],"output":{"name":"bool"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"elementstate"}],"output":{"name":"bool"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"mousescrolldelta"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"self"},{"name":"mousescrolldelta"}],"output":{"name":"bool"}}],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"cursorstate"}],"output":{"name":"bool"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"mousecursor"}],"output":{"name":"bool"}}],[11,"eq","","",29,{"inputs":[{"name":"self"},{"name":"touchphase"}],"output":{"name":"bool"}}],[11,"next","","",477,{"inputs":[{"name":"self"}],"output":{"generics":["monitorid"],"name":"option"}}],[11,"size_hint","","",477,null],[11,"with_x11_visual","","",27,null],[11,"with_x11_screen","","",27,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"windowbuilder"}}],[11,"cmp","","",474,{"inputs":[{"name":"self"},{"name":"windowid"}],"output":{"name":"ordering"}}],[11,"cmp","","",473,{"inputs":[{"name":"self"},{"name":"deviceid"}],"output":{"name":"ordering"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","glium::glutin::os::unix","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","glium::glutin","",475,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"from","glium::glutin::os::unix","",4,{"inputs":[{"name":"openerror"}],"output":{"name":"xnotsupported"}}],[11,"hash","glium::glutin","",475,null],[11,"hash","","",29,null],[11,"hash","","",21,null],[11,"hash","","",20,null],[11,"hash","","",32,null],[11,"hash","","",473,null],[11,"hash","","",474,null],[11,"description","","",31,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","","",475,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","glium::glutin::os::unix","",4,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"get_xlib_window","glium::glutin","",472,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"get_xlib_display","","",472,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_xlib_screen_id","","",472,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"option"}}],[11,"get_xlib_xconnection","","",472,{"inputs":[{"name":"self"}],"output":{"generics":["arc"],"name":"option"}}],[11,"get_xcb_connection","","",472,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"send_xim_spot","","",472,null],[11,"get_wayland_surface","","",472,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_wayland_display","","",472,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_ready","","",472,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"mousescrolldelta"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"cursorstate"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"mousebutton"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"touchphase"}}],[11,"clone","","",473,{"inputs":[{"name":"self"}],"output":{"name":"deviceid"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"mousecursor"}}],[11,"clone","","",475,{"inputs":[{"name":"self"}],"output":{"name":"eventsloopclosed"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"windowbuilder"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"keyboardinput"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"windowevent"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"modifiersstate"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"touch"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"creationerror"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"windowattributes"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"deviceevent"}}],[11,"clone","","",478,{"inputs":[{"name":"self"}],"output":{"name":"eventsloopproxy"}}],[11,"clone","","",474,{"inputs":[{"name":"self"}],"output":{"name":"windowid"}}],[11,"clone","","",476,{"inputs":[{"name":"self"}],"output":{"name":"monitorid"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"elementstate"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"controlflow"}}],[11,"clone","glium::glutin::os::unix","",4,{"inputs":[{"name":"self"}],"output":{"name":"xnotsupported"}}],[11,"clone","glium::glutin","",21,{"inputs":[{"name":"self"}],"output":{"name":"virtualkeycode"}}],[11,"new_x11","","",479,{"inputs":[],"output":{"generics":["eventsloop","xnotsupported"],"name":"result"}}],[11,"new_wayland","","",479,{"inputs":[],"output":{"name":"eventsloop"}}],[11,"is_wayland","","",479,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_x11","","",479,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_xlib_xconnection","","",479,{"inputs":[{"name":"self"}],"output":{"generics":["arc"],"name":"option"}}],[11,"new","","Initializes a new `ContextBuilder` with default values.",8,{"inputs":[],"output":{"name":"contextbuilder"}}],[11,"with_gl","","Sets how the backend should choose the OpenGL API and version.",8,{"inputs":[{"name":"self"},{"name":"glrequest"}],"output":{"name":"contextbuilder"}}],[11,"with_gl_profile","","Sets the desired OpenGL context profile.",8,{"inputs":[{"name":"self"},{"name":"glprofile"}],"output":{"name":"contextbuilder"}}],[11,"with_gl_debug_flag","","Sets the debug flag for the OpenGL context.",8,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"contextbuilder"}}],[11,"with_gl_robustness","","Sets the robustness of the OpenGL context. See the docs of `Robustness`.",8,{"inputs":[{"name":"self"},{"name":"robustness"}],"output":{"name":"contextbuilder"}}],[11,"with_vsync","","Requests that the window has vsync enabled.",8,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"contextbuilder"}}],[11,"with_shared_lists","","Share the display lists with the given `Context`.",8,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"contextbuilder"}}],[11,"with_multisampling","","Sets the multisampling level to request. A value of `0` indicates that multisampling must not be enabled.",8,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"contextbuilder"}}],[11,"with_depth_buffer","","Sets the number of bits in the depth buffer.",8,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"contextbuilder"}}],[11,"with_stencil_buffer","","Sets the number of bits in the stencil buffer.",8,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"contextbuilder"}}],[11,"with_pixel_format","","Sets the number of bits in the color buffer.",8,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"u8"}],"output":{"name":"contextbuilder"}}],[11,"with_stereoscopy","","Request the backend to be stereoscopic.",8,{"inputs":[{"name":"self"}],"output":{"name":"contextbuilder"}}],[11,"with_srgb","","Sets whether sRGB should be enabled on the window.",8,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"contextbuilder"}}],[11,"new","","Builds the given window along with the associated GL context, returning the pair as a `GlWindow`.",471,{"inputs":[{"name":"windowbuilder"},{"name":"contextbuilder"},{"name":"eventsloop"}],"output":{"generics":["glwindow","creationerror"],"name":"result"}}],[11,"window","","Borrow the inner `Window`.",471,{"inputs":[{"name":"self"}],"output":{"name":"window"}}],[11,"context","","Borrow the inner GL `Context`.",471,{"inputs":[{"name":"self"}],"output":{"name":"context"}}],[11,"to_gl_version","","Extract the desktop GL version, if any.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"map_sharing","","Turns the `sharing` parameter into another type by calling a closure.",18,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"glattributes"}}],[11,"wakeup","","Wake up the `EventsLoop` from which this proxy was created.",478,{"inputs":[{"name":"self"}],"output":{"generics":["eventsloopclosed"],"name":"result"}}],[11,"get_name","","Returns a human-readable name of the monitor.",476,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[11,"get_dimensions","","Returns the number of pixels currently displayed on the monitor.",476,null],[11,"get_position","","Returns the top-left corner position of the monitor relative to the larger full screen area.",476,null],[11,"get_hidpi_factor","","Returns the ratio between the monitor's physical pixels and logical pixels.",476,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"new","","Builds a new events loop.",479,{"inputs":[],"output":{"name":"eventsloop"}}],[11,"get_available_monitors","","Returns the list of all the monitors available on the system.",479,{"inputs":[{"name":"self"}],"output":{"name":"availablemonitorsiter"}}],[11,"get_primary_monitor","","Returns the primary monitor of the system.",479,{"inputs":[{"name":"self"}],"output":{"name":"monitorid"}}],[11,"poll_events","","Fetches all the events that are pending, calls the callback function for each of them, and returns.",479,null],[11,"run_forever","","Calls `callback` every time an event is received. If no event is available, sleeps the current thread and waits for an event. If the callback returns `ControlFlow::Break` then `run_forever` will immediately return.",479,null],[11,"create_proxy","","Creates an `EventsLoopProxy` that can be used to wake up the `EventsLoop` from another thread.",479,{"inputs":[{"name":"self"}],"output":{"name":"eventsloopproxy"}}],[11,"new","","Initializes a new `HeadlessRendererBuilder` with default values.",25,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"headlessrendererbuilder"}}],[11,"with_gl","","Sets how the backend should choose the OpenGL API and version.",25,{"inputs":[{"name":"self"},{"name":"glrequest"}],"output":{"name":"headlessrendererbuilder"}}],[11,"with_gl_profile","","Sets the desired OpenGL context profile.",25,{"inputs":[{"name":"self"},{"name":"glprofile"}],"output":{"name":"headlessrendererbuilder"}}],[11,"with_gl_debug_flag","","Sets the debug flag for the OpenGL context.",25,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"headlessrendererbuilder"}}],[11,"with_gl_robustness","","Sets the robustness of the OpenGL context. See the docs of `Robustness`.",25,{"inputs":[{"name":"self"},{"name":"robustness"}],"output":{"name":"headlessrendererbuilder"}}],[11,"build","","Builds the headless context.",25,{"inputs":[{"name":"self"}],"output":{"generics":["headlesscontext","creationerror"],"name":"result"}}],[11,"build_strict","","Builds the headless context.",25,{"inputs":[{"name":"self"}],"output":{"generics":["headlesscontext","creationerror"],"name":"result"}}],[11,"new","","Initializes a new `WindowBuilder` with default values.",27,{"inputs":[],"output":{"name":"windowbuilder"}}],[11,"with_dimensions","","Requests the window to be of specific dimensions.",27,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":{"name":"windowbuilder"}}],[11,"with_min_dimensions","","Sets a minimum dimension size for the window",27,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":{"name":"windowbuilder"}}],[11,"with_max_dimensions","","Sets a maximum dimension size for the window",27,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":{"name":"windowbuilder"}}],[11,"with_title","","Requests a specific title for the window.",27,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"windowbuilder"}}],[11,"with_fullscreen","","Sets the window fullscreen state. None means a normal window, Some(MonitorId) means a fullscreen window on that specific monitor",27,{"inputs":[{"name":"self"},{"generics":["monitorid"],"name":"option"}],"output":{"name":"windowbuilder"}}],[11,"with_maximized","","Requests maximized mode.",27,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"windowbuilder"}}],[11,"with_visibility","","Sets whether the window will be initially hidden or visible.",27,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"windowbuilder"}}],[11,"with_transparency","","Sets whether the background of the window should be transparent.",27,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"windowbuilder"}}],[11,"with_decorations","","Sets whether the window should have a border, a title bar, etc.",27,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"windowbuilder"}}],[11,"with_multitouch","","Enables multitouch.",27,{"inputs":[{"name":"self"}],"output":{"name":"windowbuilder"}}],[11,"build","","Builds the window.",27,{"inputs":[{"name":"self"},{"name":"eventsloop"}],"output":{"generics":["window","creationerror"],"name":"result"}}]],"paths":[[8,"MonitorIdExt"],[8,"WindowExt"],[8,"WindowBuilderExt"],[4,"RawHandle"],[4,"XNotSupported"],[8,"EventsLoopExt"],[8,"GlContextExt"],[8,"GlContext"],[3,"ContextBuilder"],[4,"CreationError"],[4,"ContextError"],[4,"Api"],[4,"GlProfile"],[4,"GlRequest"],[4,"Robustness"],[4,"ReleaseBehavior"],[3,"PixelFormat"],[3,"PixelFormatRequirements"],[3,"GlAttributes"],[4,"Event"],[4,"MouseButton"],[4,"VirtualKeyCode"],[4,"ControlFlow"],[4,"MouseScrollDelta"],[4,"MouseCursor"],[3,"HeadlessRendererBuilder"],[3,"ModifiersState"],[3,"WindowBuilder"],[4,"CursorState"],[4,"TouchPhase"],[3,"KeyboardInput"],[4,"WindowCreationError"],[4,"ElementState"],[3,"Touch"],[3,"WindowAttributes"],[4,"DeviceEvent"],[4,"WindowEvent"],[3,"Blend"],[3,"Depth"],[3,"Version"],[3,"Rect"],[3,"BlitTarget"],[3,"IncompatibleOpenGl"],[4,"Profile"],[4,"BlendingFunction"],[4,"LinearBlendingFactor"],[4,"DepthTest"],[4,"StencilTest"],[4,"StencilOperation"],[4,"Api"],[4,"Handle"],[4,"RawUniformValue"],[4,"DrawError"],[4,"SwapBuffersError"],[4,"ReleaseBehavior"],[4,"DisplayCreationError"],[3,"Headless"],[3,"GlutinBackend"],[3,"Display"],[3,"GlutinBackend"],[8,"Backend"],[8,"Facade"],[4,"ReadError"],[4,"CopyError"],[4,"BufferCreationError"],[4,"BufferMode"],[4,"BufferType"],[3,"Mapping"],[3,"ReadMapping"],[3,"WriteMapping"],[3,"Inserter"],[3,"Buffer"],[3,"BufferSlice"],[3,"BufferMutSlice"],[3,"BufferAny"],[3,"BufferAnySlice"],[8,"Content"],[4,"DebugCallbackBehavior"],[4,"Severity"],[4,"Source"],[4,"MessageType"],[3,"TimestampQuery"],[3,"Stencil"],[3,"DrawParameters"],[3,"ConditionalRendering"],[4,"DepthClamp"],[4,"QueryCreationError"],[4,"BackfaceCullingMode"],[4,"PolygonMode"],[4,"Smooth"],[4,"ProvokingVertex"],[4,"SamplesQueryParam"],[3,"SamplesPassedQuery"],[3,"TimeElapsedQuery"],[3,"AnySamplesPassedQuery"],[3,"PrimitivesGeneratedQuery"],[3,"TransformFeedbackPrimitivesWrittenQuery"],[4,"DefaultFramebufferAttachment"],[4,"RenderBufferCreationError"],[4,"ValidationError"],[4,"ColorAttachment"],[4,"DepthAttachment"],[4,"StencilAttachment"],[4,"DepthStencilAttachment"],[3,"DefaultFramebuffer"],[3,"RenderBuffer"],[3,"DepthRenderBuffer"],[3,"StencilRenderBuffer"],[3,"DepthStencilRenderBuffer"],[3,"RenderBufferAny"],[8,"ToColorAttachment"],[8,"ToDepthAttachment"],[8,"ToStencilAttachment"],[8,"ToDepthStencilAttachment"],[3,"SimpleFrameBuffer"],[3,"MultiOutputFrameBuffer"],[3,"EmptyFrameBuffer"],[3,"DrawCommandNoIndices"],[3,"DrawCommandIndices"],[3,"NoIndices"],[4,"BufferCreationError"],[4,"IndicesSource"],[4,"PrimitiveType"],[4,"IndexType"],[3,"IndexBuffer"],[3,"IndexBufferSlice"],[3,"IndexBufferAny"],[3,"DrawCommandsNoIndicesBuffer"],[3,"DrawCommandsIndicesBuffer"],[8,"Index"],[3,"ComputeCommand"],[3,"Uniform"],[3,"UniformBlock"],[3,"Attribute"],[3,"TransformFeedbackVarying"],[3,"TransformFeedbackBuffer"],[3,"SubroutineData"],[3,"SubroutineUniform"],[3,"SourceCode"],[3,"Binary"],[4,"BlockLayout"],[4,"OutputPrimitives"],[4,"TransformFeedbackMode"],[4,"ShaderStage"],[4,"ProgramCreationError"],[4,"ProgramChooserCreationError"],[4,"GetBinaryError"],[4,"ProgramCreationInput"],[3,"ComputeShader"],[3,"Program"],[3,"Sampler"],[3,"SamplerBehavior"],[4,"SamplerWrapFunction"],[4,"MagnifySamplerFilter"],[4,"MinifySamplerFilter"],[4,"UniformValue"],[4,"UniformType"],[4,"LayoutMismatchError"],[3,"UniformBuffer"],[3,"EmptyUniforms"],[3,"UniformsStorage"],[8,"Uniforms"],[8,"AsUniformValue"],[8,"UniformBlock"],[3,"EmptyVertexAttributes"],[3,"EmptyInstanceAttributes"],[4,"BufferCreationError"],[4,"AttributeType"],[4,"VerticesSource"],[3,"VertexBuffer"],[3,"VertexBufferSlice"],[3,"VertexBufferAny"],[3,"TransformFeedbackSession"],[8,"MultiVerticesSource"],[8,"Vertex"],[8,"Attribute"],[3,"PerInstance"],[3,"RawImage1d"],[3,"RawImage2d"],[3,"RawImage3d"],[4,"ClientFormat"],[4,"TextureFormat"],[4,"UncompressedFloatFormat"],[4,"UncompressedIntFormat"],[4,"UncompressedUintFormat"],[4,"CompressedFormat"],[4,"DepthFormat"],[4,"DepthStencilFormat"],[4,"StencilFormat"],[4,"CompressedSrgbFormat"],[4,"SrgbFormat"],[4,"Dimensions"],[4,"InternalFormat"],[4,"InternalFormatType"],[4,"GetFormatError"],[4,"CubeLayer"],[4,"TextureKind"],[4,"MipmapsOption"],[4,"CompressedMipmapsOption"],[4,"TextureCreationError"],[3,"ResidentTexture"],[3,"TextureHandle"],[3,"BindlessTexturesNotSupportedError"],[4,"TextureCreationError"],[4,"CreationError"],[4,"BufferTextureType"],[4,"TextureBufferContentType"],[8,"TextureBufferContent"],[3,"BufferTexture"],[3,"BufferTextureRef"],[3,"PixelBuffer"],[3,"TextureAny"],[3,"TextureAnyLayer"],[3,"TextureAnyMipmap"],[3,"TextureAnyLayerMipmap"],[3,"TextureAnyImage"],[3,"Texture1d"],[3,"Texture1dMipmap"],[3,"CompressedTexture1d"],[3,"CompressedTexture1dMipmap"],[3,"SrgbTexture1d"],[3,"SrgbTexture1dMipmap"],[3,"CompressedSrgbTexture1d"],[3,"CompressedSrgbTexture1dMipmap"],[3,"IntegralTexture1d"],[3,"IntegralTexture1dMipmap"],[3,"UnsignedTexture1d"],[3,"UnsignedTexture1dMipmap"],[3,"DepthTexture1d"],[3,"DepthTexture1dMipmap"],[3,"StencilTexture1d"],[3,"StencilTexture1dMipmap"],[3,"DepthStencilTexture1d"],[3,"DepthStencilTexture1dMipmap"],[3,"Texture2d"],[3,"Texture2dMipmap"],[3,"CompressedTexture2d"],[3,"CompressedTexture2dMipmap"],[3,"SrgbTexture2d"],[3,"SrgbTexture2dMipmap"],[3,"CompressedSrgbTexture2d"],[3,"CompressedSrgbTexture2dMipmap"],[3,"IntegralTexture2d"],[3,"IntegralTexture2dMipmap"],[3,"UnsignedTexture2d"],[3,"UnsignedTexture2dMipmap"],[3,"DepthTexture2d"],[3,"DepthTexture2dMipmap"],[3,"StencilTexture2d"],[3,"StencilTexture2dMipmap"],[3,"DepthStencilTexture2d"],[3,"DepthStencilTexture2dMipmap"],[3,"Texture2dMultisample"],[3,"Texture2dMultisampleMipmap"],[3,"IntegralTexture2dMultisample"],[3,"IntegralTexture2dMultisampleMipmap"],[3,"SrgbTexture2dMultisample"],[3,"SrgbTexture2dMultisampleMipmap"],[3,"UnsignedTexture2dMultisample"],[3,"UnsignedTexture2dMultisampleMipmap"],[3,"DepthTexture2dMultisample"],[3,"DepthTexture2dMultisampleMipmap"],[3,"StencilTexture2dMultisample"],[3,"StencilTexture2dMultisampleMipmap"],[3,"DepthStencilTexture2dMultisample"],[3,"DepthStencilTexture2dMultisampleMipmap"],[3,"Texture3d"],[3,"Texture3dMipmap"],[3,"CompressedTexture3d"],[3,"CompressedTexture3dMipmap"],[3,"SrgbTexture3d"],[3,"SrgbTexture3dMipmap"],[3,"CompressedSrgbTexture3d"],[3,"CompressedSrgbTexture3dMipmap"],[3,"IntegralTexture3d"],[3,"IntegralTexture3dMipmap"],[3,"UnsignedTexture3d"],[3,"UnsignedTexture3dMipmap"],[3,"DepthTexture3d"],[3,"DepthTexture3dMipmap"],[3,"DepthStencilTexture3d"],[3,"DepthStencilTexture3dMipmap"],[3,"Texture1dArray"],[3,"Texture1dArrayLayer"],[3,"Texture1dArrayMipmap"],[3,"Texture1dArrayLayerMipmap"],[3,"CompressedTexture1dArray"],[3,"CompressedTexture1dArrayLayer"],[3,"CompressedTexture1dArrayMipmap"],[3,"CompressedTexture1dArrayLayerMipmap"],[3,"SrgbTexture1dArray"],[3,"SrgbTexture1dArrayLayer"],[3,"SrgbTexture1dArrayMipmap"],[3,"SrgbTexture1dArrayLayerMipmap"],[3,"CompressedSrgbTexture1dArray"],[3,"CompressedSrgbTexture1dArrayLayer"],[3,"CompressedSrgbTexture1dArrayMipmap"],[3,"CompressedSrgbTexture1dArrayLayerMipmap"],[3,"IntegralTexture1dArray"],[3,"IntegralTexture1dArrayLayer"],[3,"IntegralTexture1dArrayMipmap"],[3,"IntegralTexture1dArrayLayerMipmap"],[3,"UnsignedTexture1dArray"],[3,"UnsignedTexture1dArrayLayer"],[3,"UnsignedTexture1dArrayMipmap"],[3,"UnsignedTexture1dArrayLayerMipmap"],[3,"DepthTexture1dArray"],[3,"DepthTexture1dArrayLayer"],[3,"DepthTexture1dArrayMipmap"],[3,"DepthTexture1dArrayLayerMipmap"],[3,"StencilTexture1dArray"],[3,"StencilTexture1dArrayLayer"],[3,"StencilTexture1dArrayMipmap"],[3,"StencilTexture1dArrayLayerMipmap"],[3,"DepthStencilTexture1dArray"],[3,"DepthStencilTexture1dArrayLayer"],[3,"DepthStencilTexture1dArrayMipmap"],[3,"DepthStencilTexture1dArrayLayerMipmap"],[3,"Texture2dArray"],[3,"Texture2dArrayLayer"],[3,"Texture2dArrayMipmap"],[3,"Texture2dArrayLayerMipmap"],[3,"CompressedTexture2dArray"],[3,"CompressedTexture2dArrayLayer"],[3,"CompressedTexture2dArrayMipmap"],[3,"CompressedTexture2dArrayLayerMipmap"],[3,"SrgbTexture2dArray"],[3,"SrgbTexture2dArrayLayer"],[3,"SrgbTexture2dArrayMipmap"],[3,"SrgbTexture2dArrayLayerMipmap"],[3,"CompressedSrgbTexture2dArray"],[3,"CompressedSrgbTexture2dArrayLayer"],[3,"CompressedSrgbTexture2dArrayMipmap"],[3,"CompressedSrgbTexture2dArrayLayerMipmap"],[3,"IntegralTexture2dArray"],[3,"IntegralTexture2dArrayLayer"],[3,"IntegralTexture2dArrayMipmap"],[3,"IntegralTexture2dArrayLayerMipmap"],[3,"UnsignedTexture2dArray"],[3,"UnsignedTexture2dArrayLayer"],[3,"UnsignedTexture2dArrayMipmap"],[3,"UnsignedTexture2dArrayLayerMipmap"],[3,"DepthTexture2dArray"],[3,"DepthTexture2dArrayLayer"],[3,"DepthTexture2dArrayMipmap"],[3,"DepthTexture2dArrayLayerMipmap"],[3,"StencilTexture2dArray"],[3,"StencilTexture2dArrayLayer"],[3,"StencilTexture2dArrayMipmap"],[3,"StencilTexture2dArrayLayerMipmap"],[3,"DepthStencilTexture2dArray"],[3,"DepthStencilTexture2dArrayLayer"],[3,"DepthStencilTexture2dArrayMipmap"],[3,"DepthStencilTexture2dArrayLayerMipmap"],[3,"Texture2dMultisampleArray"],[3,"Texture2dMultisampleArrayLayer"],[3,"Texture2dMultisampleArrayMipmap"],[3,"Texture2dMultisampleArrayLayerMipmap"],[3,"SrgbTexture2dMultisampleArray"],[3,"SrgbTexture2dMultisampleArrayLayer"],[3,"SrgbTexture2dMultisampleArrayMipmap"],[3,"SrgbTexture2dMultisampleArrayLayerMipmap"],[3,"IntegralTexture2dMultisampleArray"],[3,"IntegralTexture2dMultisampleArrayLayer"],[3,"IntegralTexture2dMultisampleArrayMipmap"],[3,"IntegralTexture2dMultisampleArrayLayerMipmap"],[3,"UnsignedTexture2dMultisampleArray"],[3,"UnsignedTexture2dMultisampleArrayLayer"],[3,"UnsignedTexture2dMultisampleArrayMipmap"],[3,"UnsignedTexture2dMultisampleArrayLayerMipmap"],[3,"DepthTexture2dMultisampleArray"],[3,"DepthTexture2dMultisampleArrayLayer"],[3,"DepthTexture2dMultisampleArrayMipmap"],[3,"DepthTexture2dMultisampleArrayLayerMipmap"],[3,"StencilTexture2dMultisampleArray"],[3,"StencilTexture2dMultisampleArrayLayer"],[3,"StencilTexture2dMultisampleArrayMipmap"],[3,"StencilTexture2dMultisampleArrayLayerMipmap"],[3,"DepthStencilTexture2dMultisampleArray"],[3,"DepthStencilTexture2dMultisampleArrayLayer"],[3,"DepthStencilTexture2dMultisampleArrayMipmap"],[3,"DepthStencilTexture2dMultisampleArrayLayerMipmap"],[3,"Cubemap"],[3,"CubemapMipmap"],[3,"CubemapImage"],[3,"CompressedCubemap"],[3,"CompressedCubemapMipmap"],[3,"CompressedCubemapImage"],[3,"SrgbCubemap"],[3,"SrgbCubemapMipmap"],[3,"SrgbCubemapImage"],[3,"CompressedSrgbCubemap"],[3,"CompressedSrgbCubemapMipmap"],[3,"CompressedSrgbCubemapImage"],[3,"IntegralCubemap"],[3,"IntegralCubemapMipmap"],[3,"IntegralCubemapImage"],[3,"UnsignedCubemap"],[3,"UnsignedCubemapMipmap"],[3,"UnsignedCubemapImage"],[3,"DepthCubemap"],[3,"DepthCubemapMipmap"],[3,"DepthCubemapImage"],[3,"StencilCubemap"],[3,"StencilCubemapMipmap"],[3,"StencilCubemapImage"],[3,"DepthStencilCubemap"],[3,"DepthStencilCubemapMipmap"],[3,"DepthStencilCubemapImage"],[3,"CubemapArray"],[3,"CubemapArrayLayer"],[3,"CubemapArrayMipmap"],[3,"CubemapArrayLayerMipmap"],[3,"CubemapArrayImage"],[3,"CompressedCubemapArray"],[3,"CompressedCubemapArrayLayer"],[3,"CompressedCubemapArrayMipmap"],[3,"CompressedCubemapArrayLayerMipmap"],[3,"CompressedCubemapArrayImage"],[3,"SrgbCubemapArray"],[3,"SrgbCubemapArrayLayer"],[3,"SrgbCubemapArrayMipmap"],[3,"SrgbCubemapArrayLayerMipmap"],[3,"SrgbCubemapArrayImage"],[3,"CompressedSrgbCubemapArray"],[3,"CompressedSrgbCubemapArrayLayer"],[3,"CompressedSrgbCubemapArrayMipmap"],[3,"CompressedSrgbCubemapArrayLayerMipmap"],[3,"CompressedSrgbCubemapArrayImage"],[3,"IntegralCubemapArray"],[3,"IntegralCubemapArrayLayer"],[3,"IntegralCubemapArrayMipmap"],[3,"IntegralCubemapArrayLayerMipmap"],[3,"IntegralCubemapArrayImage"],[3,"UnsignedCubemapArray"],[3,"UnsignedCubemapArrayLayer"],[3,"UnsignedCubemapArrayMipmap"],[3,"UnsignedCubemapArrayLayerMipmap"],[3,"UnsignedCubemapArrayImage"],[3,"DepthCubemapArray"],[3,"DepthCubemapArrayLayer"],[3,"DepthCubemapArrayMipmap"],[3,"DepthCubemapArrayLayerMipmap"],[3,"DepthCubemapArrayImage"],[3,"StencilCubemapArray"],[3,"StencilCubemapArrayLayer"],[3,"StencilCubemapArrayMipmap"],[3,"StencilCubemapArrayLayerMipmap"],[3,"StencilCubemapArrayImage"],[3,"DepthStencilCubemapArray"],[3,"DepthStencilCubemapArrayLayer"],[3,"DepthStencilCubemapArrayMipmap"],[3,"DepthStencilCubemapArrayLayerMipmap"],[3,"DepthStencilCubemapArrayImage"],[8,"PixelValue"],[8,"Texture1dDataSource"],[8,"Texture1dDataSink"],[8,"Texture2dDataSource"],[8,"Texture2dDataSink"],[8,"ToClientFormat"],[8,"Texture3dDataSource"],[8,"Texture3dDataSink"],[3,"Context"],[3,"SyncFence"],[3,"LinearSyncFence"],[8,"CapabilitiesSource"],[8,"GlObject"],[8,"Surface"],[3,"Frame"],[3,"HeadlessContext"],[3,"Context"],[3,"GlWindow"],[3,"Window"],[3,"DeviceId"],[3,"WindowId"],[3,"EventsLoopClosed"],[3,"MonitorId"],[3,"AvailableMonitorsIter"],[3,"EventsLoopProxy"],[3,"EventsLoop"]]};
searchIndex["glutin"] = {"doc":"The purpose of this library is to provide an OpenGL context on as many platforms as possible.","items":[[3,"AvailableMonitorsIter","glutin","An iterator for the list of available monitors.",null,null],[6,"AxisId","","Identifier for a specific analog axis on some device.",null,null],[6,"ButtonId","","Identifier for a specific button on some device.",null,null],[4,"ControlFlow","","Returned by the user callback given to the `EventsLoop::run_forever` method.",null,null],[13,"Continue","","Continue looping and waiting for events.",0,null],[13,"Break","","Break from the event loop.",0,null],[4,"WindowCreationError","","Error that can happen while creating a window or a headless renderer.",null,null],[13,"OsError","","",1,null],[13,"NotSupported","","TODO: remove this error",1,null],[4,"CursorState","","Describes how winit handles the cursor.",null,null],[13,"Normal","","Normal cursor behavior.",2,null],[13,"Hide","","The cursor will be invisible when over the window.",2,null],[13,"Grab","","Grabs the mouse cursor. The cursor's motion will be confined to this window and the window has exclusive access to further events regarding the cursor.",2,null],[4,"DeviceEvent","","Represents raw hardware events that are not associated with any particular window.",null,null],[13,"Added","","",3,null],[13,"Removed","","",3,null],[13,"MouseMotion","","Change in physical position of a pointing device.",3,null],[12,"delta","glutin::DeviceEvent","(x, y) change in position in unspecified units.",3,null],[13,"MouseWheel","glutin","Physical scroll event",3,null],[12,"delta","glutin::DeviceEvent","",3,null],[13,"Motion","glutin","Motion on some analog axis.  This event will be reported for all arbitrary input devices that winit supports on this platform, including mouse devices.  If the device is a mouse device then this will be reported alongside the MouseMotion event.",3,null],[12,"axis","glutin::DeviceEvent","",3,null],[12,"value","","",3,null],[13,"Button","glutin","",3,null],[12,"button","glutin::DeviceEvent","",3,null],[12,"state","","",3,null],[13,"Key","glutin","",3,null],[13,"Text","","",3,null],[12,"codepoint","glutin::DeviceEvent","",3,null],[3,"DeviceId","glutin","Identifier of an input device.",null,null],[4,"ElementState","","Describes the input state of a key.",null,null],[13,"Pressed","","",4,null],[13,"Released","","",4,null],[4,"Event","","Describes a generic event.",null,null],[13,"WindowEvent","","",5,null],[12,"window_id","glutin::Event","",5,null],[12,"event","","",5,null],[13,"DeviceEvent","glutin","",5,null],[12,"device_id","glutin::Event","",5,null],[12,"event","","",5,null],[13,"Awakened","glutin","",5,null],[13,"Suspended","","The application has been suspended or resumed.",5,null],[3,"EventsLoop","","Provides a way to retreive events from the system and from the windows that were registered to the events loop.",null,null],[3,"EventsLoopClosed","","The error that is returned when an `EventsLoopProxy` attempts to wake up an `EventsLoop` that no longer exists.",null,null],[3,"EventsLoopProxy","","Used to wake up the `EventsLoop` from another thread.",null,null],[3,"KeyboardInput","","Describes a keyboard input event.",null,null],[12,"scancode","","Identifies the physical key pressed",6,null],[12,"state","","",6,null],[12,"virtual_keycode","","Identifies the semantic meaning of the key",6,null],[12,"modifiers","","Modifier keys active at the time of this input.",6,null],[3,"ModifiersState","","Represents the current state of the keyboard modifiers",null,null],[12,"shift","","The \"shift\" key",7,null],[12,"ctrl","","The \"control\" key",7,null],[12,"alt","","The \"alt\" key",7,null],[12,"logo","","The \"logo\" key",7,null],[3,"MonitorId","","Identifier for a monitor.",null,null],[4,"MouseButton","","Describes a button of a mouse controller.",null,null],[13,"Left","","",8,null],[13,"Right","","",8,null],[13,"Middle","","",8,null],[13,"Other","","",8,null],[4,"MouseCursor","","Describes the appearance of the mouse cursor.",null,null],[13,"Default","","The platform-dependent default cursor.",9,null],[13,"Crosshair","","A simple crosshair.",9,null],[13,"Hand","","A hand (often used to indicate links in web browsers).",9,null],[13,"Arrow","","Self explanatory.",9,null],[13,"Move","","Indicates something is to be moved.",9,null],[13,"Text","","Indicates text that may be selected or edited.",9,null],[13,"Wait","","Program busy indicator.",9,null],[13,"Help","","Help indicator (often rendered as a \"?\")",9,null],[13,"Progress","","Progress indicator. Shows that processing is being done. But in contrast with \"Wait\" the user may still interact with the program. Often rendered as a spinning beach ball, or an arrow with a watch or hourglass.",9,null],[13,"NotAllowed","","Cursor showing that something cannot be done.",9,null],[13,"ContextMenu","","",9,null],[13,"NoneCursor","","",9,null],[13,"Cell","","",9,null],[13,"VerticalText","","",9,null],[13,"Alias","","",9,null],[13,"Copy","","",9,null],[13,"NoDrop","","",9,null],[13,"Grab","","",9,null],[13,"Grabbing","","",9,null],[13,"AllScroll","","",9,null],[13,"ZoomIn","","",9,null],[13,"ZoomOut","","",9,null],[13,"EResize","","Indicate that some edge is to be moved. For example, the 'SeResize' cursor is used when the movement starts from the south-east corner of the box.",9,null],[13,"NResize","","",9,null],[13,"NeResize","","",9,null],[13,"NwResize","","",9,null],[13,"SResize","","",9,null],[13,"SeResize","","",9,null],[13,"SwResize","","",9,null],[13,"WResize","","",9,null],[13,"EwResize","","",9,null],[13,"NsResize","","",9,null],[13,"NeswResize","","",9,null],[13,"NwseResize","","",9,null],[13,"ColResize","","",9,null],[13,"RowResize","","",9,null],[4,"MouseScrollDelta","","Describes a difference in the mouse scroll wheel state.",null,null],[13,"LineDelta","","Amount in lines or rows to scroll in the horizontal and vertical directions.",10,null],[13,"PixelDelta","","Amount in pixels to scroll in the horizontal and vertical direction.",10,null],[6,"ScanCode","","Hardware-dependent keyboard scan code.",null,null],[3,"Touch","","Represents touch event",null,null],[12,"device_id","","",11,null],[12,"phase","","",11,null],[12,"location","","",11,null],[12,"id","","unique identifier of a finger.",11,null],[4,"TouchPhase","","Describes touch-screen input state.",null,null],[13,"Started","","",12,null],[13,"Moved","","",12,null],[13,"Ended","","",12,null],[13,"Cancelled","","",12,null],[4,"VirtualKeyCode","","Symbolic name for a keyboard key.",null,null],[13,"Key1","","The '1' key over the letters.",13,null],[13,"Key2","","The '2' key over the letters.",13,null],[13,"Key3","","The '3' key over the letters.",13,null],[13,"Key4","","The '4' key over the letters.",13,null],[13,"Key5","","The '5' key over the letters.",13,null],[13,"Key6","","The '6' key over the letters.",13,null],[13,"Key7","","The '7' key over the letters.",13,null],[13,"Key8","","The '8' key over the letters.",13,null],[13,"Key9","","The '9' key over the letters.",13,null],[13,"Key0","","The '0' key over the 'O' and 'P' keys.",13,null],[13,"A","","",13,null],[13,"B","","",13,null],[13,"C","","",13,null],[13,"D","","",13,null],[13,"E","","",13,null],[13,"F","","",13,null],[13,"G","","",13,null],[13,"H","","",13,null],[13,"I","","",13,null],[13,"J","","",13,null],[13,"K","","",13,null],[13,"L","","",13,null],[13,"M","","",13,null],[13,"N","","",13,null],[13,"O","","",13,null],[13,"P","","",13,null],[13,"Q","","",13,null],[13,"R","","",13,null],[13,"S","","",13,null],[13,"T","","",13,null],[13,"U","","",13,null],[13,"V","","",13,null],[13,"W","","",13,null],[13,"X","","",13,null],[13,"Y","","",13,null],[13,"Z","","",13,null],[13,"Escape","","The Escape key, next to F1.",13,null],[13,"F1","","",13,null],[13,"F2","","",13,null],[13,"F3","","",13,null],[13,"F4","","",13,null],[13,"F5","","",13,null],[13,"F6","","",13,null],[13,"F7","","",13,null],[13,"F8","","",13,null],[13,"F9","","",13,null],[13,"F10","","",13,null],[13,"F11","","",13,null],[13,"F12","","",13,null],[13,"F13","","",13,null],[13,"F14","","",13,null],[13,"F15","","",13,null],[13,"Snapshot","","Print Screen/SysRq.",13,null],[13,"Scroll","","Scroll Lock.",13,null],[13,"Pause","","Pause/Break key, next to Scroll lock.",13,null],[13,"Insert","","`Insert`, next to Backspace.",13,null],[13,"Home","","",13,null],[13,"Delete","","",13,null],[13,"End","","",13,null],[13,"PageDown","","",13,null],[13,"PageUp","","",13,null],[13,"Left","","",13,null],[13,"Up","","",13,null],[13,"Right","","",13,null],[13,"Down","","",13,null],[13,"Back","","The Backspace key, right over Enter.",13,null],[13,"Return","","The Enter key.",13,null],[13,"Space","","The space bar.",13,null],[13,"Compose","","The \"Compose\" key on Linux.",13,null],[13,"Numlock","","",13,null],[13,"Numpad0","","",13,null],[13,"Numpad1","","",13,null],[13,"Numpad2","","",13,null],[13,"Numpad3","","",13,null],[13,"Numpad4","","",13,null],[13,"Numpad5","","",13,null],[13,"Numpad6","","",13,null],[13,"Numpad7","","",13,null],[13,"Numpad8","","",13,null],[13,"Numpad9","","",13,null],[13,"AbntC1","","",13,null],[13,"AbntC2","","",13,null],[13,"Add","","",13,null],[13,"Apostrophe","","",13,null],[13,"Apps","","",13,null],[13,"At","","",13,null],[13,"Ax","","",13,null],[13,"Backslash","","",13,null],[13,"Calculator","","",13,null],[13,"Capital","","",13,null],[13,"Colon","","",13,null],[13,"Comma","","",13,null],[13,"Convert","","",13,null],[13,"Decimal","","",13,null],[13,"Divide","","",13,null],[13,"Equals","","",13,null],[13,"Grave","","",13,null],[13,"Kana","","",13,null],[13,"Kanji","","",13,null],[13,"LAlt","","",13,null],[13,"LBracket","","",13,null],[13,"LControl","","",13,null],[13,"LMenu","","",13,null],[13,"LShift","","",13,null],[13,"LWin","","",13,null],[13,"Mail","","",13,null],[13,"MediaSelect","","",13,null],[13,"MediaStop","","",13,null],[13,"Minus","","",13,null],[13,"Multiply","","",13,null],[13,"Mute","","",13,null],[13,"MyComputer","","",13,null],[13,"NavigateForward","","",13,null],[13,"NavigateBackward","","",13,null],[13,"NextTrack","","",13,null],[13,"NoConvert","","",13,null],[13,"NumpadComma","","",13,null],[13,"NumpadEnter","","",13,null],[13,"NumpadEquals","","",13,null],[13,"OEM102","","",13,null],[13,"Period","","",13,null],[13,"PlayPause","","",13,null],[13,"Power","","",13,null],[13,"PrevTrack","","",13,null],[13,"RAlt","","",13,null],[13,"RBracket","","",13,null],[13,"RControl","","",13,null],[13,"RMenu","","",13,null],[13,"RShift","","",13,null],[13,"RWin","","",13,null],[13,"Semicolon","","",13,null],[13,"Slash","","",13,null],[13,"Sleep","","",13,null],[13,"Stop","","",13,null],[13,"Subtract","","",13,null],[13,"Sysrq","","",13,null],[13,"Tab","","",13,null],[13,"Underline","","",13,null],[13,"Unlabeled","","",13,null],[13,"VolumeDown","","",13,null],[13,"VolumeUp","","",13,null],[13,"Wake","","",13,null],[13,"WebBack","","",13,null],[13,"WebFavorites","","",13,null],[13,"WebForward","","",13,null],[13,"WebHome","","",13,null],[13,"WebRefresh","","",13,null],[13,"WebSearch","","",13,null],[13,"WebStop","","",13,null],[13,"Yen","","",13,null],[3,"Window","","Represents a window.",null,null],[3,"WindowAttributes","","Attributes to use when creating a window.",null,null],[12,"dimensions","","The dimensions of the window. If this is `None`, some platform-specific dimensions will be used.",14,null],[12,"min_dimensions","","The minimum dimensions a window can be, If this is `None`, the window will have no minimum dimensions (aside from reserved).",14,null],[12,"max_dimensions","","The maximum dimensions a window can be, If this is `None`, the maximum will have no maximum or will be set to the primary monitor's dimensions by the platform.",14,null],[12,"fullscreen","","Whether the window should be set as fullscreen upon creation.",14,null],[12,"title","","The title of the window in the title bar.",14,null],[12,"maximized","","Whether the window should be maximized upon creation.",14,null],[12,"visible","","Whether the window should be immediately visible upon creation.",14,null],[12,"transparent","","Whether the the window should be transparent. If this is true, writing colors with alpha values different than `1.0` will produce a transparent window.",14,null],[12,"decorations","","Whether the window should have borders and bars.",14,null],[12,"multitouch","","[iOS only] Enable multitouch, see multipleTouchEnabled",14,null],[3,"WindowBuilder","","Object that allows you to build windows.",null,null],[12,"window","","The attributes to use to create the window.",15,null],[4,"WindowEvent","","Describes an event from a `Window`.",null,null],[13,"Resized","","The size of the window has changed.",16,null],[13,"Moved","","The position of the window has changed.",16,null],[13,"Closed","","The window has been closed.",16,null],[13,"DroppedFile","","A file has been dropped into the window.",16,null],[13,"HoveredFile","","A file is being hovered over the window.",16,null],[13,"HoveredFileCancelled","","A file was hovered, but has exited the window.",16,null],[13,"ReceivedCharacter","","The window received a unicode character.",16,null],[13,"Focused","","The window gained or lost focus.",16,null],[13,"KeyboardInput","","An event from the keyboard has been received.",16,null],[12,"device_id","glutin::WindowEvent","",16,null],[12,"input","","",16,null],[13,"CursorMoved","glutin","The cursor has moved on the window.",16,null],[12,"device_id","glutin::WindowEvent","",16,null],[12,"position","","(x,y) coords in pixels relative to the top-left corner of the window. Because the range of this data is limited by the display area and it may have been transformed by the OS to implement effects such as cursor acceleration, it should not be used to implement non-cursor-like interactions such as 3D camera control.",16,null],[12,"modifiers","","",16,null],[13,"CursorEntered","glutin","The cursor has entered the window.",16,null],[12,"device_id","glutin::WindowEvent","",16,null],[13,"CursorLeft","glutin","The cursor has left the window.",16,null],[12,"device_id","glutin::WindowEvent","",16,null],[13,"MouseWheel","glutin","A mouse wheel movement or touchpad scroll occurred.",16,null],[12,"device_id","glutin::WindowEvent","",16,null],[12,"delta","","",16,null],[12,"phase","","",16,null],[12,"modifiers","","",16,null],[13,"MouseInput","glutin","An mouse button press has been received.",16,null],[12,"device_id","glutin::WindowEvent","",16,null],[12,"state","","",16,null],[12,"button","","",16,null],[12,"modifiers","","",16,null],[13,"TouchpadPressure","glutin","Touchpad pressure event.",16,null],[12,"device_id","glutin::WindowEvent","",16,null],[12,"pressure","","",16,null],[12,"stage","","",16,null],[13,"AxisMotion","glutin","Motion on some analog axis. May report data redundant to other, more specific events.",16,null],[12,"device_id","glutin::WindowEvent","",16,null],[12,"axis","","",16,null],[12,"value","","",16,null],[13,"Refresh","glutin","The window needs to be redrawn.",16,null],[13,"Touch","","Touch event has been received",16,null],[13,"HiDPIFactorChanged","","DPI scaling factor of the window has changed.",16,null],[3,"WindowId","","Identifier of a window. Unique for each window.",null,null],[3,"HeadlessRendererBuilder","","Object that allows you to build headless contexts.",null,null],[12,"dimensions","","The dimensions to use.",17,null],[12,"opengl","","The OpenGL attributes to build the context with.",17,null],[3,"HeadlessContext","","Represents a headless OpenGL context.",null,null],[3,"Context","","Represents an OpenGL context.",null,null],[3,"ContextBuilder","","Object that allows you to build `Context`s.",null,null],[12,"gl_attr","","The attributes to use to create the context.",18,null],[3,"GlWindow","","Represents an OpenGL context and a Window with which it is associated.",null,null],[3,"PixelFormat","","Describes a possible format. Unused.",null,null],[12,"hardware_accelerated","","",19,null],[12,"color_bits","","",19,null],[12,"alpha_bits","","",19,null],[12,"depth_bits","","",19,null],[12,"stencil_bits","","",19,null],[12,"stereoscopy","","",19,null],[12,"double_buffer","","",19,null],[12,"multisampling","","",19,null],[12,"srgb","","",19,null],[3,"PixelFormatRequirements","","Describes how the backend should choose a pixel format.",null,null],[12,"hardware_accelerated","","If true, only hardware-accelerated formats will be considered. If false, only software renderers. `None` means \"don't care\". Default is `Some(true)`.",20,null],[12,"color_bits","","Minimum number of bits for the color buffer, excluding alpha. `None` means \"don't care\". The default is `Some(24)`.",20,null],[12,"float_color_buffer","","If true, the color buffer must be in a floating point format. Default is `false`.",20,null],[12,"alpha_bits","","Minimum number of bits for the alpha in the color buffer. `None` means \"don't care\". The default is `Some(8)`.",20,null],[12,"depth_bits","","Minimum number of bits for the depth buffer. `None` means \"don't care\". The default value is `Some(24)`.",20,null],[12,"stencil_bits","","Minimum number of bits for the depth buffer. `None` means \"don't care\". The default value is `Some(8)`.",20,null],[12,"double_buffer","","If true, only double-buffered formats will be considered. If false, only single-buffer formats. `None` means \"don't care\". The default is `Some(true)`.",20,null],[12,"multisampling","","Contains the minimum number of samples per pixel in the color, depth and stencil buffers. `None` means \"don't care\". Default is `None`. A value of `Some(0)` indicates that multisampling must not be enabled.",20,null],[12,"stereoscopy","","If true, only stereoscopic formats will be considered. If false, only non-stereoscopic formats. The default is `false`.",20,null],[12,"srgb","","If true, only sRGB-capable formats will be considered. If false, don't care. The default is `false`.",20,null],[12,"release_behavior","","The behavior when changing the current context. Default is `Flush`.",20,null],[3,"GlAttributes","","Attributes to use when creating an OpenGL context.",null,null],[12,"sharing","","An existing context to share the new the context with.",21,null],[12,"version","","Version to try create. See `GlRequest` for more infos.",21,null],[12,"profile","","OpenGL profile to use.",21,null],[12,"debug","","Whether to enable the `debug` flag of the context.",21,null],[12,"robustness","","How the OpenGL context should detect errors.",21,null],[12,"vsync","","Whether to use vsync. If vsync is enabled, calling `swap_buffers` will block until the screen refreshes. This is typically used to prevent screen tearing.",21,null],[4,"CreationError","","Error that can happen while creating a window or a headless renderer.",null,null],[13,"OsError","","",22,null],[13,"NotSupported","","TODO: remove this error",22,null],[13,"NoBackendAvailable","","",22,null],[13,"RobustnessNotSupported","","",22,null],[13,"OpenGlVersionNotSupported","","",22,null],[13,"NoAvailablePixelFormat","","",22,null],[13,"PlatformSpecific","","",22,null],[13,"Window","","",22,null],[4,"ContextError","","Error that can happen when manipulating an OpenGL context.",null,null],[13,"IoError","","",23,null],[13,"ContextLost","","",23,null],[4,"Api","","All APIs related to OpenGL that you can possibly get while using glutin.",null,null],[13,"OpenGl","","The classical OpenGL. Available on Windows, Linux, OS/X.",24,null],[13,"OpenGlEs","","OpenGL embedded system. Available on Linux, Android.",24,null],[13,"WebGl","","OpenGL for the web. Very similar to OpenGL ES.",24,null],[4,"GlProfile","","Describes the requested OpenGL context profiles.",null,null],[13,"Compatibility","","Include all the immediate more functions and definitions.",25,null],[13,"Core","","Include all the future-compatible functions and definitions.",25,null],[4,"GlRequest","","Describes the OpenGL API and version that are being requested when a context is created.",null,null],[13,"Latest","","Request the latest version of the \"best\" API of this platform.",26,null],[13,"Specific","","Request a specific version of a specific API.",26,null],[13,"GlThenGles","","If OpenGL is available, create an OpenGL context with the specified `opengl_version`. Else if OpenGL ES or WebGL is available, create a context with the specified `opengles_version`.",26,null],[12,"opengl_version","glutin::GlRequest","The version to use for OpenGL.",26,null],[12,"opengles_version","","The version to use for OpenGL ES.",26,null],[4,"Robustness","glutin","Specifies the tolerance of the OpenGL context to faults. If you accept raw OpenGL commands and/or raw shader code from an untrusted source, you should definitely care about this.",null,null],[13,"NotRobust","","Not everything is checked. Your application can crash if you do something wrong with your shaders.",27,null],[13,"NoError","","The driver doesn't check anything. This option is very dangerous. Please know what you're doing before using it. See the `GL_KHR_no_error` extension.",27,null],[13,"RobustNoResetNotification","","Everything is checked to avoid any crash. The driver will attempt to avoid any problem, but if a problem occurs the behavior is implementation-defined. You are just guaranteed not to get a crash.",27,null],[13,"TryRobustNoResetNotification","","Same as `RobustNoResetNotification` but the context creation doesn't fail if it's not supported.",27,null],[13,"RobustLoseContextOnReset","","Everything is checked to avoid any crash. If a problem occurs, the context will enter a \"context lost\" state. It must then be recreated. For the moment, glutin doesn't provide a way to recreate a context with the same window :-/",27,null],[13,"TryRobustLoseContextOnReset","","Same as `RobustLoseContextOnReset` but the context creation doesn't fail if it's not supported.",27,null],[4,"ReleaseBehavior","","The behavior of the driver when you change the current context.",null,null],[13,"None","","Doesn't do anything. Most notably doesn't flush.",28,null],[13,"Flush","","Flushes the context that was previously current as if `glFlush` was called.",28,null],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"headlessrendererbuilder"}}],[11,"new","","Initializes a new `HeadlessRendererBuilder` with default values.",17,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"headlessrendererbuilder"}}],[11,"with_gl","","Sets how the backend should choose the OpenGL API and version.",17,{"inputs":[{"name":"self"},{"name":"glrequest"}],"output":{"name":"headlessrendererbuilder"}}],[11,"with_gl_profile","","Sets the desired OpenGL context profile.",17,{"inputs":[{"name":"self"},{"name":"glprofile"}],"output":{"name":"headlessrendererbuilder"}}],[11,"with_gl_debug_flag","","Sets the debug flag for the OpenGL context.",17,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"headlessrendererbuilder"}}],[11,"with_gl_robustness","","Sets the robustness of the OpenGL context. See the docs of `Robustness`.",17,{"inputs":[{"name":"self"},{"name":"robustness"}],"output":{"name":"headlessrendererbuilder"}}],[11,"build","","Builds the headless context.",17,{"inputs":[{"name":"self"}],"output":{"generics":["headlesscontext","creationerror"],"name":"result"}}],[11,"build_strict","","Builds the headless context.",17,{"inputs":[{"name":"self"}],"output":{"generics":["headlesscontext","creationerror"],"name":"result"}}],[11,"make_current","","Creates a new OpenGL context Sets the context as the current context.",29,{"inputs":[{"name":"self"}],"output":{"generics":["contexterror"],"name":"result"}}],[11,"is_current","","Returns true if this context is the current one in this thread.",29,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_proc_address","","Returns the address of an OpenGL function.",29,null],[11,"get_api","","Returns the API that is currently provided by this window.",29,{"inputs":[{"name":"self"}],"output":{"name":"api"}}],[11,"swap_buffers","","",29,{"inputs":[{"name":"self"}],"output":{"generics":["contexterror"],"name":"result"}}],[11,"get_pixel_format","","",29,{"inputs":[{"name":"self"}],"output":{"name":"pixelformat"}}],[11,"resize","","",29,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":null}],[0,"os","","Contains traits with platform-specific methods in them.",null,null],[0,"unix","glutin::os","",null,null],[4,"XNotSupported","glutin::os::unix","Error returned if this system doesn't have XLib or can't create an X connection.",null,null],[13,"LibraryOpenError","","Failed to load one or several shared libraries.",30,null],[13,"XOpenDisplayFailed","","Connecting to the X server with `XOpenDisplay` failed.",30,null],[8,"EventsLoopExt","","Additional methods on `EventsLoop` that are specific to Linux.",null,null],[10,"new_x11","","Builds a new `EventsLoop` that is forced to use X11.",31,{"inputs":[],"output":{"generics":["xnotsupported"],"name":"result"}}],[10,"new_wayland","","Builds a new `EventsLoop` that is forced to use Wayland.",31,{"inputs":[],"output":{"name":"self"}}],[10,"is_wayland","","True if the `EventsLoop` uses Wayland.",31,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_x11","","True if the `EventsLoop` uses X11.",31,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"MonitorIdExt","","Additional methods on `MonitorId` that are specific to Linux.",null,null],[10,"native_id","","Returns the inner identifier of the monitor.",32,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[8,"WindowBuilderExt","","Additional methods on `WindowBuilder` that are specific to Unix.",null,null],[10,"with_x11_visual","","",33,null],[10,"with_x11_screen","","",33,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"windowbuilder"}}],[8,"WindowExt","","Additional methods on `Window` that are specific to Unix.",null,null],[10,"get_xlib_window","","Returns the ID of the `Window` xlib object that is used by this window.",34,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[10,"get_xlib_display","","Returns a pointer to the `Display` object of xlib that is used by this window.",34,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"get_xlib_screen_id","","",34,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"option"}}],[10,"get_xlib_xconnection","","",34,{"inputs":[{"name":"self"}],"output":{"generics":["arc"],"name":"option"}}],[10,"send_xim_spot","","",34,null],[10,"get_xcb_connection","","This function returns the underlying `xcb_connection_t` of an xlib `Display`.",34,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"get_wayland_surface","","Returns a pointer to the `wl_surface` object of wayland that is used by this window.",34,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"get_wayland_display","","Returns a pointer to the `wl_display` object of wayland that is used by this window.",34,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"is_ready","","Check if the window is ready for drawing",34,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[4,"RawHandle","","Context handles available on Unix-like platforms.",null,null],[13,"Glx","","",35,null],[13,"Egl","","",35,null],[6,"EGLContext","","",null,null],[6,"GLXContext","","",null,null],[11,"raw_handle","glutin","",36,null],[11,"raw_handle","","",29,null],[8,"GlContextExt","glutin::os","Platform-specific extensions for OpenGL contexts.",null,null],[16,"Handle","","Raw context handle.",37,null],[10,"raw_handle","","Returns the raw context handle.",37,null],[7,"GL_CORE","glutin","The minimum core profile GL context. Useful for getting the minimum required GL version while still running on OSX, which often forbids the compatibility profile features.",null,null],[8,"GlContext","","A trait for types associated with a GL context.",null,null],[10,"make_current","","Sets the context as the current context.",38,{"inputs":[{"name":"self"}],"output":{"generics":["contexterror"],"name":"result"}}],[10,"is_current","","Returns true if this context is the current one in this thread.",38,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_proc_address","","Returns the address of an OpenGL function.",38,null],[10,"swap_buffers","","Swaps the buffers in case of double or triple buffering.",38,{"inputs":[{"name":"self"}],"output":{"generics":["contexterror"],"name":"result"}}],[10,"get_api","","Returns the OpenGL API being used.",38,{"inputs":[{"name":"self"}],"output":{"name":"api"}}],[10,"get_pixel_format","","Returns the pixel format of the main framebuffer of the context.",38,{"inputs":[{"name":"self"}],"output":{"name":"pixelformat"}}],[10,"resize","","Resize the GL context.",38,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":null}],[11,"new","","Initializes a new `ContextBuilder` with default values.",18,{"inputs":[],"output":{"name":"self"}}],[11,"with_gl","","Sets how the backend should choose the OpenGL API and version.",18,{"inputs":[{"name":"self"},{"name":"glrequest"}],"output":{"name":"self"}}],[11,"with_gl_profile","","Sets the desired OpenGL context profile.",18,{"inputs":[{"name":"self"},{"name":"glprofile"}],"output":{"name":"self"}}],[11,"with_gl_debug_flag","","Sets the debug flag for the OpenGL context.",18,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"with_gl_robustness","","Sets the robustness of the OpenGL context. See the docs of `Robustness`.",18,{"inputs":[{"name":"self"},{"name":"robustness"}],"output":{"name":"self"}}],[11,"with_vsync","","Requests that the window has vsync enabled.",18,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"with_shared_lists","","Share the display lists with the given `Context`.",18,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"self"}}],[11,"with_multisampling","","Sets the multisampling level to request. A value of `0` indicates that multisampling must not be enabled.",18,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"self"}}],[11,"with_depth_buffer","","Sets the number of bits in the depth buffer.",18,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"self"}}],[11,"with_stencil_buffer","","Sets the number of bits in the stencil buffer.",18,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"self"}}],[11,"with_pixel_format","","Sets the number of bits in the color buffer.",18,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"u8"}],"output":{"name":"self"}}],[11,"with_stereoscopy","","Request the backend to be stereoscopic.",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"with_srgb","","Sets whether sRGB should be enabled on the window.",18,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"new","","Builds the given window along with the associated GL context, returning the pair as a `GlWindow`.",39,{"inputs":[{"name":"windowbuilder"},{"name":"contextbuilder"},{"name":"eventsloop"}],"output":{"generics":["creationerror"],"name":"result"}}],[11,"window","","Borrow the inner `Window`.",39,{"inputs":[{"name":"self"}],"output":{"name":"window"}}],[11,"context","","Borrow the inner GL `Context`.",39,{"inputs":[{"name":"self"}],"output":{"name":"context"}}],[11,"make_current","","",36,{"inputs":[{"name":"self"}],"output":{"generics":["contexterror"],"name":"result"}}],[11,"is_current","","",36,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_proc_address","","",36,null],[11,"swap_buffers","","",36,{"inputs":[{"name":"self"}],"output":{"generics":["contexterror"],"name":"result"}}],[11,"get_api","","",36,{"inputs":[{"name":"self"}],"output":{"name":"api"}}],[11,"get_pixel_format","","",36,{"inputs":[{"name":"self"}],"output":{"name":"pixelformat"}}],[11,"resize","","",36,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":null}],[11,"make_current","","",39,{"inputs":[{"name":"self"}],"output":{"generics":["contexterror"],"name":"result"}}],[11,"is_current","","",39,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_proc_address","","",39,null],[11,"swap_buffers","","",39,{"inputs":[{"name":"self"}],"output":{"generics":["contexterror"],"name":"result"}}],[11,"get_api","","",39,{"inputs":[{"name":"self"}],"output":{"name":"api"}}],[11,"get_pixel_format","","",39,{"inputs":[{"name":"self"}],"output":{"name":"pixelformat"}}],[11,"resize","","",39,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":null}],[11,"deref","","",39,null],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"description","","",22,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",22,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"from","","",22,{"inputs":[{"name":"windowcreationerror"}],"output":{"name":"self"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"description","","",23,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"api"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"api"}],"output":{"name":"bool"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"glprofile"}}],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"glprofile"}],"output":{"name":"bool"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"glrequest"}}],[11,"to_gl_version","","Extract the desktop GL version, if any.",26,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"robustness"}}],[11,"eq","","",27,{"inputs":[{"name":"self"},{"name":"robustness"}],"output":{"name":"bool"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"releasebehavior"}}],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"releasebehavior"}],"output":{"name":"bool"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"pixelformat"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"pixelformatrequirements"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",20,{"inputs":[],"output":{"name":"pixelformatrequirements"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"glattributes"}}],[11,"map_sharing","","Turns the `sharing` parameter into another type by calling a closure.",21,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"glattributes"}}],[11,"default","","",21,{"inputs":[],"output":{"name":"glattributes"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","glutin::os::unix","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","glutin","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"default","","",14,{"inputs":[],"output":{"name":"windowattributes"}}],[11,"default","","",7,{"inputs":[],"output":{"name":"modifiersstate"}}],[11,"native_id","","",43,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"partial_cmp","","",40,{"inputs":[{"name":"self"},{"name":"deviceid"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",40,{"inputs":[{"name":"self"},{"name":"deviceid"}],"output":{"name":"bool"}}],[11,"le","","",40,{"inputs":[{"name":"self"},{"name":"deviceid"}],"output":{"name":"bool"}}],[11,"gt","","",40,{"inputs":[{"name":"self"},{"name":"deviceid"}],"output":{"name":"bool"}}],[11,"ge","","",40,{"inputs":[{"name":"self"},{"name":"deviceid"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",41,{"inputs":[{"name":"self"},{"name":"windowid"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",41,{"inputs":[{"name":"self"},{"name":"windowid"}],"output":{"name":"bool"}}],[11,"le","","",41,{"inputs":[{"name":"self"},{"name":"windowid"}],"output":{"name":"bool"}}],[11,"gt","","",41,{"inputs":[{"name":"self"},{"name":"windowid"}],"output":{"name":"bool"}}],[11,"ge","","",41,{"inputs":[{"name":"self"},{"name":"windowid"}],"output":{"name":"bool"}}],[11,"eq","","",42,{"inputs":[{"name":"self"},{"name":"eventsloopclosed"}],"output":{"name":"bool"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"virtualkeycode"}],"output":{"name":"bool"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"mousebutton"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"mousebutton"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"controlflow"}],"output":{"name":"bool"}}],[11,"eq","","",40,{"inputs":[{"name":"self"},{"name":"deviceid"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"self"},{"name":"deviceid"}],"output":{"name":"bool"}}],[11,"eq","","",41,{"inputs":[{"name":"self"},{"name":"windowid"}],"output":{"name":"bool"}}],[11,"ne","","",41,{"inputs":[{"name":"self"},{"name":"windowid"}],"output":{"name":"bool"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"elementstate"}],"output":{"name":"bool"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"mousescrolldelta"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"mousescrolldelta"}],"output":{"name":"bool"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"cursorstate"}],"output":{"name":"bool"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"mousecursor"}],"output":{"name":"bool"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"touchphase"}],"output":{"name":"bool"}}],[11,"next","","",44,{"inputs":[{"name":"self"}],"output":{"generics":["monitorid"],"name":"option"}}],[11,"size_hint","","",44,null],[11,"with_x11_visual","","",15,null],[11,"with_x11_screen","","",15,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"windowbuilder"}}],[11,"cmp","","",41,{"inputs":[{"name":"self"},{"name":"windowid"}],"output":{"name":"ordering"}}],[11,"cmp","","",40,{"inputs":[{"name":"self"},{"name":"deviceid"}],"output":{"name":"ordering"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","glutin::os::unix","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","glutin","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"from","glutin::os::unix","",30,{"inputs":[{"name":"openerror"}],"output":{"name":"xnotsupported"}}],[11,"hash","glutin","",42,null],[11,"hash","","",12,null],[11,"hash","","",13,null],[11,"hash","","",8,null],[11,"hash","","",4,null],[11,"hash","","",40,null],[11,"hash","","",41,null],[11,"description","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","","",42,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","glutin::os::unix","",30,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",30,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"get_xlib_window","glutin","",45,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"get_xlib_display","","",45,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_xlib_screen_id","","",45,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"option"}}],[11,"get_xlib_xconnection","","",45,{"inputs":[{"name":"self"}],"output":{"generics":["arc"],"name":"option"}}],[11,"get_xcb_connection","","",45,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"send_xim_spot","","",45,null],[11,"get_wayland_surface","","",45,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_wayland_display","","",45,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_ready","","",45,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"mousescrolldelta"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"cursorstate"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"mousebutton"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"touchphase"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"deviceid"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"mousecursor"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"eventsloopclosed"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"windowbuilder"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"keyboardinput"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"windowevent"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"modifiersstate"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"touch"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"creationerror"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"windowattributes"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"deviceevent"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"eventsloopproxy"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"windowid"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"monitorid"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"elementstate"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"controlflow"}}],[11,"clone","glutin::os::unix","",30,{"inputs":[{"name":"self"}],"output":{"name":"xnotsupported"}}],[11,"clone","glutin","",13,{"inputs":[{"name":"self"}],"output":{"name":"virtualkeycode"}}],[11,"new_x11","","",47,{"inputs":[],"output":{"generics":["eventsloop","xnotsupported"],"name":"result"}}],[11,"new_wayland","","",47,{"inputs":[],"output":{"name":"eventsloop"}}],[11,"is_wayland","","",47,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_x11","","",47,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_xlib_xconnection","","",47,{"inputs":[{"name":"self"}],"output":{"generics":["arc"],"name":"option"}}],[11,"new","","Builds a new events loop.",47,{"inputs":[],"output":{"name":"eventsloop"}}],[11,"get_available_monitors","","Returns the list of all the monitors available on the system.",47,{"inputs":[{"name":"self"}],"output":{"name":"availablemonitorsiter"}}],[11,"get_primary_monitor","","Returns the primary monitor of the system.",47,{"inputs":[{"name":"self"}],"output":{"name":"monitorid"}}],[11,"poll_events","","Fetches all the events that are pending, calls the callback function for each of them, and returns.",47,null],[11,"run_forever","","Calls `callback` every time an event is received. If no event is available, sleeps the current thread and waits for an event. If the callback returns `ControlFlow::Break` then `run_forever` will immediately return.",47,null],[11,"create_proxy","","Creates an `EventsLoopProxy` that can be used to wake up the `EventsLoop` from another thread.",47,{"inputs":[{"name":"self"}],"output":{"name":"eventsloopproxy"}}],[11,"wakeup","","Wake up the `EventsLoop` from which this proxy was created.",46,{"inputs":[{"name":"self"}],"output":{"generics":["eventsloopclosed"],"name":"result"}}],[11,"get_name","","Returns a human-readable name of the monitor.",43,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[11,"get_dimensions","","Returns the number of pixels currently displayed on the monitor.",43,null],[11,"get_position","","Returns the top-left corner position of the monitor relative to the larger full screen area.",43,null],[11,"get_hidpi_factor","","Returns the ratio between the monitor's physical pixels and logical pixels.",43,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"new","","Creates a new Window for platforms where this is appropriate.",45,{"inputs":[{"name":"eventsloop"}],"output":{"generics":["window","creationerror"],"name":"result"}}],[11,"set_title","","Modifies the title of the window.",45,null],[11,"show","","Shows the window if it was hidden.",45,null],[11,"hide","","Hides the window if it was visible.",45,null],[11,"get_position","","Returns the position of the top-left hand corner of the window relative to the  top-left hand corner of the desktop.",45,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"set_position","","Modifies the position of the window.",45,null],[11,"get_inner_size","","Returns the size in pixels of the client area of the window.",45,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_inner_size_points","","Returns the size in points of the client area of the window.",45,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_inner_size_pixels","","Returns the size in pixels of the client area of the window.",45,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_outer_size","","Returns the size in pixels of the window.",45,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"set_inner_size","","Modifies the inner size of the window.",45,null],[11,"platform_display","","DEPRECATED. Gets the native platform specific display for this window. This is typically only required when integrating with other libraries that need this information.",45,null],[11,"platform_window","","DEPRECATED. Gets the native platform specific window handle. This is typically only required when integrating with other libraries that need this information.",45,null],[11,"set_cursor","","Modifies the mouse cursor of the window. Has no effect on Android.",45,null],[11,"hidpi_factor","","Returns the ratio between the backing framebuffer resolution and the window size in screen pixels. This is typically one for a normal display and two for a retina display.",45,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"set_cursor_position","","Changes the position of the cursor in window coordinates.",45,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":{"name":"result"}}],[11,"set_cursor_state","","Sets how winit handles the cursor. See the documentation of `CursorState` for details.",45,{"inputs":[{"name":"self"},{"name":"cursorstate"}],"output":{"generics":["string"],"name":"result"}}],[11,"set_maximized","","Sets the window to maximized or back",45,null],[11,"set_fullscreen","","Sets the window to fullscreen or back",45,null],[11,"set_decorations","","Turn window decorations on or off.",45,null],[11,"get_current_monitor","","Returns the current monitor the window is on or the primary monitor is nothing matches",45,{"inputs":[{"name":"self"}],"output":{"name":"monitorid"}}],[11,"id","","",45,{"inputs":[{"name":"self"}],"output":{"name":"windowid"}}],[11,"new","","Initializes a new `WindowBuilder` with default values.",15,{"inputs":[],"output":{"name":"windowbuilder"}}],[11,"with_dimensions","","Requests the window to be of specific dimensions.",15,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":{"name":"windowbuilder"}}],[11,"with_min_dimensions","","Sets a minimum dimension size for the window",15,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":{"name":"windowbuilder"}}],[11,"with_max_dimensions","","Sets a maximum dimension size for the window",15,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":{"name":"windowbuilder"}}],[11,"with_title","","Requests a specific title for the window.",15,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"windowbuilder"}}],[11,"with_fullscreen","","Sets the window fullscreen state. None means a normal window, Some(MonitorId) means a fullscreen window on that specific monitor",15,{"inputs":[{"name":"self"},{"generics":["monitorid"],"name":"option"}],"output":{"name":"windowbuilder"}}],[11,"with_maximized","","Requests maximized mode.",15,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"windowbuilder"}}],[11,"with_visibility","","Sets whether the window will be initially hidden or visible.",15,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"windowbuilder"}}],[11,"with_transparency","","Sets whether the background of the window should be transparent.",15,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"windowbuilder"}}],[11,"with_decorations","","Sets whether the window should have a border, a title bar, etc.",15,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"windowbuilder"}}],[11,"with_multitouch","","Enables multitouch.",15,{"inputs":[{"name":"self"}],"output":{"name":"windowbuilder"}}],[11,"build","","Builds the window.",15,{"inputs":[{"name":"self"},{"name":"eventsloop"}],"output":{"generics":["window","creationerror"],"name":"result"}}],[11,"clone","glutin::os::unix","",35,{"inputs":[{"name":"self"}],"output":{"name":"rawhandle"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[4,"ControlFlow"],[4,"WindowCreationError"],[4,"CursorState"],[4,"DeviceEvent"],[4,"ElementState"],[4,"Event"],[3,"KeyboardInput"],[3,"ModifiersState"],[4,"MouseButton"],[4,"MouseCursor"],[4,"MouseScrollDelta"],[3,"Touch"],[4,"TouchPhase"],[4,"VirtualKeyCode"],[3,"WindowAttributes"],[3,"WindowBuilder"],[4,"WindowEvent"],[3,"HeadlessRendererBuilder"],[3,"ContextBuilder"],[3,"PixelFormat"],[3,"PixelFormatRequirements"],[3,"GlAttributes"],[4,"CreationError"],[4,"ContextError"],[4,"Api"],[4,"GlProfile"],[4,"GlRequest"],[4,"Robustness"],[4,"ReleaseBehavior"],[3,"HeadlessContext"],[4,"XNotSupported"],[8,"EventsLoopExt"],[8,"MonitorIdExt"],[8,"WindowBuilderExt"],[8,"WindowExt"],[4,"RawHandle"],[3,"Context"],[8,"GlContextExt"],[8,"GlContext"],[3,"GlWindow"],[3,"DeviceId"],[3,"WindowId"],[3,"EventsLoopClosed"],[3,"MonitorId"],[3,"AvailableMonitorsIter"],[3,"Window"],[3,"EventsLoopProxy"],[3,"EventsLoop"]]};
searchIndex["lazy_static"] = {"doc":"A macro for declaring lazily evaluated statics.","items":[[5,"initialize","lazy_static","Takes a shared reference to a lazy static and initializes it if it has not been already.",null,{"inputs":[{"name":"t"}],"output":null}],[8,"LazyStatic","","Support trait for enabling a few common operation on lazy static values.",null,null],[14,"lazy_static","","",null,null]],"paths":[]};
searchIndex["libc"] = {"doc":"Crate docs","items":[[3,"group","libc","",null,null],[12,"gr_name","","",0,null],[12,"gr_passwd","","",0,null],[12,"gr_gid","","",0,null],[12,"gr_mem","","",0,null],[3,"utimbuf","","",null,null],[12,"actime","","",1,null],[12,"modtime","","",1,null],[3,"timeval","","",null,null],[12,"tv_sec","","",2,null],[12,"tv_usec","","",2,null],[3,"timespec","","",null,null],[12,"tv_sec","","",3,null],[12,"tv_nsec","","",3,null],[3,"rlimit","","",null,null],[12,"rlim_cur","","",4,null],[12,"rlim_max","","",4,null],[3,"rusage","","",null,null],[12,"ru_utime","","",5,null],[12,"ru_stime","","",5,null],[12,"ru_maxrss","","",5,null],[12,"ru_ixrss","","",5,null],[12,"ru_idrss","","",5,null],[12,"ru_isrss","","",5,null],[12,"ru_minflt","","",5,null],[12,"ru_majflt","","",5,null],[12,"ru_nswap","","",5,null],[12,"ru_inblock","","",5,null],[12,"ru_oublock","","",5,null],[12,"ru_msgsnd","","",5,null],[12,"ru_msgrcv","","",5,null],[12,"ru_nsignals","","",5,null],[12,"ru_nvcsw","","",5,null],[12,"ru_nivcsw","","",5,null],[3,"in_addr","","",null,null],[12,"s_addr","","",6,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",7,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",8,null],[12,"imr_interface","","",8,null],[3,"ipv6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",9,null],[12,"ipv6mr_interface","","",9,null],[3,"hostent","","",null,null],[12,"h_name","","",10,null],[12,"h_aliases","","",10,null],[12,"h_addrtype","","",10,null],[12,"h_length","","",10,null],[12,"h_addr_list","","",10,null],[3,"iovec","","",null,null],[12,"iov_base","","",11,null],[12,"iov_len","","",11,null],[3,"pollfd","","",null,null],[12,"fd","","",12,null],[12,"events","","",12,null],[12,"revents","","",12,null],[3,"winsize","","",null,null],[12,"ws_row","","",13,null],[12,"ws_col","","",13,null],[12,"ws_xpixel","","",13,null],[12,"ws_ypixel","","",13,null],[3,"linger","","",null,null],[12,"l_onoff","","",14,null],[12,"l_linger","","",14,null],[3,"sigval","","",null,null],[12,"sival_ptr","","",15,null],[3,"itimerval","","",null,null],[12,"it_interval","","",16,null],[12,"it_value","","",16,null],[3,"tms","","",null,null],[12,"tms_utime","","",17,null],[12,"tms_stime","","",17,null],[12,"tms_cutime","","",17,null],[12,"tms_cstime","","",17,null],[3,"servent","","",null,null],[12,"s_name","","",18,null],[12,"s_aliases","","",18,null],[12,"s_port","","",18,null],[12,"s_proto","","",18,null],[3,"protoent","","",null,null],[12,"p_name","","",19,null],[12,"p_aliases","","",19,null],[12,"p_proto","","",19,null],[3,"sockaddr","","",null,null],[12,"sa_family","","",20,null],[12,"sa_data","","",20,null],[3,"sockaddr_in","","",null,null],[12,"sin_family","","",21,null],[12,"sin_port","","",21,null],[12,"sin_addr","","",21,null],[12,"sin_zero","","",21,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_family","","",22,null],[12,"sin6_port","","",22,null],[12,"sin6_flowinfo","","",22,null],[12,"sin6_addr","","",22,null],[12,"sin6_scope_id","","",22,null],[3,"sockaddr_un","","",null,null],[12,"sun_family","","",23,null],[12,"sun_path","","",23,null],[3,"sockaddr_storage","","",null,null],[12,"ss_family","","",24,null],[3,"addrinfo","","",null,null],[12,"ai_flags","","",25,null],[12,"ai_family","","",25,null],[12,"ai_socktype","","",25,null],[12,"ai_protocol","","",25,null],[12,"ai_addrlen","","",25,null],[12,"ai_addr","","",25,null],[12,"ai_canonname","","",25,null],[12,"ai_next","","",25,null],[3,"sockaddr_nl","","",null,null],[12,"nl_family","","",26,null],[12,"nl_pid","","",26,null],[12,"nl_groups","","",26,null],[3,"sockaddr_ll","","",null,null],[12,"sll_family","","",27,null],[12,"sll_protocol","","",27,null],[12,"sll_ifindex","","",27,null],[12,"sll_hatype","","",27,null],[12,"sll_pkttype","","",27,null],[12,"sll_halen","","",27,null],[12,"sll_addr","","",27,null],[3,"fd_set","","",null,null],[3,"tm","","",null,null],[12,"tm_sec","","",28,null],[12,"tm_min","","",28,null],[12,"tm_hour","","",28,null],[12,"tm_mday","","",28,null],[12,"tm_mon","","",28,null],[12,"tm_year","","",28,null],[12,"tm_wday","","",28,null],[12,"tm_yday","","",28,null],[12,"tm_isdst","","",28,null],[12,"tm_gmtoff","","",28,null],[12,"tm_zone","","",28,null],[3,"sched_param","","",null,null],[12,"sched_priority","","",29,null],[3,"Dl_info","","",null,null],[12,"dli_fname","","",30,null],[12,"dli_fbase","","",30,null],[12,"dli_sname","","",30,null],[12,"dli_saddr","","",30,null],[3,"epoll_event","","",null,null],[12,"events","","",31,null],[12,"u64","","",31,null],[3,"utsname","","",null,null],[12,"sysname","","",32,null],[12,"nodename","","",32,null],[12,"release","","",32,null],[12,"version","","",32,null],[12,"machine","","",32,null],[12,"domainname","","",32,null],[3,"lconv","","",null,null],[12,"decimal_point","","",33,null],[12,"thousands_sep","","",33,null],[12,"grouping","","",33,null],[12,"int_curr_symbol","","",33,null],[12,"currency_symbol","","",33,null],[12,"mon_decimal_point","","",33,null],[12,"mon_thousands_sep","","",33,null],[12,"mon_grouping","","",33,null],[12,"positive_sign","","",33,null],[12,"negative_sign","","",33,null],[12,"int_frac_digits","","",33,null],[12,"frac_digits","","",33,null],[12,"p_cs_precedes","","",33,null],[12,"p_sep_by_space","","",33,null],[12,"n_cs_precedes","","",33,null],[12,"n_sep_by_space","","",33,null],[12,"p_sign_posn","","",33,null],[12,"n_sign_posn","","",33,null],[12,"int_p_cs_precedes","","",33,null],[12,"int_p_sep_by_space","","",33,null],[12,"int_n_cs_precedes","","",33,null],[12,"int_n_sep_by_space","","",33,null],[12,"int_p_sign_posn","","",33,null],[12,"int_n_sign_posn","","",33,null],[3,"sigevent","","",null,null],[12,"sigev_value","","",34,null],[12,"sigev_signo","","",34,null],[12,"sigev_notify","","",34,null],[12,"sigev_notify_thread_id","","",34,null],[3,"dirent","","",null,null],[12,"d_ino","","",35,null],[12,"d_off","","",35,null],[12,"d_reclen","","",35,null],[12,"d_type","","",35,null],[12,"d_name","","",35,null],[3,"dirent64","","",null,null],[12,"d_ino","","",36,null],[12,"d_off","","",36,null],[12,"d_reclen","","",36,null],[12,"d_type","","",36,null],[12,"d_name","","",36,null],[3,"rlimit64","","",null,null],[12,"rlim_cur","","",37,null],[12,"rlim_max","","",37,null],[3,"glob_t","","",null,null],[12,"gl_pathc","","",38,null],[12,"gl_pathv","","",38,null],[12,"gl_offs","","",38,null],[12,"gl_flags","","",38,null],[3,"ifaddrs","","",null,null],[12,"ifa_next","","",39,null],[12,"ifa_name","","",39,null],[12,"ifa_flags","","",39,null],[12,"ifa_addr","","",39,null],[12,"ifa_netmask","","",39,null],[12,"ifa_ifu","","",39,null],[12,"ifa_data","","",39,null],[3,"pthread_mutex_t","","",null,null],[3,"pthread_rwlock_t","","",null,null],[3,"pthread_mutexattr_t","","",null,null],[3,"pthread_rwlockattr_t","","",null,null],[3,"pthread_cond_t","","",null,null],[3,"pthread_condattr_t","","",null,null],[3,"passwd","","",null,null],[12,"pw_name","","",40,null],[12,"pw_passwd","","",40,null],[12,"pw_uid","","",40,null],[12,"pw_gid","","",40,null],[12,"pw_gecos","","",40,null],[12,"pw_dir","","",40,null],[12,"pw_shell","","",40,null],[3,"spwd","","",null,null],[12,"sp_namp","","",41,null],[12,"sp_pwdp","","",41,null],[12,"sp_lstchg","","",41,null],[12,"sp_min","","",41,null],[12,"sp_max","","",41,null],[12,"sp_warn","","",41,null],[12,"sp_inact","","",41,null],[12,"sp_expire","","",41,null],[12,"sp_flag","","",41,null],[3,"statvfs","","",null,null],[12,"f_bsize","","",42,null],[12,"f_frsize","","",42,null],[12,"f_blocks","","",42,null],[12,"f_bfree","","",42,null],[12,"f_bavail","","",42,null],[12,"f_files","","",42,null],[12,"f_ffree","","",42,null],[12,"f_favail","","",42,null],[12,"f_fsid","","",42,null],[12,"f_flag","","",42,null],[12,"f_namemax","","",42,null],[3,"dqblk","","",null,null],[12,"dqb_bhardlimit","","",43,null],[12,"dqb_bsoftlimit","","",43,null],[12,"dqb_curspace","","",43,null],[12,"dqb_ihardlimit","","",43,null],[12,"dqb_isoftlimit","","",43,null],[12,"dqb_curinodes","","",43,null],[12,"dqb_btime","","",43,null],[12,"dqb_itime","","",43,null],[12,"dqb_valid","","",43,null],[3,"signalfd_siginfo","","",null,null],[12,"ssi_signo","","",44,null],[12,"ssi_errno","","",44,null],[12,"ssi_code","","",44,null],[12,"ssi_pid","","",44,null],[12,"ssi_uid","","",44,null],[12,"ssi_fd","","",44,null],[12,"ssi_tid","","",44,null],[12,"ssi_band","","",44,null],[12,"ssi_overrun","","",44,null],[12,"ssi_trapno","","",44,null],[12,"ssi_status","","",44,null],[12,"ssi_int","","",44,null],[12,"ssi_ptr","","",44,null],[12,"ssi_utime","","",44,null],[12,"ssi_stime","","",44,null],[12,"ssi_addr","","",44,null],[3,"itimerspec","","",null,null],[12,"it_interval","","",45,null],[12,"it_value","","",45,null],[3,"fsid_t","","",null,null],[3,"mq_attr","","",null,null],[12,"mq_flags","","",46,null],[12,"mq_maxmsg","","",46,null],[12,"mq_msgsize","","",46,null],[12,"mq_curmsgs","","",46,null],[3,"cpu_set_t","","",null,null],[3,"if_nameindex","","",null,null],[12,"if_index","","",47,null],[12,"if_name","","",47,null],[3,"msginfo","","",null,null],[12,"msgpool","","",48,null],[12,"msgmap","","",48,null],[12,"msgmax","","",48,null],[12,"msgmnb","","",48,null],[12,"msgmni","","",48,null],[12,"msgssz","","",48,null],[12,"msgtql","","",48,null],[12,"msgseg","","",48,null],[3,"mmsghdr","","",null,null],[12,"msg_hdr","","",49,null],[12,"msg_len","","",49,null],[3,"sembuf","","",null,null],[12,"sem_num","","",50,null],[12,"sem_op","","",50,null],[12,"sem_flg","","",50,null],[3,"input_event","","",null,null],[12,"time","","",51,null],[12,"type_","","",51,null],[12,"code","","",51,null],[12,"value","","",51,null],[3,"input_id","","",null,null],[12,"bustype","","",52,null],[12,"vendor","","",52,null],[12,"product","","",52,null],[12,"version","","",52,null],[3,"input_absinfo","","",null,null],[12,"value","","",53,null],[12,"minimum","","",53,null],[12,"maximum","","",53,null],[12,"fuzz","","",53,null],[12,"flat","","",53,null],[12,"resolution","","",53,null],[3,"input_keymap_entry","","",null,null],[12,"flags","","",54,null],[12,"len","","",54,null],[12,"index","","",54,null],[12,"keycode","","",54,null],[12,"scancode","","",54,null],[3,"input_mask","","",null,null],[12,"type_","","",55,null],[12,"codes_size","","",55,null],[12,"codes_ptr","","",55,null],[3,"ff_replay","","",null,null],[12,"length","","",56,null],[12,"delay","","",56,null],[3,"ff_trigger","","",null,null],[12,"button","","",57,null],[12,"interval","","",57,null],[3,"ff_envelope","","",null,null],[12,"attack_length","","",58,null],[12,"attack_level","","",58,null],[12,"fade_length","","",58,null],[12,"fade_level","","",58,null],[3,"ff_constant_effect","","",null,null],[12,"level","","",59,null],[12,"envelope","","",59,null],[3,"ff_ramp_effect","","",null,null],[12,"start_level","","",60,null],[12,"end_level","","",60,null],[12,"envelope","","",60,null],[3,"ff_condition_effect","","",null,null],[12,"right_saturation","","",61,null],[12,"left_saturation","","",61,null],[12,"right_coeff","","",61,null],[12,"left_coeff","","",61,null],[12,"deadband","","",61,null],[12,"center","","",61,null],[3,"ff_periodic_effect","","",null,null],[12,"waveform","","",62,null],[12,"period","","",62,null],[12,"magnitude","","",62,null],[12,"offset","","",62,null],[12,"phase","","",62,null],[12,"envelope","","",62,null],[12,"custom_len","","",62,null],[12,"custom_data","","",62,null],[3,"ff_rumble_effect","","",null,null],[12,"strong_magnitude","","",63,null],[12,"weak_magnitude","","",63,null],[3,"ff_effect","","",null,null],[12,"type_","","",64,null],[12,"id","","",64,null],[12,"direction","","",64,null],[12,"trigger","","",64,null],[12,"replay","","",64,null],[12,"u","","",64,null],[3,"dl_phdr_info","","",null,null],[12,"dlpi_addr","","",65,null],[12,"dlpi_name","","",65,null],[12,"dlpi_phdr","","",65,null],[12,"dlpi_phnum","","",65,null],[12,"dlpi_adds","","",65,null],[12,"dlpi_subs","","",65,null],[12,"dlpi_tls_modid","","",65,null],[12,"dlpi_tls_data","","",65,null],[3,"Elf32_Phdr","","",null,null],[12,"p_type","","",66,null],[12,"p_offset","","",66,null],[12,"p_vaddr","","",66,null],[12,"p_paddr","","",66,null],[12,"p_filesz","","",66,null],[12,"p_memsz","","",66,null],[12,"p_flags","","",66,null],[12,"p_align","","",66,null],[3,"Elf64_Phdr","","",null,null],[12,"p_type","","",67,null],[12,"p_flags","","",67,null],[12,"p_offset","","",67,null],[12,"p_vaddr","","",67,null],[12,"p_paddr","","",67,null],[12,"p_filesz","","",67,null],[12,"p_memsz","","",67,null],[12,"p_align","","",67,null],[3,"ucred","","",null,null],[12,"pid","","",68,null],[12,"uid","","",68,null],[12,"gid","","",68,null],[3,"mntent","","",null,null],[12,"mnt_fsname","","",69,null],[12,"mnt_dir","","",69,null],[12,"mnt_type","","",69,null],[12,"mnt_opts","","",69,null],[12,"mnt_freq","","",69,null],[12,"mnt_passno","","",69,null],[3,"aiocb","","",null,null],[12,"aio_fildes","","",70,null],[12,"aio_lio_opcode","","",70,null],[12,"aio_reqprio","","",70,null],[12,"aio_buf","","",70,null],[12,"aio_nbytes","","",70,null],[12,"aio_sigevent","","",70,null],[12,"aio_offset","","",70,null],[3,"__exit_status","","",null,null],[12,"e_termination","","",71,null],[12,"e_exit","","",71,null],[3,"__timeval","","",null,null],[12,"tv_sec","","",72,null],[12,"tv_usec","","",72,null],[3,"utmpx","","",null,null],[12,"ut_type","","",73,null],[12,"ut_pid","","",73,null],[12,"ut_line","","",73,null],[12,"ut_id","","",73,null],[12,"ut_user","","",73,null],[12,"ut_host","","",73,null],[12,"ut_exit","","",73,null],[12,"ut_session","","",73,null],[12,"ut_tv","","",73,null],[12,"ut_addr_v6","","",73,null],[3,"sigaction","","",null,null],[12,"sa_sigaction","","",74,null],[12,"sa_mask","","",74,null],[12,"sa_flags","","",74,null],[12,"sa_restorer","","",74,null],[3,"stack_t","","",null,null],[12,"ss_sp","","",75,null],[12,"ss_flags","","",75,null],[12,"ss_size","","",75,null],[3,"siginfo_t","","",null,null],[12,"si_signo","","",76,null],[12,"si_errno","","",76,null],[12,"si_code","","",76,null],[12,"_pad","","",76,null],[3,"glob64_t","","",null,null],[12,"gl_pathc","","",77,null],[12,"gl_pathv","","",77,null],[12,"gl_offs","","",77,null],[12,"gl_flags","","",77,null],[3,"statfs","","",null,null],[12,"f_type","","",78,null],[12,"f_bsize","","",78,null],[12,"f_blocks","","",78,null],[12,"f_bfree","","",78,null],[12,"f_bavail","","",78,null],[12,"f_files","","",78,null],[12,"f_ffree","","",78,null],[12,"f_fsid","","",78,null],[12,"f_namelen","","",78,null],[12,"f_frsize","","",78,null],[3,"msghdr","","",null,null],[12,"msg_name","","",79,null],[12,"msg_namelen","","",79,null],[12,"msg_iov","","",79,null],[12,"msg_iovlen","","",79,null],[12,"msg_control","","",79,null],[12,"msg_controllen","","",79,null],[12,"msg_flags","","",79,null],[3,"cmsghdr","","",null,null],[12,"cmsg_len","","",80,null],[12,"cmsg_level","","",80,null],[12,"cmsg_type","","",80,null],[3,"termios","","",null,null],[12,"c_iflag","","",81,null],[12,"c_oflag","","",81,null],[12,"c_cflag","","",81,null],[12,"c_lflag","","",81,null],[12,"c_line","","",81,null],[12,"c_cc","","",81,null],[12,"c_ispeed","","",81,null],[12,"c_ospeed","","",81,null],[3,"flock","","",null,null],[12,"l_type","","",82,null],[12,"l_whence","","",82,null],[12,"l_start","","",82,null],[12,"l_len","","",82,null],[12,"l_pid","","",82,null],[3,"sem_t","","",null,null],[3,"sigset_t","","",null,null],[3,"sysinfo","","",null,null],[12,"uptime","","",83,null],[12,"loads","","",83,null],[12,"totalram","","",83,null],[12,"freeram","","",83,null],[12,"sharedram","","",83,null],[12,"bufferram","","",83,null],[12,"totalswap","","",83,null],[12,"freeswap","","",83,null],[12,"procs","","",83,null],[12,"pad","","",83,null],[12,"totalhigh","","",83,null],[12,"freehigh","","",83,null],[12,"mem_unit","","",83,null],[12,"_f","","",83,null],[3,"msqid_ds","","",null,null],[12,"msg_perm","","",84,null],[12,"msg_stime","","",84,null],[12,"msg_rtime","","",84,null],[12,"msg_ctime","","",84,null],[12,"msg_qnum","","",84,null],[12,"msg_qbytes","","",84,null],[12,"msg_lspid","","",84,null],[12,"msg_lrpid","","",84,null],[3,"stat","","",null,null],[12,"st_dev","","",85,null],[12,"st_ino","","",85,null],[12,"st_nlink","","",85,null],[12,"st_mode","","",85,null],[12,"st_uid","","",85,null],[12,"st_gid","","",85,null],[12,"st_rdev","","",85,null],[12,"st_size","","",85,null],[12,"st_blksize","","",85,null],[12,"st_blocks","","",85,null],[12,"st_atime","","",85,null],[12,"st_atime_nsec","","",85,null],[12,"st_mtime","","",85,null],[12,"st_mtime_nsec","","",85,null],[12,"st_ctime","","",85,null],[12,"st_ctime_nsec","","",85,null],[3,"stat64","","",null,null],[12,"st_dev","","",86,null],[12,"st_ino","","",86,null],[12,"st_nlink","","",86,null],[12,"st_mode","","",86,null],[12,"st_uid","","",86,null],[12,"st_gid","","",86,null],[12,"st_rdev","","",86,null],[12,"st_size","","",86,null],[12,"st_blksize","","",86,null],[12,"st_blocks","","",86,null],[12,"st_atime","","",86,null],[12,"st_atime_nsec","","",86,null],[12,"st_mtime","","",86,null],[12,"st_mtime_nsec","","",86,null],[12,"st_ctime","","",86,null],[12,"st_ctime_nsec","","",86,null],[3,"statfs64","","",null,null],[12,"f_type","","",87,null],[12,"f_bsize","","",87,null],[12,"f_blocks","","",87,null],[12,"f_bfree","","",87,null],[12,"f_bavail","","",87,null],[12,"f_files","","",87,null],[12,"f_ffree","","",87,null],[12,"f_fsid","","",87,null],[12,"f_namelen","","",87,null],[12,"f_frsize","","",87,null],[12,"f_flags","","",87,null],[12,"f_spare","","",87,null],[3,"statvfs64","","",null,null],[12,"f_bsize","","",88,null],[12,"f_frsize","","",88,null],[12,"f_blocks","","",88,null],[12,"f_bfree","","",88,null],[12,"f_bavail","","",88,null],[12,"f_files","","",88,null],[12,"f_ffree","","",88,null],[12,"f_favail","","",88,null],[12,"f_fsid","","",88,null],[12,"f_flag","","",88,null],[12,"f_namemax","","",88,null],[3,"pthread_attr_t","","",null,null],[3,"_libc_fpxreg","","",null,null],[12,"significand","","",89,null],[12,"exponent","","",89,null],[3,"_libc_xmmreg","","",null,null],[12,"element","","",90,null],[3,"_libc_fpstate","","",null,null],[12,"cwd","","",91,null],[12,"swd","","",91,null],[12,"ftw","","",91,null],[12,"fop","","",91,null],[12,"rip","","",91,null],[12,"rdp","","",91,null],[12,"mxcsr","","",91,null],[12,"mxcr_mask","","",91,null],[12,"_st","","",91,null],[12,"_xmm","","",91,null],[3,"user_fpregs_struct","","",null,null],[12,"cwd","","",92,null],[12,"swd","","",92,null],[12,"ftw","","",92,null],[12,"fop","","",92,null],[12,"rip","","",92,null],[12,"rdp","","",92,null],[12,"mxcsr","","",92,null],[12,"mxcr_mask","","",92,null],[12,"st_space","","",92,null],[12,"xmm_space","","",92,null],[3,"user_regs_struct","","",null,null],[12,"r15","","",93,null],[12,"r14","","",93,null],[12,"r13","","",93,null],[12,"r12","","",93,null],[12,"rbp","","",93,null],[12,"rbx","","",93,null],[12,"r11","","",93,null],[12,"r10","","",93,null],[12,"r9","","",93,null],[12,"r8","","",93,null],[12,"rax","","",93,null],[12,"rcx","","",93,null],[12,"rdx","","",93,null],[12,"rsi","","",93,null],[12,"rdi","","",93,null],[12,"orig_rax","","",93,null],[12,"rip","","",93,null],[12,"cs","","",93,null],[12,"eflags","","",93,null],[12,"rsp","","",93,null],[12,"ss","","",93,null],[12,"fs_base","","",93,null],[12,"gs_base","","",93,null],[12,"ds","","",93,null],[12,"es","","",93,null],[12,"fs","","",93,null],[12,"gs","","",93,null],[3,"user","","",null,null],[12,"regs","","",94,null],[12,"u_fpvalid","","",94,null],[12,"i387","","",94,null],[12,"u_tsize","","",94,null],[12,"u_dsize","","",94,null],[12,"u_ssize","","",94,null],[12,"start_code","","",94,null],[12,"start_stack","","",94,null],[12,"signal","","",94,null],[12,"u_ar0","","",94,null],[12,"u_fpstate","","",94,null],[12,"magic","","",94,null],[12,"u_comm","","",94,null],[12,"u_debugreg","","",94,null],[3,"mcontext_t","","",null,null],[12,"gregs","","",95,null],[12,"fpregs","","",95,null],[3,"ucontext_t","","",null,null],[12,"uc_flags","","",96,null],[12,"uc_link","","",96,null],[12,"uc_stack","","",96,null],[12,"uc_mcontext","","",96,null],[12,"uc_sigmask","","",96,null],[3,"ipc_perm","","",null,null],[12,"__key","","",97,null],[12,"uid","","",97,null],[12,"gid","","",97,null],[12,"cuid","","",97,null],[12,"cgid","","",97,null],[12,"mode","","",97,null],[12,"__seq","","",97,null],[3,"shmid_ds","","",null,null],[12,"shm_perm","","",98,null],[12,"shm_segsz","","",98,null],[12,"shm_atime","","",98,null],[12,"shm_dtime","","",98,null],[12,"shm_ctime","","",98,null],[12,"shm_cpid","","",98,null],[12,"shm_lpid","","",98,null],[12,"shm_nattch","","",98,null],[3,"termios2","","",null,null],[12,"c_iflag","","",99,null],[12,"c_oflag","","",99,null],[12,"c_cflag","","",99,null],[12,"c_lflag","","",99,null],[12,"c_line","","",99,null],[12,"c_cc","","",99,null],[12,"c_ispeed","","",99,null],[12,"c_ospeed","","",99,null],[4,"c_void","","",null,null],[4,"FILE","","",null,null],[4,"fpos_t","","",null,null],[4,"DIR","","",null,null],[4,"locale_t","","",null,null],[4,"timezone","","",null,null],[4,"fpos64_t","","",null,null],[5,"FD_CLR","","",null,null],[5,"FD_ISSET","","",null,null],[5,"FD_SET","","",null,null],[5,"FD_ZERO","","",null,null],[5,"WIFSTOPPED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WSTOPSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFCONTINUED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WIFSIGNALED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WTERMSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFEXITED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WEXITSTATUS","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WCOREDUMP","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"QCMD","","",null,{"inputs":[{"name":"c_int"},{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"CPU_ZERO","","",null,null],[5,"CPU_SET","","",null,null],[5,"CPU_CLR","","",null,null],[5,"CPU_ISSET","","",null,{"inputs":[{"name":"usize"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"CPU_EQUAL","","",null,{"inputs":[{"name":"cpu_set_t"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"major","","",null,{"inputs":[{"name":"dev_t"}],"output":{"name":"c_uint"}}],[5,"minor","","",null,{"inputs":[{"name":"dev_t"}],"output":{"name":"c_uint"}}],[5,"makedev","","",null,{"inputs":[{"name":"c_uint"},{"name":"c_uint"}],"output":{"name":"dev_t"}}],[5,"isalnum","","",null,null],[5,"isalpha","","",null,null],[5,"iscntrl","","",null,null],[5,"isdigit","","",null,null],[5,"isgraph","","",null,null],[5,"islower","","",null,null],[5,"isprint","","",null,null],[5,"ispunct","","",null,null],[5,"isspace","","",null,null],[5,"isupper","","",null,null],[5,"isxdigit","","",null,null],[5,"tolower","","",null,null],[5,"toupper","","",null,null],[5,"fopen","","",null,null],[5,"freopen","","",null,null],[5,"fflush","","",null,null],[5,"fclose","","",null,null],[5,"remove","","",null,null],[5,"rename","","",null,null],[5,"tmpfile","","",null,null],[5,"setvbuf","","",null,null],[5,"setbuf","","",null,null],[5,"getchar","","",null,null],[5,"putchar","","",null,null],[5,"fgetc","","",null,null],[5,"fgets","","",null,null],[5,"fputc","","",null,null],[5,"fputs","","",null,null],[5,"puts","","",null,null],[5,"ungetc","","",null,null],[5,"fread","","",null,null],[5,"fwrite","","",null,null],[5,"fseek","","",null,null],[5,"ftell","","",null,null],[5,"rewind","","",null,null],[5,"fgetpos","","",null,null],[5,"fsetpos","","",null,null],[5,"feof","","",null,null],[5,"ferror","","",null,null],[5,"perror","","",null,null],[5,"atoi","","",null,null],[5,"strtod","","",null,null],[5,"strtol","","",null,null],[5,"strtoul","","",null,null],[5,"calloc","","",null,null],[5,"malloc","","",null,null],[5,"realloc","","",null,null],[5,"free","","",null,null],[5,"abort","","",null,null],[5,"exit","","",null,null],[5,"_exit","","",null,null],[5,"atexit","","",null,null],[5,"system","","",null,null],[5,"getenv","","",null,null],[5,"strcpy","","",null,null],[5,"strncpy","","",null,null],[5,"strcat","","",null,null],[5,"strncat","","",null,null],[5,"strcmp","","",null,null],[5,"strncmp","","",null,null],[5,"strcoll","","",null,null],[5,"strchr","","",null,null],[5,"strrchr","","",null,null],[5,"strspn","","",null,null],[5,"strcspn","","",null,null],[5,"strdup","","",null,null],[5,"strpbrk","","",null,null],[5,"strstr","","",null,null],[5,"strlen","","",null,null],[5,"strnlen","","",null,null],[5,"strerror","","",null,null],[5,"strtok","","",null,null],[5,"strxfrm","","",null,null],[5,"wcslen","","",null,null],[5,"wcstombs","","",null,null],[5,"memchr","","",null,null],[5,"memcmp","","",null,null],[5,"memcpy","","",null,null],[5,"memmove","","",null,null],[5,"memset","","",null,null],[5,"abs","","",null,null],[5,"atof","","",null,null],[5,"labs","","",null,null],[5,"rand","","",null,null],[5,"srand","","",null,null],[5,"getpwnam","","",null,null],[5,"getpwuid","","",null,null],[5,"fprintf","","",null,null],[5,"printf","","",null,null],[5,"snprintf","","",null,null],[5,"sprintf","","",null,null],[5,"fscanf","","",null,null],[5,"scanf","","",null,null],[5,"sscanf","","",null,null],[5,"getchar_unlocked","","",null,null],[5,"putchar_unlocked","","",null,null],[5,"socket","","",null,null],[5,"connect","","",null,null],[5,"listen","","",null,null],[5,"accept","","",null,null],[5,"getpeername","","",null,null],[5,"getsockname","","",null,null],[5,"setsockopt","","",null,null],[5,"socketpair","","",null,null],[5,"sendto","","",null,null],[5,"shutdown","","",null,null],[5,"chmod","","",null,null],[5,"fchmod","","",null,null],[5,"fstat","","",null,null],[5,"mkdir","","",null,null],[5,"stat","","",null,null],[5,"pclose","","",null,null],[5,"fdopen","","",null,null],[5,"fileno","","",null,null],[5,"open","","",null,null],[5,"creat","","",null,null],[5,"fcntl","","",null,null],[5,"opendir","","",null,null],[5,"readdir","","",null,null],[5,"readdir_r","","",null,null],[5,"closedir","","",null,null],[5,"rewinddir","","",null,null],[5,"openat","","",null,null],[5,"fchmodat","","",null,null],[5,"fchown","","",null,null],[5,"fchownat","","",null,null],[5,"fstatat","","",null,null],[5,"linkat","","",null,null],[5,"mkdirat","","",null,null],[5,"readlinkat","","",null,null],[5,"renameat","","",null,null],[5,"symlinkat","","",null,null],[5,"unlinkat","","",null,null],[5,"access","","",null,null],[5,"alarm","","",null,null],[5,"chdir","","",null,null],[5,"fchdir","","",null,null],[5,"chown","","",null,null],[5,"lchown","","",null,null],[5,"close","","",null,null],[5,"dup","","",null,null],[5,"dup2","","",null,null],[5,"execl","","",null,null],[5,"execle","","",null,null],[5,"execlp","","",null,null],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"fork","","",null,null],[5,"fpathconf","","",null,null],[5,"getcwd","","",null,null],[5,"getegid","","",null,null],[5,"geteuid","","",null,null],[5,"getgid","","",null,null],[5,"getgroups","","",null,null],[5,"getlogin","","",null,null],[5,"getopt","","",null,null],[5,"getpgid","","",null,null],[5,"getpgrp","","",null,null],[5,"getpid","","",null,null],[5,"getppid","","",null,null],[5,"getuid","","",null,null],[5,"isatty","","",null,null],[5,"link","","",null,null],[5,"lseek","","",null,null],[5,"pathconf","","",null,null],[5,"pause","","",null,null],[5,"pipe","","",null,null],[5,"posix_memalign","","",null,null],[5,"read","","",null,null],[5,"rmdir","","",null,null],[5,"seteuid","","",null,null],[5,"setgid","","",null,null],[5,"setpgid","","",null,null],[5,"setsid","","",null,null],[5,"setuid","","",null,null],[5,"sleep","","",null,null],[5,"nanosleep","","",null,null],[5,"tcgetpgrp","","",null,null],[5,"tcsetpgrp","","",null,null],[5,"ttyname","","",null,null],[5,"unlink","","",null,null],[5,"wait","","",null,null],[5,"waitpid","","",null,null],[5,"write","","",null,null],[5,"pread","","",null,null],[5,"pwrite","","",null,null],[5,"umask","","",null,null],[5,"utime","","",null,null],[5,"kill","","",null,null],[5,"mlock","","",null,null],[5,"munlock","","",null,null],[5,"mlockall","","",null,null],[5,"munlockall","","",null,null],[5,"mmap","","",null,null],[5,"munmap","","",null,null],[5,"if_nametoindex","","",null,null],[5,"if_indextoname","","",null,null],[5,"lstat","","",null,null],[5,"fsync","","",null,null],[5,"setenv","","",null,null],[5,"unsetenv","","",null,null],[5,"symlink","","",null,null],[5,"ftruncate","","",null,null],[5,"signal","","",null,null],[5,"getrlimit","","",null,null],[5,"setrlimit","","",null,null],[5,"getrusage","","",null,null],[5,"realpath","","",null,null],[5,"flock","","",null,null],[5,"gettimeofday","","",null,null],[5,"times","","",null,null],[5,"pthread_self","","",null,null],[5,"pthread_join","","",null,null],[5,"pthread_exit","","",null,null],[5,"pthread_attr_init","","",null,null],[5,"pthread_attr_destroy","","",null,null],[5,"pthread_attr_setstacksize","","",null,null],[5,"pthread_attr_setdetachstate","","",null,null],[5,"pthread_detach","","",null,null],[5,"sched_yield","","",null,null],[5,"pthread_key_create","","",null,null],[5,"pthread_key_delete","","",null,null],[5,"pthread_getspecific","","",null,null],[5,"pthread_setspecific","","",null,null],[5,"pthread_mutex_init","","",null,null],[5,"pthread_mutex_destroy","","",null,null],[5,"pthread_mutex_lock","","",null,null],[5,"pthread_mutex_trylock","","",null,null],[5,"pthread_mutex_unlock","","",null,null],[5,"pthread_mutexattr_init","","",null,null],[5,"pthread_mutexattr_destroy","","",null,null],[5,"pthread_mutexattr_settype","","",null,null],[5,"pthread_cond_init","","",null,null],[5,"pthread_cond_wait","","",null,null],[5,"pthread_cond_timedwait","","",null,null],[5,"pthread_cond_signal","","",null,null],[5,"pthread_cond_broadcast","","",null,null],[5,"pthread_cond_destroy","","",null,null],[5,"pthread_condattr_init","","",null,null],[5,"pthread_condattr_destroy","","",null,null],[5,"pthread_rwlock_init","","",null,null],[5,"pthread_rwlock_destroy","","",null,null],[5,"pthread_rwlock_rdlock","","",null,null],[5,"pthread_rwlock_tryrdlock","","",null,null],[5,"pthread_rwlock_wrlock","","",null,null],[5,"pthread_rwlock_trywrlock","","",null,null],[5,"pthread_rwlock_unlock","","",null,null],[5,"pthread_rwlockattr_init","","",null,null],[5,"pthread_rwlockattr_destroy","","",null,null],[5,"strerror_r","","",null,null],[5,"getsockopt","","",null,null],[5,"raise","","",null,null],[5,"sigaction","","",null,null],[5,"utimes","","",null,null],[5,"dlopen","","",null,null],[5,"dlerror","","",null,null],[5,"dlsym","","",null,null],[5,"dlclose","","",null,null],[5,"dladdr","","",null,null],[5,"getaddrinfo","","",null,null],[5,"freeaddrinfo","","",null,null],[5,"gai_strerror","","",null,null],[5,"res_init","","",null,null],[5,"gmtime_r","","",null,null],[5,"localtime_r","","",null,null],[5,"mktime","","",null,null],[5,"time","","",null,null],[5,"gmtime","","",null,null],[5,"localtime","","",null,null],[5,"difftime","","",null,null],[5,"mknod","","",null,null],[5,"uname","","",null,null],[5,"gethostname","","",null,null],[5,"getservbyname","","",null,null],[5,"getprotobyname","","",null,null],[5,"getprotobynumber","","",null,null],[5,"chroot","","",null,null],[5,"usleep","","",null,null],[5,"send","","",null,null],[5,"recv","","",null,null],[5,"putenv","","",null,null],[5,"poll","","",null,null],[5,"select","","",null,null],[5,"setlocale","","",null,null],[5,"localeconv","","",null,null],[5,"sem_destroy","","",null,null],[5,"sem_wait","","",null,null],[5,"sem_trywait","","",null,null],[5,"sem_post","","",null,null],[5,"sem_init","","",null,null],[5,"statvfs","","",null,null],[5,"fstatvfs","","",null,null],[5,"readlink","","",null,null],[5,"sigemptyset","","",null,null],[5,"sigaddset","","",null,null],[5,"sigfillset","","",null,null],[5,"sigdelset","","",null,null],[5,"sigismember","","",null,null],[5,"sigprocmask","","",null,null],[5,"sigpending","","",null,null],[5,"timegm","","",null,null],[5,"getsid","","",null,null],[5,"sysconf","","",null,null],[5,"mkfifo","","",null,null],[5,"pselect","","",null,null],[5,"fseeko","","",null,null],[5,"ftello","","",null,null],[5,"tcdrain","","",null,null],[5,"cfgetispeed","","",null,null],[5,"cfgetospeed","","",null,null],[5,"cfmakeraw","","",null,null],[5,"cfsetispeed","","",null,null],[5,"cfsetospeed","","",null,null],[5,"cfsetspeed","","",null,null],[5,"tcgetattr","","",null,null],[5,"tcsetattr","","",null,null],[5,"tcflow","","",null,null],[5,"tcflush","","",null,null],[5,"tcgetsid","","",null,null],[5,"tcsendbreak","","",null,null],[5,"mkstemp","","",null,null],[5,"mkdtemp","","",null,null],[5,"tmpnam","","",null,null],[5,"openlog","","",null,null],[5,"closelog","","",null,null],[5,"setlogmask","","",null,null],[5,"syslog","","",null,null],[5,"nice","","",null,null],[5,"grantpt","","",null,null],[5,"posix_openpt","","",null,null],[5,"ptsname","","",null,null],[5,"unlockpt","","",null,null],[5,"fdatasync","","",null,null],[5,"mincore","","",null,null],[5,"clock_getres","","",null,null],[5,"clock_gettime","","",null,null],[5,"clock_settime","","",null,null],[5,"dirfd","","",null,null],[5,"pthread_getattr_np","","",null,null],[5,"pthread_attr_getstack","","",null,null],[5,"memalign","","",null,null],[5,"setgroups","","",null,null],[5,"pipe2","","",null,null],[5,"statfs","","",null,null],[5,"statfs64","","",null,null],[5,"fstatfs","","",null,null],[5,"fstatfs64","","",null,null],[5,"statvfs64","","",null,null],[5,"fstatvfs64","","",null,null],[5,"memrchr","","",null,null],[5,"posix_fadvise","","",null,null],[5,"futimens","","",null,null],[5,"utimensat","","",null,null],[5,"duplocale","","",null,null],[5,"freelocale","","",null,null],[5,"newlocale","","",null,null],[5,"uselocale","","",null,null],[5,"creat64","","",null,null],[5,"fstat64","","",null,null],[5,"fstatat64","","",null,null],[5,"ftruncate64","","",null,null],[5,"getrlimit64","","",null,null],[5,"lseek64","","",null,null],[5,"lstat64","","",null,null],[5,"mmap64","","",null,null],[5,"open64","","",null,null],[5,"openat64","","",null,null],[5,"pread64","","",null,null],[5,"preadv64","","",null,null],[5,"pwrite64","","",null,null],[5,"pwritev64","","",null,null],[5,"readdir64","","",null,null],[5,"readdir64_r","","",null,null],[5,"setrlimit64","","",null,null],[5,"stat64","","",null,null],[5,"truncate64","","",null,null],[5,"fdopendir","","",null,null],[5,"mknodat","","",null,null],[5,"pthread_condattr_getclock","","",null,null],[5,"pthread_condattr_setclock","","",null,null],[5,"pthread_condattr_setpshared","","",null,null],[5,"accept4","","",null,null],[5,"pthread_mutexattr_setpshared","","",null,null],[5,"pthread_rwlockattr_getpshared","","",null,null],[5,"pthread_rwlockattr_setpshared","","",null,null],[5,"ptsname_r","","",null,null],[5,"clearenv","","",null,null],[5,"waitid","","",null,null],[5,"setreuid","","",null,null],[5,"setregid","","",null,null],[5,"getresuid","","",null,null],[5,"getresgid","","",null,null],[5,"acct","","",null,null],[5,"brk","","",null,null],[5,"sbrk","","",null,null],[5,"vfork","","",null,null],[5,"setresgid","","",null,null],[5,"setresuid","","",null,null],[5,"wait4","","",null,null],[5,"openpty","","",null,null],[5,"execvpe","","",null,null],[5,"fexecve","","",null,null],[5,"aio_read","","",null,null],[5,"aio_write","","",null,null],[5,"aio_fsync","","",null,null],[5,"aio_error","","",null,null],[5,"aio_return","","",null,null],[5,"aio_suspend","","",null,null],[5,"aio_cancel","","",null,null],[5,"lio_listio","","",null,null],[5,"lutimes","","",null,null],[5,"setpwent","","",null,null],[5,"endpwent","","",null,null],[5,"getpwent","","",null,null],[5,"setspent","","",null,null],[5,"endspent","","",null,null],[5,"getspent","","",null,null],[5,"getspnam","","",null,null],[5,"shm_open","","",null,null],[5,"shmget","","",null,null],[5,"shmat","","",null,null],[5,"shmdt","","",null,null],[5,"shmctl","","",null,null],[5,"ftok","","",null,null],[5,"semget","","",null,null],[5,"semop","","",null,null],[5,"semctl","","",null,null],[5,"msgctl","","",null,null],[5,"msgget","","",null,null],[5,"msgrcv","","",null,null],[5,"msgsnd","","",null,null],[5,"mprotect","","",null,null],[5,"__errno_location","","",null,null],[5,"fopen64","","",null,null],[5,"freopen64","","",null,null],[5,"tmpfile64","","",null,null],[5,"fgetpos64","","",null,null],[5,"fsetpos64","","",null,null],[5,"fseeko64","","",null,null],[5,"ftello64","","",null,null],[5,"fallocate","","",null,null],[5,"posix_fallocate","","",null,null],[5,"readahead","","",null,null],[5,"getxattr","","",null,null],[5,"lgetxattr","","",null,null],[5,"fgetxattr","","",null,null],[5,"setxattr","","",null,null],[5,"lsetxattr","","",null,null],[5,"fsetxattr","","",null,null],[5,"listxattr","","",null,null],[5,"llistxattr","","",null,null],[5,"flistxattr","","",null,null],[5,"removexattr","","",null,null],[5,"lremovexattr","","",null,null],[5,"fremovexattr","","",null,null],[5,"signalfd","","",null,null],[5,"timerfd_create","","",null,null],[5,"timerfd_gettime","","",null,null],[5,"timerfd_settime","","",null,null],[5,"pwritev","","",null,null],[5,"preadv","","",null,null],[5,"quotactl","","",null,null],[5,"mq_open","","",null,null],[5,"mq_close","","",null,null],[5,"mq_unlink","","",null,null],[5,"mq_receive","","",null,null],[5,"mq_send","","",null,null],[5,"mq_getattr","","",null,null],[5,"mq_setattr","","",null,null],[5,"epoll_pwait","","",null,null],[5,"dup3","","",null,null],[5,"mkostemp","","",null,null],[5,"mkostemps","","",null,null],[5,"sigtimedwait","","",null,null],[5,"sigwaitinfo","","",null,null],[5,"nl_langinfo_l","","",null,null],[5,"getnameinfo","","",null,null],[5,"pthread_setschedprio","","",null,null],[5,"prlimit","","",null,null],[5,"prlimit64","","",null,null],[5,"getloadavg","","",null,null],[5,"process_vm_readv","","",null,null],[5,"process_vm_writev","","",null,null],[5,"reboot","","",null,null],[5,"setfsgid","","",null,null],[5,"setfsuid","","",null,null],[5,"mkfifoat","","",null,null],[5,"if_nameindex","","",null,null],[5,"if_freenameindex","","",null,null],[5,"sync_file_range","","",null,null],[5,"getifaddrs","","",null,null],[5,"freeifaddrs","","",null,null],[5,"mremap","","",null,null],[5,"glob","","",null,null],[5,"globfree","","",null,null],[5,"posix_madvise","","",null,null],[5,"shm_unlink","","",null,null],[5,"seekdir","","",null,null],[5,"telldir","","",null,null],[5,"madvise","","",null,null],[5,"msync","","",null,null],[5,"recvfrom","","",null,null],[5,"mkstemps","","",null,null],[5,"futimes","","",null,null],[5,"nl_langinfo","","",null,null],[5,"bind","","",null,null],[5,"writev","","",null,null],[5,"readv","","",null,null],[5,"sendmsg","","",null,null],[5,"recvmsg","","",null,null],[5,"getdomainname","","",null,null],[5,"setdomainname","","",null,null],[5,"vhangup","","",null,null],[5,"sendmmsg","","",null,null],[5,"recvmmsg","","",null,null],[5,"sync","","",null,null],[5,"syscall","","",null,null],[5,"sched_getaffinity","","",null,null],[5,"sched_setaffinity","","",null,null],[5,"epoll_create","","",null,null],[5,"epoll_create1","","",null,null],[5,"epoll_wait","","",null,null],[5,"epoll_ctl","","",null,null],[5,"pthread_getschedparam","","",null,null],[5,"unshare","","",null,null],[5,"umount","","",null,null],[5,"sched_get_priority_max","","",null,null],[5,"tee","","",null,null],[5,"settimeofday","","",null,null],[5,"splice","","",null,null],[5,"eventfd","","",null,null],[5,"sched_rr_get_interval","","",null,null],[5,"sem_timedwait","","",null,null],[5,"sched_setparam","","",null,null],[5,"setns","","",null,null],[5,"swapoff","","",null,null],[5,"vmsplice","","",null,null],[5,"mount","","",null,null],[5,"personality","","",null,null],[5,"prctl","","",null,null],[5,"sched_getparam","","",null,null],[5,"ppoll","","",null,null],[5,"pthread_mutex_timedlock","","",null,null],[5,"clone","","",null,null],[5,"sched_getscheduler","","",null,null],[5,"clock_nanosleep","","",null,null],[5,"pthread_attr_getguardsize","","",null,null],[5,"sethostname","","",null,null],[5,"sched_get_priority_min","","",null,null],[5,"pthread_condattr_getpshared","","",null,null],[5,"sysinfo","","",null,null],[5,"umount2","","",null,null],[5,"pthread_setschedparam","","",null,null],[5,"swapon","","",null,null],[5,"sched_setscheduler","","",null,null],[5,"sendfile","","",null,null],[5,"sigsuspend","","",null,null],[5,"getgrgid_r","","",null,null],[5,"sigaltstack","","",null,null],[5,"sem_close","","",null,null],[5,"getdtablesize","","",null,null],[5,"getgrnam_r","","",null,null],[5,"initgroups","","",null,null],[5,"pthread_sigmask","","",null,null],[5,"sem_open","","",null,null],[5,"getgrnam","","",null,null],[5,"pthread_cancel","","",null,null],[5,"pthread_kill","","",null,null],[5,"sem_unlink","","",null,null],[5,"daemon","","",null,null],[5,"getpwnam_r","","",null,null],[5,"getpwuid_r","","",null,null],[5,"sigwait","","",null,null],[5,"pthread_atfork","","",null,null],[5,"getgrgid","","",null,null],[5,"getgrouplist","","",null,null],[5,"pthread_mutexattr_getpshared","","",null,null],[5,"popen","","",null,null],[5,"faccessat","","",null,null],[5,"pthread_create","","",null,null],[5,"dl_iterate_phdr","","",null,null],[5,"setmntent","","",null,null],[5,"getmntent","","",null,null],[5,"addmntent","","",null,null],[5,"endmntent","","",null,null],[5,"hasmntopt","","",null,null],[5,"utmpxname","","",null,null],[5,"getutxent","","",null,null],[5,"getutxid","","",null,null],[5,"getutxline","","",null,null],[5,"pututxline","","",null,null],[5,"setutxent","","",null,null],[5,"endutxent","","",null,null],[5,"getpt","","",null,null],[5,"ioctl","","",null,null],[5,"backtrace","","",null,null],[5,"glob64","","",null,null],[5,"globfree64","","",null,null],[5,"ptrace","","",null,null],[5,"pthread_attr_getaffinity_np","","",null,null],[5,"pthread_attr_setaffinity_np","","",null,null],[5,"getpriority","","",null,null],[5,"setpriority","","",null,null],[5,"pthread_getaffinity_np","","",null,null],[5,"pthread_setaffinity_np","","",null,null],[5,"pthread_rwlockattr_getkind_np","","",null,null],[5,"pthread_rwlockattr_setkind_np","","",null,null],[5,"sched_getcpu","","",null,null],[5,"getcontext","","",null,null],[5,"setcontext","","",null,null],[5,"makecontext","","",null,null],[5,"swapcontext","","",null,null],[5,"iopl","","",null,null],[5,"ioperm","","",null,null],[5,"sysctl","","",null,null],[11,"clone","","",85,{"inputs":[{"name":"self"}],"output":{"name":"stat"}}],[11,"clone","","",86,{"inputs":[{"name":"self"}],"output":{"name":"stat64"}}],[11,"clone","","",87,{"inputs":[{"name":"self"}],"output":{"name":"statfs64"}}],[11,"clone","","",88,{"inputs":[{"name":"self"}],"output":{"name":"statvfs64"}}],[11,"clone","","",100,{"inputs":[{"name":"self"}],"output":{"name":"pthread_attr_t"}}],[11,"clone","","",89,{"inputs":[{"name":"self"}],"output":{"name":"_libc_fpxreg"}}],[11,"clone","","",90,{"inputs":[{"name":"self"}],"output":{"name":"_libc_xmmreg"}}],[11,"clone","","",91,{"inputs":[{"name":"self"}],"output":{"name":"_libc_fpstate"}}],[11,"clone","","",92,{"inputs":[{"name":"self"}],"output":{"name":"user_fpregs_struct"}}],[11,"clone","","",93,{"inputs":[{"name":"self"}],"output":{"name":"user_regs_struct"}}],[11,"clone","","",94,{"inputs":[{"name":"self"}],"output":{"name":"user"}}],[11,"clone","","",95,{"inputs":[{"name":"self"}],"output":{"name":"mcontext_t"}}],[11,"clone","","",96,{"inputs":[{"name":"self"}],"output":{"name":"ucontext_t"}}],[11,"clone","","",97,{"inputs":[{"name":"self"}],"output":{"name":"ipc_perm"}}],[11,"clone","","",98,{"inputs":[{"name":"self"}],"output":{"name":"shmid_ds"}}],[11,"clone","","",99,{"inputs":[{"name":"self"}],"output":{"name":"termios2"}}],[11,"clone","","",101,{"inputs":[{"name":"self"}],"output":{"name":"sigset_t"}}],[11,"clone","","",83,{"inputs":[{"name":"self"}],"output":{"name":"sysinfo"}}],[11,"clone","","",84,{"inputs":[{"name":"self"}],"output":{"name":"msqid_ds"}}],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"aiocb"}}],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"__exit_status"}}],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"__timeval"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"utmpx"}}],[11,"clone","","",74,{"inputs":[{"name":"self"}],"output":{"name":"sigaction"}}],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"stack_t"}}],[11,"clone","","",76,{"inputs":[{"name":"self"}],"output":{"name":"siginfo_t"}}],[11,"clone","","",77,{"inputs":[{"name":"self"}],"output":{"name":"glob64_t"}}],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"statfs"}}],[11,"clone","","",79,{"inputs":[{"name":"self"}],"output":{"name":"msghdr"}}],[11,"clone","","",80,{"inputs":[{"name":"self"}],"output":{"name":"cmsghdr"}}],[11,"clone","","",81,{"inputs":[{"name":"self"}],"output":{"name":"termios"}}],[11,"clone","","",82,{"inputs":[{"name":"self"}],"output":{"name":"flock"}}],[11,"clone","","",102,{"inputs":[{"name":"self"}],"output":{"name":"sem_t"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"dirent"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"dirent64"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"rlimit64"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"glob_t"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"ifaddrs"}}],[11,"clone","","",103,{"inputs":[{"name":"self"}],"output":{"name":"pthread_mutex_t"}}],[11,"clone","","",104,{"inputs":[{"name":"self"}],"output":{"name":"pthread_rwlock_t"}}],[11,"clone","","",105,{"inputs":[{"name":"self"}],"output":{"name":"pthread_mutexattr_t"}}],[11,"clone","","",106,{"inputs":[{"name":"self"}],"output":{"name":"pthread_rwlockattr_t"}}],[11,"clone","","",107,{"inputs":[{"name":"self"}],"output":{"name":"pthread_cond_t"}}],[11,"clone","","",108,{"inputs":[{"name":"self"}],"output":{"name":"pthread_condattr_t"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"passwd"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"spwd"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"statvfs"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"dqblk"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"signalfd_siginfo"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"itimerspec"}}],[11,"clone","","",109,{"inputs":[{"name":"self"}],"output":{"name":"fsid_t"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"mq_attr"}}],[11,"clone","","",110,{"inputs":[{"name":"self"}],"output":{"name":"cpu_set_t"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"if_nameindex"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"msginfo"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"mmsghdr"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"sembuf"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"input_event"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"input_id"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"input_absinfo"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"input_keymap_entry"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"input_mask"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"ff_replay"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"ff_trigger"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"ff_envelope"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"ff_constant_effect"}}],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"ff_ramp_effect"}}],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"ff_condition_effect"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"ff_periodic_effect"}}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"ff_rumble_effect"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"ff_effect"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"dl_phdr_info"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"elf32_phdr"}}],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"elf64_phdr"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"ucred"}}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"mntent"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_in"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_in6"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_un"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_storage"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"addrinfo"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_nl"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_ll"}}],[11,"clone","","",111,{"inputs":[{"name":"self"}],"output":{"name":"fd_set"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"tm"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"sched_param"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"dl_info"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"epoll_event"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"utsname"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"lconv"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"sigevent"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"group"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"utimbuf"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"timeval"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"timespec"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"rlimit"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"rusage"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"in_addr"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"in6_addr"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"ip_mreq"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"ipv6_mreq"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"hostent"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"iovec"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"pollfd"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"winsize"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"linger"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"sigval"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"itimerval"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"tms"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"servent"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"protoent"}}],[6,"int8_t","","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[6,"c_longlong","","",null,null],[6,"c_ulonglong","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[6,"size_t","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"ssize_t","","",null,null],[6,"pid_t","","",null,null],[6,"uid_t","","",null,null],[6,"gid_t","","",null,null],[6,"in_addr_t","","",null,null],[6,"in_port_t","","",null,null],[6,"sighandler_t","","",null,null],[6,"cc_t","","",null,null],[6,"sa_family_t","","",null,null],[6,"pthread_key_t","","",null,null],[6,"speed_t","","",null,null],[6,"tcflag_t","","",null,null],[6,"clockid_t","","",null,null],[6,"key_t","","",null,null],[6,"id_t","","",null,null],[6,"useconds_t","","",null,null],[6,"dev_t","","",null,null],[6,"socklen_t","","",null,null],[6,"pthread_t","","",null,null],[6,"mode_t","","",null,null],[6,"ino64_t","","",null,null],[6,"off64_t","","",null,null],[6,"blkcnt64_t","","",null,null],[6,"rlim64_t","","",null,null],[6,"mqd_t","","",null,null],[6,"nfds_t","","",null,null],[6,"nl_item","","",null,null],[6,"idtype_t","","",null,null],[6,"loff_t","","",null,null],[6,"__u8","","",null,null],[6,"__u16","","",null,null],[6,"__s16","","",null,null],[6,"__u32","","",null,null],[6,"__s32","","",null,null],[6,"Elf32_Half","","",null,null],[6,"Elf32_Word","","",null,null],[6,"Elf32_Off","","",null,null],[6,"Elf32_Addr","","",null,null],[6,"Elf64_Half","","",null,null],[6,"Elf64_Word","","",null,null],[6,"Elf64_Off","","",null,null],[6,"Elf64_Addr","","",null,null],[6,"Elf64_Xword","","",null,null],[6,"__priority_which_t","","",null,null],[6,"clock_t","","",null,null],[6,"time_t","","",null,null],[6,"ino_t","","",null,null],[6,"off_t","","",null,null],[6,"blkcnt_t","","",null,null],[6,"__fsword_t","","",null,null],[6,"shmatt_t","","",null,null],[6,"msgqnum_t","","",null,null],[6,"msglen_t","","",null,null],[6,"fsblkcnt_t","","",null,null],[6,"fsfilcnt_t","","",null,null],[6,"rlim_t","","",null,null],[6,"c_char","","",null,null],[6,"wchar_t","","",null,null],[6,"nlink_t","","",null,null],[6,"blksize_t","","",null,null],[6,"greg_t","","",null,null],[6,"suseconds_t","","",null,null],[6,"__u64","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[17,"SIG_DFL","","",null,null],[17,"SIG_IGN","","",null,null],[17,"SIG_ERR","","",null,null],[17,"DT_FIFO","","",null,null],[17,"DT_CHR","","",null,null],[17,"DT_DIR","","",null,null],[17,"DT_BLK","","",null,null],[17,"DT_REG","","",null,null],[17,"DT_LNK","","",null,null],[17,"DT_SOCK","","",null,null],[17,"FD_CLOEXEC","","",null,null],[17,"USRQUOTA","","",null,null],[17,"GRPQUOTA","","",null,null],[17,"SIGIOT","","",null,null],[17,"S_ISUID","","",null,null],[17,"S_ISGID","","",null,null],[17,"S_ISVTX","","",null,null],[17,"IF_NAMESIZE","","",null,null],[17,"IFNAMSIZ","","",null,null],[17,"LOG_EMERG","","",null,null],[17,"LOG_ALERT","","",null,null],[17,"LOG_CRIT","","",null,null],[17,"LOG_ERR","","",null,null],[17,"LOG_WARNING","","",null,null],[17,"LOG_NOTICE","","",null,null],[17,"LOG_INFO","","",null,null],[17,"LOG_DEBUG","","",null,null],[17,"LOG_KERN","","",null,null],[17,"LOG_USER","","",null,null],[17,"LOG_MAIL","","",null,null],[17,"LOG_DAEMON","","",null,null],[17,"LOG_AUTH","","",null,null],[17,"LOG_SYSLOG","","",null,null],[17,"LOG_LPR","","",null,null],[17,"LOG_NEWS","","",null,null],[17,"LOG_UUCP","","",null,null],[17,"LOG_LOCAL0","","",null,null],[17,"LOG_LOCAL1","","",null,null],[17,"LOG_LOCAL2","","",null,null],[17,"LOG_LOCAL3","","",null,null],[17,"LOG_LOCAL4","","",null,null],[17,"LOG_LOCAL5","","",null,null],[17,"LOG_LOCAL6","","",null,null],[17,"LOG_LOCAL7","","",null,null],[17,"LOG_PID","","",null,null],[17,"LOG_CONS","","",null,null],[17,"LOG_ODELAY","","",null,null],[17,"LOG_NDELAY","","",null,null],[17,"LOG_NOWAIT","","",null,null],[17,"LOG_PRIMASK","","",null,null],[17,"LOG_FACMASK","","",null,null],[17,"PRIO_PROCESS","","",null,null],[17,"PRIO_PGRP","","",null,null],[17,"PRIO_USER","","",null,null],[17,"PRIO_MIN","","",null,null],[17,"PRIO_MAX","","",null,null],[17,"IPPROTO_ICMP","","",null,null],[17,"IPPROTO_ICMPV6","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_UDP","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"INADDR_LOOPBACK","","",null,null],[17,"INADDR_ANY","","",null,null],[17,"INADDR_BROADCAST","","",null,null],[17,"INADDR_NONE","","",null,null],[17,"EXIT_FAILURE","","",null,null],[17,"EXIT_SUCCESS","","",null,null],[17,"RAND_MAX","","",null,null],[17,"EOF","","",null,null],[17,"SEEK_SET","","",null,null],[17,"SEEK_CUR","","",null,null],[17,"SEEK_END","","",null,null],[17,"_IOFBF","","",null,null],[17,"_IONBF","","",null,null],[17,"_IOLBF","","",null,null],[17,"F_DUPFD","","",null,null],[17,"F_GETFD","","",null,null],[17,"F_SETFD","","",null,null],[17,"F_GETFL","","",null,null],[17,"F_SETFL","","",null,null],[17,"F_SETLEASE","","",null,null],[17,"F_GETLEASE","","",null,null],[17,"F_NOTIFY","","",null,null],[17,"F_CANCELLK","","",null,null],[17,"F_DUPFD_CLOEXEC","","",null,null],[17,"F_SETPIPE_SZ","","",null,null],[17,"F_GETPIPE_SZ","","",null,null],[17,"F_ADD_SEALS","","",null,null],[17,"F_GET_SEALS","","",null,null],[17,"F_SEAL_SEAL","","",null,null],[17,"F_SEAL_SHRINK","","",null,null],[17,"F_SEAL_GROW","","",null,null],[17,"F_SEAL_WRITE","","",null,null],[17,"SIGTRAP","","",null,null],[17,"PTHREAD_CREATE_JOINABLE","","",null,null],[17,"PTHREAD_CREATE_DETACHED","","",null,null],[17,"CLOCK_REALTIME","","",null,null],[17,"CLOCK_MONOTONIC","","",null,null],[17,"CLOCK_PROCESS_CPUTIME_ID","","",null,null],[17,"CLOCK_THREAD_CPUTIME_ID","","",null,null],[17,"CLOCK_MONOTONIC_RAW","","",null,null],[17,"CLOCK_REALTIME_COARSE","","",null,null],[17,"CLOCK_MONOTONIC_COARSE","","",null,null],[17,"CLOCK_BOOTTIME","","",null,null],[17,"CLOCK_REALTIME_ALARM","","",null,null],[17,"CLOCK_BOOTTIME_ALARM","","",null,null],[17,"TIMER_ABSTIME","","",null,null],[17,"RLIMIT_CPU","","",null,null],[17,"RLIMIT_FSIZE","","",null,null],[17,"RLIMIT_DATA","","",null,null],[17,"RLIMIT_STACK","","",null,null],[17,"RLIMIT_CORE","","",null,null],[17,"RLIMIT_LOCKS","","",null,null],[17,"RLIMIT_SIGPENDING","","",null,null],[17,"RLIMIT_MSGQUEUE","","",null,null],[17,"RLIMIT_NICE","","",null,null],[17,"RLIMIT_RTPRIO","","",null,null],[17,"RUSAGE_SELF","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"SOCK_CLOEXEC","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFDIR","","",null,null],[17,"S_IFREG","","",null,null],[17,"S_IFLNK","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"S_IFMT","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IROTH","","",null,null],[17,"F_OK","","",null,null],[17,"R_OK","","",null,null],[17,"W_OK","","",null,null],[17,"X_OK","","",null,null],[17,"STDIN_FILENO","","",null,null],[17,"STDOUT_FILENO","","",null,null],[17,"STDERR_FILENO","","",null,null],[17,"SIGHUP","","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"LC_CTYPE","","",null,null],[17,"LC_NUMERIC","","",null,null],[17,"LC_TIME","","",null,null],[17,"LC_COLLATE","","",null,null],[17,"LC_MONETARY","","",null,null],[17,"LC_MESSAGES","","",null,null],[17,"LC_ALL","","",null,null],[17,"LC_CTYPE_MASK","","",null,null],[17,"LC_NUMERIC_MASK","","",null,null],[17,"LC_TIME_MASK","","",null,null],[17,"LC_COLLATE_MASK","","",null,null],[17,"LC_MONETARY_MASK","","",null,null],[17,"LC_MESSAGES_MASK","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"MS_RDONLY","","",null,null],[17,"MS_NOSUID","","",null,null],[17,"MS_NODEV","","",null,null],[17,"MS_NOEXEC","","",null,null],[17,"MS_SYNCHRONOUS","","",null,null],[17,"MS_REMOUNT","","",null,null],[17,"MS_MANDLOCK","","",null,null],[17,"MS_DIRSYNC","","",null,null],[17,"MS_NOATIME","","",null,null],[17,"MS_NODIRATIME","","",null,null],[17,"MS_BIND","","",null,null],[17,"MS_MOVE","","",null,null],[17,"MS_REC","","",null,null],[17,"MS_SILENT","","",null,null],[17,"MS_POSIXACL","","",null,null],[17,"MS_UNBINDABLE","","",null,null],[17,"MS_PRIVATE","","",null,null],[17,"MS_SLAVE","","",null,null],[17,"MS_SHARED","","",null,null],[17,"MS_RELATIME","","",null,null],[17,"MS_KERNMOUNT","","",null,null],[17,"MS_I_VERSION","","",null,null],[17,"MS_STRICTATIME","","",null,null],[17,"MS_ACTIVE","","",null,null],[17,"MS_NOUSER","","",null,null],[17,"MS_MGC_VAL","","",null,null],[17,"MS_MGC_MSK","","",null,null],[17,"MS_RMT_MASK","","",null,null],[17,"EPERM","","",null,null],[17,"ENOENT","","",null,null],[17,"ESRCH","","",null,null],[17,"EINTR","","",null,null],[17,"EIO","","",null,null],[17,"ENXIO","","",null,null],[17,"E2BIG","","",null,null],[17,"ENOEXEC","","",null,null],[17,"EBADF","","",null,null],[17,"ECHILD","","",null,null],[17,"EAGAIN","","",null,null],[17,"ENOMEM","","",null,null],[17,"EACCES","","",null,null],[17,"EFAULT","","",null,null],[17,"ENOTBLK","","",null,null],[17,"EBUSY","","",null,null],[17,"EEXIST","","",null,null],[17,"EXDEV","","",null,null],[17,"ENODEV","","",null,null],[17,"ENOTDIR","","",null,null],[17,"EISDIR","","",null,null],[17,"EINVAL","","",null,null],[17,"ENFILE","","",null,null],[17,"EMFILE","","",null,null],[17,"ENOTTY","","",null,null],[17,"ETXTBSY","","",null,null],[17,"EFBIG","","",null,null],[17,"ENOSPC","","",null,null],[17,"ESPIPE","","",null,null],[17,"EROFS","","",null,null],[17,"EMLINK","","",null,null],[17,"EPIPE","","",null,null],[17,"EDOM","","",null,null],[17,"ERANGE","","",null,null],[17,"EWOULDBLOCK","","",null,null],[17,"SCM_RIGHTS","","",null,null],[17,"SCM_CREDENTIALS","","",null,null],[17,"PROT_GROWSDOWN","","",null,null],[17,"PROT_GROWSUP","","",null,null],[17,"MAP_TYPE","","",null,null],[17,"MADV_NORMAL","","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_FREE","","",null,null],[17,"MADV_REMOVE","","",null,null],[17,"MADV_DONTFORK","","",null,null],[17,"MADV_DOFORK","","",null,null],[17,"MADV_MERGEABLE","","",null,null],[17,"MADV_UNMERGEABLE","","",null,null],[17,"MADV_HUGEPAGE","","",null,null],[17,"MADV_NOHUGEPAGE","","",null,null],[17,"MADV_DONTDUMP","","",null,null],[17,"MADV_DODUMP","","",null,null],[17,"MADV_HWPOISON","","",null,null],[17,"MADV_SOFT_OFFLINE","","",null,null],[17,"IFF_UP","","",null,null],[17,"IFF_BROADCAST","","",null,null],[17,"IFF_DEBUG","","",null,null],[17,"IFF_LOOPBACK","","",null,null],[17,"IFF_POINTOPOINT","","",null,null],[17,"IFF_NOTRAILERS","","",null,null],[17,"IFF_RUNNING","","",null,null],[17,"IFF_NOARP","","",null,null],[17,"IFF_PROMISC","","",null,null],[17,"IFF_ALLMULTI","","",null,null],[17,"IFF_MASTER","","",null,null],[17,"IFF_SLAVE","","",null,null],[17,"IFF_MULTICAST","","",null,null],[17,"IFF_PORTSEL","","",null,null],[17,"IFF_AUTOMEDIA","","",null,null],[17,"IFF_DYNAMIC","","",null,null],[17,"SOL_IP","","",null,null],[17,"SOL_TCP","","",null,null],[17,"SOL_UDP","","",null,null],[17,"SOL_IPV6","","",null,null],[17,"SOL_ICMPV6","","",null,null],[17,"SOL_RAW","","",null,null],[17,"SOL_DECNET","","",null,null],[17,"SOL_X25","","",null,null],[17,"SOL_PACKET","","",null,null],[17,"SOL_ATM","","",null,null],[17,"SOL_AAL","","",null,null],[17,"SOL_IRDA","","",null,null],[17,"SOL_NETBEUI","","",null,null],[17,"SOL_LLC","","",null,null],[17,"SOL_DCCP","","",null,null],[17,"SOL_NETLINK","","",null,null],[17,"SOL_TIPC","","",null,null],[17,"AF_UNSPEC","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_LOCAL","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_AX25","","",null,null],[17,"AF_IPX","","",null,null],[17,"AF_APPLETALK","","",null,null],[17,"AF_NETROM","","",null,null],[17,"AF_BRIDGE","","",null,null],[17,"AF_ATMPVC","","",null,null],[17,"AF_X25","","",null,null],[17,"AF_INET6","","",null,null],[17,"AF_ROSE","","",null,null],[17,"AF_DECnet","","",null,null],[17,"AF_NETBEUI","","",null,null],[17,"AF_SECURITY","","",null,null],[17,"AF_KEY","","",null,null],[17,"AF_NETLINK","","",null,null],[17,"AF_ROUTE","","",null,null],[17,"AF_PACKET","","",null,null],[17,"AF_ASH","","",null,null],[17,"AF_ECONET","","",null,null],[17,"AF_ATMSVC","","",null,null],[17,"AF_RDS","","",null,null],[17,"AF_SNA","","",null,null],[17,"AF_IRDA","","",null,null],[17,"AF_PPPOX","","",null,null],[17,"AF_WANPIPE","","",null,null],[17,"AF_LLC","","",null,null],[17,"AF_CAN","","",null,null],[17,"AF_TIPC","","",null,null],[17,"AF_BLUETOOTH","","",null,null],[17,"AF_IUCV","","",null,null],[17,"AF_RXRPC","","",null,null],[17,"AF_ISDN","","",null,null],[17,"AF_PHONET","","",null,null],[17,"AF_IEEE802154","","",null,null],[17,"AF_CAIF","","",null,null],[17,"AF_ALG","","",null,null],[17,"PF_UNSPEC","","",null,null],[17,"PF_UNIX","","",null,null],[17,"PF_LOCAL","","",null,null],[17,"PF_INET","","",null,null],[17,"PF_AX25","","",null,null],[17,"PF_IPX","","",null,null],[17,"PF_APPLETALK","","",null,null],[17,"PF_NETROM","","",null,null],[17,"PF_BRIDGE","","",null,null],[17,"PF_ATMPVC","","",null,null],[17,"PF_X25","","",null,null],[17,"PF_INET6","","",null,null],[17,"PF_ROSE","","",null,null],[17,"PF_DECnet","","",null,null],[17,"PF_NETBEUI","","",null,null],[17,"PF_SECURITY","","",null,null],[17,"PF_KEY","","",null,null],[17,"PF_NETLINK","","",null,null],[17,"PF_ROUTE","","",null,null],[17,"PF_PACKET","","",null,null],[17,"PF_ASH","","",null,null],[17,"PF_ECONET","","",null,null],[17,"PF_ATMSVC","","",null,null],[17,"PF_RDS","","",null,null],[17,"PF_SNA","","",null,null],[17,"PF_IRDA","","",null,null],[17,"PF_PPPOX","","",null,null],[17,"PF_WANPIPE","","",null,null],[17,"PF_LLC","","",null,null],[17,"PF_CAN","","",null,null],[17,"PF_TIPC","","",null,null],[17,"PF_BLUETOOTH","","",null,null],[17,"PF_IUCV","","",null,null],[17,"PF_RXRPC","","",null,null],[17,"PF_ISDN","","",null,null],[17,"PF_PHONET","","",null,null],[17,"PF_IEEE802154","","",null,null],[17,"PF_CAIF","","",null,null],[17,"PF_ALG","","",null,null],[17,"SOMAXCONN","","",null,null],[17,"MSG_OOB","","",null,null],[17,"MSG_PEEK","","",null,null],[17,"MSG_DONTROUTE","","",null,null],[17,"MSG_CTRUNC","","",null,null],[17,"MSG_TRUNC","","",null,null],[17,"MSG_DONTWAIT","","",null,null],[17,"MSG_EOR","","",null,null],[17,"MSG_WAITALL","","",null,null],[17,"MSG_FIN","","",null,null],[17,"MSG_SYN","","",null,null],[17,"MSG_CONFIRM","","",null,null],[17,"MSG_RST","","",null,null],[17,"MSG_ERRQUEUE","","",null,null],[17,"MSG_NOSIGNAL","","",null,null],[17,"MSG_MORE","","",null,null],[17,"MSG_WAITFORONE","","",null,null],[17,"MSG_FASTOPEN","","",null,null],[17,"MSG_CMSG_CLOEXEC","","",null,null],[17,"SCM_TIMESTAMP","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"SOCK_RDM","","",null,null],[17,"IP_MULTICAST_IF","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IP_TTL","","",null,null],[17,"IP_HDRINCL","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IP_TRANSPARENT","","",null,null],[17,"IPV6_ADD_MEMBERSHIP","","",null,null],[17,"IPV6_DROP_MEMBERSHIP","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_MAXSEG","","",null,null],[17,"TCP_CORK","","",null,null],[17,"TCP_KEEPIDLE","","",null,null],[17,"TCP_KEEPINTVL","","",null,null],[17,"TCP_KEEPCNT","","",null,null],[17,"TCP_SYNCNT","","",null,null],[17,"TCP_LINGER2","","",null,null],[17,"TCP_DEFER_ACCEPT","","",null,null],[17,"TCP_WINDOW_CLAMP","","",null,null],[17,"TCP_INFO","","",null,null],[17,"TCP_QUICKACK","","",null,null],[17,"TCP_CONGESTION","","",null,null],[17,"IPV6_MULTICAST_LOOP","","",null,null],[17,"IPV6_V6ONLY","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"LOCK_SH","","",null,null],[17,"LOCK_EX","","",null,null],[17,"LOCK_NB","","",null,null],[17,"LOCK_UN","","",null,null],[17,"SS_ONSTACK","","",null,null],[17,"SS_DISABLE","","",null,null],[17,"PATH_MAX","","",null,null],[17,"FD_SETSIZE","","",null,null],[17,"EPOLLIN","","",null,null],[17,"EPOLLPRI","","",null,null],[17,"EPOLLOUT","","",null,null],[17,"EPOLLRDNORM","","",null,null],[17,"EPOLLRDBAND","","",null,null],[17,"EPOLLWRNORM","","",null,null],[17,"EPOLLWRBAND","","",null,null],[17,"EPOLLMSG","","",null,null],[17,"EPOLLERR","","",null,null],[17,"EPOLLHUP","","",null,null],[17,"EPOLLET","","",null,null],[17,"EPOLL_CTL_ADD","","",null,null],[17,"EPOLL_CTL_MOD","","",null,null],[17,"EPOLL_CTL_DEL","","",null,null],[17,"MNT_DETACH","","",null,null],[17,"MNT_EXPIRE","","",null,null],[17,"Q_GETFMT","","",null,null],[17,"Q_GETINFO","","",null,null],[17,"Q_SETINFO","","",null,null],[17,"QIF_BLIMITS","","",null,null],[17,"QIF_SPACE","","",null,null],[17,"QIF_ILIMITS","","",null,null],[17,"QIF_INODES","","",null,null],[17,"QIF_BTIME","","",null,null],[17,"QIF_ITIME","","",null,null],[17,"QIF_LIMITS","","",null,null],[17,"QIF_USAGE","","",null,null],[17,"QIF_TIMES","","",null,null],[17,"QIF_ALL","","",null,null],[17,"MNT_FORCE","","",null,null],[17,"Q_SYNC","","",null,null],[17,"Q_QUOTAON","","",null,null],[17,"Q_QUOTAOFF","","",null,null],[17,"Q_GETQUOTA","","",null,null],[17,"Q_SETQUOTA","","",null,null],[17,"TCIOFF","","",null,null],[17,"TCION","","",null,null],[17,"TCOOFF","","",null,null],[17,"TCOON","","",null,null],[17,"TCIFLUSH","","",null,null],[17,"TCOFLUSH","","",null,null],[17,"TCIOFLUSH","","",null,null],[17,"NL0","","",null,null],[17,"NL1","","",null,null],[17,"TAB0","","",null,null],[17,"CR0","","",null,null],[17,"FF0","","",null,null],[17,"BS0","","",null,null],[17,"VT0","","",null,null],[17,"VERASE","","",null,null],[17,"VKILL","","",null,null],[17,"VINTR","","",null,null],[17,"VQUIT","","",null,null],[17,"VLNEXT","","",null,null],[17,"IGNBRK","","",null,null],[17,"BRKINT","","",null,null],[17,"IGNPAR","","",null,null],[17,"PARMRK","","",null,null],[17,"INPCK","","",null,null],[17,"ISTRIP","","",null,null],[17,"INLCR","","",null,null],[17,"IGNCR","","",null,null],[17,"ICRNL","","",null,null],[17,"IXANY","","",null,null],[17,"IMAXBEL","","",null,null],[17,"OPOST","","",null,null],[17,"CS5","","",null,null],[17,"CRTSCTS","","",null,null],[17,"ECHO","","",null,null],[17,"OCRNL","","",null,null],[17,"ONOCR","","",null,null],[17,"ONLRET","","",null,null],[17,"OFILL","","",null,null],[17,"OFDEL","","",null,null],[17,"CLONE_VM","","",null,null],[17,"CLONE_FS","","",null,null],[17,"CLONE_FILES","","",null,null],[17,"CLONE_SIGHAND","","",null,null],[17,"CLONE_PTRACE","","",null,null],[17,"CLONE_VFORK","","",null,null],[17,"CLONE_PARENT","","",null,null],[17,"CLONE_THREAD","","",null,null],[17,"CLONE_NEWNS","","",null,null],[17,"CLONE_SYSVSEM","","",null,null],[17,"CLONE_SETTLS","","",null,null],[17,"CLONE_PARENT_SETTID","","",null,null],[17,"CLONE_CHILD_CLEARTID","","",null,null],[17,"CLONE_DETACHED","","",null,null],[17,"CLONE_UNTRACED","","",null,null],[17,"CLONE_CHILD_SETTID","","",null,null],[17,"CLONE_NEWUTS","","",null,null],[17,"CLONE_NEWIPC","","",null,null],[17,"CLONE_NEWUSER","","",null,null],[17,"CLONE_NEWPID","","",null,null],[17,"CLONE_NEWNET","","",null,null],[17,"CLONE_IO","","",null,null],[17,"CLONE_NEWCGROUP","","",null,null],[17,"WNOHANG","","",null,null],[17,"WUNTRACED","","",null,null],[17,"WSTOPPED","","",null,null],[17,"WEXITED","","",null,null],[17,"WCONTINUED","","",null,null],[17,"WNOWAIT","","",null,null],[17,"PTRACE_O_TRACESYSGOOD","","",null,null],[17,"PTRACE_O_TRACEFORK","","",null,null],[17,"PTRACE_O_TRACEVFORK","","",null,null],[17,"PTRACE_O_TRACECLONE","","",null,null],[17,"PTRACE_O_TRACEEXEC","","",null,null],[17,"PTRACE_O_TRACEVFORKDONE","","",null,null],[17,"PTRACE_O_TRACEEXIT","","",null,null],[17,"PTRACE_O_TRACESECCOMP","","",null,null],[17,"PTRACE_O_EXITKILL","","",null,null],[17,"PTRACE_O_SUSPEND_SECCOMP","","",null,null],[17,"PTRACE_O_MASK","","",null,null],[17,"PTRACE_EVENT_FORK","","",null,null],[17,"PTRACE_EVENT_VFORK","","",null,null],[17,"PTRACE_EVENT_CLONE","","",null,null],[17,"PTRACE_EVENT_EXEC","","",null,null],[17,"PTRACE_EVENT_VFORK_DONE","","",null,null],[17,"PTRACE_EVENT_EXIT","","",null,null],[17,"PTRACE_EVENT_SECCOMP","","",null,null],[17,"__WNOTHREAD","","",null,null],[17,"__WALL","","",null,null],[17,"__WCLONE","","",null,null],[17,"SPLICE_F_MOVE","","",null,null],[17,"SPLICE_F_NONBLOCK","","",null,null],[17,"SPLICE_F_MORE","","",null,null],[17,"SPLICE_F_GIFT","","",null,null],[17,"RTLD_LOCAL","","",null,null],[17,"RTLD_LAZY","","",null,null],[17,"POSIX_FADV_NORMAL","","",null,null],[17,"POSIX_FADV_RANDOM","","",null,null],[17,"POSIX_FADV_SEQUENTIAL","","",null,null],[17,"POSIX_FADV_WILLNEED","","",null,null],[17,"AT_FDCWD","","",null,null],[17,"AT_SYMLINK_NOFOLLOW","","",null,null],[17,"AT_REMOVEDIR","","",null,null],[17,"AT_SYMLINK_FOLLOW","","",null,null],[17,"AT_NO_AUTOMOUNT","","",null,null],[17,"AT_EMPTY_PATH","","",null,null],[17,"LOG_CRON","","",null,null],[17,"LOG_AUTHPRIV","","",null,null],[17,"LOG_FTP","","",null,null],[17,"LOG_PERROR","","",null,null],[17,"PIPE_BUF","","",null,null],[17,"SI_LOAD_SHIFT","","",null,null],[17,"SIGEV_SIGNAL","","",null,null],[17,"SIGEV_NONE","","",null,null],[17,"SIGEV_THREAD","","",null,null],[17,"P_ALL","","",null,null],[17,"P_PID","","",null,null],[17,"P_PGID","","",null,null],[17,"UTIME_OMIT","","",null,null],[17,"UTIME_NOW","","",null,null],[17,"POLLIN","","",null,null],[17,"POLLPRI","","",null,null],[17,"POLLOUT","","",null,null],[17,"POLLERR","","",null,null],[17,"POLLHUP","","",null,null],[17,"POLLNVAL","","",null,null],[17,"POLLRDNORM","","",null,null],[17,"POLLRDBAND","","",null,null],[17,"ABDAY_1","","",null,null],[17,"ABDAY_2","","",null,null],[17,"ABDAY_3","","",null,null],[17,"ABDAY_4","","",null,null],[17,"ABDAY_5","","",null,null],[17,"ABDAY_6","","",null,null],[17,"ABDAY_7","","",null,null],[17,"DAY_1","","",null,null],[17,"DAY_2","","",null,null],[17,"DAY_3","","",null,null],[17,"DAY_4","","",null,null],[17,"DAY_5","","",null,null],[17,"DAY_6","","",null,null],[17,"DAY_7","","",null,null],[17,"ABMON_1","","",null,null],[17,"ABMON_2","","",null,null],[17,"ABMON_3","","",null,null],[17,"ABMON_4","","",null,null],[17,"ABMON_5","","",null,null],[17,"ABMON_6","","",null,null],[17,"ABMON_7","","",null,null],[17,"ABMON_8","","",null,null],[17,"ABMON_9","","",null,null],[17,"ABMON_10","","",null,null],[17,"ABMON_11","","",null,null],[17,"ABMON_12","","",null,null],[17,"MON_1","","",null,null],[17,"MON_2","","",null,null],[17,"MON_3","","",null,null],[17,"MON_4","","",null,null],[17,"MON_5","","",null,null],[17,"MON_6","","",null,null],[17,"MON_7","","",null,null],[17,"MON_8","","",null,null],[17,"MON_9","","",null,null],[17,"MON_10","","",null,null],[17,"MON_11","","",null,null],[17,"MON_12","","",null,null],[17,"AM_STR","","",null,null],[17,"PM_STR","","",null,null],[17,"D_T_FMT","","",null,null],[17,"D_FMT","","",null,null],[17,"T_FMT","","",null,null],[17,"T_FMT_AMPM","","",null,null],[17,"ERA","","",null,null],[17,"ERA_D_FMT","","",null,null],[17,"ALT_DIGITS","","",null,null],[17,"ERA_D_T_FMT","","",null,null],[17,"ERA_T_FMT","","",null,null],[17,"CODESET","","",null,null],[17,"CRNCYSTR","","",null,null],[17,"RUSAGE_THREAD","","",null,null],[17,"RUSAGE_CHILDREN","","",null,null],[17,"RADIXCHAR","","",null,null],[17,"THOUSEP","","",null,null],[17,"YESEXPR","","",null,null],[17,"NOEXPR","","",null,null],[17,"YESSTR","","",null,null],[17,"NOSTR","","",null,null],[17,"FILENAME_MAX","","",null,null],[17,"L_tmpnam","","",null,null],[17,"_PC_LINK_MAX","","",null,null],[17,"_PC_MAX_CANON","","",null,null],[17,"_PC_MAX_INPUT","","",null,null],[17,"_PC_NAME_MAX","","",null,null],[17,"_PC_PATH_MAX","","",null,null],[17,"_PC_PIPE_BUF","","",null,null],[17,"_PC_CHOWN_RESTRICTED","","",null,null],[17,"_PC_NO_TRUNC","","",null,null],[17,"_PC_VDISABLE","","",null,null],[17,"_PC_SYNC_IO","","",null,null],[17,"_PC_ASYNC_IO","","",null,null],[17,"_PC_PRIO_IO","","",null,null],[17,"_PC_SOCK_MAXBUF","","",null,null],[17,"_PC_FILESIZEBITS","","",null,null],[17,"_PC_REC_INCR_XFER_SIZE","","",null,null],[17,"_PC_REC_MAX_XFER_SIZE","","",null,null],[17,"_PC_REC_MIN_XFER_SIZE","","",null,null],[17,"_PC_REC_XFER_ALIGN","","",null,null],[17,"_PC_ALLOC_SIZE_MIN","","",null,null],[17,"_PC_SYMLINK_MAX","","",null,null],[17,"_PC_2_SYMLINKS","","",null,null],[17,"_SC_ARG_MAX","","",null,null],[17,"_SC_CHILD_MAX","","",null,null],[17,"_SC_CLK_TCK","","",null,null],[17,"_SC_NGROUPS_MAX","","",null,null],[17,"_SC_OPEN_MAX","","",null,null],[17,"_SC_STREAM_MAX","","",null,null],[17,"_SC_TZNAME_MAX","","",null,null],[17,"_SC_JOB_CONTROL","","",null,null],[17,"_SC_SAVED_IDS","","",null,null],[17,"_SC_REALTIME_SIGNALS","","",null,null],[17,"_SC_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_TIMERS","","",null,null],[17,"_SC_ASYNCHRONOUS_IO","","",null,null],[17,"_SC_PRIORITIZED_IO","","",null,null],[17,"_SC_SYNCHRONIZED_IO","","",null,null],[17,"_SC_FSYNC","","",null,null],[17,"_SC_MAPPED_FILES","","",null,null],[17,"_SC_MEMLOCK","","",null,null],[17,"_SC_MEMLOCK_RANGE","","",null,null],[17,"_SC_MEMORY_PROTECTION","","",null,null],[17,"_SC_MESSAGE_PASSING","","",null,null],[17,"_SC_SEMAPHORES","","",null,null],[17,"_SC_SHARED_MEMORY_OBJECTS","","",null,null],[17,"_SC_AIO_LISTIO_MAX","","",null,null],[17,"_SC_AIO_MAX","","",null,null],[17,"_SC_AIO_PRIO_DELTA_MAX","","",null,null],[17,"_SC_DELAYTIMER_MAX","","",null,null],[17,"_SC_MQ_OPEN_MAX","","",null,null],[17,"_SC_MQ_PRIO_MAX","","",null,null],[17,"_SC_VERSION","","",null,null],[17,"_SC_PAGESIZE","","",null,null],[17,"_SC_PAGE_SIZE","","",null,null],[17,"_SC_RTSIG_MAX","","",null,null],[17,"_SC_SEM_NSEMS_MAX","","",null,null],[17,"_SC_SEM_VALUE_MAX","","",null,null],[17,"_SC_SIGQUEUE_MAX","","",null,null],[17,"_SC_TIMER_MAX","","",null,null],[17,"_SC_BC_BASE_MAX","","",null,null],[17,"_SC_BC_DIM_MAX","","",null,null],[17,"_SC_BC_SCALE_MAX","","",null,null],[17,"_SC_BC_STRING_MAX","","",null,null],[17,"_SC_COLL_WEIGHTS_MAX","","",null,null],[17,"_SC_EXPR_NEST_MAX","","",null,null],[17,"_SC_LINE_MAX","","",null,null],[17,"_SC_RE_DUP_MAX","","",null,null],[17,"_SC_2_VERSION","","",null,null],[17,"_SC_2_C_BIND","","",null,null],[17,"_SC_2_C_DEV","","",null,null],[17,"_SC_2_FORT_DEV","","",null,null],[17,"_SC_2_FORT_RUN","","",null,null],[17,"_SC_2_SW_DEV","","",null,null],[17,"_SC_2_LOCALEDEF","","",null,null],[17,"_SC_UIO_MAXIOV","","",null,null],[17,"_SC_IOV_MAX","","",null,null],[17,"_SC_THREADS","","",null,null],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",null,null],[17,"_SC_GETGR_R_SIZE_MAX","","",null,null],[17,"_SC_GETPW_R_SIZE_MAX","","",null,null],[17,"_SC_LOGIN_NAME_MAX","","",null,null],[17,"_SC_TTY_NAME_MAX","","",null,null],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",null,null],[17,"_SC_THREAD_KEYS_MAX","","",null,null],[17,"_SC_THREAD_STACK_MIN","","",null,null],[17,"_SC_THREAD_THREADS_MAX","","",null,null],[17,"_SC_THREAD_ATTR_STACKADDR","","",null,null],[17,"_SC_THREAD_ATTR_STACKSIZE","","",null,null],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_THREAD_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_PRIO_PROTECT","","",null,null],[17,"_SC_THREAD_PROCESS_SHARED","","",null,null],[17,"_SC_NPROCESSORS_CONF","","",null,null],[17,"_SC_NPROCESSORS_ONLN","","",null,null],[17,"_SC_PHYS_PAGES","","",null,null],[17,"_SC_AVPHYS_PAGES","","",null,null],[17,"_SC_ATEXIT_MAX","","",null,null],[17,"_SC_PASS_MAX","","",null,null],[17,"_SC_XOPEN_VERSION","","",null,null],[17,"_SC_XOPEN_XCU_VERSION","","",null,null],[17,"_SC_XOPEN_UNIX","","",null,null],[17,"_SC_XOPEN_CRYPT","","",null,null],[17,"_SC_XOPEN_ENH_I18N","","",null,null],[17,"_SC_XOPEN_SHM","","",null,null],[17,"_SC_2_CHAR_TERM","","",null,null],[17,"_SC_2_UPE","","",null,null],[17,"_SC_XOPEN_XPG2","","",null,null],[17,"_SC_XOPEN_XPG3","","",null,null],[17,"_SC_XOPEN_XPG4","","",null,null],[17,"_SC_NZERO","","",null,null],[17,"_SC_XBS5_ILP32_OFF32","","",null,null],[17,"_SC_XBS5_ILP32_OFFBIG","","",null,null],[17,"_SC_XBS5_LP64_OFF64","","",null,null],[17,"_SC_XBS5_LPBIG_OFFBIG","","",null,null],[17,"_SC_XOPEN_LEGACY","","",null,null],[17,"_SC_XOPEN_REALTIME","","",null,null],[17,"_SC_XOPEN_REALTIME_THREADS","","",null,null],[17,"_SC_ADVISORY_INFO","","",null,null],[17,"_SC_BARRIERS","","",null,null],[17,"_SC_CLOCK_SELECTION","","",null,null],[17,"_SC_CPUTIME","","",null,null],[17,"_SC_THREAD_CPUTIME","","",null,null],[17,"_SC_MONOTONIC_CLOCK","","",null,null],[17,"_SC_READER_WRITER_LOCKS","","",null,null],[17,"_SC_SPIN_LOCKS","","",null,null],[17,"_SC_REGEXP","","",null,null],[17,"_SC_SHELL","","",null,null],[17,"_SC_SPAWN","","",null,null],[17,"_SC_SPORADIC_SERVER","","",null,null],[17,"_SC_THREAD_SPORADIC_SERVER","","",null,null],[17,"_SC_TIMEOUTS","","",null,null],[17,"_SC_TYPED_MEMORY_OBJECTS","","",null,null],[17,"_SC_2_PBS","","",null,null],[17,"_SC_2_PBS_ACCOUNTING","","",null,null],[17,"_SC_2_PBS_LOCATE","","",null,null],[17,"_SC_2_PBS_MESSAGE","","",null,null],[17,"_SC_2_PBS_TRACK","","",null,null],[17,"_SC_SYMLOOP_MAX","","",null,null],[17,"_SC_STREAMS","","",null,null],[17,"_SC_2_PBS_CHECKPOINT","","",null,null],[17,"_SC_V6_ILP32_OFF32","","",null,null],[17,"_SC_V6_ILP32_OFFBIG","","",null,null],[17,"_SC_V6_LP64_OFF64","","",null,null],[17,"_SC_V6_LPBIG_OFFBIG","","",null,null],[17,"_SC_HOST_NAME_MAX","","",null,null],[17,"_SC_TRACE","","",null,null],[17,"_SC_TRACE_EVENT_FILTER","","",null,null],[17,"_SC_TRACE_INHERIT","","",null,null],[17,"_SC_TRACE_LOG","","",null,null],[17,"_SC_IPV6","","",null,null],[17,"_SC_RAW_SOCKETS","","",null,null],[17,"_SC_V7_ILP32_OFF32","","",null,null],[17,"_SC_V7_ILP32_OFFBIG","","",null,null],[17,"_SC_V7_LP64_OFF64","","",null,null],[17,"_SC_V7_LPBIG_OFFBIG","","",null,null],[17,"_SC_SS_REPL_MAX","","",null,null],[17,"_SC_TRACE_EVENT_NAME_MAX","","",null,null],[17,"_SC_TRACE_NAME_MAX","","",null,null],[17,"_SC_TRACE_SYS_MAX","","",null,null],[17,"_SC_TRACE_USER_EVENT_MAX","","",null,null],[17,"_SC_XOPEN_STREAMS","","",null,null],[17,"_SC_THREAD_ROBUST_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_ROBUST_PRIO_PROTECT","","",null,null],[17,"RLIM_SAVED_MAX","","",null,null],[17,"RLIM_SAVED_CUR","","",null,null],[17,"GLOB_ERR","","",null,null],[17,"GLOB_MARK","","",null,null],[17,"GLOB_NOSORT","","",null,null],[17,"GLOB_DOOFFS","","",null,null],[17,"GLOB_NOCHECK","","",null,null],[17,"GLOB_APPEND","","",null,null],[17,"GLOB_NOESCAPE","","",null,null],[17,"GLOB_NOSPACE","","",null,null],[17,"GLOB_ABORTED","","",null,null],[17,"GLOB_NOMATCH","","",null,null],[17,"POSIX_MADV_NORMAL","","",null,null],[17,"POSIX_MADV_RANDOM","","",null,null],[17,"POSIX_MADV_SEQUENTIAL","","",null,null],[17,"POSIX_MADV_WILLNEED","","",null,null],[17,"S_IEXEC","","",null,null],[17,"S_IWRITE","","",null,null],[17,"S_IREAD","","",null,null],[17,"F_LOCK","","",null,null],[17,"F_TEST","","",null,null],[17,"F_TLOCK","","",null,null],[17,"F_ULOCK","","",null,null],[17,"IFF_LOWER_UP","","",null,null],[17,"IFF_DORMANT","","",null,null],[17,"IFF_ECHO","","",null,null],[17,"TUN_READQ_SIZE","","",null,null],[17,"TUN_TUN_DEV","","",null,null],[17,"TUN_TAP_DEV","","",null,null],[17,"TUN_TYPE_MASK","","",null,null],[17,"IFF_TUN","","",null,null],[17,"IFF_TAP","","",null,null],[17,"IFF_NO_PI","","",null,null],[17,"IFF_ONE_QUEUE","","",null,null],[17,"IFF_VNET_HDR","","",null,null],[17,"IFF_TUN_EXCL","","",null,null],[17,"IFF_MULTI_QUEUE","","",null,null],[17,"IFF_ATTACH_QUEUE","","",null,null],[17,"IFF_DETACH_QUEUE","","",null,null],[17,"IFF_PERSIST","","",null,null],[17,"IFF_NOFILTER","","",null,null],[17,"ST_RDONLY","","",null,null],[17,"ST_NOSUID","","",null,null],[17,"ST_NODEV","","",null,null],[17,"ST_NOEXEC","","",null,null],[17,"ST_SYNCHRONOUS","","",null,null],[17,"ST_MANDLOCK","","",null,null],[17,"ST_WRITE","","",null,null],[17,"ST_APPEND","","",null,null],[17,"ST_IMMUTABLE","","",null,null],[17,"ST_NOATIME","","",null,null],[17,"ST_NODIRATIME","","",null,null],[17,"RTLD_NEXT","","",null,null],[17,"RTLD_DEFAULT","","",null,null],[17,"RTLD_NODELETE","","",null,null],[17,"RTLD_NOW","","",null,null],[17,"TCP_MD5SIG","","",null,null],[17,"PTHREAD_MUTEX_INITIALIZER","","",null,null],[17,"PTHREAD_COND_INITIALIZER","","",null,null],[17,"PTHREAD_RWLOCK_INITIALIZER","","",null,null],[17,"PTHREAD_MUTEX_NORMAL","","",null,null],[17,"PTHREAD_MUTEX_RECURSIVE","","",null,null],[17,"PTHREAD_MUTEX_ERRORCHECK","","",null,null],[17,"PTHREAD_MUTEX_DEFAULT","","",null,null],[17,"PTHREAD_PROCESS_PRIVATE","","",null,null],[17,"PTHREAD_PROCESS_SHARED","","",null,null],[17,"__SIZEOF_PTHREAD_COND_T","","",null,null],[17,"RENAME_NOREPLACE","","",null,null],[17,"RENAME_EXCHANGE","","",null,null],[17,"RENAME_WHITEOUT","","",null,null],[17,"SCHED_OTHER","","",null,null],[17,"SCHED_FIFO","","",null,null],[17,"SCHED_RR","","",null,null],[17,"SCHED_BATCH","","",null,null],[17,"SCHED_IDLE","","",null,null],[17,"IPPROTO_HOPOPTS","","Hop-by-hop option header",null,null],[17,"IPPROTO_IGMP","","group mgmt protocol",null,null],[17,"IPPROTO_IPIP","","for compatibility",null,null],[17,"IPPROTO_EGP","","exterior gateway protocol",null,null],[17,"IPPROTO_PUP","","pup",null,null],[17,"IPPROTO_IDP","","xns idp",null,null],[17,"IPPROTO_TP","","tp-4 w/ class negotiation",null,null],[17,"IPPROTO_DCCP","","DCCP",null,null],[17,"IPPROTO_ROUTING","","IP6 routing header",null,null],[17,"IPPROTO_FRAGMENT","","IP6 fragmentation header",null,null],[17,"IPPROTO_RSVP","","resource reservation",null,null],[17,"IPPROTO_GRE","","General Routing Encap.",null,null],[17,"IPPROTO_ESP","","IP6 Encap Sec. Payload",null,null],[17,"IPPROTO_AH","","IP6 Auth Header",null,null],[17,"IPPROTO_NONE","","IP6 no next header",null,null],[17,"IPPROTO_DSTOPTS","","IP6 destination option",null,null],[17,"IPPROTO_MTP","","",null,null],[17,"IPPROTO_BEETPH","","",null,null],[17,"IPPROTO_ENCAP","","encapsulation header",null,null],[17,"IPPROTO_PIM","","Protocol indep. multicast",null,null],[17,"IPPROTO_COMP","","IP Payload Comp. Protocol",null,null],[17,"IPPROTO_SCTP","","SCTP",null,null],[17,"IPPROTO_MH","","",null,null],[17,"IPPROTO_UDPLITE","","",null,null],[17,"IPPROTO_MPLS","","",null,null],[17,"IPPROTO_RAW","","raw IP packet",null,null],[17,"IPPROTO_MAX","","",null,null],[17,"AF_IB","","",null,null],[17,"AF_MPLS","","",null,null],[17,"AF_NFC","","",null,null],[17,"AF_VSOCK","","",null,null],[17,"PF_IB","","",null,null],[17,"PF_MPLS","","",null,null],[17,"PF_NFC","","",null,null],[17,"PF_VSOCK","","",null,null],[17,"IPC_PRIVATE","","",null,null],[17,"IPC_CREAT","","",null,null],[17,"IPC_EXCL","","",null,null],[17,"IPC_NOWAIT","","",null,null],[17,"IPC_RMID","","",null,null],[17,"IPC_SET","","",null,null],[17,"IPC_STAT","","",null,null],[17,"IPC_INFO","","",null,null],[17,"MSG_STAT","","",null,null],[17,"MSG_INFO","","",null,null],[17,"MSG_NOERROR","","",null,null],[17,"MSG_EXCEPT","","",null,null],[17,"MSG_COPY","","",null,null],[17,"SHM_R","","",null,null],[17,"SHM_W","","",null,null],[17,"SHM_RDONLY","","",null,null],[17,"SHM_RND","","",null,null],[17,"SHM_REMAP","","",null,null],[17,"SHM_EXEC","","",null,null],[17,"SHM_LOCK","","",null,null],[17,"SHM_UNLOCK","","",null,null],[17,"SHM_HUGETLB","","",null,null],[17,"SHM_NORESERVE","","",null,null],[17,"EPOLLRDHUP","","",null,null],[17,"EPOLLEXCLUSIVE","","",null,null],[17,"EPOLLONESHOT","","",null,null],[17,"QFMT_VFS_OLD","","",null,null],[17,"QFMT_VFS_V0","","",null,null],[17,"QFMT_VFS_V1","","",null,null],[17,"EFD_SEMAPHORE","","",null,null],[17,"LOG_NFACILITIES","","",null,null],[17,"SEM_FAILED","","",null,null],[17,"RB_AUTOBOOT","","",null,null],[17,"RB_HALT_SYSTEM","","",null,null],[17,"RB_ENABLE_CAD","","",null,null],[17,"RB_DISABLE_CAD","","",null,null],[17,"RB_POWER_OFF","","",null,null],[17,"RB_SW_SUSPEND","","",null,null],[17,"RB_KEXEC","","",null,null],[17,"AI_PASSIVE","","",null,null],[17,"AI_CANONNAME","","",null,null],[17,"AI_NUMERICHOST","","",null,null],[17,"AI_V4MAPPED","","",null,null],[17,"AI_ALL","","",null,null],[17,"AI_ADDRCONFIG","","",null,null],[17,"AI_NUMERICSERV","","",null,null],[17,"EAI_BADFLAGS","","",null,null],[17,"EAI_NONAME","","",null,null],[17,"EAI_AGAIN","","",null,null],[17,"EAI_FAIL","","",null,null],[17,"EAI_NODATA","","",null,null],[17,"EAI_FAMILY","","",null,null],[17,"EAI_SOCKTYPE","","",null,null],[17,"EAI_SERVICE","","",null,null],[17,"EAI_MEMORY","","",null,null],[17,"EAI_SYSTEM","","",null,null],[17,"EAI_OVERFLOW","","",null,null],[17,"NI_NUMERICHOST","","",null,null],[17,"NI_NUMERICSERV","","",null,null],[17,"NI_NOFQDN","","",null,null],[17,"NI_NAMEREQD","","",null,null],[17,"NI_DGRAM","","",null,null],[17,"SYNC_FILE_RANGE_WAIT_BEFORE","","",null,null],[17,"SYNC_FILE_RANGE_WRITE","","",null,null],[17,"SYNC_FILE_RANGE_WAIT_AFTER","","",null,null],[17,"AIO_CANCELED","","",null,null],[17,"AIO_NOTCANCELED","","",null,null],[17,"AIO_ALLDONE","","",null,null],[17,"LIO_READ","","",null,null],[17,"LIO_WRITE","","",null,null],[17,"LIO_NOP","","",null,null],[17,"LIO_WAIT","","",null,null],[17,"LIO_NOWAIT","","",null,null],[17,"MREMAP_MAYMOVE","","",null,null],[17,"MREMAP_FIXED","","",null,null],[17,"PR_SET_PDEATHSIG","","",null,null],[17,"PR_GET_PDEATHSIG","","",null,null],[17,"PR_GET_DUMPABLE","","",null,null],[17,"PR_SET_DUMPABLE","","",null,null],[17,"PR_GET_UNALIGN","","",null,null],[17,"PR_SET_UNALIGN","","",null,null],[17,"PR_UNALIGN_NOPRINT","","",null,null],[17,"PR_UNALIGN_SIGBUS","","",null,null],[17,"PR_GET_KEEPCAPS","","",null,null],[17,"PR_SET_KEEPCAPS","","",null,null],[17,"PR_GET_FPEMU","","",null,null],[17,"PR_SET_FPEMU","","",null,null],[17,"PR_FPEMU_NOPRINT","","",null,null],[17,"PR_FPEMU_SIGFPE","","",null,null],[17,"PR_GET_FPEXC","","",null,null],[17,"PR_SET_FPEXC","","",null,null],[17,"PR_FP_EXC_SW_ENABLE","","",null,null],[17,"PR_FP_EXC_DIV","","",null,null],[17,"PR_FP_EXC_OVF","","",null,null],[17,"PR_FP_EXC_UND","","",null,null],[17,"PR_FP_EXC_RES","","",null,null],[17,"PR_FP_EXC_INV","","",null,null],[17,"PR_FP_EXC_DISABLED","","",null,null],[17,"PR_FP_EXC_NONRECOV","","",null,null],[17,"PR_FP_EXC_ASYNC","","",null,null],[17,"PR_FP_EXC_PRECISE","","",null,null],[17,"PR_GET_TIMING","","",null,null],[17,"PR_SET_TIMING","","",null,null],[17,"PR_TIMING_STATISTICAL","","",null,null],[17,"PR_TIMING_TIMESTAMP","","",null,null],[17,"PR_SET_NAME","","",null,null],[17,"PR_GET_NAME","","",null,null],[17,"PR_GET_ENDIAN","","",null,null],[17,"PR_SET_ENDIAN","","",null,null],[17,"PR_ENDIAN_BIG","","",null,null],[17,"PR_ENDIAN_LITTLE","","",null,null],[17,"PR_ENDIAN_PPC_LITTLE","","",null,null],[17,"PR_GET_SECCOMP","","",null,null],[17,"PR_SET_SECCOMP","","",null,null],[17,"PR_CAPBSET_READ","","",null,null],[17,"PR_CAPBSET_DROP","","",null,null],[17,"PR_GET_TSC","","",null,null],[17,"PR_SET_TSC","","",null,null],[17,"PR_TSC_ENABLE","","",null,null],[17,"PR_TSC_SIGSEGV","","",null,null],[17,"PR_GET_SECUREBITS","","",null,null],[17,"PR_SET_SECUREBITS","","",null,null],[17,"PR_SET_TIMERSLACK","","",null,null],[17,"PR_GET_TIMERSLACK","","",null,null],[17,"PR_TASK_PERF_EVENTS_DISABLE","","",null,null],[17,"PR_TASK_PERF_EVENTS_ENABLE","","",null,null],[17,"PR_MCE_KILL","","",null,null],[17,"PR_MCE_KILL_CLEAR","","",null,null],[17,"PR_MCE_KILL_SET","","",null,null],[17,"PR_MCE_KILL_LATE","","",null,null],[17,"PR_MCE_KILL_EARLY","","",null,null],[17,"PR_MCE_KILL_DEFAULT","","",null,null],[17,"PR_MCE_KILL_GET","","",null,null],[17,"PR_SET_MM","","",null,null],[17,"PR_SET_MM_START_CODE","","",null,null],[17,"PR_SET_MM_END_CODE","","",null,null],[17,"PR_SET_MM_START_DATA","","",null,null],[17,"PR_SET_MM_END_DATA","","",null,null],[17,"PR_SET_MM_START_STACK","","",null,null],[17,"PR_SET_MM_START_BRK","","",null,null],[17,"PR_SET_MM_BRK","","",null,null],[17,"PR_SET_MM_ARG_START","","",null,null],[17,"PR_SET_MM_ARG_END","","",null,null],[17,"PR_SET_MM_ENV_START","","",null,null],[17,"PR_SET_MM_ENV_END","","",null,null],[17,"PR_SET_MM_AUXV","","",null,null],[17,"PR_SET_MM_EXE_FILE","","",null,null],[17,"PR_SET_MM_MAP","","",null,null],[17,"PR_SET_MM_MAP_SIZE","","",null,null],[17,"PR_SET_PTRACER","","",null,null],[17,"PR_SET_CHILD_SUBREAPER","","",null,null],[17,"PR_GET_CHILD_SUBREAPER","","",null,null],[17,"PR_SET_NO_NEW_PRIVS","","",null,null],[17,"PR_GET_NO_NEW_PRIVS","","",null,null],[17,"PR_GET_TID_ADDRESS","","",null,null],[17,"PR_SET_THP_DISABLE","","",null,null],[17,"PR_GET_THP_DISABLE","","",null,null],[17,"PR_MPX_ENABLE_MANAGEMENT","","",null,null],[17,"PR_MPX_DISABLE_MANAGEMENT","","",null,null],[17,"PR_SET_FP_MODE","","",null,null],[17,"PR_GET_FP_MODE","","",null,null],[17,"PR_FP_MODE_FR","","",null,null],[17,"PR_FP_MODE_FRE","","",null,null],[17,"PR_CAP_AMBIENT","","",null,null],[17,"PR_CAP_AMBIENT_IS_SET","","",null,null],[17,"PR_CAP_AMBIENT_RAISE","","",null,null],[17,"PR_CAP_AMBIENT_LOWER","","",null,null],[17,"PR_CAP_AMBIENT_CLEAR_ALL","","",null,null],[17,"GRND_NONBLOCK","","",null,null],[17,"GRND_RANDOM","","",null,null],[17,"SECCOMP_MODE_DISABLED","","",null,null],[17,"SECCOMP_MODE_STRICT","","",null,null],[17,"SECCOMP_MODE_FILTER","","",null,null],[17,"ITIMER_REAL","","",null,null],[17,"ITIMER_VIRTUAL","","",null,null],[17,"ITIMER_PROF","","",null,null],[17,"TFD_CLOEXEC","","",null,null],[17,"TFD_NONBLOCK","","",null,null],[17,"TFD_TIMER_ABSTIME","","",null,null],[17,"XATTR_CREATE","","",null,null],[17,"XATTR_REPLACE","","",null,null],[17,"_POSIX_VDISABLE","","",null,null],[17,"FALLOC_FL_KEEP_SIZE","","",null,null],[17,"FALLOC_FL_PUNCH_HOLE","","",null,null],[17,"FALLOC_FL_COLLAPSE_RANGE","","",null,null],[17,"FALLOC_FL_ZERO_RANGE","","",null,null],[17,"FALLOC_FL_INSERT_RANGE","","",null,null],[17,"FALLOC_FL_UNSHARE_RANGE","","",null,null],[17,"ENOATTR","","",null,null],[17,"SO_ORIGINAL_DST","","",null,null],[17,"IUTF8","","",null,null],[17,"CMSPAR","","",null,null],[17,"MFD_CLOEXEC","","",null,null],[17,"MFD_ALLOW_SEALING","","",null,null],[17,"PT_NULL","","",null,null],[17,"PT_LOAD","","",null,null],[17,"PT_DYNAMIC","","",null,null],[17,"PT_INTERP","","",null,null],[17,"PT_NOTE","","",null,null],[17,"PT_SHLIB","","",null,null],[17,"PT_PHDR","","",null,null],[17,"PT_TLS","","",null,null],[17,"PT_NUM","","",null,null],[17,"PT_LOOS","","",null,null],[17,"PT_GNU_EH_FRAME","","",null,null],[17,"PT_GNU_STACK","","",null,null],[17,"PT_GNU_RELRO","","",null,null],[17,"ETH_ALEN","","",null,null],[17,"ETH_HLEN","","",null,null],[17,"ETH_ZLEN","","",null,null],[17,"ETH_DATA_LEN","","",null,null],[17,"ETH_FRAME_LEN","","",null,null],[17,"ETH_FCS_LEN","","",null,null],[17,"ETH_P_LOOP","","",null,null],[17,"ETH_P_PUP","","",null,null],[17,"ETH_P_PUPAT","","",null,null],[17,"ETH_P_IP","","",null,null],[17,"ETH_P_X25","","",null,null],[17,"ETH_P_ARP","","",null,null],[17,"ETH_P_BPQ","","",null,null],[17,"ETH_P_IEEEPUP","","",null,null],[17,"ETH_P_IEEEPUPAT","","",null,null],[17,"ETH_P_BATMAN","","",null,null],[17,"ETH_P_DEC","","",null,null],[17,"ETH_P_DNA_DL","","",null,null],[17,"ETH_P_DNA_RC","","",null,null],[17,"ETH_P_DNA_RT","","",null,null],[17,"ETH_P_LAT","","",null,null],[17,"ETH_P_DIAG","","",null,null],[17,"ETH_P_CUST","","",null,null],[17,"ETH_P_SCA","","",null,null],[17,"ETH_P_TEB","","",null,null],[17,"ETH_P_RARP","","",null,null],[17,"ETH_P_ATALK","","",null,null],[17,"ETH_P_AARP","","",null,null],[17,"ETH_P_8021Q","","",null,null],[17,"ETH_P_IPX","","",null,null],[17,"ETH_P_IPV6","","",null,null],[17,"ETH_P_PAUSE","","",null,null],[17,"ETH_P_SLOW","","",null,null],[17,"ETH_P_WCCP","","",null,null],[17,"ETH_P_MPLS_UC","","",null,null],[17,"ETH_P_MPLS_MC","","",null,null],[17,"ETH_P_ATMMPOA","","",null,null],[17,"ETH_P_PPP_DISC","","",null,null],[17,"ETH_P_PPP_SES","","",null,null],[17,"ETH_P_LINK_CTL","","",null,null],[17,"ETH_P_ATMFATE","","",null,null],[17,"ETH_P_PAE","","",null,null],[17,"ETH_P_AOE","","",null,null],[17,"ETH_P_8021AD","","",null,null],[17,"ETH_P_802_EX1","","",null,null],[17,"ETH_P_TIPC","","",null,null],[17,"ETH_P_MACSEC","","",null,null],[17,"ETH_P_8021AH","","",null,null],[17,"ETH_P_MVRP","","",null,null],[17,"ETH_P_1588","","",null,null],[17,"ETH_P_PRP","","",null,null],[17,"ETH_P_FCOE","","",null,null],[17,"ETH_P_TDLS","","",null,null],[17,"ETH_P_FIP","","",null,null],[17,"ETH_P_80221","","",null,null],[17,"ETH_P_LOOPBACK","","",null,null],[17,"ETH_P_QINQ1","","",null,null],[17,"ETH_P_QINQ2","","",null,null],[17,"ETH_P_QINQ3","","",null,null],[17,"ETH_P_EDSA","","",null,null],[17,"ETH_P_AF_IUCV","","",null,null],[17,"ETH_P_802_3_MIN","","",null,null],[17,"ETH_P_802_3","","",null,null],[17,"ETH_P_AX25","","",null,null],[17,"ETH_P_ALL","","",null,null],[17,"ETH_P_802_2","","",null,null],[17,"ETH_P_SNAP","","",null,null],[17,"ETH_P_DDCMP","","",null,null],[17,"ETH_P_WAN_PPP","","",null,null],[17,"ETH_P_PPP_MP","","",null,null],[17,"ETH_P_LOCALTALK","","",null,null],[17,"ETH_P_CANFD","","",null,null],[17,"ETH_P_PPPTALK","","",null,null],[17,"ETH_P_TR_802_2","","",null,null],[17,"ETH_P_MOBITEX","","",null,null],[17,"ETH_P_CONTROL","","",null,null],[17,"ETH_P_IRDA","","",null,null],[17,"ETH_P_ECONET","","",null,null],[17,"ETH_P_HDLC","","",null,null],[17,"ETH_P_ARCNET","","",null,null],[17,"ETH_P_DSA","","",null,null],[17,"ETH_P_TRAILER","","",null,null],[17,"ETH_P_PHONET","","",null,null],[17,"ETH_P_IEEE802154","","",null,null],[17,"ETH_P_CAIF","","",null,null],[17,"__UT_LINESIZE","","",null,null],[17,"__UT_NAMESIZE","","",null,null],[17,"__UT_HOSTSIZE","","",null,null],[17,"EMPTY","","",null,null],[17,"RUN_LVL","","",null,null],[17,"BOOT_TIME","","",null,null],[17,"NEW_TIME","","",null,null],[17,"OLD_TIME","","",null,null],[17,"INIT_PROCESS","","",null,null],[17,"LOGIN_PROCESS","","",null,null],[17,"USER_PROCESS","","",null,null],[17,"DEAD_PROCESS","","",null,null],[17,"ACCOUNTING","","",null,null],[17,"RLIMIT_RSS","","",null,null],[17,"RLIMIT_AS","","",null,null],[17,"RLIMIT_MEMLOCK","","",null,null],[17,"RLIM_INFINITY","","",null,null],[17,"RLIMIT_RTTIME","","",null,null],[17,"RLIMIT_NLIMITS","","",null,null],[17,"SOCK_NONBLOCK","","",null,null],[17,"SOL_RXRPC","","",null,null],[17,"SOL_PPPOL2TP","","",null,null],[17,"SOL_BLUETOOTH","","",null,null],[17,"SOL_PNPIPE","","",null,null],[17,"SOL_RDS","","",null,null],[17,"SOL_IUCV","","",null,null],[17,"SOL_CAIF","","",null,null],[17,"SOL_ALG","","",null,null],[17,"SOL_NFC","","",null,null],[17,"MSG_TRYHARD","","",null,null],[17,"LC_PAPER","","",null,null],[17,"LC_NAME","","",null,null],[17,"LC_ADDRESS","","",null,null],[17,"LC_TELEPHONE","","",null,null],[17,"LC_MEASUREMENT","","",null,null],[17,"LC_IDENTIFICATION","","",null,null],[17,"LC_PAPER_MASK","","",null,null],[17,"LC_NAME_MASK","","",null,null],[17,"LC_ADDRESS_MASK","","",null,null],[17,"LC_TELEPHONE_MASK","","",null,null],[17,"LC_MEASUREMENT_MASK","","",null,null],[17,"LC_IDENTIFICATION_MASK","","",null,null],[17,"LC_ALL_MASK","","",null,null],[17,"MAP_ANON","","",null,null],[17,"MAP_ANONYMOUS","","",null,null],[17,"MAP_DENYWRITE","","",null,null],[17,"MAP_EXECUTABLE","","",null,null],[17,"MAP_POPULATE","","",null,null],[17,"MAP_NONBLOCK","","",null,null],[17,"MAP_STACK","","",null,null],[17,"ENOTSUP","","",null,null],[17,"EUCLEAN","","",null,null],[17,"ENOTNAM","","",null,null],[17,"ENAVAIL","","",null,null],[17,"EISNAM","","",null,null],[17,"EREMOTEIO","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SOCK_SEQPACKET","","",null,null],[17,"SOCK_DCCP","","",null,null],[17,"SOCK_PACKET","","",null,null],[17,"TCP_COOKIE_TRANSACTIONS","","",null,null],[17,"TCP_THIN_LINEAR_TIMEOUTS","","",null,null],[17,"TCP_THIN_DUPACK","","",null,null],[17,"TCP_USER_TIMEOUT","","",null,null],[17,"TCP_REPAIR","","",null,null],[17,"TCP_REPAIR_QUEUE","","",null,null],[17,"TCP_QUEUE_SEQ","","",null,null],[17,"TCP_REPAIR_OPTIONS","","",null,null],[17,"TCP_FASTOPEN","","",null,null],[17,"TCP_TIMESTAMP","","",null,null],[17,"DCCP_SOCKOPT_PACKET_SIZE","","",null,null],[17,"DCCP_SOCKOPT_SERVICE","","",null,null],[17,"DCCP_SOCKOPT_CHANGE_L","","",null,null],[17,"DCCP_SOCKOPT_CHANGE_R","","",null,null],[17,"DCCP_SOCKOPT_GET_CUR_MPS","","",null,null],[17,"DCCP_SOCKOPT_SERVER_TIMEWAIT","","",null,null],[17,"DCCP_SOCKOPT_SEND_CSCOV","","",null,null],[17,"DCCP_SOCKOPT_RECV_CSCOV","","",null,null],[17,"DCCP_SOCKOPT_AVAILABLE_CCIDS","","",null,null],[17,"DCCP_SOCKOPT_CCID","","",null,null],[17,"DCCP_SOCKOPT_TX_CCID","","",null,null],[17,"DCCP_SOCKOPT_RX_CCID","","",null,null],[17,"DCCP_SOCKOPT_QPOLICY_ID","","",null,null],[17,"DCCP_SOCKOPT_QPOLICY_TXQLEN","","",null,null],[17,"DCCP_SOCKOPT_CCID_RX_INFO","","",null,null],[17,"DCCP_SOCKOPT_CCID_TX_INFO","","",null,null],[17,"DCCP_SERVICE_LIST_MAX_LEN","","maximum number of services provided on the same listening port",null,null],[17,"SIGTTIN","","",null,null],[17,"SIGTTOU","","",null,null],[17,"SIGXCPU","","",null,null],[17,"SIGXFSZ","","",null,null],[17,"SIGVTALRM","","",null,null],[17,"SIGPROF","","",null,null],[17,"SIGWINCH","","",null,null],[17,"SIGEV_THREAD_ID","","",null,null],[17,"BUFSIZ","","",null,null],[17,"TMP_MAX","","",null,null],[17,"FOPEN_MAX","","",null,null],[17,"POSIX_FADV_DONTNEED","","",null,null],[17,"POSIX_FADV_NOREUSE","","",null,null],[17,"POSIX_MADV_DONTNEED","","",null,null],[17,"_SC_EQUIV_CLASS_MAX","","",null,null],[17,"_SC_CHARCLASS_NAME_MAX","","",null,null],[17,"_SC_PII","","",null,null],[17,"_SC_PII_XTI","","",null,null],[17,"_SC_PII_SOCKET","","",null,null],[17,"_SC_PII_INTERNET","","",null,null],[17,"_SC_PII_OSI","","",null,null],[17,"_SC_POLL","","",null,null],[17,"_SC_SELECT","","",null,null],[17,"_SC_PII_INTERNET_STREAM","","",null,null],[17,"_SC_PII_INTERNET_DGRAM","","",null,null],[17,"_SC_PII_OSI_COTS","","",null,null],[17,"_SC_PII_OSI_CLTS","","",null,null],[17,"_SC_PII_OSI_M","","",null,null],[17,"_SC_T_IOV_MAX","","",null,null],[17,"_SC_2_C_VERSION","","",null,null],[17,"_SC_CHAR_BIT","","",null,null],[17,"_SC_CHAR_MAX","","",null,null],[17,"_SC_CHAR_MIN","","",null,null],[17,"_SC_INT_MAX","","",null,null],[17,"_SC_INT_MIN","","",null,null],[17,"_SC_LONG_BIT","","",null,null],[17,"_SC_WORD_BIT","","",null,null],[17,"_SC_MB_LEN_MAX","","",null,null],[17,"_SC_SSIZE_MAX","","",null,null],[17,"_SC_SCHAR_MAX","","",null,null],[17,"_SC_SCHAR_MIN","","",null,null],[17,"_SC_SHRT_MAX","","",null,null],[17,"_SC_SHRT_MIN","","",null,null],[17,"_SC_UCHAR_MAX","","",null,null],[17,"_SC_UINT_MAX","","",null,null],[17,"_SC_ULONG_MAX","","",null,null],[17,"_SC_USHRT_MAX","","",null,null],[17,"_SC_NL_ARGMAX","","",null,null],[17,"_SC_NL_LANGMAX","","",null,null],[17,"_SC_NL_MSGMAX","","",null,null],[17,"_SC_NL_NMAX","","",null,null],[17,"_SC_NL_SETMAX","","",null,null],[17,"_SC_NL_TEXTMAX","","",null,null],[17,"_SC_BASE","","",null,null],[17,"_SC_C_LANG_SUPPORT","","",null,null],[17,"_SC_C_LANG_SUPPORT_R","","",null,null],[17,"_SC_DEVICE_IO","","",null,null],[17,"_SC_DEVICE_SPECIFIC","","",null,null],[17,"_SC_DEVICE_SPECIFIC_R","","",null,null],[17,"_SC_FD_MGMT","","",null,null],[17,"_SC_FIFO","","",null,null],[17,"_SC_PIPE","","",null,null],[17,"_SC_FILE_ATTRIBUTES","","",null,null],[17,"_SC_FILE_LOCKING","","",null,null],[17,"_SC_FILE_SYSTEM","","",null,null],[17,"_SC_MULTI_PROCESS","","",null,null],[17,"_SC_SINGLE_PROCESS","","",null,null],[17,"_SC_NETWORKING","","",null,null],[17,"_SC_REGEX_VERSION","","",null,null],[17,"_SC_SIGNALS","","",null,null],[17,"_SC_SYSTEM_DATABASE","","",null,null],[17,"_SC_SYSTEM_DATABASE_R","","",null,null],[17,"_SC_USER_GROUPS","","",null,null],[17,"_SC_USER_GROUPS_R","","",null,null],[17,"_SC_LEVEL1_ICACHE_SIZE","","",null,null],[17,"_SC_LEVEL1_ICACHE_ASSOC","","",null,null],[17,"_SC_LEVEL1_ICACHE_LINESIZE","","",null,null],[17,"_SC_LEVEL1_DCACHE_SIZE","","",null,null],[17,"_SC_LEVEL1_DCACHE_ASSOC","","",null,null],[17,"_SC_LEVEL1_DCACHE_LINESIZE","","",null,null],[17,"_SC_LEVEL2_CACHE_SIZE","","",null,null],[17,"_SC_LEVEL2_CACHE_ASSOC","","",null,null],[17,"_SC_LEVEL2_CACHE_LINESIZE","","",null,null],[17,"_SC_LEVEL3_CACHE_SIZE","","",null,null],[17,"_SC_LEVEL3_CACHE_ASSOC","","",null,null],[17,"_SC_LEVEL3_CACHE_LINESIZE","","",null,null],[17,"_SC_LEVEL4_CACHE_SIZE","","",null,null],[17,"_SC_LEVEL4_CACHE_ASSOC","","",null,null],[17,"_SC_LEVEL4_CACHE_LINESIZE","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"ST_RELATIME","","",null,null],[17,"NI_MAXHOST","","",null,null],[17,"ADFS_SUPER_MAGIC","","",null,null],[17,"AFFS_SUPER_MAGIC","","",null,null],[17,"CODA_SUPER_MAGIC","","",null,null],[17,"CRAMFS_MAGIC","","",null,null],[17,"EFS_SUPER_MAGIC","","",null,null],[17,"EXT2_SUPER_MAGIC","","",null,null],[17,"EXT3_SUPER_MAGIC","","",null,null],[17,"EXT4_SUPER_MAGIC","","",null,null],[17,"HPFS_SUPER_MAGIC","","",null,null],[17,"HUGETLBFS_MAGIC","","",null,null],[17,"ISOFS_SUPER_MAGIC","","",null,null],[17,"JFFS2_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC2","","",null,null],[17,"MINIX2_SUPER_MAGIC","","",null,null],[17,"MINIX2_SUPER_MAGIC2","","",null,null],[17,"MSDOS_SUPER_MAGIC","","",null,null],[17,"NCP_SUPER_MAGIC","","",null,null],[17,"NFS_SUPER_MAGIC","","",null,null],[17,"OPENPROM_SUPER_MAGIC","","",null,null],[17,"PROC_SUPER_MAGIC","","",null,null],[17,"QNX4_SUPER_MAGIC","","",null,null],[17,"REISERFS_SUPER_MAGIC","","",null,null],[17,"SMB_SUPER_MAGIC","","",null,null],[17,"TMPFS_MAGIC","","",null,null],[17,"USBDEVICE_SUPER_MAGIC","","",null,null],[17,"VEOF","","",null,null],[17,"CPU_SETSIZE","","",null,null],[17,"PTRACE_TRACEME","","",null,null],[17,"PTRACE_PEEKTEXT","","",null,null],[17,"PTRACE_PEEKDATA","","",null,null],[17,"PTRACE_PEEKUSER","","",null,null],[17,"PTRACE_POKETEXT","","",null,null],[17,"PTRACE_POKEDATA","","",null,null],[17,"PTRACE_POKEUSER","","",null,null],[17,"PTRACE_CONT","","",null,null],[17,"PTRACE_KILL","","",null,null],[17,"PTRACE_SINGLESTEP","","",null,null],[17,"PTRACE_ATTACH","","",null,null],[17,"PTRACE_SYSCALL","","",null,null],[17,"PTRACE_SETOPTIONS","","",null,null],[17,"PTRACE_GETEVENTMSG","","",null,null],[17,"PTRACE_GETSIGINFO","","",null,null],[17,"PTRACE_SETSIGINFO","","",null,null],[17,"PTRACE_GETREGSET","","",null,null],[17,"PTRACE_SETREGSET","","",null,null],[17,"PTRACE_SEIZE","","",null,null],[17,"PTRACE_INTERRUPT","","",null,null],[17,"PTRACE_LISTEN","","",null,null],[17,"PTRACE_PEEKSIGINFO","","",null,null],[17,"EPOLLWAKEUP","","",null,null],[17,"MAP_HUGETLB","","",null,null],[17,"SEEK_DATA","","",null,null],[17,"SEEK_HOLE","","",null,null],[17,"TCSANOW","","",null,null],[17,"TCSADRAIN","","",null,null],[17,"TCSAFLUSH","","",null,null],[17,"TIOCLINUX","","",null,null],[17,"TIOCGSERIAL","","",null,null],[17,"RTLD_DEEPBIND","","",null,null],[17,"RTLD_GLOBAL","","",null,null],[17,"RTLD_NOLOAD","","",null,null],[17,"LINUX_REBOOT_MAGIC1","","",null,null],[17,"LINUX_REBOOT_MAGIC2","","",null,null],[17,"LINUX_REBOOT_MAGIC2A","","",null,null],[17,"LINUX_REBOOT_MAGIC2B","","",null,null],[17,"LINUX_REBOOT_MAGIC2C","","",null,null],[17,"LINUX_REBOOT_CMD_RESTART","","",null,null],[17,"LINUX_REBOOT_CMD_HALT","","",null,null],[17,"LINUX_REBOOT_CMD_CAD_ON","","",null,null],[17,"LINUX_REBOOT_CMD_CAD_OFF","","",null,null],[17,"LINUX_REBOOT_CMD_POWER_OFF","","",null,null],[17,"LINUX_REBOOT_CMD_RESTART2","","",null,null],[17,"LINUX_REBOOT_CMD_SW_SUSPEND","","",null,null],[17,"LINUX_REBOOT_CMD_KEXEC","","",null,null],[17,"NETLINK_ROUTE","","",null,null],[17,"NETLINK_UNUSED","","",null,null],[17,"NETLINK_USERSOCK","","",null,null],[17,"NETLINK_FIREWALL","","",null,null],[17,"NETLINK_SOCK_DIAG","","",null,null],[17,"NETLINK_NFLOG","","",null,null],[17,"NETLINK_XFRM","","",null,null],[17,"NETLINK_SELINUX","","",null,null],[17,"NETLINK_ISCSI","","",null,null],[17,"NETLINK_AUDIT","","",null,null],[17,"NETLINK_FIB_LOOKUP","","",null,null],[17,"NETLINK_CONNECTOR","","",null,null],[17,"NETLINK_NETFILTER","","",null,null],[17,"NETLINK_IP6_FW","","",null,null],[17,"NETLINK_DNRTMSG","","",null,null],[17,"NETLINK_KOBJECT_UEVENT","","",null,null],[17,"NETLINK_GENERIC","","",null,null],[17,"NETLINK_SCSITRANSPORT","","",null,null],[17,"NETLINK_ECRYPTFS","","",null,null],[17,"NETLINK_RDMA","","",null,null],[17,"NETLINK_CRYPTO","","",null,null],[17,"NETLINK_INET_DIAG","","",null,null],[17,"MAX_LINKS","","",null,null],[17,"NLM_F_REQUEST","","",null,null],[17,"NLM_F_MULTI","","",null,null],[17,"NLM_F_ACK","","",null,null],[17,"NLM_F_ECHO","","",null,null],[17,"NLM_F_DUMP_INTR","","",null,null],[17,"NLM_F_DUMP_FILTERED","","",null,null],[17,"NLM_F_ROOT","","",null,null],[17,"NLM_F_MATCH","","",null,null],[17,"NLM_F_ATOMIC","","",null,null],[17,"NLM_F_DUMP","","",null,null],[17,"NLM_F_REPLACE","","",null,null],[17,"NLM_F_EXCL","","",null,null],[17,"NLM_F_CREATE","","",null,null],[17,"NLM_F_APPEND","","",null,null],[17,"NLMSG_NOOP","","",null,null],[17,"NLMSG_ERROR","","",null,null],[17,"NLMSG_DONE","","",null,null],[17,"NLMSG_OVERRUN","","",null,null],[17,"NLMSG_MIN_TYPE","","",null,null],[17,"NETLINK_ADD_MEMBERSHIP","","",null,null],[17,"NETLINK_DROP_MEMBERSHIP","","",null,null],[17,"NETLINK_PKTINFO","","",null,null],[17,"NETLINK_BROADCAST_ERROR","","",null,null],[17,"NETLINK_NO_ENOBUFS","","",null,null],[17,"NETLINK_RX_RING","","",null,null],[17,"NETLINK_TX_RING","","",null,null],[17,"NETLINK_LISTEN_ALL_NSID","","",null,null],[17,"NETLINK_LIST_MEMBERSHIPS","","",null,null],[17,"NETLINK_CAP_ACK","","",null,null],[17,"NLA_F_NESTED","","",null,null],[17,"NLA_F_NET_BYTEORDER","","",null,null],[17,"NLA_TYPE_MASK","","",null,null],[17,"TIOCM_LE","","",null,null],[17,"TIOCM_DTR","","",null,null],[17,"TIOCM_RTS","","",null,null],[17,"TIOCM_ST","","",null,null],[17,"TIOCM_SR","","",null,null],[17,"TIOCM_CTS","","",null,null],[17,"TIOCM_CAR","","",null,null],[17,"TIOCM_RNG","","",null,null],[17,"TIOCM_DSR","","",null,null],[17,"TIOCM_CD","","",null,null],[17,"TIOCM_RI","","",null,null],[17,"PTHREAD_STACK_MIN","","",null,null],[17,"__SIZEOF_PTHREAD_RWLOCKATTR_T","","",null,null],[17,"O_LARGEFILE","","",null,null],[17,"TIOCGSOFTCAR","","",null,null],[17,"TIOCSSOFTCAR","","",null,null],[17,"RLIMIT_NOFILE","","",null,null],[17,"RLIMIT_NPROC","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_SYNC","","",null,null],[17,"O_RSYNC","","",null,null],[17,"O_DSYNC","","",null,null],[17,"O_FSYNC","","",null,null],[17,"O_NOATIME","","",null,null],[17,"O_PATH","","",null,null],[17,"O_TMPFILE","","",null,null],[17,"MAP_GROWSDOWN","","",null,null],[17,"EDEADLK","","",null,null],[17,"ENAMETOOLONG","","",null,null],[17,"ENOLCK","","",null,null],[17,"ENOSYS","","",null,null],[17,"ENOTEMPTY","","",null,null],[17,"ELOOP","","",null,null],[17,"ENOMSG","","",null,null],[17,"EIDRM","","",null,null],[17,"ECHRNG","","",null,null],[17,"EL2NSYNC","","",null,null],[17,"EL3HLT","","",null,null],[17,"EL3RST","","",null,null],[17,"ELNRNG","","",null,null],[17,"EUNATCH","","",null,null],[17,"ENOCSI","","",null,null],[17,"EL2HLT","","",null,null],[17,"EBADE","","",null,null],[17,"EBADR","","",null,null],[17,"EXFULL","","",null,null],[17,"ENOANO","","",null,null],[17,"EBADRQC","","",null,null],[17,"EBADSLT","","",null,null],[17,"EMULTIHOP","","",null,null],[17,"EOVERFLOW","","",null,null],[17,"ENOTUNIQ","","",null,null],[17,"EBADFD","","",null,null],[17,"EBADMSG","","",null,null],[17,"EREMCHG","","",null,null],[17,"ELIBACC","","",null,null],[17,"ELIBBAD","","",null,null],[17,"ELIBSCN","","",null,null],[17,"ELIBMAX","","",null,null],[17,"ELIBEXEC","","",null,null],[17,"EILSEQ","","",null,null],[17,"ERESTART","","",null,null],[17,"ESTRPIPE","","",null,null],[17,"EUSERS","","",null,null],[17,"ENOTSOCK","","",null,null],[17,"EDESTADDRREQ","","",null,null],[17,"EMSGSIZE","","",null,null],[17,"EPROTOTYPE","","",null,null],[17,"ENOPROTOOPT","","",null,null],[17,"EPROTONOSUPPORT","","",null,null],[17,"ESOCKTNOSUPPORT","","",null,null],[17,"EOPNOTSUPP","","",null,null],[17,"EPFNOSUPPORT","","",null,null],[17,"EAFNOSUPPORT","","",null,null],[17,"EADDRINUSE","","",null,null],[17,"EADDRNOTAVAIL","","",null,null],[17,"ENETDOWN","","",null,null],[17,"ENETUNREACH","","",null,null],[17,"ENETRESET","","",null,null],[17,"ECONNABORTED","","",null,null],[17,"ECONNRESET","","",null,null],[17,"ENOBUFS","","",null,null],[17,"EISCONN","","",null,null],[17,"ENOTCONN","","",null,null],[17,"ESHUTDOWN","","",null,null],[17,"ETOOMANYREFS","","",null,null],[17,"ETIMEDOUT","","",null,null],[17,"ECONNREFUSED","","",null,null],[17,"EHOSTDOWN","","",null,null],[17,"EHOSTUNREACH","","",null,null],[17,"EALREADY","","",null,null],[17,"EINPROGRESS","","",null,null],[17,"ESTALE","","",null,null],[17,"EDQUOT","","",null,null],[17,"ENOMEDIUM","","",null,null],[17,"EMEDIUMTYPE","","",null,null],[17,"ECANCELED","","",null,null],[17,"ENOKEY","","",null,null],[17,"EKEYEXPIRED","","",null,null],[17,"EKEYREVOKED","","",null,null],[17,"EKEYREJECTED","","",null,null],[17,"EOWNERDEAD","","",null,null],[17,"ENOTRECOVERABLE","","",null,null],[17,"EHWPOISON","","",null,null],[17,"ERFKILL","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_TYPE","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_SNDBUFFORCE","","",null,null],[17,"SO_RCVBUFFORCE","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_NO_CHECK","","",null,null],[17,"SO_PRIORITY","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_BSDCOMPAT","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_PASSCRED","","",null,null],[17,"SO_PEERCRED","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"SO_SECURITY_AUTHENTICATION","","",null,null],[17,"SO_SECURITY_ENCRYPTION_TRANSPORT","","",null,null],[17,"SO_SECURITY_ENCRYPTION_NETWORK","","",null,null],[17,"SO_BINDTODEVICE","","",null,null],[17,"SO_ATTACH_FILTER","","",null,null],[17,"SO_DETACH_FILTER","","",null,null],[17,"SO_GET_FILTER","","",null,null],[17,"SO_PEERNAME","","",null,null],[17,"SO_TIMESTAMP","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"SO_PEERSEC","","",null,null],[17,"SO_PASSSEC","","",null,null],[17,"SO_TIMESTAMPNS","","",null,null],[17,"SCM_TIMESTAMPNS","","",null,null],[17,"SO_MARK","","",null,null],[17,"SO_TIMESTAMPING","","",null,null],[17,"SCM_TIMESTAMPING","","",null,null],[17,"SO_PROTOCOL","","",null,null],[17,"SO_DOMAIN","","",null,null],[17,"SO_RXQ_OVFL","","",null,null],[17,"SO_WIFI_STATUS","","",null,null],[17,"SCM_WIFI_STATUS","","",null,null],[17,"SO_PEEK_OFF","","",null,null],[17,"SO_NOFCS","","",null,null],[17,"SO_LOCK_FILTER","","",null,null],[17,"SO_SELECT_ERR_QUEUE","","",null,null],[17,"SO_BUSY_POLL","","",null,null],[17,"SO_MAX_PACING_RATE","","",null,null],[17,"SO_BPF_EXTENSIONS","","",null,null],[17,"SO_INCOMING_CPU","","",null,null],[17,"SO_ATTACH_BPF","","",null,null],[17,"SO_DETACH_BPF","","",null,null],[17,"SA_ONSTACK","","",null,null],[17,"SA_SIGINFO","","",null,null],[17,"SA_NOCLDWAIT","","",null,null],[17,"SIGCHLD","","",null,null],[17,"SIGBUS","","",null,null],[17,"SIGUSR1","","",null,null],[17,"SIGUSR2","","",null,null],[17,"SIGCONT","","",null,null],[17,"SIGSTOP","","",null,null],[17,"SIGTSTP","","",null,null],[17,"SIGURG","","",null,null],[17,"SIGIO","","",null,null],[17,"SIGSYS","","",null,null],[17,"SIGSTKFLT","","",null,null],[17,"SIGUNUSED","","",null,null],[17,"SIGPOLL","","",null,null],[17,"SIGPWR","","",null,null],[17,"SIG_SETMASK","","",null,null],[17,"SIG_BLOCK","","",null,null],[17,"SIG_UNBLOCK","","",null,null],[17,"POLLWRNORM","","",null,null],[17,"POLLWRBAND","","",null,null],[17,"O_ASYNC","","",null,null],[17,"O_NDELAY","","",null,null],[17,"PTRACE_DETACH","","",null,null],[17,"EFD_NONBLOCK","","",null,null],[17,"F_GETLK","","",null,null],[17,"F_GETOWN","","",null,null],[17,"F_SETOWN","","",null,null],[17,"F_SETLK","","",null,null],[17,"F_SETLKW","","",null,null],[17,"SFD_NONBLOCK","","",null,null],[17,"TIOCEXCL","","",null,null],[17,"TIOCNXCL","","",null,null],[17,"TIOCSCTTY","","",null,null],[17,"TIOCSTI","","",null,null],[17,"TIOCMGET","","",null,null],[17,"TIOCMBIS","","",null,null],[17,"TIOCMBIC","","",null,null],[17,"TIOCMSET","","",null,null],[17,"TIOCCONS","","",null,null],[17,"SFD_CLOEXEC","","",null,null],[17,"NCCS","","",null,null],[17,"O_TRUNC","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"EBFONT","","",null,null],[17,"ENOSTR","","",null,null],[17,"ENODATA","","",null,null],[17,"ETIME","","",null,null],[17,"ENOSR","","",null,null],[17,"ENONET","","",null,null],[17,"ENOPKG","","",null,null],[17,"EREMOTE","","",null,null],[17,"ENOLINK","","",null,null],[17,"EADV","","",null,null],[17,"ESRMNT","","",null,null],[17,"ECOMM","","",null,null],[17,"EPROTO","","",null,null],[17,"EDOTDOT","","",null,null],[17,"SA_NODEFER","","",null,null],[17,"SA_RESETHAND","","",null,null],[17,"SA_RESTART","","",null,null],[17,"SA_NOCLDSTOP","","",null,null],[17,"EPOLL_CLOEXEC","","",null,null],[17,"EFD_CLOEXEC","","",null,null],[17,"__SIZEOF_PTHREAD_CONDATTR_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEXATTR_T","","",null,null],[17,"O_DIRECT","","",null,null],[17,"O_DIRECTORY","","",null,null],[17,"O_NOFOLLOW","","",null,null],[17,"MAP_LOCKED","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"MAP_32BIT","","",null,null],[17,"EDEADLOCK","","",null,null],[17,"FIOCLEX","","",null,null],[17,"FIONBIO","","",null,null],[17,"PTRACE_GETFPREGS","","",null,null],[17,"PTRACE_SETFPREGS","","",null,null],[17,"PTRACE_GETFPXREGS","","",null,null],[17,"PTRACE_SETFPXREGS","","",null,null],[17,"PTRACE_GETREGS","","",null,null],[17,"PTRACE_SETREGS","","",null,null],[17,"PTRACE_PEEKSIGINFO_SHARED","","",null,null],[17,"MCL_CURRENT","","",null,null],[17,"MCL_FUTURE","","",null,null],[17,"SIGSTKSZ","","",null,null],[17,"MINSIGSTKSZ","","",null,null],[17,"CBAUD","","",null,null],[17,"TAB1","","",null,null],[17,"TAB2","","",null,null],[17,"TAB3","","",null,null],[17,"CR1","","",null,null],[17,"CR2","","",null,null],[17,"CR3","","",null,null],[17,"FF1","","",null,null],[17,"BS1","","",null,null],[17,"VT1","","",null,null],[17,"VWERASE","","",null,null],[17,"VREPRINT","","",null,null],[17,"VSUSP","","",null,null],[17,"VSTART","","",null,null],[17,"VSTOP","","",null,null],[17,"VDISCARD","","",null,null],[17,"VTIME","","",null,null],[17,"IXON","","",null,null],[17,"IXOFF","","",null,null],[17,"ONLCR","","",null,null],[17,"CSIZE","","",null,null],[17,"CS6","","",null,null],[17,"CS7","","",null,null],[17,"CS8","","",null,null],[17,"CSTOPB","","",null,null],[17,"CREAD","","",null,null],[17,"PARENB","","",null,null],[17,"PARODD","","",null,null],[17,"HUPCL","","",null,null],[17,"CLOCAL","","",null,null],[17,"ECHOKE","","",null,null],[17,"ECHOE","","",null,null],[17,"ECHOK","","",null,null],[17,"ECHONL","","",null,null],[17,"ECHOPRT","","",null,null],[17,"ECHOCTL","","",null,null],[17,"ISIG","","",null,null],[17,"ICANON","","",null,null],[17,"PENDIN","","",null,null],[17,"NOFLSH","","",null,null],[17,"CIBAUD","","",null,null],[17,"CBAUDEX","","",null,null],[17,"VSWTC","","",null,null],[17,"OLCUC","","",null,null],[17,"NLDLY","","",null,null],[17,"CRDLY","","",null,null],[17,"TABDLY","","",null,null],[17,"BSDLY","","",null,null],[17,"FFDLY","","",null,null],[17,"VTDLY","","",null,null],[17,"XTABS","","",null,null],[17,"B0","","",null,null],[17,"B50","","",null,null],[17,"B75","","",null,null],[17,"B110","","",null,null],[17,"B134","","",null,null],[17,"B150","","",null,null],[17,"B200","","",null,null],[17,"B300","","",null,null],[17,"B600","","",null,null],[17,"B1200","","",null,null],[17,"B1800","","",null,null],[17,"B2400","","",null,null],[17,"B4800","","",null,null],[17,"B9600","","",null,null],[17,"B19200","","",null,null],[17,"B38400","","",null,null],[17,"EXTA","","",null,null],[17,"EXTB","","",null,null],[17,"BOTHER","","",null,null],[17,"B57600","","",null,null],[17,"B115200","","",null,null],[17,"B230400","","",null,null],[17,"B460800","","",null,null],[17,"B500000","","",null,null],[17,"B576000","","",null,null],[17,"B921600","","",null,null],[17,"B1000000","","",null,null],[17,"B1152000","","",null,null],[17,"B1500000","","",null,null],[17,"B2000000","","",null,null],[17,"B2500000","","",null,null],[17,"B3000000","","",null,null],[17,"B3500000","","",null,null],[17,"B4000000","","",null,null],[17,"VEOL","","",null,null],[17,"VEOL2","","",null,null],[17,"VMIN","","",null,null],[17,"IEXTEN","","",null,null],[17,"TOSTOP","","",null,null],[17,"FLUSHO","","",null,null],[17,"EXTPROC","","",null,null],[17,"TCGETS","","",null,null],[17,"TCSETS","","",null,null],[17,"TCSETSW","","",null,null],[17,"TCSETSF","","",null,null],[17,"TCGETA","","",null,null],[17,"TCSETA","","",null,null],[17,"TCSETAW","","",null,null],[17,"TCSETAF","","",null,null],[17,"TCSBRK","","",null,null],[17,"TCXONC","","",null,null],[17,"TCFLSH","","",null,null],[17,"TIOCINQ","","",null,null],[17,"TIOCGPGRP","","",null,null],[17,"TIOCSPGRP","","",null,null],[17,"TIOCOUTQ","","",null,null],[17,"TIOCGWINSZ","","",null,null],[17,"TIOCSWINSZ","","",null,null],[17,"FIONREAD","","",null,null],[17,"R15","","",null,null],[17,"R14","","",null,null],[17,"R13","","",null,null],[17,"R12","","",null,null],[17,"RBP","","",null,null],[17,"RBX","","",null,null],[17,"R11","","",null,null],[17,"R10","","",null,null],[17,"R9","","",null,null],[17,"R8","","",null,null],[17,"RAX","","",null,null],[17,"RCX","","",null,null],[17,"RDX","","",null,null],[17,"RSI","","",null,null],[17,"RDI","","",null,null],[17,"ORIG_RAX","","",null,null],[17,"RIP","","",null,null],[17,"CS","","",null,null],[17,"EFLAGS","","",null,null],[17,"RSP","","",null,null],[17,"SS","","",null,null],[17,"FS_BASE","","",null,null],[17,"GS_BASE","","",null,null],[17,"DS","","",null,null],[17,"ES","","",null,null],[17,"FS","","",null,null],[17,"GS","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEX_T","","",null,null],[17,"__SIZEOF_PTHREAD_RWLOCK_T","","",null,null],[17,"SYS_read","","",null,null],[17,"SYS_write","","",null,null],[17,"SYS_open","","",null,null],[17,"SYS_close","","",null,null],[17,"SYS_stat","","",null,null],[17,"SYS_fstat","","",null,null],[17,"SYS_lstat","","",null,null],[17,"SYS_poll","","",null,null],[17,"SYS_lseek","","",null,null],[17,"SYS_mmap","","",null,null],[17,"SYS_mprotect","","",null,null],[17,"SYS_munmap","","",null,null],[17,"SYS_brk","","",null,null],[17,"SYS_rt_sigaction","","",null,null],[17,"SYS_rt_sigprocmask","","",null,null],[17,"SYS_rt_sigreturn","","",null,null],[17,"SYS_ioctl","","",null,null],[17,"SYS_pread64","","",null,null],[17,"SYS_pwrite64","","",null,null],[17,"SYS_readv","","",null,null],[17,"SYS_writev","","",null,null],[17,"SYS_access","","",null,null],[17,"SYS_pipe","","",null,null],[17,"SYS_select","","",null,null],[17,"SYS_sched_yield","","",null,null],[17,"SYS_mremap","","",null,null],[17,"SYS_msync","","",null,null],[17,"SYS_mincore","","",null,null],[17,"SYS_madvise","","",null,null],[17,"SYS_shmget","","",null,null],[17,"SYS_shmat","","",null,null],[17,"SYS_shmctl","","",null,null],[17,"SYS_dup","","",null,null],[17,"SYS_dup2","","",null,null],[17,"SYS_pause","","",null,null],[17,"SYS_nanosleep","","",null,null],[17,"SYS_getitimer","","",null,null],[17,"SYS_alarm","","",null,null],[17,"SYS_setitimer","","",null,null],[17,"SYS_getpid","","",null,null],[17,"SYS_sendfile","","",null,null],[17,"SYS_socket","","",null,null],[17,"SYS_connect","","",null,null],[17,"SYS_accept","","",null,null],[17,"SYS_sendto","","",null,null],[17,"SYS_recvfrom","","",null,null],[17,"SYS_sendmsg","","",null,null],[17,"SYS_recvmsg","","",null,null],[17,"SYS_shutdown","","",null,null],[17,"SYS_bind","","",null,null],[17,"SYS_listen","","",null,null],[17,"SYS_getsockname","","",null,null],[17,"SYS_getpeername","","",null,null],[17,"SYS_socketpair","","",null,null],[17,"SYS_setsockopt","","",null,null],[17,"SYS_getsockopt","","",null,null],[17,"SYS_clone","","",null,null],[17,"SYS_fork","","",null,null],[17,"SYS_vfork","","",null,null],[17,"SYS_execve","","",null,null],[17,"SYS_exit","","",null,null],[17,"SYS_wait4","","",null,null],[17,"SYS_kill","","",null,null],[17,"SYS_uname","","",null,null],[17,"SYS_semget","","",null,null],[17,"SYS_semop","","",null,null],[17,"SYS_semctl","","",null,null],[17,"SYS_shmdt","","",null,null],[17,"SYS_msgget","","",null,null],[17,"SYS_msgsnd","","",null,null],[17,"SYS_msgrcv","","",null,null],[17,"SYS_msgctl","","",null,null],[17,"SYS_fcntl","","",null,null],[17,"SYS_flock","","",null,null],[17,"SYS_fsync","","",null,null],[17,"SYS_fdatasync","","",null,null],[17,"SYS_truncate","","",null,null],[17,"SYS_ftruncate","","",null,null],[17,"SYS_getdents","","",null,null],[17,"SYS_getcwd","","",null,null],[17,"SYS_chdir","","",null,null],[17,"SYS_fchdir","","",null,null],[17,"SYS_rename","","",null,null],[17,"SYS_mkdir","","",null,null],[17,"SYS_rmdir","","",null,null],[17,"SYS_creat","","",null,null],[17,"SYS_link","","",null,null],[17,"SYS_unlink","","",null,null],[17,"SYS_symlink","","",null,null],[17,"SYS_readlink","","",null,null],[17,"SYS_chmod","","",null,null],[17,"SYS_fchmod","","",null,null],[17,"SYS_chown","","",null,null],[17,"SYS_fchown","","",null,null],[17,"SYS_lchown","","",null,null],[17,"SYS_umask","","",null,null],[17,"SYS_gettimeofday","","",null,null],[17,"SYS_getrlimit","","",null,null],[17,"SYS_getrusage","","",null,null],[17,"SYS_sysinfo","","",null,null],[17,"SYS_times","","",null,null],[17,"SYS_ptrace","","",null,null],[17,"SYS_getuid","","",null,null],[17,"SYS_syslog","","",null,null],[17,"SYS_getgid","","",null,null],[17,"SYS_setuid","","",null,null],[17,"SYS_setgid","","",null,null],[17,"SYS_geteuid","","",null,null],[17,"SYS_getegid","","",null,null],[17,"SYS_setpgid","","",null,null],[17,"SYS_getppid","","",null,null],[17,"SYS_getpgrp","","",null,null],[17,"SYS_setsid","","",null,null],[17,"SYS_setreuid","","",null,null],[17,"SYS_setregid","","",null,null],[17,"SYS_getgroups","","",null,null],[17,"SYS_setgroups","","",null,null],[17,"SYS_setresuid","","",null,null],[17,"SYS_getresuid","","",null,null],[17,"SYS_setresgid","","",null,null],[17,"SYS_getresgid","","",null,null],[17,"SYS_getpgid","","",null,null],[17,"SYS_setfsuid","","",null,null],[17,"SYS_setfsgid","","",null,null],[17,"SYS_getsid","","",null,null],[17,"SYS_capget","","",null,null],[17,"SYS_capset","","",null,null],[17,"SYS_rt_sigpending","","",null,null],[17,"SYS_rt_sigtimedwait","","",null,null],[17,"SYS_rt_sigqueueinfo","","",null,null],[17,"SYS_rt_sigsuspend","","",null,null],[17,"SYS_sigaltstack","","",null,null],[17,"SYS_utime","","",null,null],[17,"SYS_mknod","","",null,null],[17,"SYS_uselib","","",null,null],[17,"SYS_personality","","",null,null],[17,"SYS_ustat","","",null,null],[17,"SYS_statfs","","",null,null],[17,"SYS_fstatfs","","",null,null],[17,"SYS_sysfs","","",null,null],[17,"SYS_getpriority","","",null,null],[17,"SYS_setpriority","","",null,null],[17,"SYS_sched_setparam","","",null,null],[17,"SYS_sched_getparam","","",null,null],[17,"SYS_sched_setscheduler","","",null,null],[17,"SYS_sched_getscheduler","","",null,null],[17,"SYS_sched_get_priority_max","","",null,null],[17,"SYS_sched_get_priority_min","","",null,null],[17,"SYS_sched_rr_get_interval","","",null,null],[17,"SYS_mlock","","",null,null],[17,"SYS_munlock","","",null,null],[17,"SYS_mlockall","","",null,null],[17,"SYS_munlockall","","",null,null],[17,"SYS_vhangup","","",null,null],[17,"SYS_modify_ldt","","",null,null],[17,"SYS_pivot_root","","",null,null],[17,"SYS__sysctl","","",null,null],[17,"SYS_prctl","","",null,null],[17,"SYS_arch_prctl","","",null,null],[17,"SYS_adjtimex","","",null,null],[17,"SYS_setrlimit","","",null,null],[17,"SYS_chroot","","",null,null],[17,"SYS_sync","","",null,null],[17,"SYS_acct","","",null,null],[17,"SYS_settimeofday","","",null,null],[17,"SYS_mount","","",null,null],[17,"SYS_umount2","","",null,null],[17,"SYS_swapon","","",null,null],[17,"SYS_swapoff","","",null,null],[17,"SYS_reboot","","",null,null],[17,"SYS_sethostname","","",null,null],[17,"SYS_setdomainname","","",null,null],[17,"SYS_iopl","","",null,null],[17,"SYS_ioperm","","",null,null],[17,"SYS_create_module","","",null,null],[17,"SYS_init_module","","",null,null],[17,"SYS_delete_module","","",null,null],[17,"SYS_get_kernel_syms","","",null,null],[17,"SYS_query_module","","",null,null],[17,"SYS_quotactl","","",null,null],[17,"SYS_nfsservctl","","",null,null],[17,"SYS_getpmsg","","",null,null],[17,"SYS_putpmsg","","",null,null],[17,"SYS_afs_syscall","","",null,null],[17,"SYS_tuxcall","","",null,null],[17,"SYS_security","","",null,null],[17,"SYS_gettid","","",null,null],[17,"SYS_readahead","","",null,null],[17,"SYS_setxattr","","",null,null],[17,"SYS_lsetxattr","","",null,null],[17,"SYS_fsetxattr","","",null,null],[17,"SYS_getxattr","","",null,null],[17,"SYS_lgetxattr","","",null,null],[17,"SYS_fgetxattr","","",null,null],[17,"SYS_listxattr","","",null,null],[17,"SYS_llistxattr","","",null,null],[17,"SYS_flistxattr","","",null,null],[17,"SYS_removexattr","","",null,null],[17,"SYS_lremovexattr","","",null,null],[17,"SYS_fremovexattr","","",null,null],[17,"SYS_tkill","","",null,null],[17,"SYS_time","","",null,null],[17,"SYS_futex","","",null,null],[17,"SYS_sched_setaffinity","","",null,null],[17,"SYS_sched_getaffinity","","",null,null],[17,"SYS_set_thread_area","","",null,null],[17,"SYS_io_setup","","",null,null],[17,"SYS_io_destroy","","",null,null],[17,"SYS_io_getevents","","",null,null],[17,"SYS_io_submit","","",null,null],[17,"SYS_io_cancel","","",null,null],[17,"SYS_get_thread_area","","",null,null],[17,"SYS_lookup_dcookie","","",null,null],[17,"SYS_epoll_create","","",null,null],[17,"SYS_epoll_ctl_old","","",null,null],[17,"SYS_epoll_wait_old","","",null,null],[17,"SYS_remap_file_pages","","",null,null],[17,"SYS_getdents64","","",null,null],[17,"SYS_set_tid_address","","",null,null],[17,"SYS_restart_syscall","","",null,null],[17,"SYS_semtimedop","","",null,null],[17,"SYS_fadvise64","","",null,null],[17,"SYS_timer_create","","",null,null],[17,"SYS_timer_settime","","",null,null],[17,"SYS_timer_gettime","","",null,null],[17,"SYS_timer_getoverrun","","",null,null],[17,"SYS_timer_delete","","",null,null],[17,"SYS_clock_settime","","",null,null],[17,"SYS_clock_gettime","","",null,null],[17,"SYS_clock_getres","","",null,null],[17,"SYS_clock_nanosleep","","",null,null],[17,"SYS_exit_group","","",null,null],[17,"SYS_epoll_wait","","",null,null],[17,"SYS_epoll_ctl","","",null,null],[17,"SYS_tgkill","","",null,null],[17,"SYS_utimes","","",null,null],[17,"SYS_vserver","","",null,null],[17,"SYS_mbind","","",null,null],[17,"SYS_set_mempolicy","","",null,null],[17,"SYS_get_mempolicy","","",null,null],[17,"SYS_mq_open","","",null,null],[17,"SYS_mq_unlink","","",null,null],[17,"SYS_mq_timedsend","","",null,null],[17,"SYS_mq_timedreceive","","",null,null],[17,"SYS_mq_notify","","",null,null],[17,"SYS_mq_getsetattr","","",null,null],[17,"SYS_kexec_load","","",null,null],[17,"SYS_waitid","","",null,null],[17,"SYS_add_key","","",null,null],[17,"SYS_request_key","","",null,null],[17,"SYS_keyctl","","",null,null],[17,"SYS_ioprio_set","","",null,null],[17,"SYS_ioprio_get","","",null,null],[17,"SYS_inotify_init","","",null,null],[17,"SYS_inotify_add_watch","","",null,null],[17,"SYS_inotify_rm_watch","","",null,null],[17,"SYS_migrate_pages","","",null,null],[17,"SYS_openat","","",null,null],[17,"SYS_mkdirat","","",null,null],[17,"SYS_mknodat","","",null,null],[17,"SYS_fchownat","","",null,null],[17,"SYS_futimesat","","",null,null],[17,"SYS_newfstatat","","",null,null],[17,"SYS_unlinkat","","",null,null],[17,"SYS_renameat","","",null,null],[17,"SYS_linkat","","",null,null],[17,"SYS_symlinkat","","",null,null],[17,"SYS_readlinkat","","",null,null],[17,"SYS_fchmodat","","",null,null],[17,"SYS_faccessat","","",null,null],[17,"SYS_pselect6","","",null,null],[17,"SYS_ppoll","","",null,null],[17,"SYS_unshare","","",null,null],[17,"SYS_set_robust_list","","",null,null],[17,"SYS_get_robust_list","","",null,null],[17,"SYS_splice","","",null,null],[17,"SYS_tee","","",null,null],[17,"SYS_sync_file_range","","",null,null],[17,"SYS_vmsplice","","",null,null],[17,"SYS_move_pages","","",null,null],[17,"SYS_utimensat","","",null,null],[17,"SYS_epoll_pwait","","",null,null],[17,"SYS_signalfd","","",null,null],[17,"SYS_timerfd_create","","",null,null],[17,"SYS_eventfd","","",null,null],[17,"SYS_fallocate","","",null,null],[17,"SYS_timerfd_settime","","",null,null],[17,"SYS_timerfd_gettime","","",null,null],[17,"SYS_accept4","","",null,null],[17,"SYS_signalfd4","","",null,null],[17,"SYS_eventfd2","","",null,null],[17,"SYS_epoll_create1","","",null,null],[17,"SYS_dup3","","",null,null],[17,"SYS_pipe2","","",null,null],[17,"SYS_inotify_init1","","",null,null],[17,"SYS_preadv","","",null,null],[17,"SYS_pwritev","","",null,null],[17,"SYS_rt_tgsigqueueinfo","","",null,null],[17,"SYS_perf_event_open","","",null,null],[17,"SYS_recvmmsg","","",null,null],[17,"SYS_fanotify_init","","",null,null],[17,"SYS_fanotify_mark","","",null,null],[17,"SYS_prlimit64","","",null,null],[17,"SYS_name_to_handle_at","","",null,null],[17,"SYS_open_by_handle_at","","",null,null],[17,"SYS_clock_adjtime","","",null,null],[17,"SYS_syncfs","","",null,null],[17,"SYS_sendmmsg","","",null,null],[17,"SYS_setns","","",null,null],[17,"SYS_getcpu","","",null,null],[17,"SYS_process_vm_readv","","",null,null],[17,"SYS_process_vm_writev","","",null,null],[17,"SYS_kcmp","","",null,null],[17,"SYS_finit_module","","",null,null],[17,"SYS_sched_setattr","","",null,null],[17,"SYS_sched_getattr","","",null,null],[17,"SYS_renameat2","","",null,null],[17,"SYS_seccomp","","",null,null],[17,"SYS_getrandom","","",null,null],[17,"SYS_memfd_create","","",null,null],[17,"SYS_kexec_file_load","","",null,null],[17,"SYS_bpf","","",null,null],[17,"SYS_execveat","","",null,null],[17,"SYS_userfaultfd","","",null,null],[17,"SYS_membarrier","","",null,null],[17,"SYS_mlock2","","",null,null],[17,"SYS_copy_file_range","","",null,null],[17,"SYS_preadv2","","",null,null],[17,"SYS_pwritev2","","",null,null],[17,"SYS_pkey_mprotect","","",null,null],[17,"SYS_pkey_alloc","","",null,null],[17,"SYS_pkey_free","","",null,null]],"paths":[[3,"group"],[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"linger"],[3,"sigval"],[3,"itimerval"],[3,"tms"],[3,"servent"],[3,"protoent"],[3,"sockaddr"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"sockaddr_nl"],[3,"sockaddr_ll"],[3,"tm"],[3,"sched_param"],[3,"Dl_info"],[3,"epoll_event"],[3,"utsname"],[3,"lconv"],[3,"sigevent"],[3,"dirent"],[3,"dirent64"],[3,"rlimit64"],[3,"glob_t"],[3,"ifaddrs"],[3,"passwd"],[3,"spwd"],[3,"statvfs"],[3,"dqblk"],[3,"signalfd_siginfo"],[3,"itimerspec"],[3,"mq_attr"],[3,"if_nameindex"],[3,"msginfo"],[3,"mmsghdr"],[3,"sembuf"],[3,"input_event"],[3,"input_id"],[3,"input_absinfo"],[3,"input_keymap_entry"],[3,"input_mask"],[3,"ff_replay"],[3,"ff_trigger"],[3,"ff_envelope"],[3,"ff_constant_effect"],[3,"ff_ramp_effect"],[3,"ff_condition_effect"],[3,"ff_periodic_effect"],[3,"ff_rumble_effect"],[3,"ff_effect"],[3,"dl_phdr_info"],[3,"Elf32_Phdr"],[3,"Elf64_Phdr"],[3,"ucred"],[3,"mntent"],[3,"aiocb"],[3,"__exit_status"],[3,"__timeval"],[3,"utmpx"],[3,"sigaction"],[3,"stack_t"],[3,"siginfo_t"],[3,"glob64_t"],[3,"statfs"],[3,"msghdr"],[3,"cmsghdr"],[3,"termios"],[3,"flock"],[3,"sysinfo"],[3,"msqid_ds"],[3,"stat"],[3,"stat64"],[3,"statfs64"],[3,"statvfs64"],[3,"_libc_fpxreg"],[3,"_libc_xmmreg"],[3,"_libc_fpstate"],[3,"user_fpregs_struct"],[3,"user_regs_struct"],[3,"user"],[3,"mcontext_t"],[3,"ucontext_t"],[3,"ipc_perm"],[3,"shmid_ds"],[3,"termios2"],[3,"pthread_attr_t"],[3,"sigset_t"],[3,"sem_t"],[3,"pthread_mutex_t"],[3,"pthread_rwlock_t"],[3,"pthread_mutexattr_t"],[3,"pthread_rwlockattr_t"],[3,"pthread_cond_t"],[3,"pthread_condattr_t"],[3,"fsid_t"],[3,"cpu_set_t"],[3,"fd_set"]]};
searchIndex["libloading"] = {"doc":"A memory-safer wrapper around system dynamic library loading primitives.","items":[[3,"Library","libloading","A loaded dynamic library.",null,null],[3,"Symbol","","Symbol from a library.",null,null],[0,"os","","Unsafe, platform specific bindings to dynamic library loading facilities.",null,null],[0,"unix","libloading::os","UNIX implementation of dynamic library loading.",null,null],[3,"Library","libloading::os::unix","A platform-specific equivalent of the cross-platform `Library`.",null,null],[3,"Symbol","","Symbol from a library.",null,null],[11,"new","","Find and load a shared library (module).",0,{"inputs":[{"name":"p"}],"output":{"generics":["library"],"name":"result"}}],[11,"this","","Load the dynamic libraries linked into main program.",0,{"inputs":[],"output":{"name":"library"}}],[11,"open","","Find and load a shared library (module).",0,{"inputs":[{"name":"option"},{"name":"c_int"}],"output":{"generics":["library"],"name":"result"}}],[11,"get","","Get a pointer to function or static variable by symbol name.",0,null],[11,"drop","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"lift_option","","Lift Option out of the symbol.",1,{"inputs":[{"name":"self"}],"output":{"generics":["symbol"],"name":"option"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"symbol"}}],[11,"deref","","",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"windows","libloading::os","Windows implementation of dynamic library loading.",null,null],[0,"changelog","libloading","Project changelog",null,null],[0,"r0_4_3","libloading::changelog","Release 0.4.3 (2017-12-07)",null,null],[0,"r0_4_2","","Release 0.4.2 (2017-09-24)",null,null],[0,"r0_4_1","","Release 0.4.1 (2017-08-29)",null,null],[0,"r0_4_0","","Release 0.4.0 (2017-05-01)",null,null],[0,"r0_3_4","","Release 0.3.4 (2017-03-25)",null,null],[0,"r0_3_3","","Release 0.3.3 (2017-03-25)",null,null],[0,"r0_3_2","","Release 0.3.2 (2017-02-10)",null,null],[0,"r0_3_1","","Release 0.3.1 (2016-10-01)",null,null],[0,"r0_3_0","","Release 0.3.0 (2016-07-27)",null,null],[6,"Result","libloading","",null,null],[11,"new","","Find and load a dynamic library.",2,{"inputs":[{"name":"p"}],"output":{"generics":["library"],"name":"result"}}],[11,"get","","Get a pointer to function or static variable by symbol name.",2,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",2,{"inputs":[{"name":"library"}],"output":{"name":"library"}}],[11,"from","libloading::os::unix","",0,{"inputs":[{"name":"library"}],"output":{"name":"library"}}],[11,"into_raw","libloading","Extract the wrapped `os::platform::Symbol`.",3,{"inputs":[{"name":"self"}],"output":{"name":"symbol"}}],[11,"from_raw","","Wrap the `os::platform::Symbol` into this safe wrapper.",3,{"inputs":[{"name":"symbol"},{"name":"l"}],"output":{"name":"symbol"}}],[11,"lift_option","","Lift Option out of the symbol.",3,{"inputs":[{"name":"self"}],"output":{"generics":["symbol"],"name":"option"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"symbol"}}],[11,"deref","","",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Library"],[3,"Symbol"],[3,"Library"],[3,"Symbol"]]};
searchIndex["memmap"] = {"doc":"A cross-platform Rust API for memory mapped buffers.","items":[[3,"MmapOptions","memmap","A memory map builder, providing advanced options and flags for specifying memory map behavior.",null,null],[3,"Mmap","","An immutable memory mapped buffer.",null,null],[3,"MmapMut","","A mutable memory mapped buffer.",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"mmapoptions"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"mmapoptions"}}],[11,"new","","Creates a new set of options for configuring and creating a memory map.",0,{"inputs":[],"output":{"name":"mmapoptions"}}],[11,"offset","","Configures the memory map to start at byte `offset` from the beginning of the file.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"len","","Configures the created memory mapped buffer to be `len` bytes long.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"stack","","Configures the anonymous memory map to be suitable for a process or thread stack.",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"map","","Creates a read-only memory map backed by a file.",0,{"inputs":[{"name":"self"},{"name":"file"}],"output":{"generics":["mmap"],"name":"result"}}],[11,"map_exec","","Creates a readable and executable memory map backed by a file.",0,{"inputs":[{"name":"self"},{"name":"file"}],"output":{"generics":["mmap"],"name":"result"}}],[11,"map_mut","","Creates a writeable memory map backed by a file.",0,{"inputs":[{"name":"self"},{"name":"file"}],"output":{"generics":["mmapmut"],"name":"result"}}],[11,"map_copy","","Creates a copy-on-write memory map backed by a file.",0,{"inputs":[{"name":"self"},{"name":"file"}],"output":{"generics":["mmapmut"],"name":"result"}}],[11,"map_anon","","Creates an anonymous memory map.",0,{"inputs":[{"name":"self"}],"output":{"generics":["mmapmut"],"name":"result"}}],[11,"map","","Creates a read-only memory map backed by a file.",1,{"inputs":[{"name":"file"}],"output":{"generics":["mmap"],"name":"result"}}],[11,"make_mut","","Transition the memory map to be writable.",1,{"inputs":[{"name":"self"}],"output":{"generics":["mmapmut"],"name":"result"}}],[11,"deref","","",1,null],[11,"as_ref","","",1,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"map_mut","","Creates a writeable memory map backed by a file.",2,{"inputs":[{"name":"file"}],"output":{"generics":["mmapmut"],"name":"result"}}],[11,"map_anon","","Creates an anonymous memory map.",2,{"inputs":[{"name":"usize"}],"output":{"generics":["mmapmut"],"name":"result"}}],[11,"flush","","Flushes outstanding memory map modifications to disk.",2,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"flush_async","","Asynchronously flushes outstanding memory map modifications to disk.",2,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"flush_range","","Flushes outstanding memory map modifications in the range to disk.",2,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"result"}}],[11,"flush_async_range","","Asynchronously flushes outstanding memory map modifications in the range to disk.",2,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"result"}}],[11,"make_read_only","","Returns an immutable version of this memory mapped buffer.",2,{"inputs":[{"name":"self"}],"output":{"generics":["mmap"],"name":"result"}}],[11,"make_exec","","Transition the memory map to be readable and executable.",2,{"inputs":[{"name":"self"}],"output":{"generics":["mmap"],"name":"result"}}],[11,"deref","","",2,null],[11,"deref_mut","","",2,null],[11,"as_ref","","",2,null],[11,"as_mut","","",2,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"MmapOptions"],[3,"Mmap"],[3,"MmapMut"]]};
searchIndex["osmesa_sys"] = {"doc":"","items":[[3,"OsMesa","osmesa_sys","Symbols loaded from a shared library.",null,null],[12,"OSMesaColorClamp","","",0,null],[12,"OSMesaCreateContext","","",0,null],[12,"OSMesaCreateContextExt","","",0,null],[12,"OSMesaCreateContextAttribs","","",0,null],[12,"OSMesaDestroyContext","","",0,null],[12,"OSMesaGetColorBuffer","","",0,null],[12,"OSMesaGetCurrentContext","","",0,null],[12,"OSMesaGetDepthBuffer","","",0,null],[12,"OSMesaGetIntegerv","","",0,null],[12,"OSMesaGetProcAddress","","",0,null],[12,"OSMesaMakeCurrent","","",0,null],[12,"OSMesaPixelStore","","",0,null],[3,"osmesa_context","","",null,null],[5,"OSMesaColorClamp","","",null,null],[5,"OSMesaCreateContext","","",null,{"inputs":[{"name":"c_uint"},{"name":"osmesacontext"}],"output":{"name":"osmesacontext"}}],[5,"OSMesaCreateContextExt","","",null,{"inputs":[{"name":"c_uint"},{"name":"c_int"},{"name":"c_int"},{"name":"c_int"},{"name":"osmesacontext"}],"output":{"name":"osmesacontext"}}],[5,"OSMesaCreateContextAttribs","","",null,null],[5,"OSMesaDestroyContext","","",null,null],[5,"OSMesaGetColorBuffer","","",null,null],[5,"OSMesaGetCurrentContext","","",null,{"inputs":[],"output":{"name":"osmesacontext"}}],[5,"OSMesaGetDepthBuffer","","",null,null],[5,"OSMesaGetIntegerv","","",null,null],[5,"OSMesaGetProcAddress","","",null,null],[5,"OSMesaMakeCurrent","","",null,null],[5,"OSMesaPixelStore","","",null,null],[6,"OSMesaContext","","",null,null],[6,"OSMESAproc","","",null,null],[17,"OSMESA_BGRA","","",null,null],[17,"OSMESA_ARGB","","",null,null],[17,"OSMESA_BGR","","",null,null],[17,"OSMESA_RGB_565","","",null,null],[17,"OSMESA_COLOR_INDEX","","",null,null],[17,"OSMESA_RGB","","",null,null],[17,"OSMESA_RGBA","","",null,null],[17,"OSMESA_WIDTH","","",null,null],[17,"OSMESA_HEIGHT","","",null,null],[17,"OSMESA_FORMAT","","",null,null],[17,"OSMESA_TYPE","","",null,null],[17,"OSMESA_MAX_WIDTH","","",null,null],[17,"OSMESA_MAX_HEIGHT","","",null,null],[17,"OSMESA_ROW_LENGTH","","",null,null],[17,"OSMESA_Y_UP","","",null,null],[17,"OSMESA_DEPTH_BITS","","",null,null],[17,"OSMESA_STENCIL_BITS","","",null,null],[17,"OSMESA_ACCUM_BITS","","",null,null],[17,"OSMESA_PROFILE","","",null,null],[17,"OSMESA_CORE_PROFILE","","",null,null],[17,"OSMESA_COMPAT_PROFILE","","",null,null],[17,"OSMESA_CONTEXT_MAJOR_VERSION","","",null,null],[17,"OSMESA_CONTEXT_MINOR_VERSION","","",null,null],[11,"open","","Tries to open the dynamic library.",0,{"inputs":[{"name":"path"}],"output":{"generics":["osmesa","loadingerror"],"name":"result"}}],[11,"try_loading","","Try loading the static symbols linked to this library.",0,{"inputs":[],"output":{"generics":["osmesa","loadingerror"],"name":"result"}}]],"paths":[[3,"OsMesa"]]};
searchIndex["percent_encoding"] = {"doc":"URLs use special chacters to indicate the parts of the request.  For example, a forward slash indicates a path.  In order for that charcter to exist outside of a path separator, that charcter would need to be encoded.","items":[[3,"SIMPLE_ENCODE_SET","percent_encoding","This encode set is used for the path of cannot-be-a-base URLs.",null,null],[3,"QUERY_ENCODE_SET","","This encode set is used in the URL parser for query strings.",null,null],[3,"DEFAULT_ENCODE_SET","","This encode set is used for path components.",null,null],[3,"PATH_SEGMENT_ENCODE_SET","","This encode set is used for on '/'-separated path segment",null,null],[3,"USERINFO_ENCODE_SET","","This encode set is used for username and password.",null,null],[3,"PercentEncode","","The return type of `percent_encode()` and `utf8_percent_encode()`.",null,null],[3,"PercentDecode","","The return type of `percent_decode()`.",null,null],[5,"percent_encode_byte","","Return the percent-encoding of the given bytes.",null,{"inputs":[{"name":"u8"}],"output":{"name":"str"}}],[5,"percent_encode","","Percent-encode the given bytes with the given encode set.",null,null],[5,"utf8_percent_encode","","Percent-encode the UTF-8 encoding of the given string.",null,{"inputs":[{"name":"str"},{"name":"e"}],"output":{"name":"percentencode"}}],[5,"percent_decode","","Percent-decode the given bytes.",null,null],[8,"EncodeSet","","Represents a set of characters / bytes that should be percent-encoded.",null,null],[10,"contains","","Called with UTF-8 bytes rather than code points. Should return true for all non-ASCII bytes.",0,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"simple_encode_set"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"contains","","",1,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"query_encode_set"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"contains","","",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"default_encode_set"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"contains","","",3,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"path_segment_encode_set"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"contains","","",4,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"userinfo_encode_set"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"contains","","",5,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"percentencode"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",6,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"size_hint","","",6,null],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"percentdecode"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",7,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"option"}}],[11,"size_hint","","",7,null],[11,"if_any","","If the percent-decoding is different from the input, return it as a new bytes vector.",7,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"option"}}],[11,"decode_utf8","","Decode the result of percent-decoding as UTF-8.",7,{"inputs":[{"name":"self"}],"output":{"generics":["cow","utf8error"],"name":"result"}}],[11,"decode_utf8_lossy","","Decode the result of percent-decoding as UTF-8, lossily.",7,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"cow"}}],[14,"define_encode_set","","Define a new struct that implements the `EncodeSet` trait, for use in `percent_decode()` and related functions.",null,null]],"paths":[[8,"EncodeSet"],[3,"SIMPLE_ENCODE_SET"],[3,"QUERY_ENCODE_SET"],[3,"DEFAULT_ENCODE_SET"],[3,"PATH_SEGMENT_ENCODE_SET"],[3,"USERINFO_ENCODE_SET"],[3,"PercentEncode"],[3,"PercentDecode"]]};
searchIndex["rand"] = {"doc":"Utilities for random number generation","items":[[3,"Generator","rand","Iterator which will generate a stream of random items.",null,null],[3,"AsciiGenerator","","Iterator which will continuously generate random ascii characters.",null,null],[3,"XorShiftRng","","An Xorshift[1] random number generator.",null,null],[3,"Open01","","A wrapper for generating floating point numbers uniformly in the open interval `(0,1)` (not including either endpoint).",null,null],[12,"0","","",0,null],[3,"Closed01","","A wrapper for generating floating point numbers uniformly in the closed interval `[0,1]` (including both endpoints).",null,null],[12,"0","","",1,null],[3,"StdRng","","The standard RNG. This is designed to be efficient on the current platform.",null,null],[3,"ThreadRng","","The thread-local RNG.",null,null],[5,"weak_rng","","Create a weak random number generator with a default algorithm and seed.",null,{"inputs":[],"output":{"name":"xorshiftrng"}}],[5,"thread_rng","","Retrieve the lazily-initialized thread-local random number generator, seeded by the system. Intended to be used in method chaining style, e.g. `thread_rng().gen::<i32>()`.",null,{"inputs":[],"output":{"name":"threadrng"}}],[5,"random","","Generates a random value using the thread-local random number generator.",null,{"inputs":[],"output":{"name":"t"}}],[5,"sample","","Randomly sample up to `amount` elements from a finite iterator. The order of elements in the sample is not random.",null,{"inputs":[{"name":"r"},{"name":"i"},{"name":"usize"}],"output":{"name":"vec"}}],[0,"distributions","","Sampling from random distributions.",null,null],[3,"RandSample","rand::distributions","A wrapper for generating types that implement `Rand` via the `Sample` & `IndependentSample` traits.",null,null],[3,"Weighted","","A value with a particular weight for use with `WeightedChoice`.",null,null],[12,"weight","","The numerical weight of this item",2,null],[12,"item","","The actual item which is being weighted",2,null],[3,"WeightedChoice","","A distribution that selects from a finite collection of weighted items.",null,null],[0,"range","","Generating numbers between two others.",null,null],[3,"Range","rand::distributions::range","Sample values uniformly between two bounds.",null,null],[8,"SampleRange","","The helper trait for types that have a sensible way to sample uniformly between two values. This should not be used directly, and is only to facilitate `Range`.",null,null],[10,"construct_range","","Construct the `Range` object that `sample_range` requires. This should not ever be called directly, only via `Range::new`, which will check that `low < high`, so this function doesn't have to repeat the check.",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"range"}}],[10,"sample_range","","Sample a value from the given `Range` with the given `Rng` as a source of randomness.",3,{"inputs":[{"name":"range"},{"name":"r"}],"output":{"name":"self"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `Range` instance that samples uniformly from `[low, high)`. Panics if `low >= high`.",4,{"inputs":[{"name":"x"},{"name":"x"}],"output":{"name":"range"}}],[11,"sample","","",4,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"sup"}}],[11,"ind_sample","","",4,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"sup"}}],[0,"gamma","rand::distributions","The Gamma and derived distributions.",null,null],[3,"Gamma","rand::distributions::gamma","The Gamma distribution `Gamma(shape, scale)` distribution.",null,null],[3,"ChiSquared","","The chi-squared distribution `χ²(k)`, where `k` is the degrees of freedom.",null,null],[3,"FisherF","","The Fisher F distribution `F(m, n)`.",null,null],[3,"StudentT","","The Student t distribution, `t(nu)`, where `nu` is the degrees of freedom.",null,null],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"gamma"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct an object representing the `Gamma(shape, scale)` distribution.",5,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"gamma"}}],[11,"sample","","",5,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",5,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"chisquared"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new chi-squared distribution with degrees-of-freedom `k`. Panics if `k < 0`.",6,{"inputs":[{"name":"f64"}],"output":{"name":"chisquared"}}],[11,"sample","","",6,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",6,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"fisherf"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `FisherF` distribution, with the given parameter. Panics if either `m` or `n` are not positive.",7,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"fisherf"}}],[11,"sample","","",7,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",7,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"studentt"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new Student t distribution with `n` degrees of freedom. Panics if `n <= 0`.",8,{"inputs":[{"name":"f64"}],"output":{"name":"studentt"}}],[11,"sample","","",8,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",8,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[0,"normal","rand::distributions","The normal and derived distributions.",null,null],[3,"StandardNormal","rand::distributions::normal","A wrapper around an `f64` to generate N(0, 1) random numbers (a.k.a.  a standard normal, or Gaussian).",null,null],[12,"0","","",9,null],[3,"Normal","","The normal distribution `N(mean, std_dev**2)`.",null,null],[3,"LogNormal","","The log-normal distribution `ln N(mean, std_dev**2)`.",null,null],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"standardnormal"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"rand","","",9,{"inputs":[{"name":"r"}],"output":{"name":"standardnormal"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"normal"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a new `Normal` distribution with the given mean and standard deviation.",10,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"normal"}}],[11,"sample","","",10,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",10,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"lognormal"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a new `LogNormal` distribution with the given mean and standard deviation.",11,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"lognormal"}}],[11,"sample","","",11,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",11,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[0,"exponential","rand::distributions","The exponential distribution.",null,null],[3,"Exp1","rand::distributions::exponential","A wrapper around an `f64` to generate Exp(1) random numbers.",null,null],[12,"0","","",12,null],[3,"Exp","","The exponential distribution `Exp(lambda)`.",null,null],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"exp1"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"rand","","",12,{"inputs":[{"name":"r"}],"output":{"name":"exp1"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"exp"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a new `Exp` with the given shape parameter `lambda`. Panics if `lambda <= 0`.",13,{"inputs":[{"name":"f64"}],"output":{"name":"exp"}}],[11,"sample","","",13,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",13,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[8,"Sample","rand::distributions","Types that can be used to create a random instance of `Support`.",null,null],[10,"sample","","Generate a random value of `Support`, using `rng` as the source of randomness.",14,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"support"}}],[8,"IndependentSample","","`Sample`s that do not require keeping track of state.",null,null],[10,"ind_sample","","Generate a random value.",15,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"support"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"sample","","",16,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"sup"}}],[11,"ind_sample","","",16,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"sup"}}],[11,"new","","",16,{"inputs":[],"output":{"name":"randsample"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"weighted"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `WeightedChoice`.",17,null],[11,"sample","","",17,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"t"}}],[11,"ind_sample","","",17,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"t"}}],[0,"isaac","rand","The ISAAC random number generator.",null,null],[3,"IsaacRng","rand::isaac","A random number generator that uses the ISAAC algorithm[1].",null,null],[3,"Isaac64Rng","","A random number generator that uses ISAAC-64[1], the 64-bit variant of the ISAAC algorithm.",null,null],[11,"new_unseeded","","Create an ISAAC random number generator using the default fixed seed.",18,{"inputs":[],"output":{"name":"isaacrng"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"isaacrng"}}],[11,"next_u32","","",18,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"reseed","","",18,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can be any length, although the maximum number of elements used is 256 and any more will be silently ignored. A generator constructed with a given seed will generate the same sequence of values as all other generators constructed with that seed.",18,null],[11,"rand","","",18,{"inputs":[{"name":"r"}],"output":{"name":"isaacrng"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_unseeded","","Create a 64-bit ISAAC random number generator using the default fixed seed.",19,{"inputs":[],"output":{"name":"isaac64rng"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"isaac64rng"}}],[11,"next_u32","","",19,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",19,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"reseed","","",19,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can be any length, although the maximum number of elements used is 256 and any more will be silently ignored. A generator constructed with a given seed will generate the same sequence of values as all other generators constructed with that seed.",19,null],[11,"rand","","",19,{"inputs":[{"name":"r"}],"output":{"name":"isaac64rng"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"chacha","rand","The ChaCha random number generator.",null,null],[3,"ChaChaRng","rand::chacha","A random number generator that uses the ChaCha20 algorithm [1].",null,null],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"chacharng"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_unseeded","","Create an ChaCha random number generator using the default fixed key of 8 zero words.",20,{"inputs":[],"output":{"name":"chacharng"}}],[11,"set_counter","","Sets the internal 128-bit ChaCha counter to a user-provided value. This permits jumping arbitrarily ahead (or backwards) in the pseudorandom stream.",20,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"u64"}],"output":null}],[11,"next_u32","","",20,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"reseed","","",20,null],[11,"from_seed","","Create a ChaCha generator from a seed, obtained from a variable-length u32 array. Only up to 8 words are used; if less than 8 words are used, the remaining are set to zero.",20,null],[11,"rand","","",20,{"inputs":[{"name":"r"}],"output":{"name":"chacharng"}}],[0,"reseeding","rand","A wrapper around another RNG that reseeds it after it generates a certain number of random bytes.",null,null],[3,"ReseedingRng","rand::reseeding","A wrapper around any RNG which reseeds the underlying RNG after it has generated a certain number of random bytes.",null,null],[12,"reseeder","","Controls the behaviour when reseeding the RNG.",21,null],[3,"ReseedWithDefault","","Reseed an RNG using a `Default` instance. This reseeds by replacing the RNG with the result of a `Default::default` call.",null,null],[8,"Reseeder","","Something that can be used to reseed an RNG via `ReseedingRng`.",null,null],[10,"reseed","","Reseed the given RNG.",22,{"inputs":[{"name":"self"},{"name":"r"}],"output":null}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `ReseedingRng` with the given parameters.",21,{"inputs":[{"name":"r"},{"name":"u64"},{"name":"rsdr"}],"output":{"name":"reseedingrng"}}],[11,"reseed_if_necessary","","Reseed the internal RNG if the number of bytes that have been generated exceed the threshold.",21,{"inputs":[{"name":"self"}],"output":null}],[11,"next_u32","","",21,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",21,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",21,null],[11,"reseed","","",21,null],[11,"from_seed","","Create a new `ReseedingRng` from the given reseeder and seed. This uses a default value for `generation_threshold`.",21,null],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"reseedwithdefault"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"reseed","","",23,{"inputs":[{"name":"self"},{"name":"r"}],"output":null}],[11,"default","","",23,{"inputs":[],"output":{"name":"reseedwithdefault"}}],[11,"rand","rand","",0,{"inputs":[{"name":"r"}],"output":{"generics":["f64"],"name":"open01"}}],[11,"rand","","",1,{"inputs":[{"name":"r"}],"output":{"generics":["f64"],"name":"closed01"}}],[11,"rand","","",0,{"inputs":[{"name":"r"}],"output":{"generics":["f32"],"name":"open01"}}],[11,"rand","","",1,{"inputs":[{"name":"r"}],"output":{"generics":["f32"],"name":"closed01"}}],[0,"os","","Interfaces to the operating system provided random number generators.",null,null],[3,"OsRng","rand::os","A random number generator that retrieves randomness straight from the operating system. Platform sources:",null,null],[11,"new","","Create a new `OsRng`.",24,{"inputs":[],"output":{"generics":["osrng"],"name":"result"}}],[11,"next_u32","","",24,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",24,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",24,null],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"read","rand","A wrapper around any Read to treat it as an RNG.",null,null],[3,"ReadRng","rand::read","An RNG that reads random bytes straight from a `Read`. This will work best with an infinite reader, but this is not required.",null,null],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `ReadRng` from a `Read`.",25,{"inputs":[{"name":"r"}],"output":{"name":"readrng"}}],[11,"next_u32","","",25,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",25,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",25,null],[8,"Rand","rand","A type that can be randomly generated using an `Rng`.",null,null],[10,"rand","","Generates a random instance of this type using the specified source of randomness.",26,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[8,"Rng","","A random number generator.",null,null],[10,"next_u32","","Return the next random u32.",27,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","Return the next random u64.",27,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"next_f32","","Return the next random f32 selected from the half-open interval `[0, 1)`.",27,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"next_f64","","Return the next random f64 selected from the half-open interval `[0, 1)`.",27,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"fill_bytes","","Fill `dest` with random data.",27,null],[11,"gen","","Return a random value of a `Rand` type.",27,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"gen_iter","","Return an iterator that will yield an infinite number of randomly generated items.",27,{"inputs":[{"name":"self"}],"output":{"name":"generator"}}],[11,"gen_range","","Generate a random value in the range [`low`, `high`).",27,{"inputs":[{"name":"self"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[11,"gen_weighted_bool","","Return a bool with a 1 in n chance of true",27,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"gen_ascii_chars","","Return an iterator of random characters from the set A-Z,a-z,0-9.",27,{"inputs":[{"name":"self"}],"output":{"name":"asciigenerator"}}],[11,"choose","","Return a random element from `values`.",27,null],[11,"choose_mut","","Return a mutable pointer to a random element from `values`.",27,null],[11,"shuffle","","Shuffle a mutable slice in place.",27,null],[8,"SeedableRng","","A random number generator that can be explicitly seeded to produce the same stream of randomness multiple times.",null,null],[10,"reseed","","Reseed an RNG with the given seed.",28,{"inputs":[{"name":"self"},{"name":"seed"}],"output":null}],[10,"from_seed","","Create a new RNG with the given seed.",28,{"inputs":[{"name":"seed"}],"output":{"name":"self"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",29,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",30,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"xorshiftrng"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_unseeded","","Creates a new XorShiftRng instance which is not seeded.",31,{"inputs":[],"output":{"name":"xorshiftrng"}}],[11,"next_u32","","",31,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"reseed","","Reseed an XorShiftRng. This will panic if `seed` is entirely 0.",31,null],[11,"from_seed","","Create a new XorShiftRng. This will panic if `seed` is entirely 0.",31,null],[11,"rand","","",31,{"inputs":[{"name":"r"}],"output":{"name":"xorshiftrng"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"stdrng"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a randomly seeded instance of `StdRng`.",32,{"inputs":[],"output":{"generics":["stdrng"],"name":"result"}}],[11,"next_u32","","",32,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",32,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"reseed","","",32,null],[11,"from_seed","","",32,null],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"threadrng"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next_u32","","",33,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",33,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",33,null]],"paths":[[3,"Open01"],[3,"Closed01"],[3,"Weighted"],[8,"SampleRange"],[3,"Range"],[3,"Gamma"],[3,"ChiSquared"],[3,"FisherF"],[3,"StudentT"],[3,"StandardNormal"],[3,"Normal"],[3,"LogNormal"],[3,"Exp1"],[3,"Exp"],[8,"Sample"],[8,"IndependentSample"],[3,"RandSample"],[3,"WeightedChoice"],[3,"IsaacRng"],[3,"Isaac64Rng"],[3,"ChaChaRng"],[3,"ReseedingRng"],[8,"Reseeder"],[3,"ReseedWithDefault"],[3,"OsRng"],[3,"ReadRng"],[8,"Rand"],[8,"Rng"],[8,"SeedableRng"],[3,"Generator"],[3,"AsciiGenerator"],[3,"XorShiftRng"],[3,"StdRng"],[3,"ThreadRng"]]};
searchIndex["rustc_demangle"] = {"doc":"Demangle Rust compiler symbol names.","items":[[3,"Demangle","rustc_demangle","Representation of a demangled symbol name.",null,null],[3,"TryDemangleError","","Error returned from the `try_demangle` function below when demangling fails.",null,null],[5,"demangle","","De-mangles a Rust symbol into a more readable version",null,{"inputs":[{"name":"str"}],"output":{"name":"demangle"}}],[5,"try_demangle","","The same as `demangle`, except return an `Err` if the string does not appear to be a Rust symbol, rather than \"demangling\" the given string as a no-op.",null,{"inputs":[{"name":"str"}],"output":{"generics":["demangle","trydemangleerror"],"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"trydemangleerror"}}],[11,"as_str","","Returns the underlying string that's being demangled.",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"TryDemangleError"],[3,"Demangle"]]};
searchIndex["shared_library"] = {"doc":"","items":[[4,"LoadingError","shared_library","Error that can happen while loading the shared library.",null,null],[13,"LibraryNotFound","","",0,null],[12,"descr","shared_library::LoadingError","",0,null],[13,"SymbolNotFound","shared_library","One of the symbols could not be found in the library.",0,null],[12,"symbol","shared_library::LoadingError","The symbol.",0,null],[0,"dynamic_library","shared_library","Dynamic library facilities.",null,null],[3,"DynamicLibrary","shared_library::dynamic_library","",null,null],[11,"drop","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"open","","Lazily open a dynamic library. When passed None it gives a handle to the calling process",1,{"inputs":[{"generics":["path"],"name":"option"}],"output":{"generics":["dynamiclibrary","string"],"name":"result"}}],[11,"prepend_search_path","","Prepends a path to this process's search path for dynamic libraries",1,{"inputs":[{"name":"path"}],"output":null}],[11,"create_path","","From a slice of paths, create a new vector which is suitable to be an environment variable for this platforms dylib search path.",1,null],[11,"envvar","","Returns the environment variable for this process's dynamic library search path",1,{"inputs":[],"output":{"name":"str"}}],[11,"search_path","","Returns the current search path for dynamic libraries being used by this process",1,{"inputs":[],"output":{"generics":["pathbuf"],"name":"vec"}}],[11,"symbol","","Access the value at the symbol of the dynamic library",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["string"],"name":"result"}}],[11,"fmt","shared_library","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"loadingerror"}}],[14,"shared_library","","",null,null]],"paths":[[4,"LoadingError"],[3,"DynamicLibrary"]]};
searchIndex["smallvec"] = {"doc":"Small vectors in various sizes. These store a certain number of elements inline, and fall back to the heap for larger allocations.  This can be a useful optimization for improving cache locality and reducing allocator traffic for workloads that fit within the inline buffer.","items":[[3,"Drain","smallvec","An iterator that removes the items from a `SmallVec` and yields them by value.",null,null],[3,"SmallVec","","A `Vec`-like container that can store a small number of elements inline.",null,null],[3,"IntoIter","","An iterator that consumes a `SmallVec` and yields its items by value.",null,null],[8,"VecLike","","Common operations implemented by both `Vec` and `SmallVec`.",null,null],[10,"push","","Append an element to the vector.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[8,"ExtendFromSlice","","Trait to be implemented by a collection that can be extended from a slice",null,null],[10,"extend_from_slice","","Extends a collection from a slice of its element type",1,null],[8,"Array","","Types that can be used as the backing store for a SmallVec",null,null],[16,"Item","","The type of the array's elements.",2,null],[10,"size","","Returns the number of items the array can hold.",2,{"inputs":[],"output":{"name":"usize"}}],[10,"ptr","","Returns a pointer to the first element of the array.",2,null],[10,"ptr_mut","","Returns a mutable pointer to the first element of the array.",2,null],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",3,null],[11,"next_back","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drop","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Construct an empty vector",4,{"inputs":[],"output":{"name":"smallvec"}}],[11,"with_capacity","","Construct an empty vector with enough capacity pre-allocated to store at least `n` elements.",4,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from_vec","","Construct a new `SmallVec` from a `Vec<A::Item>` without copying elements.",4,{"inputs":[{"name":"vec"}],"output":{"name":"smallvec"}}],[11,"from_buf","","Constructs a new `SmallVec` on the stack from an `A` without copying elements.",4,{"inputs":[{"name":"a"}],"output":{"name":"smallvec"}}],[11,"set_len","","Sets the length of a vector.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"inline_size","","The maximum number of elements this vector can hold inline",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","","The number of elements stored in the vector",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the vector is empty",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"capacity","","The number of items the vector can hold without reallocating",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"spilled","","Returns `true` if the data has spilled into a separate heap-allocated buffer.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"drain","","Empty the vector and return an iterator over its former contents.",4,{"inputs":[{"name":"self"}],"output":{"name":"drain"}}],[11,"push","","Append an item to the vector.",4,null],[11,"pop","","Remove an item from the end of the vector and return it, or None if empty.",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"grow","","Re-allocate to set the capacity to `new_cap`.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"reserve","","Reserve capacity for `additional` more elements to be inserted.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"reserve_exact","","Reserve the minumum capacity for `additional` more elements to be inserted.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shrink_to_fit","","Shrink the capacity of the vector as much as possible.",4,{"inputs":[{"name":"self"}],"output":null}],[11,"truncate","","Shorten the vector, keeping the first `len` elements and dropping the rest.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"as_slice","","Extracts a slice containing the entire vector.",4,null],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",4,null],[11,"swap_remove","","Remove the element at position `index`, replacing it with the last element.",4,null],[11,"clear","","Remove all elements from the vector.",4,{"inputs":[{"name":"self"}],"output":null}],[11,"remove","","Remove and return the element at position `index`, shifting all elements after it to the left.",4,null],[11,"insert","","Insert an element at position `index`, shifting all elements after it to the right.",4,null],[11,"insert_many","","Insert multiple elements at position `index`, shifting all following elements toward the back.",4,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"i"}],"output":null}],[11,"into_vec","","Convert a SmallVec to a Vec, without reallocating if the SmallVec has already spilled onto the heap.",4,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"retain","","Retains only the elements specified by the predicate.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"dedup","","Removes consecutive duplicate elements.",4,{"inputs":[{"name":"self"}],"output":null}],[11,"dedup_by","","Removes consecutive duplicate elements using the given equality relation.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"dedup_by_key","","Removes consecutive elements that map to the same key.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"from_slice","","Copy the elements from a slice into a new `SmallVec`.",4,null],[11,"insert_from_slice","","Copy elements from a slice into the vector at position `index`, shifting any following elements toward the back.",4,null],[11,"extend_from_slice","","Copy elements from a slice and append them to the vector.",4,null],[11,"deref","","",4,null],[11,"deref_mut","","",4,null],[11,"as_ref","","",4,null],[11,"as_mut","","",4,null],[11,"borrow","","",4,null],[11,"borrow_mut","","",4,null],[11,"write","","",4,null],[11,"write_all","","",4,null],[11,"flush","","",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"from","","",4,null],[11,"from","","",4,{"inputs":[{"name":"vec"}],"output":{"name":"smallvec"}}],[11,"from","","",4,{"inputs":[{"name":"a"}],"output":{"name":"smallvec"}}],[11,"index","","",4,null],[11,"index_mut","","",4,null],[11,"index","","",4,null],[11,"index_mut","","",4,null],[11,"index","","",4,null],[11,"index_mut","","",4,null],[11,"index","","",4,null],[11,"index_mut","","",4,null],[11,"index","","",4,null],[11,"index_mut","","",4,null],[11,"extend_from_slice","","",4,null],[11,"push","","",4,null],[11,"from_iter","","",4,{"inputs":[{"name":"i"}],"output":{"name":"smallvec"}}],[11,"extend","","",4,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"smallvec"}}],[11,"drop","","",4,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"smallvec"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"smallvec"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"smallvec"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"smallvec"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"smallvec"}],"output":{"name":"ordering"}}],[11,"hash","","",4,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"drop","","",5,{"inputs":[{"name":"self"}],"output":null}],[11,"next","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",5,null],[11,"next_back","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_iter","","",4,null]],"paths":[[8,"VecLike"],[8,"ExtendFromSlice"],[8,"Array"],[3,"Drain"],[3,"SmallVec"],[3,"IntoIter"]]};
searchIndex["tempfile"] = {"doc":"Securely create and manage temporary files. Temporary files created by this create are automatically deleted.","items":[[3,"NamedTempFile","tempfile","A named temporary file.",null,null],[3,"NamedTempFileOptions","","Create a new temporary file with custom parameters.",null,null],[3,"PersistError","","Error returned when persisting a temporary file fails",null,null],[12,"error","","The underlying IO error.",0,null],[12,"file","","The temporary file that couldn't be persisted.",0,null],[5,"tempfile","","Create an unnamed temporary file.",null,{"inputs":[],"output":{"generics":["file"],"name":"result"}}],[5,"tempfile_in","","Create an unnamed temporary file in the specified directory.",null,{"inputs":[{"name":"p"}],"output":{"generics":["file"],"name":"result"}}],[11,"as_ref","","",1,{"inputs":[{"name":"self"}],"output":{"name":"file"}}],[11,"as_mut","","",1,{"inputs":[{"name":"self"}],"output":{"name":"file"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",1,{"inputs":[{"name":"self"}],"output":{"name":"file"}}],[11,"deref_mut","","",1,{"inputs":[{"name":"self"}],"output":{"name":"file"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",1,{"inputs":[{"name":"persisterror"}],"output":{"name":"namedtempfile"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"new","","Create a new temporary file.",1,{"inputs":[],"output":{"generics":["namedtempfile"],"name":"result"}}],[11,"new_in","","Create a new temporary file in the specified directory.",1,{"inputs":[{"name":"p"}],"output":{"generics":["namedtempfile"],"name":"result"}}],[11,"path","","Get the temporary file's path.",1,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"close","","Close and remove the temporary file.",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"persist","","Persist the temporary file at the target path.",1,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["file","persisterror"],"name":"result"}}],[11,"persist_noclobber","","Persist the temporary file at the target path iff no file exists there.",1,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["file","persisterror"],"name":"result"}}],[11,"reopen","","Reopen the temporary file.",1,{"inputs":[{"name":"self"}],"output":{"generics":["file"],"name":"result"}}],[11,"drop","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"read","","",1,null],[11,"write","","",1,null],[11,"flush","","",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"seek","","",1,{"inputs":[{"name":"self"},{"name":"seekfrom"}],"output":{"generics":["u64"],"name":"result"}}],[11,"as_raw_fd","","",1,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"namedtempfileoptions"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"namedtempfileoptions"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"namedtempfileoptions"}],"output":{"name":"bool"}}],[11,"new","","Create a new NamedTempFileOptions",2,{"inputs":[],"output":{"name":"self"}}],[11,"prefix","","Set a custom filename prefix.",2,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"suffix","","Set a custom filename suffix.",2,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"rand_bytes","","Set the number of random bytes.",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"create","","Create the named temporary file.",2,{"inputs":[{"name":"self"}],"output":{"generics":["namedtempfile"],"name":"result"}}],[11,"create_in","","Create the named temporary file in the specified directory.",2,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["namedtempfile"],"name":"result"}}]],"paths":[[3,"PersistError"],[3,"NamedTempFile"],[3,"NamedTempFileOptions"]]};
searchIndex["token_store"] = {"doc":"Token Store","items":[[3,"Store","token_store","A token store",null,null],[3,"Token","","A token for accessing the store contents",null,null],[3,"StoreProxy","","A Proxy representing a `Store` with ongoing borrows",null,null],[11,"valid","","Check wether this token is still valid",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"token"}}],[11,"new","","Create a new store",1,{"inputs":[],"output":{"name":"store"}}],[11,"insert","","Insert a new value in this store",1,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"token"}}],[11,"get","","Access value previously inserted in this store",1,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"v"}}],[11,"get_mut","","Mutably access value previously inserted in this store",1,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"v"}}],[11,"remove","","Remove a value previously inserted in this store",1,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"v"}}],[11,"with_value","","Create a sub-scope with access to a value",1,{"inputs":[{"name":"self"},{"name":"token"},{"name":"f"}],"output":{"name":"t"}}],[11,"as_proxy","","See this `Store` as a `StoreProxy` with no ongoing borrow",1,{"inputs":[{"name":"self"}],"output":{"name":"storeproxy"}}],[11,"from","","",2,{"inputs":[{"name":"store"}],"output":{"name":"storeproxy"}}],[11,"from","","",2,{"inputs":[{"name":"storeproxy"}],"output":{"name":"storeproxy"}}],[11,"insert","","Insert a new value in the proxified store",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"token"}}],[11,"get","","Access value previously inserted in the proxified store",2,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"v"}}],[11,"get_mut","","Mutably access value previously inserted in the proxified store",2,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"v"}}],[11,"remove","","Remove a value previously inserted in the proxified store",2,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"v"}}],[11,"with_value","","Create a sub-scope with access to a value",2,{"inputs":[{"name":"self"},{"name":"token"},{"name":"f"}],"output":{"name":"t"}}]],"paths":[[3,"Token"],[3,"Store"],[3,"StoreProxy"]]};
searchIndex["wayland_client"] = {"doc":"Client-side Wayland connector","items":[[3,"State","wayland_client","A token store",null,null],[3,"StateProxy","","A Proxy representing a `Store` with ongoing borrows",null,null],[3,"StateToken","","A token for accessing the store contents",null,null],[3,"EnvHandler","","Utility type to handle the registry and global objects",null,null],[3,"EnvNotify","","An implementation to receive globals notifications for the EnvHandler",null,null],[12,"new_global","","A new global was advertized by the server",0,null],[12,"del_global","","A global was removed by the server",0,null],[12,"ready","","The EnvHandler is ready",0,null],[3,"EventQueue","","An event queue managing wayland events",null,null],[3,"EventQueueHandle","","Handle to an event queue",null,null],[3,"ReadEventsGuard","","A guard over a read intention.",null,null],[4,"ConnectError","","Enum representing the possible reasons why connecting to the wayland server failed",null,null],[13,"NoWaylandLib","","The library was compiled with the `dlopen` feature, and the `libwayland-client.so` library could not be found at runtime",1,null],[13,"NoCompositorListening","","Any needed library was found, but the listening socket of the server could not be found.",1,null],[4,"FatalError","","Enum representing possible errors fatal to a wayland session",null,null],[13,"Io","","Session aborted after an I/O error",2,null],[13,"Protocol","","Session aborted after a protocol error",2,null],[12,"interface","wayland_client::FatalError","name of the interface of the proxy that generated this error",2,null],[12,"proxy_id","","internal id of the proxy that generated this error",2,null],[12,"error_code","","code of the error, as defined by the `Error` enum of the interface of the proxy. It can directly be fed to the `from_raw` static method of this enum.",2,null],[4,"RegisterStatus","wayland_client","Status of a registration attempt of a proxy.",null,null],[13,"Registered","","The proxy was properly registered to this event queue & handler.",3,null],[13,"Unmanaged","","The proxy was not registered because it is not managed by `wayland-client`.",3,null],[13,"Dead","","The proxy was not registered because it is already destroyed.",3,null],[4,"RequestResult","","Possible outcome of the call of a request on a proxy",null,null],[13,"Sent","","Message has been buffered and will be sent to server",4,null],[13,"Destroyed","","This proxy is already destroyed, request has been ignored",4,null],[4,"Liveness","","Represents the state of liveness of a wayland object",null,null],[13,"Alive","","This object is alive and its requests can be called",5,null],[13,"Dead","","This object is dead, calling its requests will do nothing and return and error.",5,null],[13,"Unmanaged","","This object is not managed by `wayland-client`, you can call its methods but this might crash the program if it was actually dead.",5,null],[5,"connect_to","","Connect to the compositor socket",null,{"inputs":[{"name":"osstr"}],"output":{"generics":["connecterror"],"name":"result"}}],[5,"default_connect","","Connect to the compositor socket",null,{"inputs":[],"output":{"generics":["connecterror"],"name":"result"}}],[0,"protocol","","The wayland core protocol",null,null],[0,"wl_display","wayland_client::protocol","core global object",null,null],[3,"WlDisplay","wayland_client::protocol::wl_display","",null,null],[4,"Error","","global error values",null,null],[13,"InvalidObject","","server couldn't find object",6,null],[13,"InvalidMethod","","method doesn't exist on the specified interface",6,null],[13,"NoMemory","","server is out of memory",6,null],[0,"wl_registry","wayland_client::protocol","global registry object",null,null],[3,"WlRegistry","wayland_client::protocol::wl_registry","",null,null],[3,"Implementation","","",null,null],[12,"global","","announce global object",7,null],[12,"global_remove","","announce removal of global object",7,null],[0,"wl_callback","wayland_client::protocol","callback object",null,null],[3,"WlCallback","wayland_client::protocol::wl_callback","",null,null],[3,"Implementation","","",null,null],[12,"done","","done event",8,null],[0,"wl_compositor","wayland_client::protocol","the compositor singleton",null,null],[3,"WlCompositor","wayland_client::protocol::wl_compositor","",null,null],[0,"wl_shm_pool","wayland_client::protocol","a shared memory pool",null,null],[3,"WlShmPool","wayland_client::protocol::wl_shm_pool","",null,null],[0,"wl_shm","wayland_client::protocol","shared memory support",null,null],[3,"WlShm","wayland_client::protocol::wl_shm","",null,null],[3,"Implementation","","",null,null],[12,"format","","pixel format description",9,null],[4,"Error","","wl_shm error values",null,null],[13,"InvalidFormat","","buffer format is not known",10,null],[13,"InvalidStride","","invalid size or stride during pool or buffer creation",10,null],[13,"InvalidFd","","mmapping the file descriptor failed",10,null],[4,"Format","","pixel formats",null,null],[13,"Argb8888","","32-bit ARGB format, [31:0] A:R:G:B 8:8:8:8 little endian",11,null],[13,"Xrgb8888","","32-bit RGB format, [31:0] x:R:G:B 8:8:8:8 little endian",11,null],[13,"C8","","8-bit color index format, [7:0] C",11,null],[13,"Rgb332","","8-bit RGB format, [7:0] R:G:B 3:3:2",11,null],[13,"Bgr233","","8-bit BGR format, [7:0] B:G:R 2:3:3",11,null],[13,"Xrgb4444","","16-bit xRGB format, [15:0] x:R:G:B 4:4:4:4 little endian",11,null],[13,"Xbgr4444","","16-bit xBGR format, [15:0] x:B:G:R 4:4:4:4 little endian",11,null],[13,"Rgbx4444","","16-bit RGBx format, [15:0] R:G:B:x 4:4:4:4 little endian",11,null],[13,"Bgrx4444","","16-bit BGRx format, [15:0] B:G:R:x 4:4:4:4 little endian",11,null],[13,"Argb4444","","16-bit ARGB format, [15:0] A:R:G:B 4:4:4:4 little endian",11,null],[13,"Abgr4444","","16-bit ABGR format, [15:0] A:B:G:R 4:4:4:4 little endian",11,null],[13,"Rgba4444","","16-bit RBGA format, [15:0] R:G:B:A 4:4:4:4 little endian",11,null],[13,"Bgra4444","","16-bit BGRA format, [15:0] B:G:R:A 4:4:4:4 little endian",11,null],[13,"Xrgb1555","","16-bit xRGB format, [15:0] x:R:G:B 1:5:5:5 little endian",11,null],[13,"Xbgr1555","","16-bit xBGR 1555 format, [15:0] x:B:G:R 1:5:5:5 little endian",11,null],[13,"Rgbx5551","","16-bit RGBx 5551 format, [15:0] R:G:B:x 5:5:5:1 little endian",11,null],[13,"Bgrx5551","","16-bit BGRx 5551 format, [15:0] B:G:R:x 5:5:5:1 little endian",11,null],[13,"Argb1555","","16-bit ARGB 1555 format, [15:0] A:R:G:B 1:5:5:5 little endian",11,null],[13,"Abgr1555","","16-bit ABGR 1555 format, [15:0] A:B:G:R 1:5:5:5 little endian",11,null],[13,"Rgba5551","","16-bit RGBA 5551 format, [15:0] R:G:B:A 5:5:5:1 little endian",11,null],[13,"Bgra5551","","16-bit BGRA 5551 format, [15:0] B:G:R:A 5:5:5:1 little endian",11,null],[13,"Rgb565","","16-bit RGB 565 format, [15:0] R:G:B 5:6:5 little endian",11,null],[13,"Bgr565","","16-bit BGR 565 format, [15:0] B:G:R 5:6:5 little endian",11,null],[13,"Rgb888","","24-bit RGB format, [23:0] R:G:B little endian",11,null],[13,"Bgr888","","24-bit BGR format, [23:0] B:G:R little endian",11,null],[13,"Xbgr8888","","32-bit xBGR format, [31:0] x:B:G:R 8:8:8:8 little endian",11,null],[13,"Rgbx8888","","32-bit RGBx format, [31:0] R:G:B:x 8:8:8:8 little endian",11,null],[13,"Bgrx8888","","32-bit BGRx format, [31:0] B:G:R:x 8:8:8:8 little endian",11,null],[13,"Abgr8888","","32-bit ABGR format, [31:0] A:B:G:R 8:8:8:8 little endian",11,null],[13,"Rgba8888","","32-bit RGBA format, [31:0] R:G:B:A 8:8:8:8 little endian",11,null],[13,"Bgra8888","","32-bit BGRA format, [31:0] B:G:R:A 8:8:8:8 little endian",11,null],[13,"Xrgb2101010","","32-bit xRGB format, [31:0] x:R:G:B 2:10:10:10 little endian",11,null],[13,"Xbgr2101010","","32-bit xBGR format, [31:0] x:B:G:R 2:10:10:10 little endian",11,null],[13,"Rgbx1010102","","32-bit RGBx format, [31:0] R:G:B:x 10:10:10:2 little endian",11,null],[13,"Bgrx1010102","","32-bit BGRx format, [31:0] B:G:R:x 10:10:10:2 little endian",11,null],[13,"Argb2101010","","32-bit ARGB format, [31:0] A:R:G:B 2:10:10:10 little endian",11,null],[13,"Abgr2101010","","32-bit ABGR format, [31:0] A:B:G:R 2:10:10:10 little endian",11,null],[13,"Rgba1010102","","32-bit RGBA format, [31:0] R:G:B:A 10:10:10:2 little endian",11,null],[13,"Bgra1010102","","32-bit BGRA format, [31:0] B:G:R:A 10:10:10:2 little endian",11,null],[13,"Yuyv","","packed YCbCr format, [31:0] Cr0:Y1:Cb0:Y0 8:8:8:8 little endian",11,null],[13,"Yvyu","","packed YCbCr format, [31:0] Cb0:Y1:Cr0:Y0 8:8:8:8 little endian",11,null],[13,"Uyvy","","packed YCbCr format, [31:0] Y1:Cr0:Y0:Cb0 8:8:8:8 little endian",11,null],[13,"Vyuy","","packed YCbCr format, [31:0] Y1:Cb0:Y0:Cr0 8:8:8:8 little endian",11,null],[13,"Ayuv","","packed AYCbCr format, [31:0] A:Y:Cb:Cr 8:8:8:8 little endian",11,null],[13,"Nv12","","2 plane YCbCr Cr:Cb format, 2x2 subsampled Cr:Cb plane",11,null],[13,"Nv21","","2 plane YCbCr Cb:Cr format, 2x2 subsampled Cb:Cr plane",11,null],[13,"Nv16","","2 plane YCbCr Cr:Cb format, 2x1 subsampled Cr:Cb plane",11,null],[13,"Nv61","","2 plane YCbCr Cb:Cr format, 2x1 subsampled Cb:Cr plane",11,null],[13,"Yuv410","","3 plane YCbCr format, 4x4 subsampled Cb (1) and Cr (2) planes",11,null],[13,"Yvu410","","3 plane YCbCr format, 4x4 subsampled Cr (1) and Cb (2) planes",11,null],[13,"Yuv411","","3 plane YCbCr format, 4x1 subsampled Cb (1) and Cr (2) planes",11,null],[13,"Yvu411","","3 plane YCbCr format, 4x1 subsampled Cr (1) and Cb (2) planes",11,null],[13,"Yuv420","","3 plane YCbCr format, 2x2 subsampled Cb (1) and Cr (2) planes",11,null],[13,"Yvu420","","3 plane YCbCr format, 2x2 subsampled Cr (1) and Cb (2) planes",11,null],[13,"Yuv422","","3 plane YCbCr format, 2x1 subsampled Cb (1) and Cr (2) planes",11,null],[13,"Yvu422","","3 plane YCbCr format, 2x1 subsampled Cr (1) and Cb (2) planes",11,null],[13,"Yuv444","","3 plane YCbCr format, non-subsampled Cb (1) and Cr (2) planes",11,null],[13,"Yvu444","","3 plane YCbCr format, non-subsampled Cr (1) and Cb (2) planes",11,null],[0,"wl_buffer","wayland_client::protocol","content for a wl_surface",null,null],[3,"WlBuffer","wayland_client::protocol::wl_buffer","",null,null],[3,"Implementation","","",null,null],[12,"release","","compositor releases buffer",12,null],[0,"wl_data_offer","wayland_client::protocol","offer to transfer data",null,null],[3,"WlDataOffer","wayland_client::protocol::wl_data_offer","",null,null],[3,"Implementation","","",null,null],[12,"offer","","advertise offered mime type",13,null],[12,"source_actions","","notify the source-side available actions",13,null],[12,"action","","notify the selected action",13,null],[4,"Error","","",null,null],[13,"InvalidFinish","","finish request was called untimely",14,null],[13,"InvalidActionMask","","action mask contains invalid values",14,null],[13,"InvalidAction","","action argument has an invalid value",14,null],[13,"InvalidOffer","","offer doesn't accept this request",14,null],[0,"wl_data_source","wayland_client::protocol","offer to transfer data",null,null],[3,"WlDataSource","wayland_client::protocol::wl_data_source","",null,null],[3,"Implementation","","",null,null],[12,"target","","a target accepts an offered mime type",15,null],[12,"send","","send the data",15,null],[12,"cancelled","","selection was cancelled",15,null],[12,"dnd_drop_performed","","the drag-and-drop operation physically finished",15,null],[12,"dnd_finished","","the drag-and-drop operation concluded",15,null],[12,"action","","notify the selected action",15,null],[4,"Error","","",null,null],[13,"InvalidActionMask","","action mask contains invalid values",16,null],[13,"InvalidSource","","source doesn't accept this request",16,null],[0,"wl_data_device","wayland_client::protocol","data transfer device",null,null],[3,"WlDataDevice","wayland_client::protocol::wl_data_device","",null,null],[3,"Implementation","","",null,null],[12,"data_offer","","introduce a new wl_data_offer",17,null],[12,"enter","","initiate drag-and-drop session",17,null],[12,"leave","","end drag-and-drop session",17,null],[12,"motion","","drag-and-drop session motion",17,null],[12,"drop","","end drag-and-drop session successfully",17,null],[12,"selection","","advertise new selection",17,null],[4,"Error","","",null,null],[13,"Role","","given wl_surface has another role",18,null],[0,"wl_data_device_manager","wayland_client::protocol","data transfer interface",null,null],[3,"WlDataDeviceManager","wayland_client::protocol::wl_data_device_manager","",null,null],[3,"DndAction","","drag and drop actions",null,null],[0,"wl_shell","wayland_client::protocol","create desktop-style surfaces",null,null],[3,"WlShell","wayland_client::protocol::wl_shell","",null,null],[4,"Error","","",null,null],[13,"Role","","given wl_surface has another role",19,null],[0,"wl_shell_surface","wayland_client::protocol","desktop-style metadata interface",null,null],[3,"WlShellSurface","wayland_client::protocol::wl_shell_surface","",null,null],[3,"Resize","","edge values for resizing",null,null],[3,"Transient","","details of transient behaviour",null,null],[3,"Implementation","","",null,null],[12,"ping","","ping client",20,null],[12,"configure","","suggest resize",20,null],[12,"popup_done","","popup interaction is done",20,null],[4,"FullscreenMethod","","different method to set the surface fullscreen",null,null],[13,"Default","","no preference, apply default policy",21,null],[13,"Scale","","scale, preserve the surface's aspect ratio and center on output",21,null],[13,"Driver","","switch output mode to the smallest mode that can fit the surface, add black borders to compensate size mismatch",21,null],[13,"Fill","","no upscaling, center on output and add black borders to compensate size mismatch",21,null],[0,"wl_surface","wayland_client::protocol","an onscreen surface",null,null],[3,"WlSurface","wayland_client::protocol::wl_surface","",null,null],[3,"Implementation","","",null,null],[12,"enter","","surface enters an output",22,null],[12,"leave","","surface leaves an output",22,null],[4,"Error","","wl_surface error values",null,null],[13,"InvalidScale","","buffer scale value is invalid",23,null],[13,"InvalidTransform","","buffer transform value is invalid",23,null],[0,"wl_seat","wayland_client::protocol","group of input devices",null,null],[3,"WlSeat","wayland_client::protocol::wl_seat","",null,null],[3,"Capability","","seat capability bitmask",null,null],[3,"Implementation","","",null,null],[12,"capabilities","","seat capabilities changed",24,null],[12,"name","","unique identifier for this seat",24,null],[0,"wl_pointer","wayland_client::protocol","pointer input device",null,null],[3,"WlPointer","wayland_client::protocol::wl_pointer","",null,null],[3,"Implementation","","",null,null],[12,"enter","","enter event",25,null],[12,"leave","","leave event",25,null],[12,"motion","","pointer motion event",25,null],[12,"button","","pointer button event",25,null],[12,"axis","","axis event",25,null],[12,"frame","","end of a pointer event sequence",25,null],[12,"axis_source","","axis source event",25,null],[12,"axis_stop","","axis stop event",25,null],[12,"axis_discrete","","axis click event",25,null],[4,"Error","","",null,null],[13,"Role","","given wl_surface has another role",26,null],[4,"ButtonState","","physical button state",null,null],[13,"Released","","the button is not pressed",27,null],[13,"Pressed","","the button is pressed",27,null],[4,"Axis","","axis types",null,null],[13,"VerticalScroll","","vertical axis",28,null],[13,"HorizontalScroll","","horizontal axis",28,null],[4,"AxisSource","","axis source types",null,null],[13,"Wheel","","a physical wheel",29,null],[13,"Finger","","finger on a touch surface",29,null],[13,"Continuous","","continuous coordinate space",29,null],[0,"wl_keyboard","wayland_client::protocol","keyboard input device",null,null],[3,"WlKeyboard","wayland_client::protocol::wl_keyboard","",null,null],[3,"Implementation","","",null,null],[12,"keymap","","keyboard mapping",30,null],[12,"enter","","enter event",30,null],[12,"leave","","leave event",30,null],[12,"key","","key event",30,null],[12,"modifiers","","modifier and group state",30,null],[12,"repeat_info","","repeat rate and delay",30,null],[4,"KeymapFormat","","keyboard mapping format",null,null],[13,"NoKeymap","","no keymap; client must understand how to interpret the raw keycode",31,null],[13,"XkbV1","","libxkbcommon compatible; to determine the xkb keycode, clients must add 8 to the key event keycode",31,null],[4,"KeyState","","physical key state",null,null],[13,"Released","","key is not pressed",32,null],[13,"Pressed","","key is pressed",32,null],[0,"wl_touch","wayland_client::protocol","touchscreen input device",null,null],[3,"WlTouch","wayland_client::protocol::wl_touch","",null,null],[3,"Implementation","","",null,null],[12,"down","","touch down event and beginning of a touch sequence",33,null],[12,"up","","end of a touch event sequence",33,null],[12,"motion","","update of touch point coordinates",33,null],[12,"frame","","end of touch frame event",33,null],[12,"cancel","","touch session cancelled",33,null],[0,"wl_output","wayland_client::protocol","compositor output region",null,null],[3,"WlOutput","wayland_client::protocol::wl_output","",null,null],[3,"Mode","","mode information",null,null],[3,"Implementation","","",null,null],[12,"geometry","","properties of the output",34,null],[12,"mode","","advertise available modes for the output",34,null],[12,"done","","sent all information about output",34,null],[12,"scale","","output scaling properties",34,null],[4,"Subpixel","","subpixel geometry information",null,null],[13,"Unknown","","unknown geometry",35,null],[13,"None","","no geometry",35,null],[13,"HorizontalRgb","","horizontal RGB",35,null],[13,"HorizontalBgr","","horizontal BGR",35,null],[13,"VerticalRgb","","vertical RGB",35,null],[13,"VerticalBgr","","vertical BGR",35,null],[4,"Transform","","transform from framebuffer to output",null,null],[13,"Normal","","no transform",36,null],[13,"_90","","90 degrees counter-clockwise",36,null],[13,"_180","","180 degrees counter-clockwise",36,null],[13,"_270","","270 degrees counter-clockwise",36,null],[13,"Flipped","","180 degree flip around a vertical axis",36,null],[13,"Flipped90","","flip and rotate 90 degrees counter-clockwise",36,null],[13,"Flipped180","","flip and rotate 180 degrees counter-clockwise",36,null],[13,"Flipped270","","flip and rotate 270 degrees counter-clockwise",36,null],[0,"wl_region","wayland_client::protocol","region interface",null,null],[3,"WlRegion","wayland_client::protocol::wl_region","",null,null],[0,"wl_subcompositor","wayland_client::protocol","sub-surface compositing",null,null],[3,"WlSubcompositor","wayland_client::protocol::wl_subcompositor","",null,null],[4,"Error","","",null,null],[13,"BadSurface","","the to-be sub-surface is invalid",37,null],[0,"wl_subsurface","wayland_client::protocol","sub-surface interface to a wl_surface",null,null],[3,"WlSubsurface","wayland_client::protocol::wl_subsurface","",null,null],[4,"Error","","",null,null],[13,"BadSurface","","wl_surface is not a sibling or the parent",38,null],[0,"protocol_interfaces","wayland_client","Interfaces for the core protocol",null,null],[7,"wl_display_requests","wayland_client::protocol_interfaces","",null,null],[7,"wl_display_events","","",null,null],[7,"wl_display_interface","","",null,null],[7,"wl_registry_requests","","",null,null],[7,"wl_registry_events","","",null,null],[7,"wl_registry_interface","","",null,null],[7,"wl_callback_events","","",null,null],[7,"wl_callback_interface","","",null,null],[7,"wl_compositor_requests","","",null,null],[7,"wl_compositor_interface","","",null,null],[7,"wl_shm_pool_requests","","",null,null],[7,"wl_shm_pool_interface","","",null,null],[7,"wl_shm_requests","","",null,null],[7,"wl_shm_events","","",null,null],[7,"wl_shm_interface","","",null,null],[7,"wl_buffer_requests","","",null,null],[7,"wl_buffer_events","","",null,null],[7,"wl_buffer_interface","","",null,null],[7,"wl_data_offer_requests","","",null,null],[7,"wl_data_offer_events","","",null,null],[7,"wl_data_offer_interface","","",null,null],[7,"wl_data_source_requests","","",null,null],[7,"wl_data_source_events","","",null,null],[7,"wl_data_source_interface","","",null,null],[7,"wl_data_device_requests","","",null,null],[7,"wl_data_device_events","","",null,null],[7,"wl_data_device_interface","","",null,null],[7,"wl_data_device_manager_requests","","",null,null],[7,"wl_data_device_manager_interface","","",null,null],[7,"wl_shell_requests","","",null,null],[7,"wl_shell_interface","","",null,null],[7,"wl_shell_surface_requests","","",null,null],[7,"wl_shell_surface_events","","",null,null],[7,"wl_shell_surface_interface","","",null,null],[7,"wl_surface_requests","","",null,null],[7,"wl_surface_events","","",null,null],[7,"wl_surface_interface","","",null,null],[7,"wl_seat_requests","","",null,null],[7,"wl_seat_events","","",null,null],[7,"wl_seat_interface","","",null,null],[7,"wl_pointer_requests","","",null,null],[7,"wl_pointer_events","","",null,null],[7,"wl_pointer_interface","","",null,null],[7,"wl_keyboard_requests","","",null,null],[7,"wl_keyboard_events","","",null,null],[7,"wl_keyboard_interface","","",null,null],[7,"wl_touch_requests","","",null,null],[7,"wl_touch_events","","",null,null],[7,"wl_touch_interface","","",null,null],[7,"wl_output_requests","","",null,null],[7,"wl_output_events","","",null,null],[7,"wl_output_interface","","",null,null],[7,"wl_region_requests","","",null,null],[7,"wl_region_interface","","",null,null],[7,"wl_subcompositor_requests","","",null,null],[7,"wl_subcompositor_interface","","",null,null],[7,"wl_subsurface_requests","","",null,null],[7,"wl_subsurface_interface","","",null,null],[11,"fmt","wayland_client","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"flush","wayland_client::protocol::wl_display","Non-blocking write to the server",39,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"result"}}],[11,"create_event_queue","","Create a new EventQueue",39,{"inputs":[{"name":"self"}],"output":{"name":"eventqueue"}}],[11,"last_error","","Get the last error that occured on the session",39,{"inputs":[{"name":"self"}],"output":{"generics":["fatalerror"],"name":"option"}}],[11,"get_fd","","Get the raw File Descriptor associated with the connection",39,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"disconnect","","Close the wayland connection",39,{"inputs":[{"name":"self"}],"output":null}],[11,"register","wayland_client","Register a proxy to this event queue.",40,null],[11,"state","","Get a handle to the internal state",40,{"inputs":[{"name":"self"}],"output":{"name":"state"}}],[11,"dispatch","","Dispatches events from the internal buffer.",41,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"ioresult"}}],[11,"dispatch_pending","","Dispatches pending events from the internal buffer.",41,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"ioresult"}}],[11,"sync_roundtrip","","Synchronous roundtrip",41,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"ioresult"}}],[11,"prepare_read","","Prepare an conccurent read",41,{"inputs":[{"name":"self"}],"output":{"generics":["readeventsguard"],"name":"option"}}],[11,"deref","","",41,{"inputs":[{"name":"self"}],"output":{"name":"eventqueuehandle"}}],[11,"deref_mut","","",41,{"inputs":[{"name":"self"}],"output":{"name":"eventqueuehandle"}}],[11,"read_events","","Read events",42,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"ioresult"}}],[11,"cancel","","Cancel the read",42,{"inputs":[{"name":"self"}],"output":null}],[11,"drop","","",42,{"inputs":[{"name":"self"}],"output":null}],[11,"init","","Insert a new EnvHandler in this event queue and register the registry to it",43,{"inputs":[{"name":"eventqueuehandle"},{"name":"wlregistry"}],"output":{"generics":["envhandler"],"name":"statetoken"}}],[11,"init_with_notify","","Insert a new EnvHandler in this event queue with a notify implementation",43,{"inputs":[{"name":"eventqueuehandle"},{"name":"wlregistry"},{"name":"envnotify"},{"name":"id"}],"output":{"generics":["envhandler"],"name":"statetoken"}}],[11,"ready","","Is the handler ready",43,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"globals","","List of advertised globals",43,null],[11,"clone_inner","","Retrieve an owned copy of the environment",43,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"deref","","",43,{"inputs":[{"name":"self"}],"output":{"name":"h"}}],[0,"egl","","EGL utilities",null,null],[3,"WlEglSurface","wayland_client::egl","EGL surface",null,null],[5,"is_available","","Checks if the wayland-egl lib is available and can be used",null,{"inputs":[],"output":{"name":"bool"}}],[11,"new","","Create an EGL surface from a wayland surface",44,{"inputs":[{"name":"wlsurface"},{"name":"i32"},{"name":"i32"}],"output":{"name":"wleglsurface"}}],[11,"new_from_raw","","Create an EGL surface from a raw pointer to a wayland surface",44,null],[11,"get_size","","Fetch current size of the EGL surface",44,null],[11,"resize","","Resize the EGL surface",44,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":null}],[11,"ptr","","Raw pointer to the EGL surface",44,null],[11,"drop","","",44,{"inputs":[{"name":"self"}],"output":null}],[0,"cursor","wayland_client","Cursor utilities",null,null],[3,"CursorTheme","wayland_client::cursor","Represents a cursor theme loaded from the system.",null,null],[3,"Cursor","","A cursor from a theme. Can contain several images if animated.",null,null],[3,"CursorImageBuffer","","A buffer containing a cursor image.",null,null],[5,"is_available","","Checks if the wayland-cursor lib is available and can be used",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_theme","","Attempts to load a cursor theme from given name.",null,{"inputs":[{"generics":["str"],"name":"option"},{"name":"u32"},{"name":"wlshm"}],"output":{"name":"cursortheme"}}],[11,"get_cursor","","Retrieve a cursor from the theme.",45,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["cursor"],"name":"option"}}],[11,"drop","","",45,{"inputs":[{"name":"self"}],"output":null}],[11,"name","","Retrieve the name of this cursor.",46,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"image_count","","Retrieve the number of images contained in this animated cursor",46,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"frame","","Retrieve the image number of cursor animation.",46,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"usize"}}],[11,"frame_and_duration","","Retrieve the image number and its duration.",46,null],[11,"frame_buffer","","Retrieve a `CursorImageBuffer` containing the given image of an animation.",46,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["cursorimagebuffer"],"name":"option"}}],[11,"frame_info","","Retrive the metadate associated with given frame of the animation.",46,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"deref","","",47,{"inputs":[{"name":"self"}],"output":{"name":"wlbuffer"}}],[11,"ptr","wayland_client::protocol::wl_display","",39,null],[11,"from_ptr_new","","",39,null],[11,"from_ptr_initialized","","",39,null],[11,"interface_ptr","","",39,null],[11,"interface_name","","",39,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",39,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",39,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"status","","",39,{"inputs":[{"name":"self"}],"output":{"name":"liveness"}}],[11,"equals","","",39,{"inputs":[{"name":"self"},{"name":"wldisplay"}],"output":{"name":"bool"}}],[11,"set_user_data","","",39,null],[11,"get_user_data","","",39,null],[11,"clone_unchecked","","",39,{"inputs":[{"name":"self"}],"output":{"name":"wldisplay"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"from_raw","","",6,{"inputs":[{"name":"u32"}],"output":{"generics":["error"],"name":"option"}}],[11,"to_raw","","",6,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"sync","","asynchronous roundtrip",39,{"inputs":[{"name":"self"}],"output":{"name":"wlcallback"}}],[11,"get_registry","","get global registry object",39,{"inputs":[{"name":"self"}],"output":{"name":"wlregistry"}}],[11,"ptr","wayland_client::protocol::wl_registry","",48,null],[11,"from_ptr_new","","",48,null],[11,"from_ptr_initialized","","",48,null],[11,"interface_ptr","","",48,null],[11,"interface_name","","",48,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",48,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",48,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"status","","",48,{"inputs":[{"name":"self"}],"output":{"name":"liveness"}}],[11,"equals","","",48,{"inputs":[{"name":"self"},{"name":"wlregistry"}],"output":{"name":"bool"}}],[11,"set_user_data","","",48,null],[11,"get_user_data","","",48,null],[11,"clone_unchecked","","",48,{"inputs":[{"name":"self"}],"output":{"name":"wlregistry"}}],[11,"__dispatch_msg","","",48,null],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"implementation"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"implementation"}],"output":{"name":"bool"}}],[11,"bind","","bind an object to the display",48,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":{"name":"t"}}],[11,"ptr","wayland_client::protocol::wl_callback","",49,null],[11,"from_ptr_new","","",49,null],[11,"from_ptr_initialized","","",49,null],[11,"interface_ptr","","",49,null],[11,"interface_name","","",49,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",49,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",49,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"status","","",49,{"inputs":[{"name":"self"}],"output":{"name":"liveness"}}],[11,"equals","","",49,{"inputs":[{"name":"self"},{"name":"wlcallback"}],"output":{"name":"bool"}}],[11,"set_user_data","","",49,null],[11,"get_user_data","","",49,null],[11,"clone_unchecked","","",49,{"inputs":[{"name":"self"}],"output":{"name":"wlcallback"}}],[11,"__dispatch_msg","","",49,null],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"implementation"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"implementation"}],"output":{"name":"bool"}}],[11,"ptr","wayland_client::protocol::wl_compositor","",50,null],[11,"from_ptr_new","","",50,null],[11,"from_ptr_initialized","","",50,null],[11,"interface_ptr","","",50,null],[11,"interface_name","","",50,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",50,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",50,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"status","","",50,{"inputs":[{"name":"self"}],"output":{"name":"liveness"}}],[11,"equals","","",50,{"inputs":[{"name":"self"},{"name":"wlcompositor"}],"output":{"name":"bool"}}],[11,"set_user_data","","",50,null],[11,"get_user_data","","",50,null],[11,"clone_unchecked","","",50,{"inputs":[{"name":"self"}],"output":{"name":"wlcompositor"}}],[11,"create_surface","","create new surface",50,{"inputs":[{"name":"self"}],"output":{"name":"wlsurface"}}],[11,"create_region","","create new region",50,{"inputs":[{"name":"self"}],"output":{"name":"wlregion"}}],[11,"ptr","wayland_client::protocol::wl_shm_pool","",51,null],[11,"from_ptr_new","","",51,null],[11,"from_ptr_initialized","","",51,null],[11,"interface_ptr","","",51,null],[11,"interface_name","","",51,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",51,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",51,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"status","","",51,{"inputs":[{"name":"self"}],"output":{"name":"liveness"}}],[11,"equals","","",51,{"inputs":[{"name":"self"},{"name":"wlshmpool"}],"output":{"name":"bool"}}],[11,"set_user_data","","",51,null],[11,"get_user_data","","",51,null],[11,"clone_unchecked","","",51,{"inputs":[{"name":"self"}],"output":{"name":"wlshmpool"}}],[11,"create_buffer","","create a buffer from the pool",51,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"format"}],"output":{"generics":["wlbuffer"],"name":"requestresult"}}],[11,"destroy","","destroy the pool",51,{"inputs":[{"name":"self"}],"output":{"name":"requestresult"}}],[11,"resize","","change the size of the pool mapping",51,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"requestresult"}}],[11,"ptr","wayland_client::protocol::wl_shm","",52,null],[11,"from_ptr_new","","",52,null],[11,"from_ptr_initialized","","",52,null],[11,"interface_ptr","","",52,null],[11,"interface_name","","",52,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",52,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",52,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"status","","",52,{"inputs":[{"name":"self"}],"output":{"name":"liveness"}}],[11,"equals","","",52,{"inputs":[{"name":"self"},{"name":"wlshm"}],"output":{"name":"bool"}}],[11,"set_user_data","","",52,null],[11,"get_user_data","","",52,null],[11,"clone_unchecked","","",52,{"inputs":[{"name":"self"}],"output":{"name":"wlshm"}}],[11,"__dispatch_msg","","",52,null],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"from_raw","","",10,{"inputs":[{"name":"u32"}],"output":{"generics":["error"],"name":"option"}}],[11,"to_raw","","",10,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"format"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"format"}],"output":{"name":"bool"}}],[11,"from_raw","","",11,{"inputs":[{"name":"u32"}],"output":{"generics":["format"],"name":"option"}}],[11,"to_raw","","",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"implementation"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"implementation"}],"output":{"name":"bool"}}],[11,"create_pool","","create a shm pool",52,{"inputs":[{"name":"self"},{"name":"rawfd"},{"name":"i32"}],"output":{"name":"wlshmpool"}}],[11,"ptr","wayland_client::protocol::wl_buffer","",53,null],[11,"from_ptr_new","","",53,null],[11,"from_ptr_initialized","","",53,null],[11,"interface_ptr","","",53,null],[11,"interface_name","","",53,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",53,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",53,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"status","","",53,{"inputs":[{"name":"self"}],"output":{"name":"liveness"}}],[11,"equals","","",53,{"inputs":[{"name":"self"},{"name":"wlbuffer"}],"output":{"name":"bool"}}],[11,"set_user_data","","",53,null],[11,"get_user_data","","",53,null],[11,"clone_unchecked","","",53,{"inputs":[{"name":"self"}],"output":{"name":"wlbuffer"}}],[11,"__dispatch_msg","","",53,null],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"implementation"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"implementation"}],"output":{"name":"bool"}}],[11,"destroy","","destroy a buffer",53,{"inputs":[{"name":"self"}],"output":{"name":"requestresult"}}],[11,"ptr","wayland_client::protocol::wl_data_offer","",54,null],[11,"from_ptr_new","","",54,null],[11,"from_ptr_initialized","","",54,null],[11,"interface_ptr","","",54,null],[11,"interface_name","","",54,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",54,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",54,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"status","","",54,{"inputs":[{"name":"self"}],"output":{"name":"liveness"}}],[11,"equals","","",54,{"inputs":[{"name":"self"},{"name":"wldataoffer"}],"output":{"name":"bool"}}],[11,"set_user_data","","",54,null],[11,"get_user_data","","",54,null],[11,"clone_unchecked","","",54,{"inputs":[{"name":"self"}],"output":{"name":"wldataoffer"}}],[11,"__dispatch_msg","","",54,null],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"from_raw","","",14,{"inputs":[{"name":"u32"}],"output":{"generics":["error"],"name":"option"}}],[11,"to_raw","","",14,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"implementation"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"implementation"}],"output":{"name":"bool"}}],[11,"accept","","accept one of the offered mime types",54,{"inputs":[{"name":"self"},{"name":"u32"},{"generics":["string"],"name":"option"}],"output":{"name":"requestresult"}}],[11,"receive","","request that the data is transferred",54,{"inputs":[{"name":"self"},{"name":"string"},{"name":"rawfd"}],"output":{"name":"requestresult"}}],[11,"destroy","","destroy data offer",54,{"inputs":[{"name":"self"}],"output":{"name":"requestresult"}}],[11,"finish","","the offer will no longer be used",54,{"inputs":[{"name":"self"}],"output":{"name":"requestresult"}}],[11,"set_actions","","set the available/preferred drag-and-drop actions",54,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":{"name":"requestresult"}}],[11,"ptr","wayland_client::protocol::wl_data_source","",55,null],[11,"from_ptr_new","","",55,null],[11,"from_ptr_initialized","","",55,null],[11,"interface_ptr","","",55,null],[11,"interface_name","","",55,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",55,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",55,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"status","","",55,{"inputs":[{"name":"self"}],"output":{"name":"liveness"}}],[11,"equals","","",55,{"inputs":[{"name":"self"},{"name":"wldatasource"}],"output":{"name":"bool"}}],[11,"set_user_data","","",55,null],[11,"get_user_data","","",55,null],[11,"clone_unchecked","","",55,{"inputs":[{"name":"self"}],"output":{"name":"wldatasource"}}],[11,"__dispatch_msg","","",55,null],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"from_raw","","",16,{"inputs":[{"name":"u32"}],"output":{"generics":["error"],"name":"option"}}],[11,"to_raw","","",16,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"implementation"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"implementation"}],"output":{"name":"bool"}}],[11,"offer","","add an offered mime type",55,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"requestresult"}}],[11,"destroy","","destroy the data source",55,{"inputs":[{"name":"self"}],"output":{"name":"requestresult"}}],[11,"set_actions","","set the available drag-and-drop actions",55,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"requestresult"}}],[11,"ptr","wayland_client::protocol::wl_data_device","",56,null],[11,"from_ptr_new","","",56,null],[11,"from_ptr_initialized","","",56,null],[11,"interface_ptr","","",56,null],[11,"interface_name","","",56,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",56,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",56,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"status","","",56,{"inputs":[{"name":"self"}],"output":{"name":"liveness"}}],[11,"equals","","",56,{"inputs":[{"name":"self"},{"name":"wldatadevice"}],"output":{"name":"bool"}}],[11,"set_user_data","","",56,null],[11,"get_user_data","","",56,null],[11,"clone_unchecked","","",56,{"inputs":[{"name":"self"}],"output":{"name":"wldatadevice"}}],[11,"__dispatch_msg","","",56,null],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"from_raw","","",18,{"inputs":[{"name":"u32"}],"output":{"generics":["error"],"name":"option"}}],[11,"to_raw","","",18,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"implementation"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"implementation"}],"output":{"name":"bool"}}],[11,"start_drag","","start drag-and-drop operation",56,{"inputs":[{"name":"self"},{"generics":["wldatasource"],"name":"option"},{"name":"wlsurface"},{"generics":["wlsurface"],"name":"option"},{"name":"u32"}],"output":{"name":"requestresult"}}],[11,"set_selection","","copy data to the selection",56,{"inputs":[{"name":"self"},{"generics":["wldatasource"],"name":"option"},{"name":"u32"}],"output":{"name":"requestresult"}}],[11,"release","","destroy data device",56,{"inputs":[{"name":"self"}],"output":{"name":"requestresult"}}],[11,"ptr","wayland_client::protocol::wl_data_device_manager","",57,null],[11,"from_ptr_new","","",57,null],[11,"from_ptr_initialized","","",57,null],[11,"interface_ptr","","",57,null],[11,"interface_name","","",57,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",57,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",57,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"status","","",57,{"inputs":[{"name":"self"}],"output":{"name":"liveness"}}],[11,"equals","","",57,{"inputs":[{"name":"self"},{"name":"wldatadevicemanager"}],"output":{"name":"bool"}}],[11,"set_user_data","","",57,null],[11,"get_user_data","","",57,null],[11,"clone_unchecked","","",57,{"inputs":[{"name":"self"}],"output":{"name":"wldatadevicemanager"}}],[11,"eq","","",58,{"inputs":[{"name":"self"},{"name":"dndaction"}],"output":{"name":"bool"}}],[11,"ne","","",58,{"inputs":[{"name":"self"},{"name":"dndaction"}],"output":{"name":"bool"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"dndaction"}}],[11,"partial_cmp","","",58,{"inputs":[{"name":"self"},{"name":"dndaction"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",58,{"inputs":[{"name":"self"},{"name":"dndaction"}],"output":{"name":"bool"}}],[11,"le","","",58,{"inputs":[{"name":"self"},{"name":"dndaction"}],"output":{"name":"bool"}}],[11,"gt","","",58,{"inputs":[{"name":"self"},{"name":"dndaction"}],"output":{"name":"bool"}}],[11,"ge","","",58,{"inputs":[{"name":"self"},{"name":"dndaction"}],"output":{"name":"bool"}}],[11,"cmp","","",58,{"inputs":[{"name":"self"},{"name":"dndaction"}],"output":{"name":"ordering"}}],[11,"hash","","",58,null],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"None","","no action",58,null],[18,"Copy","","copy action",58,null],[18,"Move","","move action",58,null],[18,"Ask","","ask action",58,null],[11,"empty","","Returns an empty set of flags.",58,{"inputs":[],"output":{"name":"dndaction"}}],[11,"all","","Returns the set containing all flags.",58,{"inputs":[],"output":{"name":"dndaction"}}],[11,"bits","","Returns the raw value of the flags currently stored.",58,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",58,{"inputs":[{"name":"u32"}],"output":{"generics":["dndaction"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",58,{"inputs":[{"name":"u32"}],"output":{"name":"dndaction"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",58,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",58,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",58,{"inputs":[{"name":"self"},{"name":"dndaction"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",58,{"inputs":[{"name":"self"},{"name":"dndaction"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",58,{"inputs":[{"name":"self"},{"name":"dndaction"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",58,{"inputs":[{"name":"self"},{"name":"dndaction"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",58,{"inputs":[{"name":"self"},{"name":"dndaction"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",58,{"inputs":[{"name":"self"},{"name":"dndaction"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",58,{"inputs":[{"name":"self"},{"name":"dndaction"}],"output":{"name":"dndaction"}}],[11,"bitor_assign","","Adds the set of flags.",58,{"inputs":[{"name":"self"},{"name":"dndaction"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",58,{"inputs":[{"name":"self"},{"name":"dndaction"}],"output":{"name":"dndaction"}}],[11,"bitxor_assign","","Toggles the set of flags.",58,{"inputs":[{"name":"self"},{"name":"dndaction"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",58,{"inputs":[{"name":"self"},{"name":"dndaction"}],"output":{"name":"dndaction"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",58,{"inputs":[{"name":"self"},{"name":"dndaction"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",58,{"inputs":[{"name":"self"},{"name":"dndaction"}],"output":{"name":"dndaction"}}],[11,"sub_assign","","Disables all flags enabled in the set.",58,{"inputs":[{"name":"self"},{"name":"dndaction"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",58,{"inputs":[{"name":"self"}],"output":{"name":"dndaction"}}],[11,"extend","","",58,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",58,{"inputs":[{"name":"t"}],"output":{"name":"dndaction"}}],[11,"from_raw","","",58,{"inputs":[{"name":"u32"}],"output":{"generics":["dndaction"],"name":"option"}}],[11,"to_raw","","",58,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"create_data_source","","create a new data source",57,{"inputs":[{"name":"self"}],"output":{"name":"wldatasource"}}],[11,"get_data_device","","create a new data device",57,{"inputs":[{"name":"self"},{"name":"wlseat"}],"output":{"name":"wldatadevice"}}],[11,"ptr","wayland_client::protocol::wl_shell","",59,null],[11,"from_ptr_new","","",59,null],[11,"from_ptr_initialized","","",59,null],[11,"interface_ptr","","",59,null],[11,"interface_name","","",59,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",59,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",59,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"status","","",59,{"inputs":[{"name":"self"}],"output":{"name":"liveness"}}],[11,"equals","","",59,{"inputs":[{"name":"self"},{"name":"wlshell"}],"output":{"name":"bool"}}],[11,"set_user_data","","",59,null],[11,"get_user_data","","",59,null],[11,"clone_unchecked","","",59,{"inputs":[{"name":"self"}],"output":{"name":"wlshell"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"from_raw","","",19,{"inputs":[{"name":"u32"}],"output":{"generics":["error"],"name":"option"}}],[11,"to_raw","","",19,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_shell_surface","","create a shell surface from a surface",59,{"inputs":[{"name":"self"},{"name":"wlsurface"}],"output":{"name":"wlshellsurface"}}],[11,"ptr","wayland_client::protocol::wl_shell_surface","",60,null],[11,"from_ptr_new","","",60,null],[11,"from_ptr_initialized","","",60,null],[11,"interface_ptr","","",60,null],[11,"interface_name","","",60,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",60,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",60,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"status","","",60,{"inputs":[{"name":"self"}],"output":{"name":"liveness"}}],[11,"equals","","",60,{"inputs":[{"name":"self"},{"name":"wlshellsurface"}],"output":{"name":"bool"}}],[11,"set_user_data","","",60,null],[11,"get_user_data","","",60,null],[11,"clone_unchecked","","",60,{"inputs":[{"name":"self"}],"output":{"name":"wlshellsurface"}}],[11,"__dispatch_msg","","",60,null],[11,"eq","","",61,{"inputs":[{"name":"self"},{"name":"resize"}],"output":{"name":"bool"}}],[11,"ne","","",61,{"inputs":[{"name":"self"},{"name":"resize"}],"output":{"name":"bool"}}],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"resize"}}],[11,"partial_cmp","","",61,{"inputs":[{"name":"self"},{"name":"resize"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",61,{"inputs":[{"name":"self"},{"name":"resize"}],"output":{"name":"bool"}}],[11,"le","","",61,{"inputs":[{"name":"self"},{"name":"resize"}],"output":{"name":"bool"}}],[11,"gt","","",61,{"inputs":[{"name":"self"},{"name":"resize"}],"output":{"name":"bool"}}],[11,"ge","","",61,{"inputs":[{"name":"self"},{"name":"resize"}],"output":{"name":"bool"}}],[11,"cmp","","",61,{"inputs":[{"name":"self"},{"name":"resize"}],"output":{"name":"ordering"}}],[11,"hash","","",61,null],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"None","","no edge",61,null],[18,"Top","","top edge",61,null],[18,"Bottom","","bottom edge",61,null],[18,"Left","","left edge",61,null],[18,"TopLeft","","top and left edges",61,null],[18,"BottomLeft","","bottom and left edges",61,null],[18,"Right","","right edge",61,null],[18,"TopRight","","top and right edges",61,null],[18,"BottomRight","","bottom and right edges",61,null],[11,"empty","","Returns an empty set of flags.",61,{"inputs":[],"output":{"name":"resize"}}],[11,"all","","Returns the set containing all flags.",61,{"inputs":[],"output":{"name":"resize"}}],[11,"bits","","Returns the raw value of the flags currently stored.",61,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",61,{"inputs":[{"name":"u32"}],"output":{"generics":["resize"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",61,{"inputs":[{"name":"u32"}],"output":{"name":"resize"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",61,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",61,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",61,{"inputs":[{"name":"self"},{"name":"resize"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",61,{"inputs":[{"name":"self"},{"name":"resize"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",61,{"inputs":[{"name":"self"},{"name":"resize"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",61,{"inputs":[{"name":"self"},{"name":"resize"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",61,{"inputs":[{"name":"self"},{"name":"resize"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",61,{"inputs":[{"name":"self"},{"name":"resize"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",61,{"inputs":[{"name":"self"},{"name":"resize"}],"output":{"name":"resize"}}],[11,"bitor_assign","","Adds the set of flags.",61,{"inputs":[{"name":"self"},{"name":"resize"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",61,{"inputs":[{"name":"self"},{"name":"resize"}],"output":{"name":"resize"}}],[11,"bitxor_assign","","Toggles the set of flags.",61,{"inputs":[{"name":"self"},{"name":"resize"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",61,{"inputs":[{"name":"self"},{"name":"resize"}],"output":{"name":"resize"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",61,{"inputs":[{"name":"self"},{"name":"resize"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",61,{"inputs":[{"name":"self"},{"name":"resize"}],"output":{"name":"resize"}}],[11,"sub_assign","","Disables all flags enabled in the set.",61,{"inputs":[{"name":"self"},{"name":"resize"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",61,{"inputs":[{"name":"self"}],"output":{"name":"resize"}}],[11,"extend","","",61,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",61,{"inputs":[{"name":"t"}],"output":{"name":"resize"}}],[11,"from_raw","","",61,{"inputs":[{"name":"u32"}],"output":{"generics":["resize"],"name":"option"}}],[11,"to_raw","","",61,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"eq","","",62,{"inputs":[{"name":"self"},{"name":"transient"}],"output":{"name":"bool"}}],[11,"ne","","",62,{"inputs":[{"name":"self"},{"name":"transient"}],"output":{"name":"bool"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"transient"}}],[11,"partial_cmp","","",62,{"inputs":[{"name":"self"},{"name":"transient"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",62,{"inputs":[{"name":"self"},{"name":"transient"}],"output":{"name":"bool"}}],[11,"le","","",62,{"inputs":[{"name":"self"},{"name":"transient"}],"output":{"name":"bool"}}],[11,"gt","","",62,{"inputs":[{"name":"self"},{"name":"transient"}],"output":{"name":"bool"}}],[11,"ge","","",62,{"inputs":[{"name":"self"},{"name":"transient"}],"output":{"name":"bool"}}],[11,"cmp","","",62,{"inputs":[{"name":"self"},{"name":"transient"}],"output":{"name":"ordering"}}],[11,"hash","","",62,null],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"Inactive","","do not set keyboard focus",62,null],[11,"empty","","Returns an empty set of flags.",62,{"inputs":[],"output":{"name":"transient"}}],[11,"all","","Returns the set containing all flags.",62,{"inputs":[],"output":{"name":"transient"}}],[11,"bits","","Returns the raw value of the flags currently stored.",62,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",62,{"inputs":[{"name":"u32"}],"output":{"generics":["transient"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",62,{"inputs":[{"name":"u32"}],"output":{"name":"transient"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",62,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",62,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",62,{"inputs":[{"name":"self"},{"name":"transient"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",62,{"inputs":[{"name":"self"},{"name":"transient"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",62,{"inputs":[{"name":"self"},{"name":"transient"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",62,{"inputs":[{"name":"self"},{"name":"transient"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",62,{"inputs":[{"name":"self"},{"name":"transient"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",62,{"inputs":[{"name":"self"},{"name":"transient"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",62,{"inputs":[{"name":"self"},{"name":"transient"}],"output":{"name":"transient"}}],[11,"bitor_assign","","Adds the set of flags.",62,{"inputs":[{"name":"self"},{"name":"transient"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",62,{"inputs":[{"name":"self"},{"name":"transient"}],"output":{"name":"transient"}}],[11,"bitxor_assign","","Toggles the set of flags.",62,{"inputs":[{"name":"self"},{"name":"transient"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",62,{"inputs":[{"name":"self"},{"name":"transient"}],"output":{"name":"transient"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",62,{"inputs":[{"name":"self"},{"name":"transient"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",62,{"inputs":[{"name":"self"},{"name":"transient"}],"output":{"name":"transient"}}],[11,"sub_assign","","Disables all flags enabled in the set.",62,{"inputs":[{"name":"self"},{"name":"transient"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",62,{"inputs":[{"name":"self"}],"output":{"name":"transient"}}],[11,"extend","","",62,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",62,{"inputs":[{"name":"t"}],"output":{"name":"transient"}}],[11,"from_raw","","",62,{"inputs":[{"name":"u32"}],"output":{"generics":["transient"],"name":"option"}}],[11,"to_raw","","",62,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"fullscreenmethod"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"fullscreenmethod"}],"output":{"name":"bool"}}],[11,"from_raw","","",21,{"inputs":[{"name":"u32"}],"output":{"generics":["fullscreenmethod"],"name":"option"}}],[11,"to_raw","","",21,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"implementation"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"implementation"}],"output":{"name":"bool"}}],[11,"pong","","respond to a ping event",60,null],[11,"_move","","start an interactive move",60,null],[11,"resize","","start an interactive resize",60,null],[11,"set_toplevel","","make the surface a toplevel surface",60,null],[11,"set_transient","","make the surface a transient surface",60,null],[11,"set_fullscreen","","make the surface a fullscreen surface",60,null],[11,"set_popup","","make the surface a popup surface",60,null],[11,"set_maximized","","make the surface a maximized surface",60,null],[11,"set_title","","set surface title",60,null],[11,"set_class","","set surface class",60,null],[11,"ptr","wayland_client::protocol::wl_surface","",63,null],[11,"from_ptr_new","","",63,null],[11,"from_ptr_initialized","","",63,null],[11,"interface_ptr","","",63,null],[11,"interface_name","","",63,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",63,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",63,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"status","","",63,{"inputs":[{"name":"self"}],"output":{"name":"liveness"}}],[11,"equals","","",63,{"inputs":[{"name":"self"},{"name":"wlsurface"}],"output":{"name":"bool"}}],[11,"set_user_data","","",63,null],[11,"get_user_data","","",63,null],[11,"clone_unchecked","","",63,{"inputs":[{"name":"self"}],"output":{"name":"wlsurface"}}],[11,"__dispatch_msg","","",63,null],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"from_raw","","",23,{"inputs":[{"name":"u32"}],"output":{"generics":["error"],"name":"option"}}],[11,"to_raw","","",23,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"implementation"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"implementation"}],"output":{"name":"bool"}}],[11,"destroy","","delete surface",63,{"inputs":[{"name":"self"}],"output":{"name":"requestresult"}}],[11,"attach","","set the surface contents",63,{"inputs":[{"name":"self"},{"generics":["wlbuffer"],"name":"option"},{"name":"i32"},{"name":"i32"}],"output":{"name":"requestresult"}}],[11,"damage","","mark part of the surface damaged",63,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":{"name":"requestresult"}}],[11,"frame","","request a frame throttling hint",63,{"inputs":[{"name":"self"}],"output":{"generics":["wlcallback"],"name":"requestresult"}}],[11,"set_opaque_region","","set opaque region",63,{"inputs":[{"name":"self"},{"generics":["wlregion"],"name":"option"}],"output":{"name":"requestresult"}}],[11,"set_input_region","","set input region",63,{"inputs":[{"name":"self"},{"generics":["wlregion"],"name":"option"}],"output":{"name":"requestresult"}}],[11,"commit","","commit pending surface state",63,{"inputs":[{"name":"self"}],"output":{"name":"requestresult"}}],[11,"set_buffer_transform","","sets the buffer transformation",63,{"inputs":[{"name":"self"},{"name":"transform"}],"output":{"name":"requestresult"}}],[11,"set_buffer_scale","","sets the buffer scaling factor",63,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"requestresult"}}],[11,"damage_buffer","","mark part of the surface damaged using buffer coordinates",63,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":{"name":"requestresult"}}],[11,"ptr","wayland_client::protocol::wl_seat","",64,null],[11,"from_ptr_new","","",64,null],[11,"from_ptr_initialized","","",64,null],[11,"interface_ptr","","",64,null],[11,"interface_name","","",64,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",64,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",64,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"status","","",64,{"inputs":[{"name":"self"}],"output":{"name":"liveness"}}],[11,"equals","","",64,{"inputs":[{"name":"self"},{"name":"wlseat"}],"output":{"name":"bool"}}],[11,"set_user_data","","",64,null],[11,"get_user_data","","",64,null],[11,"clone_unchecked","","",64,{"inputs":[{"name":"self"}],"output":{"name":"wlseat"}}],[11,"__dispatch_msg","","",64,null],[11,"eq","","",65,{"inputs":[{"name":"self"},{"name":"capability"}],"output":{"name":"bool"}}],[11,"ne","","",65,{"inputs":[{"name":"self"},{"name":"capability"}],"output":{"name":"bool"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"capability"}}],[11,"partial_cmp","","",65,{"inputs":[{"name":"self"},{"name":"capability"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",65,{"inputs":[{"name":"self"},{"name":"capability"}],"output":{"name":"bool"}}],[11,"le","","",65,{"inputs":[{"name":"self"},{"name":"capability"}],"output":{"name":"bool"}}],[11,"gt","","",65,{"inputs":[{"name":"self"},{"name":"capability"}],"output":{"name":"bool"}}],[11,"ge","","",65,{"inputs":[{"name":"self"},{"name":"capability"}],"output":{"name":"bool"}}],[11,"cmp","","",65,{"inputs":[{"name":"self"},{"name":"capability"}],"output":{"name":"ordering"}}],[11,"hash","","",65,null],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"Pointer","","the seat has pointer devices",65,null],[18,"Keyboard","","the seat has one or more keyboards",65,null],[18,"Touch","","the seat has touch devices",65,null],[11,"empty","","Returns an empty set of flags.",65,{"inputs":[],"output":{"name":"capability"}}],[11,"all","","Returns the set containing all flags.",65,{"inputs":[],"output":{"name":"capability"}}],[11,"bits","","Returns the raw value of the flags currently stored.",65,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",65,{"inputs":[{"name":"u32"}],"output":{"generics":["capability"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",65,{"inputs":[{"name":"u32"}],"output":{"name":"capability"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",65,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",65,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",65,{"inputs":[{"name":"self"},{"name":"capability"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",65,{"inputs":[{"name":"self"},{"name":"capability"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",65,{"inputs":[{"name":"self"},{"name":"capability"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",65,{"inputs":[{"name":"self"},{"name":"capability"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",65,{"inputs":[{"name":"self"},{"name":"capability"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",65,{"inputs":[{"name":"self"},{"name":"capability"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",65,{"inputs":[{"name":"self"},{"name":"capability"}],"output":{"name":"capability"}}],[11,"bitor_assign","","Adds the set of flags.",65,{"inputs":[{"name":"self"},{"name":"capability"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",65,{"inputs":[{"name":"self"},{"name":"capability"}],"output":{"name":"capability"}}],[11,"bitxor_assign","","Toggles the set of flags.",65,{"inputs":[{"name":"self"},{"name":"capability"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",65,{"inputs":[{"name":"self"},{"name":"capability"}],"output":{"name":"capability"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",65,{"inputs":[{"name":"self"},{"name":"capability"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",65,{"inputs":[{"name":"self"},{"name":"capability"}],"output":{"name":"capability"}}],[11,"sub_assign","","Disables all flags enabled in the set.",65,{"inputs":[{"name":"self"},{"name":"capability"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",65,{"inputs":[{"name":"self"}],"output":{"name":"capability"}}],[11,"extend","","",65,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",65,{"inputs":[{"name":"t"}],"output":{"name":"capability"}}],[11,"from_raw","","",65,{"inputs":[{"name":"u32"}],"output":{"generics":["capability"],"name":"option"}}],[11,"to_raw","","",65,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"implementation"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"implementation"}],"output":{"name":"bool"}}],[11,"get_pointer","","return pointer object",64,{"inputs":[{"name":"self"}],"output":{"generics":["wlpointer"],"name":"requestresult"}}],[11,"get_keyboard","","return keyboard object",64,{"inputs":[{"name":"self"}],"output":{"generics":["wlkeyboard"],"name":"requestresult"}}],[11,"get_touch","","return touch object",64,{"inputs":[{"name":"self"}],"output":{"generics":["wltouch"],"name":"requestresult"}}],[11,"release","","release the seat object",64,{"inputs":[{"name":"self"}],"output":{"name":"requestresult"}}],[11,"ptr","wayland_client::protocol::wl_pointer","",66,null],[11,"from_ptr_new","","",66,null],[11,"from_ptr_initialized","","",66,null],[11,"interface_ptr","","",66,null],[11,"interface_name","","",66,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",66,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",66,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"status","","",66,{"inputs":[{"name":"self"}],"output":{"name":"liveness"}}],[11,"equals","","",66,{"inputs":[{"name":"self"},{"name":"wlpointer"}],"output":{"name":"bool"}}],[11,"set_user_data","","",66,null],[11,"get_user_data","","",66,null],[11,"clone_unchecked","","",66,{"inputs":[{"name":"self"}],"output":{"name":"wlpointer"}}],[11,"__dispatch_msg","","",66,null],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",26,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"from_raw","","",26,{"inputs":[{"name":"u32"}],"output":{"generics":["error"],"name":"option"}}],[11,"to_raw","","",26,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"buttonstate"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",27,{"inputs":[{"name":"self"},{"name":"buttonstate"}],"output":{"name":"bool"}}],[11,"from_raw","","",27,{"inputs":[{"name":"u32"}],"output":{"generics":["buttonstate"],"name":"option"}}],[11,"to_raw","","",27,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"axis"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"axis"}],"output":{"name":"bool"}}],[11,"from_raw","","",28,{"inputs":[{"name":"u32"}],"output":{"generics":["axis"],"name":"option"}}],[11,"to_raw","","",28,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"axissource"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",29,{"inputs":[{"name":"self"},{"name":"axissource"}],"output":{"name":"bool"}}],[11,"from_raw","","",29,{"inputs":[{"name":"u32"}],"output":{"generics":["axissource"],"name":"option"}}],[11,"to_raw","","",29,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"implementation"}}],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"implementation"}],"output":{"name":"bool"}}],[11,"set_cursor","","set the pointer surface",66,{"inputs":[{"name":"self"},{"name":"u32"},{"generics":["wlsurface"],"name":"option"},{"name":"i32"},{"name":"i32"}],"output":{"name":"requestresult"}}],[11,"release","","release the pointer object",66,{"inputs":[{"name":"self"}],"output":{"name":"requestresult"}}],[11,"ptr","wayland_client::protocol::wl_keyboard","",67,null],[11,"from_ptr_new","","",67,null],[11,"from_ptr_initialized","","",67,null],[11,"interface_ptr","","",67,null],[11,"interface_name","","",67,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",67,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",67,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"status","","",67,{"inputs":[{"name":"self"}],"output":{"name":"liveness"}}],[11,"equals","","",67,{"inputs":[{"name":"self"},{"name":"wlkeyboard"}],"output":{"name":"bool"}}],[11,"set_user_data","","",67,null],[11,"get_user_data","","",67,null],[11,"clone_unchecked","","",67,{"inputs":[{"name":"self"}],"output":{"name":"wlkeyboard"}}],[11,"__dispatch_msg","","",67,null],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"keymapformat"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",31,{"inputs":[{"name":"self"},{"name":"keymapformat"}],"output":{"name":"bool"}}],[11,"from_raw","","",31,{"inputs":[{"name":"u32"}],"output":{"generics":["keymapformat"],"name":"option"}}],[11,"to_raw","","",31,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"keystate"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"keystate"}],"output":{"name":"bool"}}],[11,"from_raw","","",32,{"inputs":[{"name":"u32"}],"output":{"generics":["keystate"],"name":"option"}}],[11,"to_raw","","",32,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"implementation"}}],[11,"eq","","",30,{"inputs":[{"name":"self"},{"name":"implementation"}],"output":{"name":"bool"}}],[11,"release","","release the keyboard object",67,{"inputs":[{"name":"self"}],"output":{"name":"requestresult"}}],[11,"ptr","wayland_client::protocol::wl_touch","",68,null],[11,"from_ptr_new","","",68,null],[11,"from_ptr_initialized","","",68,null],[11,"interface_ptr","","",68,null],[11,"interface_name","","",68,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",68,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",68,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"status","","",68,{"inputs":[{"name":"self"}],"output":{"name":"liveness"}}],[11,"equals","","",68,{"inputs":[{"name":"self"},{"name":"wltouch"}],"output":{"name":"bool"}}],[11,"set_user_data","","",68,null],[11,"get_user_data","","",68,null],[11,"clone_unchecked","","",68,{"inputs":[{"name":"self"}],"output":{"name":"wltouch"}}],[11,"__dispatch_msg","","",68,null],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"implementation"}}],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"implementation"}],"output":{"name":"bool"}}],[11,"release","","release the touch object",68,{"inputs":[{"name":"self"}],"output":{"name":"requestresult"}}],[11,"ptr","wayland_client::protocol::wl_output","",69,null],[11,"from_ptr_new","","",69,null],[11,"from_ptr_initialized","","",69,null],[11,"interface_ptr","","",69,null],[11,"interface_name","","",69,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",69,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",69,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"status","","",69,{"inputs":[{"name":"self"}],"output":{"name":"liveness"}}],[11,"equals","","",69,{"inputs":[{"name":"self"},{"name":"wloutput"}],"output":{"name":"bool"}}],[11,"set_user_data","","",69,null],[11,"get_user_data","","",69,null],[11,"clone_unchecked","","",69,{"inputs":[{"name":"self"}],"output":{"name":"wloutput"}}],[11,"__dispatch_msg","","",69,null],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"subpixel"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",35,{"inputs":[{"name":"self"},{"name":"subpixel"}],"output":{"name":"bool"}}],[11,"from_raw","","",35,{"inputs":[{"name":"u32"}],"output":{"generics":["subpixel"],"name":"option"}}],[11,"to_raw","","",35,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"transform"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"transform"}],"output":{"name":"bool"}}],[11,"from_raw","","",36,{"inputs":[{"name":"u32"}],"output":{"generics":["transform"],"name":"option"}}],[11,"to_raw","","",36,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"eq","","",70,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"ne","","",70,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"mode"}}],[11,"partial_cmp","","",70,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",70,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"le","","",70,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"gt","","",70,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"ge","","",70,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"cmp","","",70,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"name":"ordering"}}],[11,"hash","","",70,null],[11,"fmt","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"Current","","indicates this is the current mode",70,null],[18,"Preferred","","indicates this is the preferred mode",70,null],[11,"empty","","Returns an empty set of flags.",70,{"inputs":[],"output":{"name":"mode"}}],[11,"all","","Returns the set containing all flags.",70,{"inputs":[],"output":{"name":"mode"}}],[11,"bits","","Returns the raw value of the flags currently stored.",70,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",70,{"inputs":[{"name":"u32"}],"output":{"generics":["mode"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",70,{"inputs":[{"name":"u32"}],"output":{"name":"mode"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",70,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",70,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",70,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",70,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",70,{"inputs":[{"name":"self"},{"name":"mode"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",70,{"inputs":[{"name":"self"},{"name":"mode"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",70,{"inputs":[{"name":"self"},{"name":"mode"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",70,{"inputs":[{"name":"self"},{"name":"mode"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",70,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"name":"mode"}}],[11,"bitor_assign","","Adds the set of flags.",70,{"inputs":[{"name":"self"},{"name":"mode"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",70,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"name":"mode"}}],[11,"bitxor_assign","","Toggles the set of flags.",70,{"inputs":[{"name":"self"},{"name":"mode"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",70,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"name":"mode"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",70,{"inputs":[{"name":"self"},{"name":"mode"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",70,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"name":"mode"}}],[11,"sub_assign","","Disables all flags enabled in the set.",70,{"inputs":[{"name":"self"},{"name":"mode"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",70,{"inputs":[{"name":"self"}],"output":{"name":"mode"}}],[11,"extend","","",70,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",70,{"inputs":[{"name":"t"}],"output":{"name":"mode"}}],[11,"from_raw","","",70,{"inputs":[{"name":"u32"}],"output":{"generics":["mode"],"name":"option"}}],[11,"to_raw","","",70,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"implementation"}}],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"implementation"}],"output":{"name":"bool"}}],[11,"release","","release the output object",69,{"inputs":[{"name":"self"}],"output":{"name":"requestresult"}}],[11,"ptr","wayland_client::protocol::wl_region","",71,null],[11,"from_ptr_new","","",71,null],[11,"from_ptr_initialized","","",71,null],[11,"interface_ptr","","",71,null],[11,"interface_name","","",71,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",71,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",71,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"status","","",71,{"inputs":[{"name":"self"}],"output":{"name":"liveness"}}],[11,"equals","","",71,{"inputs":[{"name":"self"},{"name":"wlregion"}],"output":{"name":"bool"}}],[11,"set_user_data","","",71,null],[11,"get_user_data","","",71,null],[11,"clone_unchecked","","",71,{"inputs":[{"name":"self"}],"output":{"name":"wlregion"}}],[11,"destroy","","destroy region",71,{"inputs":[{"name":"self"}],"output":{"name":"requestresult"}}],[11,"add","","add rectangle to region",71,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":{"name":"requestresult"}}],[11,"subtract","","subtract rectangle from region",71,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":{"name":"requestresult"}}],[11,"ptr","wayland_client::protocol::wl_subcompositor","",72,null],[11,"from_ptr_new","","",72,null],[11,"from_ptr_initialized","","",72,null],[11,"interface_ptr","","",72,null],[11,"interface_name","","",72,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",72,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",72,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"status","","",72,{"inputs":[{"name":"self"}],"output":{"name":"liveness"}}],[11,"equals","","",72,{"inputs":[{"name":"self"},{"name":"wlsubcompositor"}],"output":{"name":"bool"}}],[11,"set_user_data","","",72,null],[11,"get_user_data","","",72,null],[11,"clone_unchecked","","",72,{"inputs":[{"name":"self"}],"output":{"name":"wlsubcompositor"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",37,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"from_raw","","",37,{"inputs":[{"name":"u32"}],"output":{"generics":["error"],"name":"option"}}],[11,"to_raw","","",37,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"destroy","","unbind from the subcompositor interface",72,{"inputs":[{"name":"self"}],"output":{"name":"requestresult"}}],[11,"get_subsurface","","give a surface the role sub-surface",72,{"inputs":[{"name":"self"},{"name":"wlsurface"},{"name":"wlsurface"}],"output":{"generics":["wlsubsurface"],"name":"requestresult"}}],[11,"ptr","wayland_client::protocol::wl_subsurface","",73,null],[11,"from_ptr_new","","",73,null],[11,"from_ptr_initialized","","",73,null],[11,"interface_ptr","","",73,null],[11,"interface_name","","",73,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",73,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",73,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"status","","",73,{"inputs":[{"name":"self"}],"output":{"name":"liveness"}}],[11,"equals","","",73,{"inputs":[{"name":"self"},{"name":"wlsubsurface"}],"output":{"name":"bool"}}],[11,"set_user_data","","",73,null],[11,"get_user_data","","",73,null],[11,"clone_unchecked","","",73,{"inputs":[{"name":"self"}],"output":{"name":"wlsubsurface"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",38,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"from_raw","","",38,{"inputs":[{"name":"u32"}],"output":{"generics":["error"],"name":"option"}}],[11,"to_raw","","",38,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"destroy","","remove sub-surface interface",73,{"inputs":[{"name":"self"}],"output":{"name":"requestresult"}}],[11,"set_position","","reposition the sub-surface",73,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":{"name":"requestresult"}}],[11,"place_above","","restack the sub-surface",73,{"inputs":[{"name":"self"},{"name":"wlsurface"}],"output":{"name":"requestresult"}}],[11,"place_below","","restack the sub-surface",73,{"inputs":[{"name":"self"},{"name":"wlsurface"}],"output":{"name":"requestresult"}}],[11,"set_sync","","set sub-surface to synchronized mode",73,{"inputs":[{"name":"self"}],"output":{"name":"requestresult"}}],[11,"set_desync","","set sub-surface to desynchronized mode",73,{"inputs":[{"name":"self"}],"output":{"name":"requestresult"}}],[0,"sys","wayland_client","Reexports of types and objects from wayland-sys",null,null],[8,"Proxy","","Common routines for wayland proxy objects.",null,null],[10,"ptr","","Pointer to the underlying wayland proxy object",74,null],[10,"from_ptr_new","","Create an instance from a wayland pointer",74,null],[10,"from_ptr_initialized","","Create an instance from a wayland pointer",74,null],[10,"interface_ptr","","Pointer to the interface representation",74,null],[10,"interface_name","","Internal wayland name of this interface",74,{"inputs":[],"output":{"name":"str"}}],[10,"supported_version","","Max version of this interface supported",74,{"inputs":[],"output":{"name":"u32"}}],[10,"version","","Current version of the interface this proxy is instantiated with",74,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"status","","Check if the proxy behind this handle is actually still alive",74,{"inputs":[{"name":"self"}],"output":{"name":"liveness"}}],[10,"equals","","Check of two handles are actually the same wayland object",74,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[10,"set_user_data","","Set a pointer associated as user data on this proxy",74,null],[10,"get_user_data","","Get the pointer associated as user data on this proxy",74,null],[11,"clone","","Clone this proxy handle",74,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"clone_unchecked","","Unsafely clone this proxy handle",74,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[8,"Implementable","","Common trait for wayland objects that can be registered to an EventQueue",null,null],[16,"Implementation","","The type containing the implementation for the event callbacks",75,null],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"expect","","Assert that result is successfull and extract the value.",4,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"t"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"liveness"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"liveness"}],"output":{"name":"bool"}}],[14,"wayland_env","","Create an environment handling struct",null,null],[11,"new","","Create a new store",76,{"inputs":[],"output":{"name":"store"}}],[11,"insert","","Insert a new value in this store",76,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"token"}}],[11,"get","","Access value previously inserted in this store",76,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"v"}}],[11,"get_mut","","Mutably access value previously inserted in this store",76,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"v"}}],[11,"remove","","Remove a value previously inserted in this store",76,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"v"}}],[11,"with_value","","Create a sub-scope with access to a value",76,{"inputs":[{"name":"self"},{"name":"token"},{"name":"f"}],"output":{"name":"t"}}],[11,"as_proxy","","See this `Store` as a `StoreProxy` with no ongoing borrow",76,{"inputs":[{"name":"self"}],"output":{"name":"storeproxy"}}],[11,"from","","",77,{"inputs":[{"name":"storeproxy"}],"output":{"name":"storeproxy"}}],[11,"from","","",77,{"inputs":[{"name":"store"}],"output":{"name":"storeproxy"}}],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"token"}}],[11,"insert","","Insert a new value in the proxified store",77,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"token"}}],[11,"get","","Access value previously inserted in the proxified store",77,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"v"}}],[11,"get_mut","","Mutably access value previously inserted in the proxified store",77,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"v"}}],[11,"remove","","Remove a value previously inserted in the proxified store",77,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"v"}}],[11,"with_value","","Create a sub-scope with access to a value",77,{"inputs":[{"name":"self"},{"name":"token"},{"name":"f"}],"output":{"name":"t"}}],[11,"valid","","Check wether this token is still valid",78,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}]],"paths":[[3,"EnvNotify"],[4,"ConnectError"],[4,"FatalError"],[4,"RegisterStatus"],[4,"RequestResult"],[4,"Liveness"],[4,"Error"],[3,"Implementation"],[3,"Implementation"],[3,"Implementation"],[4,"Error"],[4,"Format"],[3,"Implementation"],[3,"Implementation"],[4,"Error"],[3,"Implementation"],[4,"Error"],[3,"Implementation"],[4,"Error"],[4,"Error"],[3,"Implementation"],[4,"FullscreenMethod"],[3,"Implementation"],[4,"Error"],[3,"Implementation"],[3,"Implementation"],[4,"Error"],[4,"ButtonState"],[4,"Axis"],[4,"AxisSource"],[3,"Implementation"],[4,"KeymapFormat"],[4,"KeyState"],[3,"Implementation"],[3,"Implementation"],[4,"Subpixel"],[4,"Transform"],[4,"Error"],[4,"Error"],[3,"WlDisplay"],[3,"EventQueueHandle"],[3,"EventQueue"],[3,"ReadEventsGuard"],[3,"EnvHandler"],[3,"WlEglSurface"],[3,"CursorTheme"],[3,"Cursor"],[3,"CursorImageBuffer"],[3,"WlRegistry"],[3,"WlCallback"],[3,"WlCompositor"],[3,"WlShmPool"],[3,"WlShm"],[3,"WlBuffer"],[3,"WlDataOffer"],[3,"WlDataSource"],[3,"WlDataDevice"],[3,"WlDataDeviceManager"],[3,"DndAction"],[3,"WlShell"],[3,"WlShellSurface"],[3,"Resize"],[3,"Transient"],[3,"WlSurface"],[3,"WlSeat"],[3,"Capability"],[3,"WlPointer"],[3,"WlKeyboard"],[3,"WlTouch"],[3,"WlOutput"],[3,"Mode"],[3,"WlRegion"],[3,"WlSubcompositor"],[3,"WlSubsurface"],[8,"Proxy"],[8,"Implementable"],[3,"State"],[3,"StateProxy"],[3,"StateToken"]]};
searchIndex["wayland_kbd"] = {"doc":"Keyboard mapping utility for `wayland-client` using libxkbcommon.","items":[[3,"MappedKeyboardImplementation","wayland_kbd","",null,null],[12,"enter","","",0,null],[12,"leave","","",0,null],[12,"key","","",0,null],[12,"repeat_info","","",0,null],[3,"ModifiersState","","Represents the current state of the keyboard modifiers",null,null],[12,"ctrl","","The \"control\" key",1,null],[12,"alt","","The \"alt\" key",1,null],[12,"shift","","The \"shift\" key",1,null],[12,"caps_lock","","The \"Caps lock\" key",1,null],[12,"logo","","The \"logo\" key",1,null],[12,"num_lock","","The \"Num lock\" key",1,null],[3,"RMLVO","","The RMLVO description of a keymap",null,null],[12,"rules","","The rules file to use",2,null],[12,"model","","The keyboard model by which to interpret keycodes and LEDs",2,null],[12,"layout","","A comma seperated list of layouts (languages) to include in the keymap",2,null],[12,"variant","","A comma seperated list of variants, one per layout, which may modify or augment the respective layout in various ways",2,null],[12,"options","","A comma seprated list of options, through which the user specifies non-layout related preferences, like which key combinations are used for switching layouts, or which key is the Compose key.",2,null],[4,"MappedKeyboardError","","An error that occured while trying to initialize a mapped keyboard",null,null],[13,"XKBNotFound","","libxkbcommon is not available",3,null],[13,"BadNames","","Provided RMLVO sepcified a keymap that would not be loaded",3,null],[5,"register_kbd","","Register a keyboard with the implementation provided by this crate",null,{"inputs":[{"name":"eventqueuehandle"},{"name":"wlkeyboard"},{"name":"mappedkeyboardimplementation"},{"name":"id"}],"output":{"generics":["mappedkeyboarderror"],"name":"result"}}],[5,"register_kbd_from_rmlvo","","Register a keyboard with the implementation provided by this crate",null,{"inputs":[{"name":"eventqueuehandle"},{"name":"wlkeyboard"},{"name":"mappedkeyboardimplementation"},{"name":"id"},{"name":"rmlvo"}],"output":{"generics":["mappedkeyboarderror"],"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"modifiersstate"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"keysyms","","",null,null],[17,"XKB_KEY_VoidSymbol","wayland_kbd::keysyms","",null,null],[17,"XKB_KEY_BackSpace","","",null,null],[17,"XKB_KEY_Tab","","",null,null],[17,"XKB_KEY_Linefeed","","",null,null],[17,"XKB_KEY_Clear","","",null,null],[17,"XKB_KEY_Return","","",null,null],[17,"XKB_KEY_Pause","","",null,null],[17,"XKB_KEY_Scroll_Lock","","",null,null],[17,"XKB_KEY_Sys_Req","","",null,null],[17,"XKB_KEY_Escape","","",null,null],[17,"XKB_KEY_Delete","","",null,null],[17,"XKB_KEY_Multi_key","","",null,null],[17,"XKB_KEY_Codeinput","","",null,null],[17,"XKB_KEY_SingleCandidate","","",null,null],[17,"XKB_KEY_MultipleCandidate","","",null,null],[17,"XKB_KEY_PreviousCandidate","","",null,null],[17,"XKB_KEY_Kanji","","",null,null],[17,"XKB_KEY_Muhenkan","","",null,null],[17,"XKB_KEY_Henkan_Mode","","",null,null],[17,"XKB_KEY_Henkan","","",null,null],[17,"XKB_KEY_Romaji","","",null,null],[17,"XKB_KEY_Hiragana","","",null,null],[17,"XKB_KEY_Katakana","","",null,null],[17,"XKB_KEY_Hiragana_Katakana","","",null,null],[17,"XKB_KEY_Zenkaku","","",null,null],[17,"XKB_KEY_Hankaku","","",null,null],[17,"XKB_KEY_Zenkaku_Hankaku","","",null,null],[17,"XKB_KEY_Touroku","","",null,null],[17,"XKB_KEY_Massyo","","",null,null],[17,"XKB_KEY_Kana_Lock","","",null,null],[17,"XKB_KEY_Kana_Shift","","",null,null],[17,"XKB_KEY_Eisu_Shift","","",null,null],[17,"XKB_KEY_Eisu_toggle","","",null,null],[17,"XKB_KEY_Kanji_Bangou","","",null,null],[17,"XKB_KEY_Zen_Koho","","",null,null],[17,"XKB_KEY_Mae_Koho","","",null,null],[17,"XKB_KEY_Home","","",null,null],[17,"XKB_KEY_Left","","",null,null],[17,"XKB_KEY_Up","","",null,null],[17,"XKB_KEY_Right","","",null,null],[17,"XKB_KEY_Down","","",null,null],[17,"XKB_KEY_Prior","","",null,null],[17,"XKB_KEY_Page_Up","","",null,null],[17,"XKB_KEY_Next","","",null,null],[17,"XKB_KEY_Page_Down","","",null,null],[17,"XKB_KEY_End","","",null,null],[17,"XKB_KEY_Begin","","",null,null],[17,"XKB_KEY_Select","","",null,null],[17,"XKB_KEY_Print","","",null,null],[17,"XKB_KEY_Execute","","",null,null],[17,"XKB_KEY_Insert","","",null,null],[17,"XKB_KEY_Undo","","",null,null],[17,"XKB_KEY_Redo","","",null,null],[17,"XKB_KEY_Menu","","",null,null],[17,"XKB_KEY_Find","","",null,null],[17,"XKB_KEY_Cancel","","",null,null],[17,"XKB_KEY_Help","","",null,null],[17,"XKB_KEY_Break","","",null,null],[17,"XKB_KEY_Mode_switch","","",null,null],[17,"XKB_KEY_script_switch","","",null,null],[17,"XKB_KEY_Num_Lock","","",null,null],[17,"XKB_KEY_KP_Space","","",null,null],[17,"XKB_KEY_KP_Tab","","",null,null],[17,"XKB_KEY_KP_Enter","","",null,null],[17,"XKB_KEY_KP_F1","","",null,null],[17,"XKB_KEY_KP_F2","","",null,null],[17,"XKB_KEY_KP_F3","","",null,null],[17,"XKB_KEY_KP_F4","","",null,null],[17,"XKB_KEY_KP_Home","","",null,null],[17,"XKB_KEY_KP_Left","","",null,null],[17,"XKB_KEY_KP_Up","","",null,null],[17,"XKB_KEY_KP_Right","","",null,null],[17,"XKB_KEY_KP_Down","","",null,null],[17,"XKB_KEY_KP_Prior","","",null,null],[17,"XKB_KEY_KP_Page_Up","","",null,null],[17,"XKB_KEY_KP_Next","","",null,null],[17,"XKB_KEY_KP_Page_Down","","",null,null],[17,"XKB_KEY_KP_End","","",null,null],[17,"XKB_KEY_KP_Begin","","",null,null],[17,"XKB_KEY_KP_Insert","","",null,null],[17,"XKB_KEY_KP_Delete","","",null,null],[17,"XKB_KEY_KP_Equal","","",null,null],[17,"XKB_KEY_KP_Multiply","","",null,null],[17,"XKB_KEY_KP_Add","","",null,null],[17,"XKB_KEY_KP_Separator","","",null,null],[17,"XKB_KEY_KP_Subtract","","",null,null],[17,"XKB_KEY_KP_Decimal","","",null,null],[17,"XKB_KEY_KP_Divide","","",null,null],[17,"XKB_KEY_KP_0","","",null,null],[17,"XKB_KEY_KP_1","","",null,null],[17,"XKB_KEY_KP_2","","",null,null],[17,"XKB_KEY_KP_3","","",null,null],[17,"XKB_KEY_KP_4","","",null,null],[17,"XKB_KEY_KP_5","","",null,null],[17,"XKB_KEY_KP_6","","",null,null],[17,"XKB_KEY_KP_7","","",null,null],[17,"XKB_KEY_KP_8","","",null,null],[17,"XKB_KEY_KP_9","","",null,null],[17,"XKB_KEY_F1","","",null,null],[17,"XKB_KEY_F2","","",null,null],[17,"XKB_KEY_F3","","",null,null],[17,"XKB_KEY_F4","","",null,null],[17,"XKB_KEY_F5","","",null,null],[17,"XKB_KEY_F6","","",null,null],[17,"XKB_KEY_F7","","",null,null],[17,"XKB_KEY_F8","","",null,null],[17,"XKB_KEY_F9","","",null,null],[17,"XKB_KEY_F10","","",null,null],[17,"XKB_KEY_F11","","",null,null],[17,"XKB_KEY_L1","","",null,null],[17,"XKB_KEY_F12","","",null,null],[17,"XKB_KEY_L2","","",null,null],[17,"XKB_KEY_F13","","",null,null],[17,"XKB_KEY_L3","","",null,null],[17,"XKB_KEY_F14","","",null,null],[17,"XKB_KEY_L4","","",null,null],[17,"XKB_KEY_F15","","",null,null],[17,"XKB_KEY_L5","","",null,null],[17,"XKB_KEY_F16","","",null,null],[17,"XKB_KEY_L6","","",null,null],[17,"XKB_KEY_F17","","",null,null],[17,"XKB_KEY_L7","","",null,null],[17,"XKB_KEY_F18","","",null,null],[17,"XKB_KEY_L8","","",null,null],[17,"XKB_KEY_F19","","",null,null],[17,"XKB_KEY_L9","","",null,null],[17,"XKB_KEY_F20","","",null,null],[17,"XKB_KEY_L10","","",null,null],[17,"XKB_KEY_F21","","",null,null],[17,"XKB_KEY_R1","","",null,null],[17,"XKB_KEY_F22","","",null,null],[17,"XKB_KEY_R2","","",null,null],[17,"XKB_KEY_F23","","",null,null],[17,"XKB_KEY_R3","","",null,null],[17,"XKB_KEY_F24","","",null,null],[17,"XKB_KEY_R4","","",null,null],[17,"XKB_KEY_F25","","",null,null],[17,"XKB_KEY_R5","","",null,null],[17,"XKB_KEY_F26","","",null,null],[17,"XKB_KEY_R6","","",null,null],[17,"XKB_KEY_F27","","",null,null],[17,"XKB_KEY_R7","","",null,null],[17,"XKB_KEY_F28","","",null,null],[17,"XKB_KEY_R8","","",null,null],[17,"XKB_KEY_F29","","",null,null],[17,"XKB_KEY_R9","","",null,null],[17,"XKB_KEY_F30","","",null,null],[17,"XKB_KEY_R10","","",null,null],[17,"XKB_KEY_F31","","",null,null],[17,"XKB_KEY_R11","","",null,null],[17,"XKB_KEY_F32","","",null,null],[17,"XKB_KEY_R12","","",null,null],[17,"XKB_KEY_F33","","",null,null],[17,"XKB_KEY_R13","","",null,null],[17,"XKB_KEY_F34","","",null,null],[17,"XKB_KEY_R14","","",null,null],[17,"XKB_KEY_F35","","",null,null],[17,"XKB_KEY_R15","","",null,null],[17,"XKB_KEY_Shift_L","","",null,null],[17,"XKB_KEY_Shift_R","","",null,null],[17,"XKB_KEY_Control_L","","",null,null],[17,"XKB_KEY_Control_R","","",null,null],[17,"XKB_KEY_Caps_Lock","","",null,null],[17,"XKB_KEY_Shift_Lock","","",null,null],[17,"XKB_KEY_Meta_L","","",null,null],[17,"XKB_KEY_Meta_R","","",null,null],[17,"XKB_KEY_Alt_L","","",null,null],[17,"XKB_KEY_Alt_R","","",null,null],[17,"XKB_KEY_Super_L","","",null,null],[17,"XKB_KEY_Super_R","","",null,null],[17,"XKB_KEY_Hyper_L","","",null,null],[17,"XKB_KEY_Hyper_R","","",null,null],[17,"XKB_KEY_ISO_Lock","","",null,null],[17,"XKB_KEY_ISO_Level2_Latch","","",null,null],[17,"XKB_KEY_ISO_Level3_Shift","","",null,null],[17,"XKB_KEY_ISO_Level3_Latch","","",null,null],[17,"XKB_KEY_ISO_Level3_Lock","","",null,null],[17,"XKB_KEY_ISO_Level5_Shift","","",null,null],[17,"XKB_KEY_ISO_Level5_Latch","","",null,null],[17,"XKB_KEY_ISO_Level5_Lock","","",null,null],[17,"XKB_KEY_ISO_Group_Shift","","",null,null],[17,"XKB_KEY_ISO_Group_Latch","","",null,null],[17,"XKB_KEY_ISO_Group_Lock","","",null,null],[17,"XKB_KEY_ISO_Next_Group","","",null,null],[17,"XKB_KEY_ISO_Next_Group_Lock","","",null,null],[17,"XKB_KEY_ISO_Prev_Group","","",null,null],[17,"XKB_KEY_ISO_Prev_Group_Lock","","",null,null],[17,"XKB_KEY_ISO_First_Group","","",null,null],[17,"XKB_KEY_ISO_First_Group_Lock","","",null,null],[17,"XKB_KEY_ISO_Last_Group","","",null,null],[17,"XKB_KEY_ISO_Last_Group_Lock","","",null,null],[17,"XKB_KEY_ISO_Left_Tab","","",null,null],[17,"XKB_KEY_ISO_Move_Line_Up","","",null,null],[17,"XKB_KEY_ISO_Move_Line_Down","","",null,null],[17,"XKB_KEY_ISO_Partial_Line_Up","","",null,null],[17,"XKB_KEY_ISO_Partial_Line_Down","","",null,null],[17,"XKB_KEY_ISO_Partial_Space_Left","","",null,null],[17,"XKB_KEY_ISO_Partial_Space_Right","","",null,null],[17,"XKB_KEY_ISO_Set_Margin_Left","","",null,null],[17,"XKB_KEY_ISO_Set_Margin_Right","","",null,null],[17,"XKB_KEY_ISO_Release_Margin_Left","","",null,null],[17,"XKB_KEY_ISO_Release_Margin_Right","","",null,null],[17,"XKB_KEY_ISO_Release_Both_Margins","","",null,null],[17,"XKB_KEY_ISO_Fast_Cursor_Left","","",null,null],[17,"XKB_KEY_ISO_Fast_Cursor_Right","","",null,null],[17,"XKB_KEY_ISO_Fast_Cursor_Up","","",null,null],[17,"XKB_KEY_ISO_Fast_Cursor_Down","","",null,null],[17,"XKB_KEY_ISO_Continuous_Underline","","",null,null],[17,"XKB_KEY_ISO_Discontinuous_Underline","","",null,null],[17,"XKB_KEY_ISO_Emphasize","","",null,null],[17,"XKB_KEY_ISO_Center_Object","","",null,null],[17,"XKB_KEY_ISO_Enter","","",null,null],[17,"XKB_KEY_dead_grave","","",null,null],[17,"XKB_KEY_dead_acute","","",null,null],[17,"XKB_KEY_dead_circumflex","","",null,null],[17,"XKB_KEY_dead_tilde","","",null,null],[17,"XKB_KEY_dead_perispomeni","","",null,null],[17,"XKB_KEY_dead_macron","","",null,null],[17,"XKB_KEY_dead_breve","","",null,null],[17,"XKB_KEY_dead_abovedot","","",null,null],[17,"XKB_KEY_dead_diaeresis","","",null,null],[17,"XKB_KEY_dead_abovering","","",null,null],[17,"XKB_KEY_dead_doubleacute","","",null,null],[17,"XKB_KEY_dead_caron","","",null,null],[17,"XKB_KEY_dead_cedilla","","",null,null],[17,"XKB_KEY_dead_ogonek","","",null,null],[17,"XKB_KEY_dead_iota","","",null,null],[17,"XKB_KEY_dead_voiced_sound","","",null,null],[17,"XKB_KEY_dead_semivoiced_sound","","",null,null],[17,"XKB_KEY_dead_belowdot","","",null,null],[17,"XKB_KEY_dead_hook","","",null,null],[17,"XKB_KEY_dead_horn","","",null,null],[17,"XKB_KEY_dead_stroke","","",null,null],[17,"XKB_KEY_dead_abovecomma","","",null,null],[17,"XKB_KEY_dead_psili","","",null,null],[17,"XKB_KEY_dead_abovereversedcomma","","",null,null],[17,"XKB_KEY_dead_dasia","","",null,null],[17,"XKB_KEY_dead_doublegrave","","",null,null],[17,"XKB_KEY_dead_belowring","","",null,null],[17,"XKB_KEY_dead_belowmacron","","",null,null],[17,"XKB_KEY_dead_belowcircumflex","","",null,null],[17,"XKB_KEY_dead_belowtilde","","",null,null],[17,"XKB_KEY_dead_belowbreve","","",null,null],[17,"XKB_KEY_dead_belowdiaeresis","","",null,null],[17,"XKB_KEY_dead_invertedbreve","","",null,null],[17,"XKB_KEY_dead_belowcomma","","",null,null],[17,"XKB_KEY_dead_currency","","",null,null],[17,"XKB_KEY_dead_lowline","","",null,null],[17,"XKB_KEY_dead_aboveverticalline","","",null,null],[17,"XKB_KEY_dead_belowverticalline","","",null,null],[17,"XKB_KEY_dead_longsolidusoverlay","","",null,null],[17,"XKB_KEY_dead_a","","",null,null],[17,"XKB_KEY_dead_A","","",null,null],[17,"XKB_KEY_dead_e","","",null,null],[17,"XKB_KEY_dead_E","","",null,null],[17,"XKB_KEY_dead_i","","",null,null],[17,"XKB_KEY_dead_I","","",null,null],[17,"XKB_KEY_dead_o","","",null,null],[17,"XKB_KEY_dead_O","","",null,null],[17,"XKB_KEY_dead_u","","",null,null],[17,"XKB_KEY_dead_U","","",null,null],[17,"XKB_KEY_dead_small_schwa","","",null,null],[17,"XKB_KEY_dead_capital_schwa","","",null,null],[17,"XKB_KEY_dead_greek","","",null,null],[17,"XKB_KEY_First_Virtual_Screen","","",null,null],[17,"XKB_KEY_Prev_Virtual_Screen","","",null,null],[17,"XKB_KEY_Next_Virtual_Screen","","",null,null],[17,"XKB_KEY_Last_Virtual_Screen","","",null,null],[17,"XKB_KEY_Terminate_Server","","",null,null],[17,"XKB_KEY_AccessX_Enable","","",null,null],[17,"XKB_KEY_AccessX_Feedback_Enable","","",null,null],[17,"XKB_KEY_RepeatKeys_Enable","","",null,null],[17,"XKB_KEY_SlowKeys_Enable","","",null,null],[17,"XKB_KEY_BounceKeys_Enable","","",null,null],[17,"XKB_KEY_StickyKeys_Enable","","",null,null],[17,"XKB_KEY_MouseKeys_Enable","","",null,null],[17,"XKB_KEY_MouseKeys_Accel_Enable","","",null,null],[17,"XKB_KEY_Overlay1_Enable","","",null,null],[17,"XKB_KEY_Overlay2_Enable","","",null,null],[17,"XKB_KEY_AudibleBell_Enable","","",null,null],[17,"XKB_KEY_Pointer_Left","","",null,null],[17,"XKB_KEY_Pointer_Right","","",null,null],[17,"XKB_KEY_Pointer_Up","","",null,null],[17,"XKB_KEY_Pointer_Down","","",null,null],[17,"XKB_KEY_Pointer_UpLeft","","",null,null],[17,"XKB_KEY_Pointer_UpRight","","",null,null],[17,"XKB_KEY_Pointer_DownLeft","","",null,null],[17,"XKB_KEY_Pointer_DownRight","","",null,null],[17,"XKB_KEY_Pointer_Button_Dflt","","",null,null],[17,"XKB_KEY_Pointer_Button1","","",null,null],[17,"XKB_KEY_Pointer_Button2","","",null,null],[17,"XKB_KEY_Pointer_Button3","","",null,null],[17,"XKB_KEY_Pointer_Button4","","",null,null],[17,"XKB_KEY_Pointer_Button5","","",null,null],[17,"XKB_KEY_Pointer_DblClick_Dflt","","",null,null],[17,"XKB_KEY_Pointer_DblClick1","","",null,null],[17,"XKB_KEY_Pointer_DblClick2","","",null,null],[17,"XKB_KEY_Pointer_DblClick3","","",null,null],[17,"XKB_KEY_Pointer_DblClick4","","",null,null],[17,"XKB_KEY_Pointer_DblClick5","","",null,null],[17,"XKB_KEY_Pointer_Drag_Dflt","","",null,null],[17,"XKB_KEY_Pointer_Drag1","","",null,null],[17,"XKB_KEY_Pointer_Drag2","","",null,null],[17,"XKB_KEY_Pointer_Drag3","","",null,null],[17,"XKB_KEY_Pointer_Drag4","","",null,null],[17,"XKB_KEY_Pointer_Drag5","","",null,null],[17,"XKB_KEY_Pointer_EnableKeys","","",null,null],[17,"XKB_KEY_Pointer_Accelerate","","",null,null],[17,"XKB_KEY_Pointer_DfltBtnNext","","",null,null],[17,"XKB_KEY_Pointer_DfltBtnPrev","","",null,null],[17,"XKB_KEY_ch","","",null,null],[17,"XKB_KEY_Ch","","",null,null],[17,"XKB_KEY_CH","","",null,null],[17,"XKB_KEY_c_h","","",null,null],[17,"XKB_KEY_C_h","","",null,null],[17,"XKB_KEY_C_H","","",null,null],[17,"XKB_KEY_3270_Duplicate","","",null,null],[17,"XKB_KEY_3270_FieldMark","","",null,null],[17,"XKB_KEY_3270_Right2","","",null,null],[17,"XKB_KEY_3270_Left2","","",null,null],[17,"XKB_KEY_3270_BackTab","","",null,null],[17,"XKB_KEY_3270_EraseEOF","","",null,null],[17,"XKB_KEY_3270_EraseInput","","",null,null],[17,"XKB_KEY_3270_Reset","","",null,null],[17,"XKB_KEY_3270_Quit","","",null,null],[17,"XKB_KEY_3270_PA1","","",null,null],[17,"XKB_KEY_3270_PA2","","",null,null],[17,"XKB_KEY_3270_PA3","","",null,null],[17,"XKB_KEY_3270_Test","","",null,null],[17,"XKB_KEY_3270_Attn","","",null,null],[17,"XKB_KEY_3270_CursorBlink","","",null,null],[17,"XKB_KEY_3270_AltCursor","","",null,null],[17,"XKB_KEY_3270_KeyClick","","",null,null],[17,"XKB_KEY_3270_Jump","","",null,null],[17,"XKB_KEY_3270_Ident","","",null,null],[17,"XKB_KEY_3270_Rule","","",null,null],[17,"XKB_KEY_3270_Copy","","",null,null],[17,"XKB_KEY_3270_Play","","",null,null],[17,"XKB_KEY_3270_Setup","","",null,null],[17,"XKB_KEY_3270_Record","","",null,null],[17,"XKB_KEY_3270_ChangeScreen","","",null,null],[17,"XKB_KEY_3270_DeleteWord","","",null,null],[17,"XKB_KEY_3270_ExSelect","","",null,null],[17,"XKB_KEY_3270_CursorSelect","","",null,null],[17,"XKB_KEY_3270_PrintScreen","","",null,null],[17,"XKB_KEY_3270_Enter","","",null,null],[17,"XKB_KEY_space","","",null,null],[17,"XKB_KEY_exclam","","",null,null],[17,"XKB_KEY_quotedbl","","",null,null],[17,"XKB_KEY_numbersign","","",null,null],[17,"XKB_KEY_dollar","","",null,null],[17,"XKB_KEY_percent","","",null,null],[17,"XKB_KEY_ampersand","","",null,null],[17,"XKB_KEY_apostrophe","","",null,null],[17,"XKB_KEY_quoteright","","",null,null],[17,"XKB_KEY_parenleft","","",null,null],[17,"XKB_KEY_parenright","","",null,null],[17,"XKB_KEY_asterisk","","",null,null],[17,"XKB_KEY_plus","","",null,null],[17,"XKB_KEY_comma","","",null,null],[17,"XKB_KEY_minus","","",null,null],[17,"XKB_KEY_period","","",null,null],[17,"XKB_KEY_slash","","",null,null],[17,"XKB_KEY_0","","",null,null],[17,"XKB_KEY_1","","",null,null],[17,"XKB_KEY_2","","",null,null],[17,"XKB_KEY_3","","",null,null],[17,"XKB_KEY_4","","",null,null],[17,"XKB_KEY_5","","",null,null],[17,"XKB_KEY_6","","",null,null],[17,"XKB_KEY_7","","",null,null],[17,"XKB_KEY_8","","",null,null],[17,"XKB_KEY_9","","",null,null],[17,"XKB_KEY_colon","","",null,null],[17,"XKB_KEY_semicolon","","",null,null],[17,"XKB_KEY_less","","",null,null],[17,"XKB_KEY_equal","","",null,null],[17,"XKB_KEY_greater","","",null,null],[17,"XKB_KEY_question","","",null,null],[17,"XKB_KEY_at","","",null,null],[17,"XKB_KEY_A","","",null,null],[17,"XKB_KEY_B","","",null,null],[17,"XKB_KEY_C","","",null,null],[17,"XKB_KEY_D","","",null,null],[17,"XKB_KEY_E","","",null,null],[17,"XKB_KEY_F","","",null,null],[17,"XKB_KEY_G","","",null,null],[17,"XKB_KEY_H","","",null,null],[17,"XKB_KEY_I","","",null,null],[17,"XKB_KEY_J","","",null,null],[17,"XKB_KEY_K","","",null,null],[17,"XKB_KEY_L","","",null,null],[17,"XKB_KEY_M","","",null,null],[17,"XKB_KEY_N","","",null,null],[17,"XKB_KEY_O","","",null,null],[17,"XKB_KEY_P","","",null,null],[17,"XKB_KEY_Q","","",null,null],[17,"XKB_KEY_R","","",null,null],[17,"XKB_KEY_S","","",null,null],[17,"XKB_KEY_T","","",null,null],[17,"XKB_KEY_U","","",null,null],[17,"XKB_KEY_V","","",null,null],[17,"XKB_KEY_W","","",null,null],[17,"XKB_KEY_X","","",null,null],[17,"XKB_KEY_Y","","",null,null],[17,"XKB_KEY_Z","","",null,null],[17,"XKB_KEY_bracketleft","","",null,null],[17,"XKB_KEY_backslash","","",null,null],[17,"XKB_KEY_bracketright","","",null,null],[17,"XKB_KEY_asciicircum","","",null,null],[17,"XKB_KEY_underscore","","",null,null],[17,"XKB_KEY_grave","","",null,null],[17,"XKB_KEY_quoteleft","","",null,null],[17,"XKB_KEY_a","","",null,null],[17,"XKB_KEY_b","","",null,null],[17,"XKB_KEY_c","","",null,null],[17,"XKB_KEY_d","","",null,null],[17,"XKB_KEY_e","","",null,null],[17,"XKB_KEY_f","","",null,null],[17,"XKB_KEY_g","","",null,null],[17,"XKB_KEY_h","","",null,null],[17,"XKB_KEY_i","","",null,null],[17,"XKB_KEY_j","","",null,null],[17,"XKB_KEY_k","","",null,null],[17,"XKB_KEY_l","","",null,null],[17,"XKB_KEY_m","","",null,null],[17,"XKB_KEY_n","","",null,null],[17,"XKB_KEY_o","","",null,null],[17,"XKB_KEY_p","","",null,null],[17,"XKB_KEY_q","","",null,null],[17,"XKB_KEY_r","","",null,null],[17,"XKB_KEY_s","","",null,null],[17,"XKB_KEY_t","","",null,null],[17,"XKB_KEY_u","","",null,null],[17,"XKB_KEY_v","","",null,null],[17,"XKB_KEY_w","","",null,null],[17,"XKB_KEY_x","","",null,null],[17,"XKB_KEY_y","","",null,null],[17,"XKB_KEY_z","","",null,null],[17,"XKB_KEY_braceleft","","",null,null],[17,"XKB_KEY_bar","","",null,null],[17,"XKB_KEY_braceright","","",null,null],[17,"XKB_KEY_asciitilde","","",null,null],[17,"XKB_KEY_nobreakspace","","",null,null],[17,"XKB_KEY_exclamdown","","",null,null],[17,"XKB_KEY_cent","","",null,null],[17,"XKB_KEY_sterling","","",null,null],[17,"XKB_KEY_currency","","",null,null],[17,"XKB_KEY_yen","","",null,null],[17,"XKB_KEY_brokenbar","","",null,null],[17,"XKB_KEY_section","","",null,null],[17,"XKB_KEY_diaeresis","","",null,null],[17,"XKB_KEY_copyright","","",null,null],[17,"XKB_KEY_ordfeminine","","",null,null],[17,"XKB_KEY_guillemotleft","","",null,null],[17,"XKB_KEY_notsign","","",null,null],[17,"XKB_KEY_hyphen","","",null,null],[17,"XKB_KEY_registered","","",null,null],[17,"XKB_KEY_macron","","",null,null],[17,"XKB_KEY_degree","","",null,null],[17,"XKB_KEY_plusminus","","",null,null],[17,"XKB_KEY_twosuperior","","",null,null],[17,"XKB_KEY_threesuperior","","",null,null],[17,"XKB_KEY_acute","","",null,null],[17,"XKB_KEY_mu","","",null,null],[17,"XKB_KEY_paragraph","","",null,null],[17,"XKB_KEY_periodcentered","","",null,null],[17,"XKB_KEY_cedilla","","",null,null],[17,"XKB_KEY_onesuperior","","",null,null],[17,"XKB_KEY_masculine","","",null,null],[17,"XKB_KEY_guillemotright","","",null,null],[17,"XKB_KEY_onequarter","","",null,null],[17,"XKB_KEY_onehalf","","",null,null],[17,"XKB_KEY_threequarters","","",null,null],[17,"XKB_KEY_questiondown","","",null,null],[17,"XKB_KEY_Agrave","","",null,null],[17,"XKB_KEY_Aacute","","",null,null],[17,"XKB_KEY_Acircumflex","","",null,null],[17,"XKB_KEY_Atilde","","",null,null],[17,"XKB_KEY_Adiaeresis","","",null,null],[17,"XKB_KEY_Aring","","",null,null],[17,"XKB_KEY_AE","","",null,null],[17,"XKB_KEY_Ccedilla","","",null,null],[17,"XKB_KEY_Egrave","","",null,null],[17,"XKB_KEY_Eacute","","",null,null],[17,"XKB_KEY_Ecircumflex","","",null,null],[17,"XKB_KEY_Ediaeresis","","",null,null],[17,"XKB_KEY_Igrave","","",null,null],[17,"XKB_KEY_Iacute","","",null,null],[17,"XKB_KEY_Icircumflex","","",null,null],[17,"XKB_KEY_Idiaeresis","","",null,null],[17,"XKB_KEY_ETH","","",null,null],[17,"XKB_KEY_Eth","","",null,null],[17,"XKB_KEY_Ntilde","","",null,null],[17,"XKB_KEY_Ograve","","",null,null],[17,"XKB_KEY_Oacute","","",null,null],[17,"XKB_KEY_Ocircumflex","","",null,null],[17,"XKB_KEY_Otilde","","",null,null],[17,"XKB_KEY_Odiaeresis","","",null,null],[17,"XKB_KEY_multiply","","",null,null],[17,"XKB_KEY_Oslash","","",null,null],[17,"XKB_KEY_Ooblique","","",null,null],[17,"XKB_KEY_Ugrave","","",null,null],[17,"XKB_KEY_Uacute","","",null,null],[17,"XKB_KEY_Ucircumflex","","",null,null],[17,"XKB_KEY_Udiaeresis","","",null,null],[17,"XKB_KEY_Yacute","","",null,null],[17,"XKB_KEY_THORN","","",null,null],[17,"XKB_KEY_Thorn","","",null,null],[17,"XKB_KEY_ssharp","","",null,null],[17,"XKB_KEY_agrave","","",null,null],[17,"XKB_KEY_aacute","","",null,null],[17,"XKB_KEY_acircumflex","","",null,null],[17,"XKB_KEY_atilde","","",null,null],[17,"XKB_KEY_adiaeresis","","",null,null],[17,"XKB_KEY_aring","","",null,null],[17,"XKB_KEY_ae","","",null,null],[17,"XKB_KEY_ccedilla","","",null,null],[17,"XKB_KEY_egrave","","",null,null],[17,"XKB_KEY_eacute","","",null,null],[17,"XKB_KEY_ecircumflex","","",null,null],[17,"XKB_KEY_ediaeresis","","",null,null],[17,"XKB_KEY_igrave","","",null,null],[17,"XKB_KEY_iacute","","",null,null],[17,"XKB_KEY_icircumflex","","",null,null],[17,"XKB_KEY_idiaeresis","","",null,null],[17,"XKB_KEY_eth","","",null,null],[17,"XKB_KEY_ntilde","","",null,null],[17,"XKB_KEY_ograve","","",null,null],[17,"XKB_KEY_oacute","","",null,null],[17,"XKB_KEY_ocircumflex","","",null,null],[17,"XKB_KEY_otilde","","",null,null],[17,"XKB_KEY_odiaeresis","","",null,null],[17,"XKB_KEY_division","","",null,null],[17,"XKB_KEY_oslash","","",null,null],[17,"XKB_KEY_ooblique","","",null,null],[17,"XKB_KEY_ugrave","","",null,null],[17,"XKB_KEY_uacute","","",null,null],[17,"XKB_KEY_ucircumflex","","",null,null],[17,"XKB_KEY_udiaeresis","","",null,null],[17,"XKB_KEY_yacute","","",null,null],[17,"XKB_KEY_thorn","","",null,null],[17,"XKB_KEY_ydiaeresis","","",null,null],[17,"XKB_KEY_Aogonek","","",null,null],[17,"XKB_KEY_breve","","",null,null],[17,"XKB_KEY_Lstroke","","",null,null],[17,"XKB_KEY_Lcaron","","",null,null],[17,"XKB_KEY_Sacute","","",null,null],[17,"XKB_KEY_Scaron","","",null,null],[17,"XKB_KEY_Scedilla","","",null,null],[17,"XKB_KEY_Tcaron","","",null,null],[17,"XKB_KEY_Zacute","","",null,null],[17,"XKB_KEY_Zcaron","","",null,null],[17,"XKB_KEY_Zabovedot","","",null,null],[17,"XKB_KEY_aogonek","","",null,null],[17,"XKB_KEY_ogonek","","",null,null],[17,"XKB_KEY_lstroke","","",null,null],[17,"XKB_KEY_lcaron","","",null,null],[17,"XKB_KEY_sacute","","",null,null],[17,"XKB_KEY_caron","","",null,null],[17,"XKB_KEY_scaron","","",null,null],[17,"XKB_KEY_scedilla","","",null,null],[17,"XKB_KEY_tcaron","","",null,null],[17,"XKB_KEY_zacute","","",null,null],[17,"XKB_KEY_doubleacute","","",null,null],[17,"XKB_KEY_zcaron","","",null,null],[17,"XKB_KEY_zabovedot","","",null,null],[17,"XKB_KEY_Racute","","",null,null],[17,"XKB_KEY_Abreve","","",null,null],[17,"XKB_KEY_Lacute","","",null,null],[17,"XKB_KEY_Cacute","","",null,null],[17,"XKB_KEY_Ccaron","","",null,null],[17,"XKB_KEY_Eogonek","","",null,null],[17,"XKB_KEY_Ecaron","","",null,null],[17,"XKB_KEY_Dcaron","","",null,null],[17,"XKB_KEY_Dstroke","","",null,null],[17,"XKB_KEY_Nacute","","",null,null],[17,"XKB_KEY_Ncaron","","",null,null],[17,"XKB_KEY_Odoubleacute","","",null,null],[17,"XKB_KEY_Rcaron","","",null,null],[17,"XKB_KEY_Uring","","",null,null],[17,"XKB_KEY_Udoubleacute","","",null,null],[17,"XKB_KEY_Tcedilla","","",null,null],[17,"XKB_KEY_racute","","",null,null],[17,"XKB_KEY_abreve","","",null,null],[17,"XKB_KEY_lacute","","",null,null],[17,"XKB_KEY_cacute","","",null,null],[17,"XKB_KEY_ccaron","","",null,null],[17,"XKB_KEY_eogonek","","",null,null],[17,"XKB_KEY_ecaron","","",null,null],[17,"XKB_KEY_dcaron","","",null,null],[17,"XKB_KEY_dstroke","","",null,null],[17,"XKB_KEY_nacute","","",null,null],[17,"XKB_KEY_ncaron","","",null,null],[17,"XKB_KEY_odoubleacute","","",null,null],[17,"XKB_KEY_rcaron","","",null,null],[17,"XKB_KEY_uring","","",null,null],[17,"XKB_KEY_udoubleacute","","",null,null],[17,"XKB_KEY_tcedilla","","",null,null],[17,"XKB_KEY_abovedot","","",null,null],[17,"XKB_KEY_Hstroke","","",null,null],[17,"XKB_KEY_Hcircumflex","","",null,null],[17,"XKB_KEY_Iabovedot","","",null,null],[17,"XKB_KEY_Gbreve","","",null,null],[17,"XKB_KEY_Jcircumflex","","",null,null],[17,"XKB_KEY_hstroke","","",null,null],[17,"XKB_KEY_hcircumflex","","",null,null],[17,"XKB_KEY_idotless","","",null,null],[17,"XKB_KEY_gbreve","","",null,null],[17,"XKB_KEY_jcircumflex","","",null,null],[17,"XKB_KEY_Cabovedot","","",null,null],[17,"XKB_KEY_Ccircumflex","","",null,null],[17,"XKB_KEY_Gabovedot","","",null,null],[17,"XKB_KEY_Gcircumflex","","",null,null],[17,"XKB_KEY_Ubreve","","",null,null],[17,"XKB_KEY_Scircumflex","","",null,null],[17,"XKB_KEY_cabovedot","","",null,null],[17,"XKB_KEY_ccircumflex","","",null,null],[17,"XKB_KEY_gabovedot","","",null,null],[17,"XKB_KEY_gcircumflex","","",null,null],[17,"XKB_KEY_ubreve","","",null,null],[17,"XKB_KEY_scircumflex","","",null,null],[17,"XKB_KEY_kra","","",null,null],[17,"XKB_KEY_kappa","","",null,null],[17,"XKB_KEY_Rcedilla","","",null,null],[17,"XKB_KEY_Itilde","","",null,null],[17,"XKB_KEY_Lcedilla","","",null,null],[17,"XKB_KEY_Emacron","","",null,null],[17,"XKB_KEY_Gcedilla","","",null,null],[17,"XKB_KEY_Tslash","","",null,null],[17,"XKB_KEY_rcedilla","","",null,null],[17,"XKB_KEY_itilde","","",null,null],[17,"XKB_KEY_lcedilla","","",null,null],[17,"XKB_KEY_emacron","","",null,null],[17,"XKB_KEY_gcedilla","","",null,null],[17,"XKB_KEY_tslash","","",null,null],[17,"XKB_KEY_ENG","","",null,null],[17,"XKB_KEY_eng","","",null,null],[17,"XKB_KEY_Amacron","","",null,null],[17,"XKB_KEY_Iogonek","","",null,null],[17,"XKB_KEY_Eabovedot","","",null,null],[17,"XKB_KEY_Imacron","","",null,null],[17,"XKB_KEY_Ncedilla","","",null,null],[17,"XKB_KEY_Omacron","","",null,null],[17,"XKB_KEY_Kcedilla","","",null,null],[17,"XKB_KEY_Uogonek","","",null,null],[17,"XKB_KEY_Utilde","","",null,null],[17,"XKB_KEY_Umacron","","",null,null],[17,"XKB_KEY_amacron","","",null,null],[17,"XKB_KEY_iogonek","","",null,null],[17,"XKB_KEY_eabovedot","","",null,null],[17,"XKB_KEY_imacron","","",null,null],[17,"XKB_KEY_ncedilla","","",null,null],[17,"XKB_KEY_omacron","","",null,null],[17,"XKB_KEY_kcedilla","","",null,null],[17,"XKB_KEY_uogonek","","",null,null],[17,"XKB_KEY_utilde","","",null,null],[17,"XKB_KEY_umacron","","",null,null],[17,"XKB_KEY_Wcircumflex","","",null,null],[17,"XKB_KEY_wcircumflex","","",null,null],[17,"XKB_KEY_Ycircumflex","","",null,null],[17,"XKB_KEY_ycircumflex","","",null,null],[17,"XKB_KEY_Babovedot","","",null,null],[17,"XKB_KEY_babovedot","","",null,null],[17,"XKB_KEY_Dabovedot","","",null,null],[17,"XKB_KEY_dabovedot","","",null,null],[17,"XKB_KEY_Fabovedot","","",null,null],[17,"XKB_KEY_fabovedot","","",null,null],[17,"XKB_KEY_Mabovedot","","",null,null],[17,"XKB_KEY_mabovedot","","",null,null],[17,"XKB_KEY_Pabovedot","","",null,null],[17,"XKB_KEY_pabovedot","","",null,null],[17,"XKB_KEY_Sabovedot","","",null,null],[17,"XKB_KEY_sabovedot","","",null,null],[17,"XKB_KEY_Tabovedot","","",null,null],[17,"XKB_KEY_tabovedot","","",null,null],[17,"XKB_KEY_Wgrave","","",null,null],[17,"XKB_KEY_wgrave","","",null,null],[17,"XKB_KEY_Wacute","","",null,null],[17,"XKB_KEY_wacute","","",null,null],[17,"XKB_KEY_Wdiaeresis","","",null,null],[17,"XKB_KEY_wdiaeresis","","",null,null],[17,"XKB_KEY_Ygrave","","",null,null],[17,"XKB_KEY_ygrave","","",null,null],[17,"XKB_KEY_OE","","",null,null],[17,"XKB_KEY_oe","","",null,null],[17,"XKB_KEY_Ydiaeresis","","",null,null],[17,"XKB_KEY_overline","","",null,null],[17,"XKB_KEY_kana_fullstop","","",null,null],[17,"XKB_KEY_kana_openingbracket","","",null,null],[17,"XKB_KEY_kana_closingbracket","","",null,null],[17,"XKB_KEY_kana_comma","","",null,null],[17,"XKB_KEY_kana_conjunctive","","",null,null],[17,"XKB_KEY_kana_middledot","","",null,null],[17,"XKB_KEY_kana_WO","","",null,null],[17,"XKB_KEY_kana_a","","",null,null],[17,"XKB_KEY_kana_i","","",null,null],[17,"XKB_KEY_kana_u","","",null,null],[17,"XKB_KEY_kana_e","","",null,null],[17,"XKB_KEY_kana_o","","",null,null],[17,"XKB_KEY_kana_ya","","",null,null],[17,"XKB_KEY_kana_yu","","",null,null],[17,"XKB_KEY_kana_yo","","",null,null],[17,"XKB_KEY_kana_tsu","","",null,null],[17,"XKB_KEY_kana_tu","","",null,null],[17,"XKB_KEY_prolongedsound","","",null,null],[17,"XKB_KEY_kana_A","","",null,null],[17,"XKB_KEY_kana_I","","",null,null],[17,"XKB_KEY_kana_U","","",null,null],[17,"XKB_KEY_kana_E","","",null,null],[17,"XKB_KEY_kana_O","","",null,null],[17,"XKB_KEY_kana_KA","","",null,null],[17,"XKB_KEY_kana_KI","","",null,null],[17,"XKB_KEY_kana_KU","","",null,null],[17,"XKB_KEY_kana_KE","","",null,null],[17,"XKB_KEY_kana_KO","","",null,null],[17,"XKB_KEY_kana_SA","","",null,null],[17,"XKB_KEY_kana_SHI","","",null,null],[17,"XKB_KEY_kana_SU","","",null,null],[17,"XKB_KEY_kana_SE","","",null,null],[17,"XKB_KEY_kana_SO","","",null,null],[17,"XKB_KEY_kana_TA","","",null,null],[17,"XKB_KEY_kana_CHI","","",null,null],[17,"XKB_KEY_kana_TI","","",null,null],[17,"XKB_KEY_kana_TSU","","",null,null],[17,"XKB_KEY_kana_TU","","",null,null],[17,"XKB_KEY_kana_TE","","",null,null],[17,"XKB_KEY_kana_TO","","",null,null],[17,"XKB_KEY_kana_NA","","",null,null],[17,"XKB_KEY_kana_NI","","",null,null],[17,"XKB_KEY_kana_NU","","",null,null],[17,"XKB_KEY_kana_NE","","",null,null],[17,"XKB_KEY_kana_NO","","",null,null],[17,"XKB_KEY_kana_HA","","",null,null],[17,"XKB_KEY_kana_HI","","",null,null],[17,"XKB_KEY_kana_FU","","",null,null],[17,"XKB_KEY_kana_HU","","",null,null],[17,"XKB_KEY_kana_HE","","",null,null],[17,"XKB_KEY_kana_HO","","",null,null],[17,"XKB_KEY_kana_MA","","",null,null],[17,"XKB_KEY_kana_MI","","",null,null],[17,"XKB_KEY_kana_MU","","",null,null],[17,"XKB_KEY_kana_ME","","",null,null],[17,"XKB_KEY_kana_MO","","",null,null],[17,"XKB_KEY_kana_YA","","",null,null],[17,"XKB_KEY_kana_YU","","",null,null],[17,"XKB_KEY_kana_YO","","",null,null],[17,"XKB_KEY_kana_RA","","",null,null],[17,"XKB_KEY_kana_RI","","",null,null],[17,"XKB_KEY_kana_RU","","",null,null],[17,"XKB_KEY_kana_RE","","",null,null],[17,"XKB_KEY_kana_RO","","",null,null],[17,"XKB_KEY_kana_WA","","",null,null],[17,"XKB_KEY_kana_N","","",null,null],[17,"XKB_KEY_voicedsound","","",null,null],[17,"XKB_KEY_semivoicedsound","","",null,null],[17,"XKB_KEY_kana_switch","","",null,null],[17,"XKB_KEY_Farsi_0","","",null,null],[17,"XKB_KEY_Farsi_1","","",null,null],[17,"XKB_KEY_Farsi_2","","",null,null],[17,"XKB_KEY_Farsi_3","","",null,null],[17,"XKB_KEY_Farsi_4","","",null,null],[17,"XKB_KEY_Farsi_5","","",null,null],[17,"XKB_KEY_Farsi_6","","",null,null],[17,"XKB_KEY_Farsi_7","","",null,null],[17,"XKB_KEY_Farsi_8","","",null,null],[17,"XKB_KEY_Farsi_9","","",null,null],[17,"XKB_KEY_Arabic_percent","","",null,null],[17,"XKB_KEY_Arabic_superscript_alef","","",null,null],[17,"XKB_KEY_Arabic_tteh","","",null,null],[17,"XKB_KEY_Arabic_peh","","",null,null],[17,"XKB_KEY_Arabic_tcheh","","",null,null],[17,"XKB_KEY_Arabic_ddal","","",null,null],[17,"XKB_KEY_Arabic_rreh","","",null,null],[17,"XKB_KEY_Arabic_comma","","",null,null],[17,"XKB_KEY_Arabic_fullstop","","",null,null],[17,"XKB_KEY_Arabic_0","","",null,null],[17,"XKB_KEY_Arabic_1","","",null,null],[17,"XKB_KEY_Arabic_2","","",null,null],[17,"XKB_KEY_Arabic_3","","",null,null],[17,"XKB_KEY_Arabic_4","","",null,null],[17,"XKB_KEY_Arabic_5","","",null,null],[17,"XKB_KEY_Arabic_6","","",null,null],[17,"XKB_KEY_Arabic_7","","",null,null],[17,"XKB_KEY_Arabic_8","","",null,null],[17,"XKB_KEY_Arabic_9","","",null,null],[17,"XKB_KEY_Arabic_semicolon","","",null,null],[17,"XKB_KEY_Arabic_question_mark","","",null,null],[17,"XKB_KEY_Arabic_hamza","","",null,null],[17,"XKB_KEY_Arabic_maddaonalef","","",null,null],[17,"XKB_KEY_Arabic_hamzaonalef","","",null,null],[17,"XKB_KEY_Arabic_hamzaonwaw","","",null,null],[17,"XKB_KEY_Arabic_hamzaunderalef","","",null,null],[17,"XKB_KEY_Arabic_hamzaonyeh","","",null,null],[17,"XKB_KEY_Arabic_alef","","",null,null],[17,"XKB_KEY_Arabic_beh","","",null,null],[17,"XKB_KEY_Arabic_tehmarbuta","","",null,null],[17,"XKB_KEY_Arabic_teh","","",null,null],[17,"XKB_KEY_Arabic_theh","","",null,null],[17,"XKB_KEY_Arabic_jeem","","",null,null],[17,"XKB_KEY_Arabic_hah","","",null,null],[17,"XKB_KEY_Arabic_khah","","",null,null],[17,"XKB_KEY_Arabic_dal","","",null,null],[17,"XKB_KEY_Arabic_thal","","",null,null],[17,"XKB_KEY_Arabic_ra","","",null,null],[17,"XKB_KEY_Arabic_zain","","",null,null],[17,"XKB_KEY_Arabic_seen","","",null,null],[17,"XKB_KEY_Arabic_sheen","","",null,null],[17,"XKB_KEY_Arabic_sad","","",null,null],[17,"XKB_KEY_Arabic_dad","","",null,null],[17,"XKB_KEY_Arabic_tah","","",null,null],[17,"XKB_KEY_Arabic_zah","","",null,null],[17,"XKB_KEY_Arabic_ain","","",null,null],[17,"XKB_KEY_Arabic_ghain","","",null,null],[17,"XKB_KEY_Arabic_tatweel","","",null,null],[17,"XKB_KEY_Arabic_feh","","",null,null],[17,"XKB_KEY_Arabic_qaf","","",null,null],[17,"XKB_KEY_Arabic_kaf","","",null,null],[17,"XKB_KEY_Arabic_lam","","",null,null],[17,"XKB_KEY_Arabic_meem","","",null,null],[17,"XKB_KEY_Arabic_noon","","",null,null],[17,"XKB_KEY_Arabic_ha","","",null,null],[17,"XKB_KEY_Arabic_heh","","",null,null],[17,"XKB_KEY_Arabic_waw","","",null,null],[17,"XKB_KEY_Arabic_alefmaksura","","",null,null],[17,"XKB_KEY_Arabic_yeh","","",null,null],[17,"XKB_KEY_Arabic_fathatan","","",null,null],[17,"XKB_KEY_Arabic_dammatan","","",null,null],[17,"XKB_KEY_Arabic_kasratan","","",null,null],[17,"XKB_KEY_Arabic_fatha","","",null,null],[17,"XKB_KEY_Arabic_damma","","",null,null],[17,"XKB_KEY_Arabic_kasra","","",null,null],[17,"XKB_KEY_Arabic_shadda","","",null,null],[17,"XKB_KEY_Arabic_sukun","","",null,null],[17,"XKB_KEY_Arabic_madda_above","","",null,null],[17,"XKB_KEY_Arabic_hamza_above","","",null,null],[17,"XKB_KEY_Arabic_hamza_below","","",null,null],[17,"XKB_KEY_Arabic_jeh","","",null,null],[17,"XKB_KEY_Arabic_veh","","",null,null],[17,"XKB_KEY_Arabic_keheh","","",null,null],[17,"XKB_KEY_Arabic_gaf","","",null,null],[17,"XKB_KEY_Arabic_noon_ghunna","","",null,null],[17,"XKB_KEY_Arabic_heh_doachashmee","","",null,null],[17,"XKB_KEY_Farsi_yeh","","",null,null],[17,"XKB_KEY_Arabic_farsi_yeh","","",null,null],[17,"XKB_KEY_Arabic_yeh_baree","","",null,null],[17,"XKB_KEY_Arabic_heh_goal","","",null,null],[17,"XKB_KEY_Arabic_switch","","",null,null],[17,"XKB_KEY_Cyrillic_GHE_bar","","",null,null],[17,"XKB_KEY_Cyrillic_ghe_bar","","",null,null],[17,"XKB_KEY_Cyrillic_ZHE_descender","","",null,null],[17,"XKB_KEY_Cyrillic_zhe_descender","","",null,null],[17,"XKB_KEY_Cyrillic_KA_descender","","",null,null],[17,"XKB_KEY_Cyrillic_ka_descender","","",null,null],[17,"XKB_KEY_Cyrillic_KA_vertstroke","","",null,null],[17,"XKB_KEY_Cyrillic_ka_vertstroke","","",null,null],[17,"XKB_KEY_Cyrillic_EN_descender","","",null,null],[17,"XKB_KEY_Cyrillic_en_descender","","",null,null],[17,"XKB_KEY_Cyrillic_U_straight","","",null,null],[17,"XKB_KEY_Cyrillic_u_straight","","",null,null],[17,"XKB_KEY_Cyrillic_U_straight_bar","","",null,null],[17,"XKB_KEY_Cyrillic_u_straight_bar","","",null,null],[17,"XKB_KEY_Cyrillic_HA_descender","","",null,null],[17,"XKB_KEY_Cyrillic_ha_descender","","",null,null],[17,"XKB_KEY_Cyrillic_CHE_descender","","",null,null],[17,"XKB_KEY_Cyrillic_che_descender","","",null,null],[17,"XKB_KEY_Cyrillic_CHE_vertstroke","","",null,null],[17,"XKB_KEY_Cyrillic_che_vertstroke","","",null,null],[17,"XKB_KEY_Cyrillic_SHHA","","",null,null],[17,"XKB_KEY_Cyrillic_shha","","",null,null],[17,"XKB_KEY_Cyrillic_SCHWA","","",null,null],[17,"XKB_KEY_Cyrillic_schwa","","",null,null],[17,"XKB_KEY_Cyrillic_I_macron","","",null,null],[17,"XKB_KEY_Cyrillic_i_macron","","",null,null],[17,"XKB_KEY_Cyrillic_O_bar","","",null,null],[17,"XKB_KEY_Cyrillic_o_bar","","",null,null],[17,"XKB_KEY_Cyrillic_U_macron","","",null,null],[17,"XKB_KEY_Cyrillic_u_macron","","",null,null],[17,"XKB_KEY_Serbian_dje","","",null,null],[17,"XKB_KEY_Macedonia_gje","","",null,null],[17,"XKB_KEY_Cyrillic_io","","",null,null],[17,"XKB_KEY_Ukrainian_ie","","",null,null],[17,"XKB_KEY_Ukranian_je","","",null,null],[17,"XKB_KEY_Macedonia_dse","","",null,null],[17,"XKB_KEY_Ukrainian_i","","",null,null],[17,"XKB_KEY_Ukranian_i","","",null,null],[17,"XKB_KEY_Ukrainian_yi","","",null,null],[17,"XKB_KEY_Ukranian_yi","","",null,null],[17,"XKB_KEY_Cyrillic_je","","",null,null],[17,"XKB_KEY_Serbian_je","","",null,null],[17,"XKB_KEY_Cyrillic_lje","","",null,null],[17,"XKB_KEY_Serbian_lje","","",null,null],[17,"XKB_KEY_Cyrillic_nje","","",null,null],[17,"XKB_KEY_Serbian_nje","","",null,null],[17,"XKB_KEY_Serbian_tshe","","",null,null],[17,"XKB_KEY_Macedonia_kje","","",null,null],[17,"XKB_KEY_Ukrainian_ghe_with_upturn","","",null,null],[17,"XKB_KEY_Byelorussian_shortu","","",null,null],[17,"XKB_KEY_Cyrillic_dzhe","","",null,null],[17,"XKB_KEY_Serbian_dze","","",null,null],[17,"XKB_KEY_numerosign","","",null,null],[17,"XKB_KEY_Serbian_DJE","","",null,null],[17,"XKB_KEY_Macedonia_GJE","","",null,null],[17,"XKB_KEY_Cyrillic_IO","","",null,null],[17,"XKB_KEY_Ukrainian_IE","","",null,null],[17,"XKB_KEY_Ukranian_JE","","",null,null],[17,"XKB_KEY_Macedonia_DSE","","",null,null],[17,"XKB_KEY_Ukrainian_I","","",null,null],[17,"XKB_KEY_Ukranian_I","","",null,null],[17,"XKB_KEY_Ukrainian_YI","","",null,null],[17,"XKB_KEY_Ukranian_YI","","",null,null],[17,"XKB_KEY_Cyrillic_JE","","",null,null],[17,"XKB_KEY_Serbian_JE","","",null,null],[17,"XKB_KEY_Cyrillic_LJE","","",null,null],[17,"XKB_KEY_Serbian_LJE","","",null,null],[17,"XKB_KEY_Cyrillic_NJE","","",null,null],[17,"XKB_KEY_Serbian_NJE","","",null,null],[17,"XKB_KEY_Serbian_TSHE","","",null,null],[17,"XKB_KEY_Macedonia_KJE","","",null,null],[17,"XKB_KEY_Ukrainian_GHE_WITH_UPTURN","","",null,null],[17,"XKB_KEY_Byelorussian_SHORTU","","",null,null],[17,"XKB_KEY_Cyrillic_DZHE","","",null,null],[17,"XKB_KEY_Serbian_DZE","","",null,null],[17,"XKB_KEY_Cyrillic_yu","","",null,null],[17,"XKB_KEY_Cyrillic_a","","",null,null],[17,"XKB_KEY_Cyrillic_be","","",null,null],[17,"XKB_KEY_Cyrillic_tse","","",null,null],[17,"XKB_KEY_Cyrillic_de","","",null,null],[17,"XKB_KEY_Cyrillic_ie","","",null,null],[17,"XKB_KEY_Cyrillic_ef","","",null,null],[17,"XKB_KEY_Cyrillic_ghe","","",null,null],[17,"XKB_KEY_Cyrillic_ha","","",null,null],[17,"XKB_KEY_Cyrillic_i","","",null,null],[17,"XKB_KEY_Cyrillic_shorti","","",null,null],[17,"XKB_KEY_Cyrillic_ka","","",null,null],[17,"XKB_KEY_Cyrillic_el","","",null,null],[17,"XKB_KEY_Cyrillic_em","","",null,null],[17,"XKB_KEY_Cyrillic_en","","",null,null],[17,"XKB_KEY_Cyrillic_o","","",null,null],[17,"XKB_KEY_Cyrillic_pe","","",null,null],[17,"XKB_KEY_Cyrillic_ya","","",null,null],[17,"XKB_KEY_Cyrillic_er","","",null,null],[17,"XKB_KEY_Cyrillic_es","","",null,null],[17,"XKB_KEY_Cyrillic_te","","",null,null],[17,"XKB_KEY_Cyrillic_u","","",null,null],[17,"XKB_KEY_Cyrillic_zhe","","",null,null],[17,"XKB_KEY_Cyrillic_ve","","",null,null],[17,"XKB_KEY_Cyrillic_softsign","","",null,null],[17,"XKB_KEY_Cyrillic_yeru","","",null,null],[17,"XKB_KEY_Cyrillic_ze","","",null,null],[17,"XKB_KEY_Cyrillic_sha","","",null,null],[17,"XKB_KEY_Cyrillic_e","","",null,null],[17,"XKB_KEY_Cyrillic_shcha","","",null,null],[17,"XKB_KEY_Cyrillic_che","","",null,null],[17,"XKB_KEY_Cyrillic_hardsign","","",null,null],[17,"XKB_KEY_Cyrillic_YU","","",null,null],[17,"XKB_KEY_Cyrillic_A","","",null,null],[17,"XKB_KEY_Cyrillic_BE","","",null,null],[17,"XKB_KEY_Cyrillic_TSE","","",null,null],[17,"XKB_KEY_Cyrillic_DE","","",null,null],[17,"XKB_KEY_Cyrillic_IE","","",null,null],[17,"XKB_KEY_Cyrillic_EF","","",null,null],[17,"XKB_KEY_Cyrillic_GHE","","",null,null],[17,"XKB_KEY_Cyrillic_HA","","",null,null],[17,"XKB_KEY_Cyrillic_I","","",null,null],[17,"XKB_KEY_Cyrillic_SHORTI","","",null,null],[17,"XKB_KEY_Cyrillic_KA","","",null,null],[17,"XKB_KEY_Cyrillic_EL","","",null,null],[17,"XKB_KEY_Cyrillic_EM","","",null,null],[17,"XKB_KEY_Cyrillic_EN","","",null,null],[17,"XKB_KEY_Cyrillic_O","","",null,null],[17,"XKB_KEY_Cyrillic_PE","","",null,null],[17,"XKB_KEY_Cyrillic_YA","","",null,null],[17,"XKB_KEY_Cyrillic_ER","","",null,null],[17,"XKB_KEY_Cyrillic_ES","","",null,null],[17,"XKB_KEY_Cyrillic_TE","","",null,null],[17,"XKB_KEY_Cyrillic_U","","",null,null],[17,"XKB_KEY_Cyrillic_ZHE","","",null,null],[17,"XKB_KEY_Cyrillic_VE","","",null,null],[17,"XKB_KEY_Cyrillic_SOFTSIGN","","",null,null],[17,"XKB_KEY_Cyrillic_YERU","","",null,null],[17,"XKB_KEY_Cyrillic_ZE","","",null,null],[17,"XKB_KEY_Cyrillic_SHA","","",null,null],[17,"XKB_KEY_Cyrillic_E","","",null,null],[17,"XKB_KEY_Cyrillic_SHCHA","","",null,null],[17,"XKB_KEY_Cyrillic_CHE","","",null,null],[17,"XKB_KEY_Cyrillic_HARDSIGN","","",null,null],[17,"XKB_KEY_Greek_ALPHAaccent","","",null,null],[17,"XKB_KEY_Greek_EPSILONaccent","","",null,null],[17,"XKB_KEY_Greek_ETAaccent","","",null,null],[17,"XKB_KEY_Greek_IOTAaccent","","",null,null],[17,"XKB_KEY_Greek_IOTAdieresis","","",null,null],[17,"XKB_KEY_Greek_IOTAdiaeresis","","",null,null],[17,"XKB_KEY_Greek_OMICRONaccent","","",null,null],[17,"XKB_KEY_Greek_UPSILONaccent","","",null,null],[17,"XKB_KEY_Greek_UPSILONdieresis","","",null,null],[17,"XKB_KEY_Greek_OMEGAaccent","","",null,null],[17,"XKB_KEY_Greek_accentdieresis","","",null,null],[17,"XKB_KEY_Greek_horizbar","","",null,null],[17,"XKB_KEY_Greek_alphaaccent","","",null,null],[17,"XKB_KEY_Greek_epsilonaccent","","",null,null],[17,"XKB_KEY_Greek_etaaccent","","",null,null],[17,"XKB_KEY_Greek_iotaaccent","","",null,null],[17,"XKB_KEY_Greek_iotadieresis","","",null,null],[17,"XKB_KEY_Greek_iotaaccentdieresis","","",null,null],[17,"XKB_KEY_Greek_omicronaccent","","",null,null],[17,"XKB_KEY_Greek_upsilonaccent","","",null,null],[17,"XKB_KEY_Greek_upsilondieresis","","",null,null],[17,"XKB_KEY_Greek_upsilonaccentdieresis","","",null,null],[17,"XKB_KEY_Greek_omegaaccent","","",null,null],[17,"XKB_KEY_Greek_ALPHA","","",null,null],[17,"XKB_KEY_Greek_BETA","","",null,null],[17,"XKB_KEY_Greek_GAMMA","","",null,null],[17,"XKB_KEY_Greek_DELTA","","",null,null],[17,"XKB_KEY_Greek_EPSILON","","",null,null],[17,"XKB_KEY_Greek_ZETA","","",null,null],[17,"XKB_KEY_Greek_ETA","","",null,null],[17,"XKB_KEY_Greek_THETA","","",null,null],[17,"XKB_KEY_Greek_IOTA","","",null,null],[17,"XKB_KEY_Greek_KAPPA","","",null,null],[17,"XKB_KEY_Greek_LAMDA","","",null,null],[17,"XKB_KEY_Greek_LAMBDA","","",null,null],[17,"XKB_KEY_Greek_MU","","",null,null],[17,"XKB_KEY_Greek_NU","","",null,null],[17,"XKB_KEY_Greek_XI","","",null,null],[17,"XKB_KEY_Greek_OMICRON","","",null,null],[17,"XKB_KEY_Greek_PI","","",null,null],[17,"XKB_KEY_Greek_RHO","","",null,null],[17,"XKB_KEY_Greek_SIGMA","","",null,null],[17,"XKB_KEY_Greek_TAU","","",null,null],[17,"XKB_KEY_Greek_UPSILON","","",null,null],[17,"XKB_KEY_Greek_PHI","","",null,null],[17,"XKB_KEY_Greek_CHI","","",null,null],[17,"XKB_KEY_Greek_PSI","","",null,null],[17,"XKB_KEY_Greek_OMEGA","","",null,null],[17,"XKB_KEY_Greek_alpha","","",null,null],[17,"XKB_KEY_Greek_beta","","",null,null],[17,"XKB_KEY_Greek_gamma","","",null,null],[17,"XKB_KEY_Greek_delta","","",null,null],[17,"XKB_KEY_Greek_epsilon","","",null,null],[17,"XKB_KEY_Greek_zeta","","",null,null],[17,"XKB_KEY_Greek_eta","","",null,null],[17,"XKB_KEY_Greek_theta","","",null,null],[17,"XKB_KEY_Greek_iota","","",null,null],[17,"XKB_KEY_Greek_kappa","","",null,null],[17,"XKB_KEY_Greek_lamda","","",null,null],[17,"XKB_KEY_Greek_lambda","","",null,null],[17,"XKB_KEY_Greek_mu","","",null,null],[17,"XKB_KEY_Greek_nu","","",null,null],[17,"XKB_KEY_Greek_xi","","",null,null],[17,"XKB_KEY_Greek_omicron","","",null,null],[17,"XKB_KEY_Greek_pi","","",null,null],[17,"XKB_KEY_Greek_rho","","",null,null],[17,"XKB_KEY_Greek_sigma","","",null,null],[17,"XKB_KEY_Greek_finalsmallsigma","","",null,null],[17,"XKB_KEY_Greek_tau","","",null,null],[17,"XKB_KEY_Greek_upsilon","","",null,null],[17,"XKB_KEY_Greek_phi","","",null,null],[17,"XKB_KEY_Greek_chi","","",null,null],[17,"XKB_KEY_Greek_psi","","",null,null],[17,"XKB_KEY_Greek_omega","","",null,null],[17,"XKB_KEY_Greek_switch","","",null,null],[17,"XKB_KEY_leftradical","","",null,null],[17,"XKB_KEY_topleftradical","","",null,null],[17,"XKB_KEY_horizconnector","","",null,null],[17,"XKB_KEY_topintegral","","",null,null],[17,"XKB_KEY_botintegral","","",null,null],[17,"XKB_KEY_vertconnector","","",null,null],[17,"XKB_KEY_topleftsqbracket","","",null,null],[17,"XKB_KEY_botleftsqbracket","","",null,null],[17,"XKB_KEY_toprightsqbracket","","",null,null],[17,"XKB_KEY_botrightsqbracket","","",null,null],[17,"XKB_KEY_topleftparens","","",null,null],[17,"XKB_KEY_botleftparens","","",null,null],[17,"XKB_KEY_toprightparens","","",null,null],[17,"XKB_KEY_botrightparens","","",null,null],[17,"XKB_KEY_leftmiddlecurlybrace","","",null,null],[17,"XKB_KEY_rightmiddlecurlybrace","","",null,null],[17,"XKB_KEY_topleftsummation","","",null,null],[17,"XKB_KEY_botleftsummation","","",null,null],[17,"XKB_KEY_topvertsummationconnector","","",null,null],[17,"XKB_KEY_botvertsummationconnector","","",null,null],[17,"XKB_KEY_toprightsummation","","",null,null],[17,"XKB_KEY_botrightsummation","","",null,null],[17,"XKB_KEY_rightmiddlesummation","","",null,null],[17,"XKB_KEY_lessthanequal","","",null,null],[17,"XKB_KEY_notequal","","",null,null],[17,"XKB_KEY_greaterthanequal","","",null,null],[17,"XKB_KEY_integral","","",null,null],[17,"XKB_KEY_therefore","","",null,null],[17,"XKB_KEY_variation","","",null,null],[17,"XKB_KEY_infinity","","",null,null],[17,"XKB_KEY_nabla","","",null,null],[17,"XKB_KEY_approximate","","",null,null],[17,"XKB_KEY_similarequal","","",null,null],[17,"XKB_KEY_ifonlyif","","",null,null],[17,"XKB_KEY_implies","","",null,null],[17,"XKB_KEY_identical","","",null,null],[17,"XKB_KEY_radical","","",null,null],[17,"XKB_KEY_includedin","","",null,null],[17,"XKB_KEY_includes","","",null,null],[17,"XKB_KEY_intersection","","",null,null],[17,"XKB_KEY_union","","",null,null],[17,"XKB_KEY_logicaland","","",null,null],[17,"XKB_KEY_logicalor","","",null,null],[17,"XKB_KEY_partialderivative","","",null,null],[17,"XKB_KEY_function","","",null,null],[17,"XKB_KEY_leftarrow","","",null,null],[17,"XKB_KEY_uparrow","","",null,null],[17,"XKB_KEY_rightarrow","","",null,null],[17,"XKB_KEY_downarrow","","",null,null],[17,"XKB_KEY_blank","","",null,null],[17,"XKB_KEY_soliddiamond","","",null,null],[17,"XKB_KEY_checkerboard","","",null,null],[17,"XKB_KEY_ht","","",null,null],[17,"XKB_KEY_ff","","",null,null],[17,"XKB_KEY_cr","","",null,null],[17,"XKB_KEY_lf","","",null,null],[17,"XKB_KEY_nl","","",null,null],[17,"XKB_KEY_vt","","",null,null],[17,"XKB_KEY_lowrightcorner","","",null,null],[17,"XKB_KEY_uprightcorner","","",null,null],[17,"XKB_KEY_upleftcorner","","",null,null],[17,"XKB_KEY_lowleftcorner","","",null,null],[17,"XKB_KEY_crossinglines","","",null,null],[17,"XKB_KEY_horizlinescan1","","",null,null],[17,"XKB_KEY_horizlinescan3","","",null,null],[17,"XKB_KEY_horizlinescan5","","",null,null],[17,"XKB_KEY_horizlinescan7","","",null,null],[17,"XKB_KEY_horizlinescan9","","",null,null],[17,"XKB_KEY_leftt","","",null,null],[17,"XKB_KEY_rightt","","",null,null],[17,"XKB_KEY_bott","","",null,null],[17,"XKB_KEY_topt","","",null,null],[17,"XKB_KEY_vertbar","","",null,null],[17,"XKB_KEY_emspace","","",null,null],[17,"XKB_KEY_enspace","","",null,null],[17,"XKB_KEY_em3space","","",null,null],[17,"XKB_KEY_em4space","","",null,null],[17,"XKB_KEY_digitspace","","",null,null],[17,"XKB_KEY_punctspace","","",null,null],[17,"XKB_KEY_thinspace","","",null,null],[17,"XKB_KEY_hairspace","","",null,null],[17,"XKB_KEY_emdash","","",null,null],[17,"XKB_KEY_endash","","",null,null],[17,"XKB_KEY_signifblank","","",null,null],[17,"XKB_KEY_ellipsis","","",null,null],[17,"XKB_KEY_doubbaselinedot","","",null,null],[17,"XKB_KEY_onethird","","",null,null],[17,"XKB_KEY_twothirds","","",null,null],[17,"XKB_KEY_onefifth","","",null,null],[17,"XKB_KEY_twofifths","","",null,null],[17,"XKB_KEY_threefifths","","",null,null],[17,"XKB_KEY_fourfifths","","",null,null],[17,"XKB_KEY_onesixth","","",null,null],[17,"XKB_KEY_fivesixths","","",null,null],[17,"XKB_KEY_careof","","",null,null],[17,"XKB_KEY_figdash","","",null,null],[17,"XKB_KEY_leftanglebracket","","",null,null],[17,"XKB_KEY_decimalpoint","","",null,null],[17,"XKB_KEY_rightanglebracket","","",null,null],[17,"XKB_KEY_marker","","",null,null],[17,"XKB_KEY_oneeighth","","",null,null],[17,"XKB_KEY_threeeighths","","",null,null],[17,"XKB_KEY_fiveeighths","","",null,null],[17,"XKB_KEY_seveneighths","","",null,null],[17,"XKB_KEY_trademark","","",null,null],[17,"XKB_KEY_signaturemark","","",null,null],[17,"XKB_KEY_trademarkincircle","","",null,null],[17,"XKB_KEY_leftopentriangle","","",null,null],[17,"XKB_KEY_rightopentriangle","","",null,null],[17,"XKB_KEY_emopencircle","","",null,null],[17,"XKB_KEY_emopenrectangle","","",null,null],[17,"XKB_KEY_leftsinglequotemark","","",null,null],[17,"XKB_KEY_rightsinglequotemark","","",null,null],[17,"XKB_KEY_leftdoublequotemark","","",null,null],[17,"XKB_KEY_rightdoublequotemark","","",null,null],[17,"XKB_KEY_prescription","","",null,null],[17,"XKB_KEY_permille","","",null,null],[17,"XKB_KEY_minutes","","",null,null],[17,"XKB_KEY_seconds","","",null,null],[17,"XKB_KEY_latincross","","",null,null],[17,"XKB_KEY_hexagram","","",null,null],[17,"XKB_KEY_filledrectbullet","","",null,null],[17,"XKB_KEY_filledlefttribullet","","",null,null],[17,"XKB_KEY_filledrighttribullet","","",null,null],[17,"XKB_KEY_emfilledcircle","","",null,null],[17,"XKB_KEY_emfilledrect","","",null,null],[17,"XKB_KEY_enopencircbullet","","",null,null],[17,"XKB_KEY_enopensquarebullet","","",null,null],[17,"XKB_KEY_openrectbullet","","",null,null],[17,"XKB_KEY_opentribulletup","","",null,null],[17,"XKB_KEY_opentribulletdown","","",null,null],[17,"XKB_KEY_openstar","","",null,null],[17,"XKB_KEY_enfilledcircbullet","","",null,null],[17,"XKB_KEY_enfilledsqbullet","","",null,null],[17,"XKB_KEY_filledtribulletup","","",null,null],[17,"XKB_KEY_filledtribulletdown","","",null,null],[17,"XKB_KEY_leftpointer","","",null,null],[17,"XKB_KEY_rightpointer","","",null,null],[17,"XKB_KEY_club","","",null,null],[17,"XKB_KEY_diamond","","",null,null],[17,"XKB_KEY_heart","","",null,null],[17,"XKB_KEY_maltesecross","","",null,null],[17,"XKB_KEY_dagger","","",null,null],[17,"XKB_KEY_doubledagger","","",null,null],[17,"XKB_KEY_checkmark","","",null,null],[17,"XKB_KEY_ballotcross","","",null,null],[17,"XKB_KEY_musicalsharp","","",null,null],[17,"XKB_KEY_musicalflat","","",null,null],[17,"XKB_KEY_malesymbol","","",null,null],[17,"XKB_KEY_femalesymbol","","",null,null],[17,"XKB_KEY_telephone","","",null,null],[17,"XKB_KEY_telephonerecorder","","",null,null],[17,"XKB_KEY_phonographcopyright","","",null,null],[17,"XKB_KEY_caret","","",null,null],[17,"XKB_KEY_singlelowquotemark","","",null,null],[17,"XKB_KEY_doublelowquotemark","","",null,null],[17,"XKB_KEY_cursor","","",null,null],[17,"XKB_KEY_leftcaret","","",null,null],[17,"XKB_KEY_rightcaret","","",null,null],[17,"XKB_KEY_downcaret","","",null,null],[17,"XKB_KEY_upcaret","","",null,null],[17,"XKB_KEY_overbar","","",null,null],[17,"XKB_KEY_downtack","","",null,null],[17,"XKB_KEY_upshoe","","",null,null],[17,"XKB_KEY_downstile","","",null,null],[17,"XKB_KEY_underbar","","",null,null],[17,"XKB_KEY_jot","","",null,null],[17,"XKB_KEY_quad","","",null,null],[17,"XKB_KEY_uptack","","",null,null],[17,"XKB_KEY_circle","","",null,null],[17,"XKB_KEY_upstile","","",null,null],[17,"XKB_KEY_downshoe","","",null,null],[17,"XKB_KEY_rightshoe","","",null,null],[17,"XKB_KEY_leftshoe","","",null,null],[17,"XKB_KEY_lefttack","","",null,null],[17,"XKB_KEY_righttack","","",null,null],[17,"XKB_KEY_hebrew_doublelowline","","",null,null],[17,"XKB_KEY_hebrew_aleph","","",null,null],[17,"XKB_KEY_hebrew_bet","","",null,null],[17,"XKB_KEY_hebrew_beth","","",null,null],[17,"XKB_KEY_hebrew_gimel","","",null,null],[17,"XKB_KEY_hebrew_gimmel","","",null,null],[17,"XKB_KEY_hebrew_dalet","","",null,null],[17,"XKB_KEY_hebrew_daleth","","",null,null],[17,"XKB_KEY_hebrew_he","","",null,null],[17,"XKB_KEY_hebrew_waw","","",null,null],[17,"XKB_KEY_hebrew_zain","","",null,null],[17,"XKB_KEY_hebrew_zayin","","",null,null],[17,"XKB_KEY_hebrew_chet","","",null,null],[17,"XKB_KEY_hebrew_het","","",null,null],[17,"XKB_KEY_hebrew_tet","","",null,null],[17,"XKB_KEY_hebrew_teth","","",null,null],[17,"XKB_KEY_hebrew_yod","","",null,null],[17,"XKB_KEY_hebrew_finalkaph","","",null,null],[17,"XKB_KEY_hebrew_kaph","","",null,null],[17,"XKB_KEY_hebrew_lamed","","",null,null],[17,"XKB_KEY_hebrew_finalmem","","",null,null],[17,"XKB_KEY_hebrew_mem","","",null,null],[17,"XKB_KEY_hebrew_finalnun","","",null,null],[17,"XKB_KEY_hebrew_nun","","",null,null],[17,"XKB_KEY_hebrew_samech","","",null,null],[17,"XKB_KEY_hebrew_samekh","","",null,null],[17,"XKB_KEY_hebrew_ayin","","",null,null],[17,"XKB_KEY_hebrew_finalpe","","",null,null],[17,"XKB_KEY_hebrew_pe","","",null,null],[17,"XKB_KEY_hebrew_finalzade","","",null,null],[17,"XKB_KEY_hebrew_finalzadi","","",null,null],[17,"XKB_KEY_hebrew_zade","","",null,null],[17,"XKB_KEY_hebrew_zadi","","",null,null],[17,"XKB_KEY_hebrew_qoph","","",null,null],[17,"XKB_KEY_hebrew_kuf","","",null,null],[17,"XKB_KEY_hebrew_resh","","",null,null],[17,"XKB_KEY_hebrew_shin","","",null,null],[17,"XKB_KEY_hebrew_taw","","",null,null],[17,"XKB_KEY_hebrew_taf","","",null,null],[17,"XKB_KEY_Hebrew_switch","","",null,null],[17,"XKB_KEY_Thai_kokai","","",null,null],[17,"XKB_KEY_Thai_khokhai","","",null,null],[17,"XKB_KEY_Thai_khokhuat","","",null,null],[17,"XKB_KEY_Thai_khokhwai","","",null,null],[17,"XKB_KEY_Thai_khokhon","","",null,null],[17,"XKB_KEY_Thai_khorakhang","","",null,null],[17,"XKB_KEY_Thai_ngongu","","",null,null],[17,"XKB_KEY_Thai_chochan","","",null,null],[17,"XKB_KEY_Thai_choching","","",null,null],[17,"XKB_KEY_Thai_chochang","","",null,null],[17,"XKB_KEY_Thai_soso","","",null,null],[17,"XKB_KEY_Thai_chochoe","","",null,null],[17,"XKB_KEY_Thai_yoying","","",null,null],[17,"XKB_KEY_Thai_dochada","","",null,null],[17,"XKB_KEY_Thai_topatak","","",null,null],[17,"XKB_KEY_Thai_thothan","","",null,null],[17,"XKB_KEY_Thai_thonangmontho","","",null,null],[17,"XKB_KEY_Thai_thophuthao","","",null,null],[17,"XKB_KEY_Thai_nonen","","",null,null],[17,"XKB_KEY_Thai_dodek","","",null,null],[17,"XKB_KEY_Thai_totao","","",null,null],[17,"XKB_KEY_Thai_thothung","","",null,null],[17,"XKB_KEY_Thai_thothahan","","",null,null],[17,"XKB_KEY_Thai_thothong","","",null,null],[17,"XKB_KEY_Thai_nonu","","",null,null],[17,"XKB_KEY_Thai_bobaimai","","",null,null],[17,"XKB_KEY_Thai_popla","","",null,null],[17,"XKB_KEY_Thai_phophung","","",null,null],[17,"XKB_KEY_Thai_fofa","","",null,null],[17,"XKB_KEY_Thai_phophan","","",null,null],[17,"XKB_KEY_Thai_fofan","","",null,null],[17,"XKB_KEY_Thai_phosamphao","","",null,null],[17,"XKB_KEY_Thai_moma","","",null,null],[17,"XKB_KEY_Thai_yoyak","","",null,null],[17,"XKB_KEY_Thai_rorua","","",null,null],[17,"XKB_KEY_Thai_ru","","",null,null],[17,"XKB_KEY_Thai_loling","","",null,null],[17,"XKB_KEY_Thai_lu","","",null,null],[17,"XKB_KEY_Thai_wowaen","","",null,null],[17,"XKB_KEY_Thai_sosala","","",null,null],[17,"XKB_KEY_Thai_sorusi","","",null,null],[17,"XKB_KEY_Thai_sosua","","",null,null],[17,"XKB_KEY_Thai_hohip","","",null,null],[17,"XKB_KEY_Thai_lochula","","",null,null],[17,"XKB_KEY_Thai_oang","","",null,null],[17,"XKB_KEY_Thai_honokhuk","","",null,null],[17,"XKB_KEY_Thai_paiyannoi","","",null,null],[17,"XKB_KEY_Thai_saraa","","",null,null],[17,"XKB_KEY_Thai_maihanakat","","",null,null],[17,"XKB_KEY_Thai_saraaa","","",null,null],[17,"XKB_KEY_Thai_saraam","","",null,null],[17,"XKB_KEY_Thai_sarai","","",null,null],[17,"XKB_KEY_Thai_saraii","","",null,null],[17,"XKB_KEY_Thai_saraue","","",null,null],[17,"XKB_KEY_Thai_sarauee","","",null,null],[17,"XKB_KEY_Thai_sarau","","",null,null],[17,"XKB_KEY_Thai_sarauu","","",null,null],[17,"XKB_KEY_Thai_phinthu","","",null,null],[17,"XKB_KEY_Thai_maihanakat_maitho","","",null,null],[17,"XKB_KEY_Thai_baht","","",null,null],[17,"XKB_KEY_Thai_sarae","","",null,null],[17,"XKB_KEY_Thai_saraae","","",null,null],[17,"XKB_KEY_Thai_sarao","","",null,null],[17,"XKB_KEY_Thai_saraaimaimuan","","",null,null],[17,"XKB_KEY_Thai_saraaimaimalai","","",null,null],[17,"XKB_KEY_Thai_lakkhangyao","","",null,null],[17,"XKB_KEY_Thai_maiyamok","","",null,null],[17,"XKB_KEY_Thai_maitaikhu","","",null,null],[17,"XKB_KEY_Thai_maiek","","",null,null],[17,"XKB_KEY_Thai_maitho","","",null,null],[17,"XKB_KEY_Thai_maitri","","",null,null],[17,"XKB_KEY_Thai_maichattawa","","",null,null],[17,"XKB_KEY_Thai_thanthakhat","","",null,null],[17,"XKB_KEY_Thai_nikhahit","","",null,null],[17,"XKB_KEY_Thai_leksun","","",null,null],[17,"XKB_KEY_Thai_leknung","","",null,null],[17,"XKB_KEY_Thai_leksong","","",null,null],[17,"XKB_KEY_Thai_leksam","","",null,null],[17,"XKB_KEY_Thai_leksi","","",null,null],[17,"XKB_KEY_Thai_lekha","","",null,null],[17,"XKB_KEY_Thai_lekhok","","",null,null],[17,"XKB_KEY_Thai_lekchet","","",null,null],[17,"XKB_KEY_Thai_lekpaet","","",null,null],[17,"XKB_KEY_Thai_lekkao","","",null,null],[17,"XKB_KEY_Hangul","","",null,null],[17,"XKB_KEY_Hangul_Start","","",null,null],[17,"XKB_KEY_Hangul_End","","",null,null],[17,"XKB_KEY_Hangul_Hanja","","",null,null],[17,"XKB_KEY_Hangul_Jamo","","",null,null],[17,"XKB_KEY_Hangul_Romaja","","",null,null],[17,"XKB_KEY_Hangul_Codeinput","","",null,null],[17,"XKB_KEY_Hangul_Jeonja","","",null,null],[17,"XKB_KEY_Hangul_Banja","","",null,null],[17,"XKB_KEY_Hangul_PreHanja","","",null,null],[17,"XKB_KEY_Hangul_PostHanja","","",null,null],[17,"XKB_KEY_Hangul_SingleCandidate","","",null,null],[17,"XKB_KEY_Hangul_MultipleCandidate","","",null,null],[17,"XKB_KEY_Hangul_PreviousCandidate","","",null,null],[17,"XKB_KEY_Hangul_Special","","",null,null],[17,"XKB_KEY_Hangul_switch","","",null,null],[17,"XKB_KEY_Hangul_Kiyeog","","",null,null],[17,"XKB_KEY_Hangul_SsangKiyeog","","",null,null],[17,"XKB_KEY_Hangul_KiyeogSios","","",null,null],[17,"XKB_KEY_Hangul_Nieun","","",null,null],[17,"XKB_KEY_Hangul_NieunJieuj","","",null,null],[17,"XKB_KEY_Hangul_NieunHieuh","","",null,null],[17,"XKB_KEY_Hangul_Dikeud","","",null,null],[17,"XKB_KEY_Hangul_SsangDikeud","","",null,null],[17,"XKB_KEY_Hangul_Rieul","","",null,null],[17,"XKB_KEY_Hangul_RieulKiyeog","","",null,null],[17,"XKB_KEY_Hangul_RieulMieum","","",null,null],[17,"XKB_KEY_Hangul_RieulPieub","","",null,null],[17,"XKB_KEY_Hangul_RieulSios","","",null,null],[17,"XKB_KEY_Hangul_RieulTieut","","",null,null],[17,"XKB_KEY_Hangul_RieulPhieuf","","",null,null],[17,"XKB_KEY_Hangul_RieulHieuh","","",null,null],[17,"XKB_KEY_Hangul_Mieum","","",null,null],[17,"XKB_KEY_Hangul_Pieub","","",null,null],[17,"XKB_KEY_Hangul_SsangPieub","","",null,null],[17,"XKB_KEY_Hangul_PieubSios","","",null,null],[17,"XKB_KEY_Hangul_Sios","","",null,null],[17,"XKB_KEY_Hangul_SsangSios","","",null,null],[17,"XKB_KEY_Hangul_Ieung","","",null,null],[17,"XKB_KEY_Hangul_Jieuj","","",null,null],[17,"XKB_KEY_Hangul_SsangJieuj","","",null,null],[17,"XKB_KEY_Hangul_Cieuc","","",null,null],[17,"XKB_KEY_Hangul_Khieuq","","",null,null],[17,"XKB_KEY_Hangul_Tieut","","",null,null],[17,"XKB_KEY_Hangul_Phieuf","","",null,null],[17,"XKB_KEY_Hangul_Hieuh","","",null,null],[17,"XKB_KEY_Hangul_A","","",null,null],[17,"XKB_KEY_Hangul_AE","","",null,null],[17,"XKB_KEY_Hangul_YA","","",null,null],[17,"XKB_KEY_Hangul_YAE","","",null,null],[17,"XKB_KEY_Hangul_EO","","",null,null],[17,"XKB_KEY_Hangul_E","","",null,null],[17,"XKB_KEY_Hangul_YEO","","",null,null],[17,"XKB_KEY_Hangul_YE","","",null,null],[17,"XKB_KEY_Hangul_O","","",null,null],[17,"XKB_KEY_Hangul_WA","","",null,null],[17,"XKB_KEY_Hangul_WAE","","",null,null],[17,"XKB_KEY_Hangul_OE","","",null,null],[17,"XKB_KEY_Hangul_YO","","",null,null],[17,"XKB_KEY_Hangul_U","","",null,null],[17,"XKB_KEY_Hangul_WEO","","",null,null],[17,"XKB_KEY_Hangul_WE","","",null,null],[17,"XKB_KEY_Hangul_WI","","",null,null],[17,"XKB_KEY_Hangul_YU","","",null,null],[17,"XKB_KEY_Hangul_EU","","",null,null],[17,"XKB_KEY_Hangul_YI","","",null,null],[17,"XKB_KEY_Hangul_I","","",null,null],[17,"XKB_KEY_Hangul_J_Kiyeog","","",null,null],[17,"XKB_KEY_Hangul_J_SsangKiyeog","","",null,null],[17,"XKB_KEY_Hangul_J_KiyeogSios","","",null,null],[17,"XKB_KEY_Hangul_J_Nieun","","",null,null],[17,"XKB_KEY_Hangul_J_NieunJieuj","","",null,null],[17,"XKB_KEY_Hangul_J_NieunHieuh","","",null,null],[17,"XKB_KEY_Hangul_J_Dikeud","","",null,null],[17,"XKB_KEY_Hangul_J_Rieul","","",null,null],[17,"XKB_KEY_Hangul_J_RieulKiyeog","","",null,null],[17,"XKB_KEY_Hangul_J_RieulMieum","","",null,null],[17,"XKB_KEY_Hangul_J_RieulPieub","","",null,null],[17,"XKB_KEY_Hangul_J_RieulSios","","",null,null],[17,"XKB_KEY_Hangul_J_RieulTieut","","",null,null],[17,"XKB_KEY_Hangul_J_RieulPhieuf","","",null,null],[17,"XKB_KEY_Hangul_J_RieulHieuh","","",null,null],[17,"XKB_KEY_Hangul_J_Mieum","","",null,null],[17,"XKB_KEY_Hangul_J_Pieub","","",null,null],[17,"XKB_KEY_Hangul_J_PieubSios","","",null,null],[17,"XKB_KEY_Hangul_J_Sios","","",null,null],[17,"XKB_KEY_Hangul_J_SsangSios","","",null,null],[17,"XKB_KEY_Hangul_J_Ieung","","",null,null],[17,"XKB_KEY_Hangul_J_Jieuj","","",null,null],[17,"XKB_KEY_Hangul_J_Cieuc","","",null,null],[17,"XKB_KEY_Hangul_J_Khieuq","","",null,null],[17,"XKB_KEY_Hangul_J_Tieut","","",null,null],[17,"XKB_KEY_Hangul_J_Phieuf","","",null,null],[17,"XKB_KEY_Hangul_J_Hieuh","","",null,null],[17,"XKB_KEY_Hangul_RieulYeorinHieuh","","",null,null],[17,"XKB_KEY_Hangul_SunkyeongeumMieum","","",null,null],[17,"XKB_KEY_Hangul_SunkyeongeumPieub","","",null,null],[17,"XKB_KEY_Hangul_PanSios","","",null,null],[17,"XKB_KEY_Hangul_KkogjiDalrinIeung","","",null,null],[17,"XKB_KEY_Hangul_SunkyeongeumPhieuf","","",null,null],[17,"XKB_KEY_Hangul_YeorinHieuh","","",null,null],[17,"XKB_KEY_Hangul_AraeA","","",null,null],[17,"XKB_KEY_Hangul_AraeAE","","",null,null],[17,"XKB_KEY_Hangul_J_PanSios","","",null,null],[17,"XKB_KEY_Hangul_J_KkogjiDalrinIeung","","",null,null],[17,"XKB_KEY_Hangul_J_YeorinHieuh","","",null,null],[17,"XKB_KEY_Korean_Won","","",null,null],[17,"XKB_KEY_Armenian_ligature_ew","","",null,null],[17,"XKB_KEY_Armenian_full_stop","","",null,null],[17,"XKB_KEY_Armenian_verjaket","","",null,null],[17,"XKB_KEY_Armenian_separation_mark","","",null,null],[17,"XKB_KEY_Armenian_but","","",null,null],[17,"XKB_KEY_Armenian_hyphen","","",null,null],[17,"XKB_KEY_Armenian_yentamna","","",null,null],[17,"XKB_KEY_Armenian_exclam","","",null,null],[17,"XKB_KEY_Armenian_amanak","","",null,null],[17,"XKB_KEY_Armenian_accent","","",null,null],[17,"XKB_KEY_Armenian_shesht","","",null,null],[17,"XKB_KEY_Armenian_question","","",null,null],[17,"XKB_KEY_Armenian_paruyk","","",null,null],[17,"XKB_KEY_Armenian_AYB","","",null,null],[17,"XKB_KEY_Armenian_ayb","","",null,null],[17,"XKB_KEY_Armenian_BEN","","",null,null],[17,"XKB_KEY_Armenian_ben","","",null,null],[17,"XKB_KEY_Armenian_GIM","","",null,null],[17,"XKB_KEY_Armenian_gim","","",null,null],[17,"XKB_KEY_Armenian_DA","","",null,null],[17,"XKB_KEY_Armenian_da","","",null,null],[17,"XKB_KEY_Armenian_YECH","","",null,null],[17,"XKB_KEY_Armenian_yech","","",null,null],[17,"XKB_KEY_Armenian_ZA","","",null,null],[17,"XKB_KEY_Armenian_za","","",null,null],[17,"XKB_KEY_Armenian_E","","",null,null],[17,"XKB_KEY_Armenian_e","","",null,null],[17,"XKB_KEY_Armenian_AT","","",null,null],[17,"XKB_KEY_Armenian_at","","",null,null],[17,"XKB_KEY_Armenian_TO","","",null,null],[17,"XKB_KEY_Armenian_to","","",null,null],[17,"XKB_KEY_Armenian_ZHE","","",null,null],[17,"XKB_KEY_Armenian_zhe","","",null,null],[17,"XKB_KEY_Armenian_INI","","",null,null],[17,"XKB_KEY_Armenian_ini","","",null,null],[17,"XKB_KEY_Armenian_LYUN","","",null,null],[17,"XKB_KEY_Armenian_lyun","","",null,null],[17,"XKB_KEY_Armenian_KHE","","",null,null],[17,"XKB_KEY_Armenian_khe","","",null,null],[17,"XKB_KEY_Armenian_TSA","","",null,null],[17,"XKB_KEY_Armenian_tsa","","",null,null],[17,"XKB_KEY_Armenian_KEN","","",null,null],[17,"XKB_KEY_Armenian_ken","","",null,null],[17,"XKB_KEY_Armenian_HO","","",null,null],[17,"XKB_KEY_Armenian_ho","","",null,null],[17,"XKB_KEY_Armenian_DZA","","",null,null],[17,"XKB_KEY_Armenian_dza","","",null,null],[17,"XKB_KEY_Armenian_GHAT","","",null,null],[17,"XKB_KEY_Armenian_ghat","","",null,null],[17,"XKB_KEY_Armenian_TCHE","","",null,null],[17,"XKB_KEY_Armenian_tche","","",null,null],[17,"XKB_KEY_Armenian_MEN","","",null,null],[17,"XKB_KEY_Armenian_men","","",null,null],[17,"XKB_KEY_Armenian_HI","","",null,null],[17,"XKB_KEY_Armenian_hi","","",null,null],[17,"XKB_KEY_Armenian_NU","","",null,null],[17,"XKB_KEY_Armenian_nu","","",null,null],[17,"XKB_KEY_Armenian_SHA","","",null,null],[17,"XKB_KEY_Armenian_sha","","",null,null],[17,"XKB_KEY_Armenian_VO","","",null,null],[17,"XKB_KEY_Armenian_vo","","",null,null],[17,"XKB_KEY_Armenian_CHA","","",null,null],[17,"XKB_KEY_Armenian_cha","","",null,null],[17,"XKB_KEY_Armenian_PE","","",null,null],[17,"XKB_KEY_Armenian_pe","","",null,null],[17,"XKB_KEY_Armenian_JE","","",null,null],[17,"XKB_KEY_Armenian_je","","",null,null],[17,"XKB_KEY_Armenian_RA","","",null,null],[17,"XKB_KEY_Armenian_ra","","",null,null],[17,"XKB_KEY_Armenian_SE","","",null,null],[17,"XKB_KEY_Armenian_se","","",null,null],[17,"XKB_KEY_Armenian_VEV","","",null,null],[17,"XKB_KEY_Armenian_vev","","",null,null],[17,"XKB_KEY_Armenian_TYUN","","",null,null],[17,"XKB_KEY_Armenian_tyun","","",null,null],[17,"XKB_KEY_Armenian_RE","","",null,null],[17,"XKB_KEY_Armenian_re","","",null,null],[17,"XKB_KEY_Armenian_TSO","","",null,null],[17,"XKB_KEY_Armenian_tso","","",null,null],[17,"XKB_KEY_Armenian_VYUN","","",null,null],[17,"XKB_KEY_Armenian_vyun","","",null,null],[17,"XKB_KEY_Armenian_PYUR","","",null,null],[17,"XKB_KEY_Armenian_pyur","","",null,null],[17,"XKB_KEY_Armenian_KE","","",null,null],[17,"XKB_KEY_Armenian_ke","","",null,null],[17,"XKB_KEY_Armenian_O","","",null,null],[17,"XKB_KEY_Armenian_o","","",null,null],[17,"XKB_KEY_Armenian_FE","","",null,null],[17,"XKB_KEY_Armenian_fe","","",null,null],[17,"XKB_KEY_Armenian_apostrophe","","",null,null],[17,"XKB_KEY_Georgian_an","","",null,null],[17,"XKB_KEY_Georgian_ban","","",null,null],[17,"XKB_KEY_Georgian_gan","","",null,null],[17,"XKB_KEY_Georgian_don","","",null,null],[17,"XKB_KEY_Georgian_en","","",null,null],[17,"XKB_KEY_Georgian_vin","","",null,null],[17,"XKB_KEY_Georgian_zen","","",null,null],[17,"XKB_KEY_Georgian_tan","","",null,null],[17,"XKB_KEY_Georgian_in","","",null,null],[17,"XKB_KEY_Georgian_kan","","",null,null],[17,"XKB_KEY_Georgian_las","","",null,null],[17,"XKB_KEY_Georgian_man","","",null,null],[17,"XKB_KEY_Georgian_nar","","",null,null],[17,"XKB_KEY_Georgian_on","","",null,null],[17,"XKB_KEY_Georgian_par","","",null,null],[17,"XKB_KEY_Georgian_zhar","","",null,null],[17,"XKB_KEY_Georgian_rae","","",null,null],[17,"XKB_KEY_Georgian_san","","",null,null],[17,"XKB_KEY_Georgian_tar","","",null,null],[17,"XKB_KEY_Georgian_un","","",null,null],[17,"XKB_KEY_Georgian_phar","","",null,null],[17,"XKB_KEY_Georgian_khar","","",null,null],[17,"XKB_KEY_Georgian_ghan","","",null,null],[17,"XKB_KEY_Georgian_qar","","",null,null],[17,"XKB_KEY_Georgian_shin","","",null,null],[17,"XKB_KEY_Georgian_chin","","",null,null],[17,"XKB_KEY_Georgian_can","","",null,null],[17,"XKB_KEY_Georgian_jil","","",null,null],[17,"XKB_KEY_Georgian_cil","","",null,null],[17,"XKB_KEY_Georgian_char","","",null,null],[17,"XKB_KEY_Georgian_xan","","",null,null],[17,"XKB_KEY_Georgian_jhan","","",null,null],[17,"XKB_KEY_Georgian_hae","","",null,null],[17,"XKB_KEY_Georgian_he","","",null,null],[17,"XKB_KEY_Georgian_hie","","",null,null],[17,"XKB_KEY_Georgian_we","","",null,null],[17,"XKB_KEY_Georgian_har","","",null,null],[17,"XKB_KEY_Georgian_hoe","","",null,null],[17,"XKB_KEY_Georgian_fi","","",null,null],[17,"XKB_KEY_Xabovedot","","",null,null],[17,"XKB_KEY_Ibreve","","",null,null],[17,"XKB_KEY_Zstroke","","",null,null],[17,"XKB_KEY_Gcaron","","",null,null],[17,"XKB_KEY_Ocaron","","",null,null],[17,"XKB_KEY_Obarred","","",null,null],[17,"XKB_KEY_xabovedot","","",null,null],[17,"XKB_KEY_ibreve","","",null,null],[17,"XKB_KEY_zstroke","","",null,null],[17,"XKB_KEY_gcaron","","",null,null],[17,"XKB_KEY_ocaron","","",null,null],[17,"XKB_KEY_obarred","","",null,null],[17,"XKB_KEY_SCHWA","","",null,null],[17,"XKB_KEY_schwa","","",null,null],[17,"XKB_KEY_EZH","","",null,null],[17,"XKB_KEY_ezh","","",null,null],[17,"XKB_KEY_Lbelowdot","","",null,null],[17,"XKB_KEY_lbelowdot","","",null,null],[17,"XKB_KEY_Abelowdot","","",null,null],[17,"XKB_KEY_abelowdot","","",null,null],[17,"XKB_KEY_Ahook","","",null,null],[17,"XKB_KEY_ahook","","",null,null],[17,"XKB_KEY_Acircumflexacute","","",null,null],[17,"XKB_KEY_acircumflexacute","","",null,null],[17,"XKB_KEY_Acircumflexgrave","","",null,null],[17,"XKB_KEY_acircumflexgrave","","",null,null],[17,"XKB_KEY_Acircumflexhook","","",null,null],[17,"XKB_KEY_acircumflexhook","","",null,null],[17,"XKB_KEY_Acircumflextilde","","",null,null],[17,"XKB_KEY_acircumflextilde","","",null,null],[17,"XKB_KEY_Acircumflexbelowdot","","",null,null],[17,"XKB_KEY_acircumflexbelowdot","","",null,null],[17,"XKB_KEY_Abreveacute","","",null,null],[17,"XKB_KEY_abreveacute","","",null,null],[17,"XKB_KEY_Abrevegrave","","",null,null],[17,"XKB_KEY_abrevegrave","","",null,null],[17,"XKB_KEY_Abrevehook","","",null,null],[17,"XKB_KEY_abrevehook","","",null,null],[17,"XKB_KEY_Abrevetilde","","",null,null],[17,"XKB_KEY_abrevetilde","","",null,null],[17,"XKB_KEY_Abrevebelowdot","","",null,null],[17,"XKB_KEY_abrevebelowdot","","",null,null],[17,"XKB_KEY_Ebelowdot","","",null,null],[17,"XKB_KEY_ebelowdot","","",null,null],[17,"XKB_KEY_Ehook","","",null,null],[17,"XKB_KEY_ehook","","",null,null],[17,"XKB_KEY_Etilde","","",null,null],[17,"XKB_KEY_etilde","","",null,null],[17,"XKB_KEY_Ecircumflexacute","","",null,null],[17,"XKB_KEY_ecircumflexacute","","",null,null],[17,"XKB_KEY_Ecircumflexgrave","","",null,null],[17,"XKB_KEY_ecircumflexgrave","","",null,null],[17,"XKB_KEY_Ecircumflexhook","","",null,null],[17,"XKB_KEY_ecircumflexhook","","",null,null],[17,"XKB_KEY_Ecircumflextilde","","",null,null],[17,"XKB_KEY_ecircumflextilde","","",null,null],[17,"XKB_KEY_Ecircumflexbelowdot","","",null,null],[17,"XKB_KEY_ecircumflexbelowdot","","",null,null],[17,"XKB_KEY_Ihook","","",null,null],[17,"XKB_KEY_ihook","","",null,null],[17,"XKB_KEY_Ibelowdot","","",null,null],[17,"XKB_KEY_ibelowdot","","",null,null],[17,"XKB_KEY_Obelowdot","","",null,null],[17,"XKB_KEY_obelowdot","","",null,null],[17,"XKB_KEY_Ohook","","",null,null],[17,"XKB_KEY_ohook","","",null,null],[17,"XKB_KEY_Ocircumflexacute","","",null,null],[17,"XKB_KEY_ocircumflexacute","","",null,null],[17,"XKB_KEY_Ocircumflexgrave","","",null,null],[17,"XKB_KEY_ocircumflexgrave","","",null,null],[17,"XKB_KEY_Ocircumflexhook","","",null,null],[17,"XKB_KEY_ocircumflexhook","","",null,null],[17,"XKB_KEY_Ocircumflextilde","","",null,null],[17,"XKB_KEY_ocircumflextilde","","",null,null],[17,"XKB_KEY_Ocircumflexbelowdot","","",null,null],[17,"XKB_KEY_ocircumflexbelowdot","","",null,null],[17,"XKB_KEY_Ohornacute","","",null,null],[17,"XKB_KEY_ohornacute","","",null,null],[17,"XKB_KEY_Ohorngrave","","",null,null],[17,"XKB_KEY_ohorngrave","","",null,null],[17,"XKB_KEY_Ohornhook","","",null,null],[17,"XKB_KEY_ohornhook","","",null,null],[17,"XKB_KEY_Ohorntilde","","",null,null],[17,"XKB_KEY_ohorntilde","","",null,null],[17,"XKB_KEY_Ohornbelowdot","","",null,null],[17,"XKB_KEY_ohornbelowdot","","",null,null],[17,"XKB_KEY_Ubelowdot","","",null,null],[17,"XKB_KEY_ubelowdot","","",null,null],[17,"XKB_KEY_Uhook","","",null,null],[17,"XKB_KEY_uhook","","",null,null],[17,"XKB_KEY_Uhornacute","","",null,null],[17,"XKB_KEY_uhornacute","","",null,null],[17,"XKB_KEY_Uhorngrave","","",null,null],[17,"XKB_KEY_uhorngrave","","",null,null],[17,"XKB_KEY_Uhornhook","","",null,null],[17,"XKB_KEY_uhornhook","","",null,null],[17,"XKB_KEY_Uhorntilde","","",null,null],[17,"XKB_KEY_uhorntilde","","",null,null],[17,"XKB_KEY_Uhornbelowdot","","",null,null],[17,"XKB_KEY_uhornbelowdot","","",null,null],[17,"XKB_KEY_Ybelowdot","","",null,null],[17,"XKB_KEY_ybelowdot","","",null,null],[17,"XKB_KEY_Yhook","","",null,null],[17,"XKB_KEY_yhook","","",null,null],[17,"XKB_KEY_Ytilde","","",null,null],[17,"XKB_KEY_ytilde","","",null,null],[17,"XKB_KEY_Ohorn","","",null,null],[17,"XKB_KEY_ohorn","","",null,null],[17,"XKB_KEY_Uhorn","","",null,null],[17,"XKB_KEY_uhorn","","",null,null],[17,"XKB_KEY_EcuSign","","",null,null],[17,"XKB_KEY_ColonSign","","",null,null],[17,"XKB_KEY_CruzeiroSign","","",null,null],[17,"XKB_KEY_FFrancSign","","",null,null],[17,"XKB_KEY_LiraSign","","",null,null],[17,"XKB_KEY_MillSign","","",null,null],[17,"XKB_KEY_NairaSign","","",null,null],[17,"XKB_KEY_PesetaSign","","",null,null],[17,"XKB_KEY_RupeeSign","","",null,null],[17,"XKB_KEY_WonSign","","",null,null],[17,"XKB_KEY_NewSheqelSign","","",null,null],[17,"XKB_KEY_DongSign","","",null,null],[17,"XKB_KEY_EuroSign","","",null,null],[17,"XKB_KEY_zerosuperior","","",null,null],[17,"XKB_KEY_foursuperior","","",null,null],[17,"XKB_KEY_fivesuperior","","",null,null],[17,"XKB_KEY_sixsuperior","","",null,null],[17,"XKB_KEY_sevensuperior","","",null,null],[17,"XKB_KEY_eightsuperior","","",null,null],[17,"XKB_KEY_ninesuperior","","",null,null],[17,"XKB_KEY_zerosubscript","","",null,null],[17,"XKB_KEY_onesubscript","","",null,null],[17,"XKB_KEY_twosubscript","","",null,null],[17,"XKB_KEY_threesubscript","","",null,null],[17,"XKB_KEY_foursubscript","","",null,null],[17,"XKB_KEY_fivesubscript","","",null,null],[17,"XKB_KEY_sixsubscript","","",null,null],[17,"XKB_KEY_sevensubscript","","",null,null],[17,"XKB_KEY_eightsubscript","","",null,null],[17,"XKB_KEY_ninesubscript","","",null,null],[17,"XKB_KEY_partdifferential","","",null,null],[17,"XKB_KEY_emptyset","","",null,null],[17,"XKB_KEY_elementof","","",null,null],[17,"XKB_KEY_notelementof","","",null,null],[17,"XKB_KEY_containsas","","",null,null],[17,"XKB_KEY_squareroot","","",null,null],[17,"XKB_KEY_cuberoot","","",null,null],[17,"XKB_KEY_fourthroot","","",null,null],[17,"XKB_KEY_dintegral","","",null,null],[17,"XKB_KEY_tintegral","","",null,null],[17,"XKB_KEY_because","","",null,null],[17,"XKB_KEY_approxeq","","",null,null],[17,"XKB_KEY_notapproxeq","","",null,null],[17,"XKB_KEY_notidentical","","",null,null],[17,"XKB_KEY_stricteq","","",null,null],[17,"XKB_KEY_braille_dot_1","","",null,null],[17,"XKB_KEY_braille_dot_2","","",null,null],[17,"XKB_KEY_braille_dot_3","","",null,null],[17,"XKB_KEY_braille_dot_4","","",null,null],[17,"XKB_KEY_braille_dot_5","","",null,null],[17,"XKB_KEY_braille_dot_6","","",null,null],[17,"XKB_KEY_braille_dot_7","","",null,null],[17,"XKB_KEY_braille_dot_8","","",null,null],[17,"XKB_KEY_braille_dot_9","","",null,null],[17,"XKB_KEY_braille_dot_10","","",null,null],[17,"XKB_KEY_braille_blank","","",null,null],[17,"XKB_KEY_braille_dots_1","","",null,null],[17,"XKB_KEY_braille_dots_2","","",null,null],[17,"XKB_KEY_braille_dots_12","","",null,null],[17,"XKB_KEY_braille_dots_3","","",null,null],[17,"XKB_KEY_braille_dots_13","","",null,null],[17,"XKB_KEY_braille_dots_23","","",null,null],[17,"XKB_KEY_braille_dots_123","","",null,null],[17,"XKB_KEY_braille_dots_4","","",null,null],[17,"XKB_KEY_braille_dots_14","","",null,null],[17,"XKB_KEY_braille_dots_24","","",null,null],[17,"XKB_KEY_braille_dots_124","","",null,null],[17,"XKB_KEY_braille_dots_34","","",null,null],[17,"XKB_KEY_braille_dots_134","","",null,null],[17,"XKB_KEY_braille_dots_234","","",null,null],[17,"XKB_KEY_braille_dots_1234","","",null,null],[17,"XKB_KEY_braille_dots_5","","",null,null],[17,"XKB_KEY_braille_dots_15","","",null,null],[17,"XKB_KEY_braille_dots_25","","",null,null],[17,"XKB_KEY_braille_dots_125","","",null,null],[17,"XKB_KEY_braille_dots_35","","",null,null],[17,"XKB_KEY_braille_dots_135","","",null,null],[17,"XKB_KEY_braille_dots_235","","",null,null],[17,"XKB_KEY_braille_dots_1235","","",null,null],[17,"XKB_KEY_braille_dots_45","","",null,null],[17,"XKB_KEY_braille_dots_145","","",null,null],[17,"XKB_KEY_braille_dots_245","","",null,null],[17,"XKB_KEY_braille_dots_1245","","",null,null],[17,"XKB_KEY_braille_dots_345","","",null,null],[17,"XKB_KEY_braille_dots_1345","","",null,null],[17,"XKB_KEY_braille_dots_2345","","",null,null],[17,"XKB_KEY_braille_dots_12345","","",null,null],[17,"XKB_KEY_braille_dots_6","","",null,null],[17,"XKB_KEY_braille_dots_16","","",null,null],[17,"XKB_KEY_braille_dots_26","","",null,null],[17,"XKB_KEY_braille_dots_126","","",null,null],[17,"XKB_KEY_braille_dots_36","","",null,null],[17,"XKB_KEY_braille_dots_136","","",null,null],[17,"XKB_KEY_braille_dots_236","","",null,null],[17,"XKB_KEY_braille_dots_1236","","",null,null],[17,"XKB_KEY_braille_dots_46","","",null,null],[17,"XKB_KEY_braille_dots_146","","",null,null],[17,"XKB_KEY_braille_dots_246","","",null,null],[17,"XKB_KEY_braille_dots_1246","","",null,null],[17,"XKB_KEY_braille_dots_346","","",null,null],[17,"XKB_KEY_braille_dots_1346","","",null,null],[17,"XKB_KEY_braille_dots_2346","","",null,null],[17,"XKB_KEY_braille_dots_12346","","",null,null],[17,"XKB_KEY_braille_dots_56","","",null,null],[17,"XKB_KEY_braille_dots_156","","",null,null],[17,"XKB_KEY_braille_dots_256","","",null,null],[17,"XKB_KEY_braille_dots_1256","","",null,null],[17,"XKB_KEY_braille_dots_356","","",null,null],[17,"XKB_KEY_braille_dots_1356","","",null,null],[17,"XKB_KEY_braille_dots_2356","","",null,null],[17,"XKB_KEY_braille_dots_12356","","",null,null],[17,"XKB_KEY_braille_dots_456","","",null,null],[17,"XKB_KEY_braille_dots_1456","","",null,null],[17,"XKB_KEY_braille_dots_2456","","",null,null],[17,"XKB_KEY_braille_dots_12456","","",null,null],[17,"XKB_KEY_braille_dots_3456","","",null,null],[17,"XKB_KEY_braille_dots_13456","","",null,null],[17,"XKB_KEY_braille_dots_23456","","",null,null],[17,"XKB_KEY_braille_dots_123456","","",null,null],[17,"XKB_KEY_braille_dots_7","","",null,null],[17,"XKB_KEY_braille_dots_17","","",null,null],[17,"XKB_KEY_braille_dots_27","","",null,null],[17,"XKB_KEY_braille_dots_127","","",null,null],[17,"XKB_KEY_braille_dots_37","","",null,null],[17,"XKB_KEY_braille_dots_137","","",null,null],[17,"XKB_KEY_braille_dots_237","","",null,null],[17,"XKB_KEY_braille_dots_1237","","",null,null],[17,"XKB_KEY_braille_dots_47","","",null,null],[17,"XKB_KEY_braille_dots_147","","",null,null],[17,"XKB_KEY_braille_dots_247","","",null,null],[17,"XKB_KEY_braille_dots_1247","","",null,null],[17,"XKB_KEY_braille_dots_347","","",null,null],[17,"XKB_KEY_braille_dots_1347","","",null,null],[17,"XKB_KEY_braille_dots_2347","","",null,null],[17,"XKB_KEY_braille_dots_12347","","",null,null],[17,"XKB_KEY_braille_dots_57","","",null,null],[17,"XKB_KEY_braille_dots_157","","",null,null],[17,"XKB_KEY_braille_dots_257","","",null,null],[17,"XKB_KEY_braille_dots_1257","","",null,null],[17,"XKB_KEY_braille_dots_357","","",null,null],[17,"XKB_KEY_braille_dots_1357","","",null,null],[17,"XKB_KEY_braille_dots_2357","","",null,null],[17,"XKB_KEY_braille_dots_12357","","",null,null],[17,"XKB_KEY_braille_dots_457","","",null,null],[17,"XKB_KEY_braille_dots_1457","","",null,null],[17,"XKB_KEY_braille_dots_2457","","",null,null],[17,"XKB_KEY_braille_dots_12457","","",null,null],[17,"XKB_KEY_braille_dots_3457","","",null,null],[17,"XKB_KEY_braille_dots_13457","","",null,null],[17,"XKB_KEY_braille_dots_23457","","",null,null],[17,"XKB_KEY_braille_dots_123457","","",null,null],[17,"XKB_KEY_braille_dots_67","","",null,null],[17,"XKB_KEY_braille_dots_167","","",null,null],[17,"XKB_KEY_braille_dots_267","","",null,null],[17,"XKB_KEY_braille_dots_1267","","",null,null],[17,"XKB_KEY_braille_dots_367","","",null,null],[17,"XKB_KEY_braille_dots_1367","","",null,null],[17,"XKB_KEY_braille_dots_2367","","",null,null],[17,"XKB_KEY_braille_dots_12367","","",null,null],[17,"XKB_KEY_braille_dots_467","","",null,null],[17,"XKB_KEY_braille_dots_1467","","",null,null],[17,"XKB_KEY_braille_dots_2467","","",null,null],[17,"XKB_KEY_braille_dots_12467","","",null,null],[17,"XKB_KEY_braille_dots_3467","","",null,null],[17,"XKB_KEY_braille_dots_13467","","",null,null],[17,"XKB_KEY_braille_dots_23467","","",null,null],[17,"XKB_KEY_braille_dots_123467","","",null,null],[17,"XKB_KEY_braille_dots_567","","",null,null],[17,"XKB_KEY_braille_dots_1567","","",null,null],[17,"XKB_KEY_braille_dots_2567","","",null,null],[17,"XKB_KEY_braille_dots_12567","","",null,null],[17,"XKB_KEY_braille_dots_3567","","",null,null],[17,"XKB_KEY_braille_dots_13567","","",null,null],[17,"XKB_KEY_braille_dots_23567","","",null,null],[17,"XKB_KEY_braille_dots_123567","","",null,null],[17,"XKB_KEY_braille_dots_4567","","",null,null],[17,"XKB_KEY_braille_dots_14567","","",null,null],[17,"XKB_KEY_braille_dots_24567","","",null,null],[17,"XKB_KEY_braille_dots_124567","","",null,null],[17,"XKB_KEY_braille_dots_34567","","",null,null],[17,"XKB_KEY_braille_dots_134567","","",null,null],[17,"XKB_KEY_braille_dots_234567","","",null,null],[17,"XKB_KEY_braille_dots_1234567","","",null,null],[17,"XKB_KEY_braille_dots_8","","",null,null],[17,"XKB_KEY_braille_dots_18","","",null,null],[17,"XKB_KEY_braille_dots_28","","",null,null],[17,"XKB_KEY_braille_dots_128","","",null,null],[17,"XKB_KEY_braille_dots_38","","",null,null],[17,"XKB_KEY_braille_dots_138","","",null,null],[17,"XKB_KEY_braille_dots_238","","",null,null],[17,"XKB_KEY_braille_dots_1238","","",null,null],[17,"XKB_KEY_braille_dots_48","","",null,null],[17,"XKB_KEY_braille_dots_148","","",null,null],[17,"XKB_KEY_braille_dots_248","","",null,null],[17,"XKB_KEY_braille_dots_1248","","",null,null],[17,"XKB_KEY_braille_dots_348","","",null,null],[17,"XKB_KEY_braille_dots_1348","","",null,null],[17,"XKB_KEY_braille_dots_2348","","",null,null],[17,"XKB_KEY_braille_dots_12348","","",null,null],[17,"XKB_KEY_braille_dots_58","","",null,null],[17,"XKB_KEY_braille_dots_158","","",null,null],[17,"XKB_KEY_braille_dots_258","","",null,null],[17,"XKB_KEY_braille_dots_1258","","",null,null],[17,"XKB_KEY_braille_dots_358","","",null,null],[17,"XKB_KEY_braille_dots_1358","","",null,null],[17,"XKB_KEY_braille_dots_2358","","",null,null],[17,"XKB_KEY_braille_dots_12358","","",null,null],[17,"XKB_KEY_braille_dots_458","","",null,null],[17,"XKB_KEY_braille_dots_1458","","",null,null],[17,"XKB_KEY_braille_dots_2458","","",null,null],[17,"XKB_KEY_braille_dots_12458","","",null,null],[17,"XKB_KEY_braille_dots_3458","","",null,null],[17,"XKB_KEY_braille_dots_13458","","",null,null],[17,"XKB_KEY_braille_dots_23458","","",null,null],[17,"XKB_KEY_braille_dots_123458","","",null,null],[17,"XKB_KEY_braille_dots_68","","",null,null],[17,"XKB_KEY_braille_dots_168","","",null,null],[17,"XKB_KEY_braille_dots_268","","",null,null],[17,"XKB_KEY_braille_dots_1268","","",null,null],[17,"XKB_KEY_braille_dots_368","","",null,null],[17,"XKB_KEY_braille_dots_1368","","",null,null],[17,"XKB_KEY_braille_dots_2368","","",null,null],[17,"XKB_KEY_braille_dots_12368","","",null,null],[17,"XKB_KEY_braille_dots_468","","",null,null],[17,"XKB_KEY_braille_dots_1468","","",null,null],[17,"XKB_KEY_braille_dots_2468","","",null,null],[17,"XKB_KEY_braille_dots_12468","","",null,null],[17,"XKB_KEY_braille_dots_3468","","",null,null],[17,"XKB_KEY_braille_dots_13468","","",null,null],[17,"XKB_KEY_braille_dots_23468","","",null,null],[17,"XKB_KEY_braille_dots_123468","","",null,null],[17,"XKB_KEY_braille_dots_568","","",null,null],[17,"XKB_KEY_braille_dots_1568","","",null,null],[17,"XKB_KEY_braille_dots_2568","","",null,null],[17,"XKB_KEY_braille_dots_12568","","",null,null],[17,"XKB_KEY_braille_dots_3568","","",null,null],[17,"XKB_KEY_braille_dots_13568","","",null,null],[17,"XKB_KEY_braille_dots_23568","","",null,null],[17,"XKB_KEY_braille_dots_123568","","",null,null],[17,"XKB_KEY_braille_dots_4568","","",null,null],[17,"XKB_KEY_braille_dots_14568","","",null,null],[17,"XKB_KEY_braille_dots_24568","","",null,null],[17,"XKB_KEY_braille_dots_124568","","",null,null],[17,"XKB_KEY_braille_dots_34568","","",null,null],[17,"XKB_KEY_braille_dots_134568","","",null,null],[17,"XKB_KEY_braille_dots_234568","","",null,null],[17,"XKB_KEY_braille_dots_1234568","","",null,null],[17,"XKB_KEY_braille_dots_78","","",null,null],[17,"XKB_KEY_braille_dots_178","","",null,null],[17,"XKB_KEY_braille_dots_278","","",null,null],[17,"XKB_KEY_braille_dots_1278","","",null,null],[17,"XKB_KEY_braille_dots_378","","",null,null],[17,"XKB_KEY_braille_dots_1378","","",null,null],[17,"XKB_KEY_braille_dots_2378","","",null,null],[17,"XKB_KEY_braille_dots_12378","","",null,null],[17,"XKB_KEY_braille_dots_478","","",null,null],[17,"XKB_KEY_braille_dots_1478","","",null,null],[17,"XKB_KEY_braille_dots_2478","","",null,null],[17,"XKB_KEY_braille_dots_12478","","",null,null],[17,"XKB_KEY_braille_dots_3478","","",null,null],[17,"XKB_KEY_braille_dots_13478","","",null,null],[17,"XKB_KEY_braille_dots_23478","","",null,null],[17,"XKB_KEY_braille_dots_123478","","",null,null],[17,"XKB_KEY_braille_dots_578","","",null,null],[17,"XKB_KEY_braille_dots_1578","","",null,null],[17,"XKB_KEY_braille_dots_2578","","",null,null],[17,"XKB_KEY_braille_dots_12578","","",null,null],[17,"XKB_KEY_braille_dots_3578","","",null,null],[17,"XKB_KEY_braille_dots_13578","","",null,null],[17,"XKB_KEY_braille_dots_23578","","",null,null],[17,"XKB_KEY_braille_dots_123578","","",null,null],[17,"XKB_KEY_braille_dots_4578","","",null,null],[17,"XKB_KEY_braille_dots_14578","","",null,null],[17,"XKB_KEY_braille_dots_24578","","",null,null],[17,"XKB_KEY_braille_dots_124578","","",null,null],[17,"XKB_KEY_braille_dots_34578","","",null,null],[17,"XKB_KEY_braille_dots_134578","","",null,null],[17,"XKB_KEY_braille_dots_234578","","",null,null],[17,"XKB_KEY_braille_dots_1234578","","",null,null],[17,"XKB_KEY_braille_dots_678","","",null,null],[17,"XKB_KEY_braille_dots_1678","","",null,null],[17,"XKB_KEY_braille_dots_2678","","",null,null],[17,"XKB_KEY_braille_dots_12678","","",null,null],[17,"XKB_KEY_braille_dots_3678","","",null,null],[17,"XKB_KEY_braille_dots_13678","","",null,null],[17,"XKB_KEY_braille_dots_23678","","",null,null],[17,"XKB_KEY_braille_dots_123678","","",null,null],[17,"XKB_KEY_braille_dots_4678","","",null,null],[17,"XKB_KEY_braille_dots_14678","","",null,null],[17,"XKB_KEY_braille_dots_24678","","",null,null],[17,"XKB_KEY_braille_dots_124678","","",null,null],[17,"XKB_KEY_braille_dots_34678","","",null,null],[17,"XKB_KEY_braille_dots_134678","","",null,null],[17,"XKB_KEY_braille_dots_234678","","",null,null],[17,"XKB_KEY_braille_dots_1234678","","",null,null],[17,"XKB_KEY_braille_dots_5678","","",null,null],[17,"XKB_KEY_braille_dots_15678","","",null,null],[17,"XKB_KEY_braille_dots_25678","","",null,null],[17,"XKB_KEY_braille_dots_125678","","",null,null],[17,"XKB_KEY_braille_dots_35678","","",null,null],[17,"XKB_KEY_braille_dots_135678","","",null,null],[17,"XKB_KEY_braille_dots_235678","","",null,null],[17,"XKB_KEY_braille_dots_1235678","","",null,null],[17,"XKB_KEY_braille_dots_45678","","",null,null],[17,"XKB_KEY_braille_dots_145678","","",null,null],[17,"XKB_KEY_braille_dots_245678","","",null,null],[17,"XKB_KEY_braille_dots_1245678","","",null,null],[17,"XKB_KEY_braille_dots_345678","","",null,null],[17,"XKB_KEY_braille_dots_1345678","","",null,null],[17,"XKB_KEY_braille_dots_2345678","","",null,null],[17,"XKB_KEY_braille_dots_12345678","","",null,null],[17,"XKB_KEY_Sinh_ng","","",null,null],[17,"XKB_KEY_Sinh_h2","","",null,null],[17,"XKB_KEY_Sinh_a","","",null,null],[17,"XKB_KEY_Sinh_aa","","",null,null],[17,"XKB_KEY_Sinh_ae","","",null,null],[17,"XKB_KEY_Sinh_aee","","",null,null],[17,"XKB_KEY_Sinh_i","","",null,null],[17,"XKB_KEY_Sinh_ii","","",null,null],[17,"XKB_KEY_Sinh_u","","",null,null],[17,"XKB_KEY_Sinh_uu","","",null,null],[17,"XKB_KEY_Sinh_ri","","",null,null],[17,"XKB_KEY_Sinh_rii","","",null,null],[17,"XKB_KEY_Sinh_lu","","",null,null],[17,"XKB_KEY_Sinh_luu","","",null,null],[17,"XKB_KEY_Sinh_e","","",null,null],[17,"XKB_KEY_Sinh_ee","","",null,null],[17,"XKB_KEY_Sinh_ai","","",null,null],[17,"XKB_KEY_Sinh_o","","",null,null],[17,"XKB_KEY_Sinh_oo","","",null,null],[17,"XKB_KEY_Sinh_au","","",null,null],[17,"XKB_KEY_Sinh_ka","","",null,null],[17,"XKB_KEY_Sinh_kha","","",null,null],[17,"XKB_KEY_Sinh_ga","","",null,null],[17,"XKB_KEY_Sinh_gha","","",null,null],[17,"XKB_KEY_Sinh_ng2","","",null,null],[17,"XKB_KEY_Sinh_nga","","",null,null],[17,"XKB_KEY_Sinh_ca","","",null,null],[17,"XKB_KEY_Sinh_cha","","",null,null],[17,"XKB_KEY_Sinh_ja","","",null,null],[17,"XKB_KEY_Sinh_jha","","",null,null],[17,"XKB_KEY_Sinh_nya","","",null,null],[17,"XKB_KEY_Sinh_jnya","","",null,null],[17,"XKB_KEY_Sinh_nja","","",null,null],[17,"XKB_KEY_Sinh_tta","","",null,null],[17,"XKB_KEY_Sinh_ttha","","",null,null],[17,"XKB_KEY_Sinh_dda","","",null,null],[17,"XKB_KEY_Sinh_ddha","","",null,null],[17,"XKB_KEY_Sinh_nna","","",null,null],[17,"XKB_KEY_Sinh_ndda","","",null,null],[17,"XKB_KEY_Sinh_tha","","",null,null],[17,"XKB_KEY_Sinh_thha","","",null,null],[17,"XKB_KEY_Sinh_dha","","",null,null],[17,"XKB_KEY_Sinh_dhha","","",null,null],[17,"XKB_KEY_Sinh_na","","",null,null],[17,"XKB_KEY_Sinh_ndha","","",null,null],[17,"XKB_KEY_Sinh_pa","","",null,null],[17,"XKB_KEY_Sinh_pha","","",null,null],[17,"XKB_KEY_Sinh_ba","","",null,null],[17,"XKB_KEY_Sinh_bha","","",null,null],[17,"XKB_KEY_Sinh_ma","","",null,null],[17,"XKB_KEY_Sinh_mba","","",null,null],[17,"XKB_KEY_Sinh_ya","","",null,null],[17,"XKB_KEY_Sinh_ra","","",null,null],[17,"XKB_KEY_Sinh_la","","",null,null],[17,"XKB_KEY_Sinh_va","","",null,null],[17,"XKB_KEY_Sinh_sha","","",null,null],[17,"XKB_KEY_Sinh_ssha","","",null,null],[17,"XKB_KEY_Sinh_sa","","",null,null],[17,"XKB_KEY_Sinh_ha","","",null,null],[17,"XKB_KEY_Sinh_lla","","",null,null],[17,"XKB_KEY_Sinh_fa","","",null,null],[17,"XKB_KEY_Sinh_al","","",null,null],[17,"XKB_KEY_Sinh_aa2","","",null,null],[17,"XKB_KEY_Sinh_ae2","","",null,null],[17,"XKB_KEY_Sinh_aee2","","",null,null],[17,"XKB_KEY_Sinh_i2","","",null,null],[17,"XKB_KEY_Sinh_ii2","","",null,null],[17,"XKB_KEY_Sinh_u2","","",null,null],[17,"XKB_KEY_Sinh_uu2","","",null,null],[17,"XKB_KEY_Sinh_ru2","","",null,null],[17,"XKB_KEY_Sinh_e2","","",null,null],[17,"XKB_KEY_Sinh_ee2","","",null,null],[17,"XKB_KEY_Sinh_ai2","","",null,null],[17,"XKB_KEY_Sinh_o2","","",null,null],[17,"XKB_KEY_Sinh_oo2","","",null,null],[17,"XKB_KEY_Sinh_au2","","",null,null],[17,"XKB_KEY_Sinh_lu2","","",null,null],[17,"XKB_KEY_Sinh_ruu2","","",null,null],[17,"XKB_KEY_Sinh_luu2","","",null,null],[17,"XKB_KEY_Sinh_kunddaliya","","",null,null],[17,"XKB_KEY_XF86ModeLock","","",null,null],[17,"XKB_KEY_XF86MonBrightnessUp","","",null,null],[17,"XKB_KEY_XF86MonBrightnessDown","","",null,null],[17,"XKB_KEY_XF86KbdLightOnOff","","",null,null],[17,"XKB_KEY_XF86KbdBrightnessUp","","",null,null],[17,"XKB_KEY_XF86KbdBrightnessDown","","",null,null],[17,"XKB_KEY_XF86Standby","","",null,null],[17,"XKB_KEY_XF86AudioLowerVolume","","",null,null],[17,"XKB_KEY_XF86AudioMute","","",null,null],[17,"XKB_KEY_XF86AudioRaiseVolume","","",null,null],[17,"XKB_KEY_XF86AudioPlay","","",null,null],[17,"XKB_KEY_XF86AudioStop","","",null,null],[17,"XKB_KEY_XF86AudioPrev","","",null,null],[17,"XKB_KEY_XF86AudioNext","","",null,null],[17,"XKB_KEY_XF86HomePage","","",null,null],[17,"XKB_KEY_XF86Mail","","",null,null],[17,"XKB_KEY_XF86Start","","",null,null],[17,"XKB_KEY_XF86Search","","",null,null],[17,"XKB_KEY_XF86AudioRecord","","",null,null],[17,"XKB_KEY_XF86Calculator","","",null,null],[17,"XKB_KEY_XF86Memo","","",null,null],[17,"XKB_KEY_XF86ToDoList","","",null,null],[17,"XKB_KEY_XF86Calendar","","",null,null],[17,"XKB_KEY_XF86PowerDown","","",null,null],[17,"XKB_KEY_XF86ContrastAdjust","","",null,null],[17,"XKB_KEY_XF86RockerUp","","",null,null],[17,"XKB_KEY_XF86RockerDown","","",null,null],[17,"XKB_KEY_XF86RockerEnter","","",null,null],[17,"XKB_KEY_XF86Back","","",null,null],[17,"XKB_KEY_XF86Forward","","",null,null],[17,"XKB_KEY_XF86Stop","","",null,null],[17,"XKB_KEY_XF86Refresh","","",null,null],[17,"XKB_KEY_XF86PowerOff","","",null,null],[17,"XKB_KEY_XF86WakeUp","","",null,null],[17,"XKB_KEY_XF86Eject","","",null,null],[17,"XKB_KEY_XF86ScreenSaver","","",null,null],[17,"XKB_KEY_XF86WWW","","",null,null],[17,"XKB_KEY_XF86Sleep","","",null,null],[17,"XKB_KEY_XF86Favorites","","",null,null],[17,"XKB_KEY_XF86AudioPause","","",null,null],[17,"XKB_KEY_XF86AudioMedia","","",null,null],[17,"XKB_KEY_XF86MyComputer","","",null,null],[17,"XKB_KEY_XF86VendorHome","","",null,null],[17,"XKB_KEY_XF86LightBulb","","",null,null],[17,"XKB_KEY_XF86Shop","","",null,null],[17,"XKB_KEY_XF86History","","",null,null],[17,"XKB_KEY_XF86OpenURL","","",null,null],[17,"XKB_KEY_XF86AddFavorite","","",null,null],[17,"XKB_KEY_XF86HotLinks","","",null,null],[17,"XKB_KEY_XF86BrightnessAdjust","","",null,null],[17,"XKB_KEY_XF86Finance","","",null,null],[17,"XKB_KEY_XF86Community","","",null,null],[17,"XKB_KEY_XF86AudioRewind","","",null,null],[17,"XKB_KEY_XF86BackForward","","",null,null],[17,"XKB_KEY_XF86Launch0","","",null,null],[17,"XKB_KEY_XF86Launch1","","",null,null],[17,"XKB_KEY_XF86Launch2","","",null,null],[17,"XKB_KEY_XF86Launch3","","",null,null],[17,"XKB_KEY_XF86Launch4","","",null,null],[17,"XKB_KEY_XF86Launch5","","",null,null],[17,"XKB_KEY_XF86Launch6","","",null,null],[17,"XKB_KEY_XF86Launch7","","",null,null],[17,"XKB_KEY_XF86Launch8","","",null,null],[17,"XKB_KEY_XF86Launch9","","",null,null],[17,"XKB_KEY_XF86LaunchA","","",null,null],[17,"XKB_KEY_XF86LaunchB","","",null,null],[17,"XKB_KEY_XF86LaunchC","","",null,null],[17,"XKB_KEY_XF86LaunchD","","",null,null],[17,"XKB_KEY_XF86LaunchE","","",null,null],[17,"XKB_KEY_XF86LaunchF","","",null,null],[17,"XKB_KEY_XF86ApplicationLeft","","",null,null],[17,"XKB_KEY_XF86ApplicationRight","","",null,null],[17,"XKB_KEY_XF86Book","","",null,null],[17,"XKB_KEY_XF86CD","","",null,null],[17,"XKB_KEY_XF86Calculater","","",null,null],[17,"XKB_KEY_XF86Clear","","",null,null],[17,"XKB_KEY_XF86Close","","",null,null],[17,"XKB_KEY_XF86Copy","","",null,null],[17,"XKB_KEY_XF86Cut","","",null,null],[17,"XKB_KEY_XF86Display","","",null,null],[17,"XKB_KEY_XF86DOS","","",null,null],[17,"XKB_KEY_XF86Documents","","",null,null],[17,"XKB_KEY_XF86Excel","","",null,null],[17,"XKB_KEY_XF86Explorer","","",null,null],[17,"XKB_KEY_XF86Game","","",null,null],[17,"XKB_KEY_XF86Go","","",null,null],[17,"XKB_KEY_XF86iTouch","","",null,null],[17,"XKB_KEY_XF86LogOff","","",null,null],[17,"XKB_KEY_XF86Market","","",null,null],[17,"XKB_KEY_XF86Meeting","","",null,null],[17,"XKB_KEY_XF86MenuKB","","",null,null],[17,"XKB_KEY_XF86MenuPB","","",null,null],[17,"XKB_KEY_XF86MySites","","",null,null],[17,"XKB_KEY_XF86New","","",null,null],[17,"XKB_KEY_XF86News","","",null,null],[17,"XKB_KEY_XF86OfficeHome","","",null,null],[17,"XKB_KEY_XF86Open","","",null,null],[17,"XKB_KEY_XF86Option","","",null,null],[17,"XKB_KEY_XF86Paste","","",null,null],[17,"XKB_KEY_XF86Phone","","",null,null],[17,"XKB_KEY_XF86Q","","",null,null],[17,"XKB_KEY_XF86Reply","","",null,null],[17,"XKB_KEY_XF86Reload","","",null,null],[17,"XKB_KEY_XF86RotateWindows","","",null,null],[17,"XKB_KEY_XF86RotationPB","","",null,null],[17,"XKB_KEY_XF86RotationKB","","",null,null],[17,"XKB_KEY_XF86Save","","",null,null],[17,"XKB_KEY_XF86ScrollUp","","",null,null],[17,"XKB_KEY_XF86ScrollDown","","",null,null],[17,"XKB_KEY_XF86ScrollClick","","",null,null],[17,"XKB_KEY_XF86Send","","",null,null],[17,"XKB_KEY_XF86Spell","","",null,null],[17,"XKB_KEY_XF86SplitScreen","","",null,null],[17,"XKB_KEY_XF86Support","","",null,null],[17,"XKB_KEY_XF86TaskPane","","",null,null],[17,"XKB_KEY_XF86Terminal","","",null,null],[17,"XKB_KEY_XF86Tools","","",null,null],[17,"XKB_KEY_XF86Travel","","",null,null],[17,"XKB_KEY_XF86UserPB","","",null,null],[17,"XKB_KEY_XF86User1KB","","",null,null],[17,"XKB_KEY_XF86User2KB","","",null,null],[17,"XKB_KEY_XF86Video","","",null,null],[17,"XKB_KEY_XF86WheelButton","","",null,null],[17,"XKB_KEY_XF86Word","","",null,null],[17,"XKB_KEY_XF86Xfer","","",null,null],[17,"XKB_KEY_XF86ZoomIn","","",null,null],[17,"XKB_KEY_XF86ZoomOut","","",null,null],[17,"XKB_KEY_XF86Away","","",null,null],[17,"XKB_KEY_XF86Messenger","","",null,null],[17,"XKB_KEY_XF86WebCam","","",null,null],[17,"XKB_KEY_XF86MailForward","","",null,null],[17,"XKB_KEY_XF86Pictures","","",null,null],[17,"XKB_KEY_XF86Music","","",null,null],[17,"XKB_KEY_XF86Battery","","",null,null],[17,"XKB_KEY_XF86Bluetooth","","",null,null],[17,"XKB_KEY_XF86WLAN","","",null,null],[17,"XKB_KEY_XF86UWB","","",null,null],[17,"XKB_KEY_XF86AudioForward","","",null,null],[17,"XKB_KEY_XF86AudioRepeat","","",null,null],[17,"XKB_KEY_XF86AudioRandomPlay","","",null,null],[17,"XKB_KEY_XF86Subtitle","","",null,null],[17,"XKB_KEY_XF86AudioCycleTrack","","",null,null],[17,"XKB_KEY_XF86CycleAngle","","",null,null],[17,"XKB_KEY_XF86FrameBack","","",null,null],[17,"XKB_KEY_XF86FrameForward","","",null,null],[17,"XKB_KEY_XF86Time","","",null,null],[17,"XKB_KEY_XF86Select","","",null,null],[17,"XKB_KEY_XF86View","","",null,null],[17,"XKB_KEY_XF86TopMenu","","",null,null],[17,"XKB_KEY_XF86Red","","",null,null],[17,"XKB_KEY_XF86Green","","",null,null],[17,"XKB_KEY_XF86Yellow","","",null,null],[17,"XKB_KEY_XF86Blue","","",null,null],[17,"XKB_KEY_XF86Suspend","","",null,null],[17,"XKB_KEY_XF86Hibernate","","",null,null],[17,"XKB_KEY_XF86TouchpadToggle","","",null,null],[17,"XKB_KEY_XF86TouchpadOn","","",null,null],[17,"XKB_KEY_XF86TouchpadOff","","",null,null],[17,"XKB_KEY_XF86AudioMicMute","","",null,null],[17,"XKB_KEY_XF86Switch_VT_1","","",null,null],[17,"XKB_KEY_XF86Switch_VT_2","","",null,null],[17,"XKB_KEY_XF86Switch_VT_3","","",null,null],[17,"XKB_KEY_XF86Switch_VT_4","","",null,null],[17,"XKB_KEY_XF86Switch_VT_5","","",null,null],[17,"XKB_KEY_XF86Switch_VT_6","","",null,null],[17,"XKB_KEY_XF86Switch_VT_7","","",null,null],[17,"XKB_KEY_XF86Switch_VT_8","","",null,null],[17,"XKB_KEY_XF86Switch_VT_9","","",null,null],[17,"XKB_KEY_XF86Switch_VT_10","","",null,null],[17,"XKB_KEY_XF86Switch_VT_11","","",null,null],[17,"XKB_KEY_XF86Switch_VT_12","","",null,null],[17,"XKB_KEY_XF86Ungrab","","",null,null],[17,"XKB_KEY_XF86ClearGrab","","",null,null],[17,"XKB_KEY_XF86Next_VMode","","",null,null],[17,"XKB_KEY_XF86Prev_VMode","","",null,null],[17,"XKB_KEY_XF86LogWindowTree","","",null,null],[17,"XKB_KEY_XF86LogGrabInfo","","",null,null],[17,"XKB_KEY_SunFA_Grave","","",null,null],[17,"XKB_KEY_SunFA_Circum","","",null,null],[17,"XKB_KEY_SunFA_Tilde","","",null,null],[17,"XKB_KEY_SunFA_Acute","","",null,null],[17,"XKB_KEY_SunFA_Diaeresis","","",null,null],[17,"XKB_KEY_SunFA_Cedilla","","",null,null],[17,"XKB_KEY_SunF36","","",null,null],[17,"XKB_KEY_SunF37","","",null,null],[17,"XKB_KEY_SunSys_Req","","",null,null],[17,"XKB_KEY_SunPrint_Screen","","",null,null],[17,"XKB_KEY_SunCompose","","",null,null],[17,"XKB_KEY_SunAltGraph","","",null,null],[17,"XKB_KEY_SunPageUp","","",null,null],[17,"XKB_KEY_SunPageDown","","",null,null],[17,"XKB_KEY_SunUndo","","",null,null],[17,"XKB_KEY_SunAgain","","",null,null],[17,"XKB_KEY_SunFind","","",null,null],[17,"XKB_KEY_SunStop","","",null,null],[17,"XKB_KEY_SunProps","","",null,null],[17,"XKB_KEY_SunFront","","",null,null],[17,"XKB_KEY_SunCopy","","",null,null],[17,"XKB_KEY_SunOpen","","",null,null],[17,"XKB_KEY_SunPaste","","",null,null],[17,"XKB_KEY_SunCut","","",null,null],[17,"XKB_KEY_SunPowerSwitch","","",null,null],[17,"XKB_KEY_SunAudioLowerVolume","","",null,null],[17,"XKB_KEY_SunAudioMute","","",null,null],[17,"XKB_KEY_SunAudioRaiseVolume","","",null,null],[17,"XKB_KEY_SunVideoDegauss","","",null,null],[17,"XKB_KEY_SunVideoLowerBrightness","","",null,null],[17,"XKB_KEY_SunVideoRaiseBrightness","","",null,null],[17,"XKB_KEY_SunPowerSwitchShift","","",null,null],[17,"XKB_KEY_Dring_accent","","",null,null],[17,"XKB_KEY_Dcircumflex_accent","","",null,null],[17,"XKB_KEY_Dcedilla_accent","","",null,null],[17,"XKB_KEY_Dacute_accent","","",null,null],[17,"XKB_KEY_Dgrave_accent","","",null,null],[17,"XKB_KEY_Dtilde","","",null,null],[17,"XKB_KEY_Ddiaeresis","","",null,null],[17,"XKB_KEY_DRemove","","",null,null],[17,"XKB_KEY_hpClearLine","","",null,null],[17,"XKB_KEY_hpInsertLine","","",null,null],[17,"XKB_KEY_hpDeleteLine","","",null,null],[17,"XKB_KEY_hpInsertChar","","",null,null],[17,"XKB_KEY_hpDeleteChar","","",null,null],[17,"XKB_KEY_hpBackTab","","",null,null],[17,"XKB_KEY_hpKP_BackTab","","",null,null],[17,"XKB_KEY_hpModelock1","","",null,null],[17,"XKB_KEY_hpModelock2","","",null,null],[17,"XKB_KEY_hpReset","","",null,null],[17,"XKB_KEY_hpSystem","","",null,null],[17,"XKB_KEY_hpUser","","",null,null],[17,"XKB_KEY_hpmute_acute","","",null,null],[17,"XKB_KEY_hpmute_grave","","",null,null],[17,"XKB_KEY_hpmute_asciicircum","","",null,null],[17,"XKB_KEY_hpmute_diaeresis","","",null,null],[17,"XKB_KEY_hpmute_asciitilde","","",null,null],[17,"XKB_KEY_hplira","","",null,null],[17,"XKB_KEY_hpguilder","","",null,null],[17,"XKB_KEY_hpYdiaeresis","","",null,null],[17,"XKB_KEY_hpIO","","",null,null],[17,"XKB_KEY_hplongminus","","",null,null],[17,"XKB_KEY_hpblock","","",null,null],[17,"XKB_KEY_osfCopy","","",null,null],[17,"XKB_KEY_osfCut","","",null,null],[17,"XKB_KEY_osfPaste","","",null,null],[17,"XKB_KEY_osfBackTab","","",null,null],[17,"XKB_KEY_osfBackSpace","","",null,null],[17,"XKB_KEY_osfClear","","",null,null],[17,"XKB_KEY_osfEscape","","",null,null],[17,"XKB_KEY_osfAddMode","","",null,null],[17,"XKB_KEY_osfPrimaryPaste","","",null,null],[17,"XKB_KEY_osfQuickPaste","","",null,null],[17,"XKB_KEY_osfPageLeft","","",null,null],[17,"XKB_KEY_osfPageUp","","",null,null],[17,"XKB_KEY_osfPageDown","","",null,null],[17,"XKB_KEY_osfPageRight","","",null,null],[17,"XKB_KEY_osfActivate","","",null,null],[17,"XKB_KEY_osfMenuBar","","",null,null],[17,"XKB_KEY_osfLeft","","",null,null],[17,"XKB_KEY_osfUp","","",null,null],[17,"XKB_KEY_osfRight","","",null,null],[17,"XKB_KEY_osfDown","","",null,null],[17,"XKB_KEY_osfEndLine","","",null,null],[17,"XKB_KEY_osfBeginLine","","",null,null],[17,"XKB_KEY_osfEndData","","",null,null],[17,"XKB_KEY_osfBeginData","","",null,null],[17,"XKB_KEY_osfPrevMenu","","",null,null],[17,"XKB_KEY_osfNextMenu","","",null,null],[17,"XKB_KEY_osfPrevField","","",null,null],[17,"XKB_KEY_osfNextField","","",null,null],[17,"XKB_KEY_osfSelect","","",null,null],[17,"XKB_KEY_osfInsert","","",null,null],[17,"XKB_KEY_osfUndo","","",null,null],[17,"XKB_KEY_osfMenu","","",null,null],[17,"XKB_KEY_osfCancel","","",null,null],[17,"XKB_KEY_osfHelp","","",null,null],[17,"XKB_KEY_osfSelectAll","","",null,null],[17,"XKB_KEY_osfDeselectAll","","",null,null],[17,"XKB_KEY_osfReselect","","",null,null],[17,"XKB_KEY_osfExtend","","",null,null],[17,"XKB_KEY_osfRestore","","",null,null],[17,"XKB_KEY_osfDelete","","",null,null],[17,"XKB_KEY_Reset","","",null,null],[17,"XKB_KEY_System","","",null,null],[17,"XKB_KEY_User","","",null,null],[17,"XKB_KEY_ClearLine","","",null,null],[17,"XKB_KEY_InsertLine","","",null,null],[17,"XKB_KEY_DeleteLine","","",null,null],[17,"XKB_KEY_InsertChar","","",null,null],[17,"XKB_KEY_DeleteChar","","",null,null],[17,"XKB_KEY_BackTab","","",null,null],[17,"XKB_KEY_KP_BackTab","","",null,null],[17,"XKB_KEY_Ext16bit_L","","",null,null],[17,"XKB_KEY_Ext16bit_R","","",null,null],[17,"XKB_KEY_mute_acute","","",null,null],[17,"XKB_KEY_mute_grave","","",null,null],[17,"XKB_KEY_mute_asciicircum","","",null,null],[17,"XKB_KEY_mute_diaeresis","","",null,null],[17,"XKB_KEY_mute_asciitilde","","",null,null],[17,"XKB_KEY_lira","","",null,null],[17,"XKB_KEY_guilder","","",null,null],[17,"XKB_KEY_IO","","",null,null],[17,"XKB_KEY_longminus","","",null,null],[17,"XKB_KEY_block","","",null,null]],"paths":[[3,"MappedKeyboardImplementation"],[3,"ModifiersState"],[3,"RMLVO"],[4,"MappedKeyboardError"]]};
searchIndex["wayland_protocols"] = {"doc":"This crate provides bindings to the official wayland protocol extensions provided in https://cgit.freedesktop.org/wayland/wayland-protocols","items":[[0,"unstable","wayland_protocols","Unstable protocols from wayland-protocols",null,null],[0,"fullscreen_shell","wayland_protocols::unstable","Fullscreen shell protocol",null,null],[0,"v1","wayland_protocols::unstable::fullscreen_shell","",null,null],[0,"client","wayland_protocols::unstable::fullscreen_shell::v1","Client-side API of this protocol",null,null],[0,"zwp_fullscreen_shell_v1","wayland_protocols::unstable::fullscreen_shell::v1::client","displays a single surface per output",null,null],[3,"ZwpFullscreenShellV1","wayland_protocols::unstable::fullscreen_shell::v1::client::zwp_fullscreen_shell_v1","",null,null],[3,"Implementation","","",null,null],[12,"capability","","advertises a capability of the compositor",0,null],[4,"Capability","","capabilities advertised by the compositor",null,null],[13,"ArbitraryModes","","compositor is capable of almost any output mode",1,null],[13,"CursorPlane","","compositor has a separate cursor plane",1,null],[4,"PresentMethod","","different method to set the surface fullscreen",null,null],[13,"Default","","no preference, apply default policy",2,null],[13,"Center","","center the surface on the output",2,null],[13,"Zoom","","scale the surface, preserving aspect ratio, to the largest size that will fit on the output",2,null],[13,"ZoomCrop","","scale the surface, preserving aspect ratio, to fully fill the output cropping if needed",2,null],[13,"Stretch","","scale the surface to the size of the output ignoring aspect ratio",2,null],[4,"Error","","wl_fullscreen_shell error values",null,null],[13,"InvalidMethod","","present_method is not known",3,null],[0,"zwp_fullscreen_shell_mode_feedback_v1","wayland_protocols::unstable::fullscreen_shell::v1::client","",null,null],[3,"ZwpFullscreenShellModeFeedbackV1","wayland_protocols::unstable::fullscreen_shell::v1::client::zwp_fullscreen_shell_mode_feedback_v1","",null,null],[3,"Implementation","","",null,null],[12,"mode_successful","","mode switch succeeded",4,null],[12,"mode_failed","","mode switch failed",4,null],[12,"present_cancelled","","mode switch cancelled",4,null],[11,"ptr","wayland_protocols::unstable::fullscreen_shell::v1::client::zwp_fullscreen_shell_v1","",5,null],[11,"from_ptr_new","","",5,null],[11,"from_ptr_initialized","","",5,null],[11,"interface_ptr","","",5,null],[11,"interface_name","","",5,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",5,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",5,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"status","","",5,{"inputs":[{"name":"self"}],"output":{"name":"liveness"}}],[11,"equals","","",5,{"inputs":[{"name":"self"},{"name":"zwpfullscreenshellv1"}],"output":{"name":"bool"}}],[11,"set_user_data","","",5,null],[11,"get_user_data","","",5,null],[11,"clone_unchecked","","",5,{"inputs":[{"name":"self"}],"output":{"name":"zwpfullscreenshellv1"}}],[11,"__dispatch_msg","","",5,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"capability"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"capability"}],"output":{"name":"bool"}}],[11,"from_raw","","",1,{"inputs":[{"name":"u32"}],"output":{"generics":["capability"],"name":"option"}}],[11,"to_raw","","",1,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"presentmethod"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"presentmethod"}],"output":{"name":"bool"}}],[11,"from_raw","","",2,{"inputs":[{"name":"u32"}],"output":{"generics":["presentmethod"],"name":"option"}}],[11,"to_raw","","",2,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"from_raw","","",3,{"inputs":[{"name":"u32"}],"output":{"generics":["error"],"name":"option"}}],[11,"to_raw","","",3,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"implementation"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"implementation"}],"output":{"name":"bool"}}],[11,"release","","release the wl_fullscreen_shell interface",5,{"inputs":[{"name":"self"}],"output":{"name":"requestresult"}}],[11,"present_surface","","present surface for display",5,{"inputs":[{"name":"self"},{"generics":["wlsurface"],"name":"option"},{"name":"u32"},{"generics":["wloutput"],"name":"option"}],"output":{"name":"requestresult"}}],[11,"present_surface_for_mode","","present surface for display at a particular mode",5,{"inputs":[{"name":"self"},{"name":"wlsurface"},{"name":"wloutput"},{"name":"i32"}],"output":{"generics":["zwpfullscreenshellmodefeedbackv1"],"name":"requestresult"}}],[11,"ptr","wayland_protocols::unstable::fullscreen_shell::v1::client::zwp_fullscreen_shell_mode_feedback_v1","",6,null],[11,"from_ptr_new","","",6,null],[11,"from_ptr_initialized","","",6,null],[11,"interface_ptr","","",6,null],[11,"interface_name","","",6,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",6,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",6,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"status","","",6,{"inputs":[{"name":"self"}],"output":{"name":"liveness"}}],[11,"equals","","",6,{"inputs":[{"name":"self"},{"name":"zwpfullscreenshellmodefeedbackv1"}],"output":{"name":"bool"}}],[11,"set_user_data","","",6,null],[11,"get_user_data","","",6,null],[11,"clone_unchecked","","",6,{"inputs":[{"name":"self"}],"output":{"name":"zwpfullscreenshellmodefeedbackv1"}}],[11,"__dispatch_msg","","",6,null],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"implementation"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"implementation"}],"output":{"name":"bool"}}],[0,"idle_inhibit","wayland_protocols::unstable","Screensaver inhibition protocol",null,null],[0,"v1","wayland_protocols::unstable::idle_inhibit","",null,null],[0,"client","wayland_protocols::unstable::idle_inhibit::v1","Client-side API of this protocol",null,null],[0,"zwp_idle_inhibit_manager_v1","wayland_protocols::unstable::idle_inhibit::v1::client","control behavior when display idles",null,null],[3,"ZwpIdleInhibitManagerV1","wayland_protocols::unstable::idle_inhibit::v1::client::zwp_idle_inhibit_manager_v1","",null,null],[0,"zwp_idle_inhibitor_v1","wayland_protocols::unstable::idle_inhibit::v1::client","context object for inhibiting idle behavior",null,null],[3,"ZwpIdleInhibitorV1","wayland_protocols::unstable::idle_inhibit::v1::client::zwp_idle_inhibitor_v1","",null,null],[11,"ptr","wayland_protocols::unstable::idle_inhibit::v1::client::zwp_idle_inhibit_manager_v1","",7,null],[11,"from_ptr_new","","",7,null],[11,"from_ptr_initialized","","",7,null],[11,"interface_ptr","","",7,null],[11,"interface_name","","",7,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",7,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",7,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"status","","",7,{"inputs":[{"name":"self"}],"output":{"name":"liveness"}}],[11,"equals","","",7,{"inputs":[{"name":"self"},{"name":"zwpidleinhibitmanagerv1"}],"output":{"name":"bool"}}],[11,"set_user_data","","",7,null],[11,"get_user_data","","",7,null],[11,"clone_unchecked","","",7,{"inputs":[{"name":"self"}],"output":{"name":"zwpidleinhibitmanagerv1"}}],[11,"destroy","","destroy the idle inhibitor object",7,{"inputs":[{"name":"self"}],"output":{"name":"requestresult"}}],[11,"create_inhibitor","","create a new inhibitor object",7,{"inputs":[{"name":"self"},{"name":"wlsurface"}],"output":{"generics":["zwpidleinhibitorv1"],"name":"requestresult"}}],[11,"ptr","wayland_protocols::unstable::idle_inhibit::v1::client::zwp_idle_inhibitor_v1","",8,null],[11,"from_ptr_new","","",8,null],[11,"from_ptr_initialized","","",8,null],[11,"interface_ptr","","",8,null],[11,"interface_name","","",8,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",8,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",8,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"status","","",8,{"inputs":[{"name":"self"}],"output":{"name":"liveness"}}],[11,"equals","","",8,{"inputs":[{"name":"self"},{"name":"zwpidleinhibitorv1"}],"output":{"name":"bool"}}],[11,"set_user_data","","",8,null],[11,"get_user_data","","",8,null],[11,"clone_unchecked","","",8,{"inputs":[{"name":"self"}],"output":{"name":"zwpidleinhibitorv1"}}],[11,"destroy","","destroy the idle inhibitor object",8,{"inputs":[{"name":"self"}],"output":{"name":"requestresult"}}],[0,"input_method","wayland_protocols::unstable","Input method protocol",null,null],[0,"v1","wayland_protocols::unstable::input_method","",null,null],[0,"client","wayland_protocols::unstable::input_method::v1","Client-side API of this protocol",null,null],[0,"zwp_input_method_context_v1","wayland_protocols::unstable::input_method::v1::client","input method context",null,null],[3,"ZwpInputMethodContextV1","wayland_protocols::unstable::input_method::v1::client::zwp_input_method_context_v1","",null,null],[3,"Implementation","","",null,null],[12,"surrounding_text","","surrounding text event",9,null],[12,"reset","","",9,null],[12,"content_type","","",9,null],[12,"invoke_action","","",9,null],[12,"commit_state","","",9,null],[12,"preferred_language","","",9,null],[0,"zwp_input_method_v1","wayland_protocols::unstable::input_method::v1::client","input method",null,null],[3,"ZwpInputMethodV1","wayland_protocols::unstable::input_method::v1::client::zwp_input_method_v1","",null,null],[3,"Implementation","","",null,null],[12,"activate","","activate event",10,null],[12,"deactivate","","deactivate event",10,null],[0,"zwp_input_panel_v1","wayland_protocols::unstable::input_method::v1::client","interface for implementing keyboards",null,null],[3,"ZwpInputPanelV1","wayland_protocols::unstable::input_method::v1::client::zwp_input_panel_v1","",null,null],[0,"zwp_input_panel_surface_v1","wayland_protocols::unstable::input_method::v1::client","",null,null],[3,"ZwpInputPanelSurfaceV1","wayland_protocols::unstable::input_method::v1::client::zwp_input_panel_surface_v1","",null,null],[4,"Position","","",null,null],[13,"CenterBottom","","",11,null],[11,"ptr","wayland_protocols::unstable::input_method::v1::client::zwp_input_method_context_v1","",12,null],[11,"from_ptr_new","","",12,null],[11,"from_ptr_initialized","","",12,null],[11,"interface_ptr","","",12,null],[11,"interface_name","","",12,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",12,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",12,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"status","","",12,{"inputs":[{"name":"self"}],"output":{"name":"liveness"}}],[11,"equals","","",12,{"inputs":[{"name":"self"},{"name":"zwpinputmethodcontextv1"}],"output":{"name":"bool"}}],[11,"set_user_data","","",12,null],[11,"get_user_data","","",12,null],[11,"clone_unchecked","","",12,{"inputs":[{"name":"self"}],"output":{"name":"zwpinputmethodcontextv1"}}],[11,"__dispatch_msg","","",12,null],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"implementation"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"implementation"}],"output":{"name":"bool"}}],[11,"destroy","","",12,{"inputs":[{"name":"self"}],"output":{"name":"requestresult"}}],[11,"commit_string","","commit string",12,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"string"}],"output":{"name":"requestresult"}}],[11,"preedit_string","","pre-edit string",12,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"string"},{"name":"string"}],"output":{"name":"requestresult"}}],[11,"preedit_styling","","pre-edit styling",12,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"requestresult"}}],[11,"preedit_cursor","","pre-edit cursor",12,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"requestresult"}}],[11,"delete_surrounding_text","","delete text",12,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"u32"}],"output":{"name":"requestresult"}}],[11,"cursor_position","","set cursor to a new position",12,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":{"name":"requestresult"}}],[11,"modifiers_map","","",12,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"vec"}],"output":{"name":"requestresult"}}],[11,"keysym","","keysym",12,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"requestresult"}}],[11,"grab_keyboard","","grab hardware keyboard",12,{"inputs":[{"name":"self"}],"output":{"generics":["wlkeyboard"],"name":"requestresult"}}],[11,"key","","forward key event",12,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"requestresult"}}],[11,"modifiers","","forward modifiers event",12,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"requestresult"}}],[11,"language","","",12,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"string"}],"output":{"name":"requestresult"}}],[11,"text_direction","","",12,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":{"name":"requestresult"}}],[11,"ptr","wayland_protocols::unstable::input_method::v1::client::zwp_input_method_v1","",13,null],[11,"from_ptr_new","","",13,null],[11,"from_ptr_initialized","","",13,null],[11,"interface_ptr","","",13,null],[11,"interface_name","","",13,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",13,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",13,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"status","","",13,{"inputs":[{"name":"self"}],"output":{"name":"liveness"}}],[11,"equals","","",13,{"inputs":[{"name":"self"},{"name":"zwpinputmethodv1"}],"output":{"name":"bool"}}],[11,"set_user_data","","",13,null],[11,"get_user_data","","",13,null],[11,"clone_unchecked","","",13,{"inputs":[{"name":"self"}],"output":{"name":"zwpinputmethodv1"}}],[11,"__dispatch_msg","","",13,null],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"implementation"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"implementation"}],"output":{"name":"bool"}}],[11,"ptr","wayland_protocols::unstable::input_method::v1::client::zwp_input_panel_v1","",14,null],[11,"from_ptr_new","","",14,null],[11,"from_ptr_initialized","","",14,null],[11,"interface_ptr","","",14,null],[11,"interface_name","","",14,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",14,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",14,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"status","","",14,{"inputs":[{"name":"self"}],"output":{"name":"liveness"}}],[11,"equals","","",14,{"inputs":[{"name":"self"},{"name":"zwpinputpanelv1"}],"output":{"name":"bool"}}],[11,"set_user_data","","",14,null],[11,"get_user_data","","",14,null],[11,"clone_unchecked","","",14,{"inputs":[{"name":"self"}],"output":{"name":"zwpinputpanelv1"}}],[11,"get_input_panel_surface","","",14,{"inputs":[{"name":"self"},{"name":"wlsurface"}],"output":{"name":"zwpinputpanelsurfacev1"}}],[11,"ptr","wayland_protocols::unstable::input_method::v1::client::zwp_input_panel_surface_v1","",15,null],[11,"from_ptr_new","","",15,null],[11,"from_ptr_initialized","","",15,null],[11,"interface_ptr","","",15,null],[11,"interface_name","","",15,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",15,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",15,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"status","","",15,{"inputs":[{"name":"self"}],"output":{"name":"liveness"}}],[11,"equals","","",15,{"inputs":[{"name":"self"},{"name":"zwpinputpanelsurfacev1"}],"output":{"name":"bool"}}],[11,"set_user_data","","",15,null],[11,"get_user_data","","",15,null],[11,"clone_unchecked","","",15,{"inputs":[{"name":"self"}],"output":{"name":"zwpinputpanelsurfacev1"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"position"}],"output":{"name":"bool"}}],[11,"from_raw","","",11,{"inputs":[{"name":"u32"}],"output":{"generics":["position"],"name":"option"}}],[11,"to_raw","","",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"set_toplevel","","set the surface type as a keyboard",15,null],[11,"set_overlay_panel","","set the surface type as an overlay panel",15,null],[0,"keyboard_shortcuts_inhibit","wayland_protocols::unstable","Protocol for inhibiting the compositor keyboard shortcuts",null,null],[0,"v1","wayland_protocols::unstable::keyboard_shortcuts_inhibit","",null,null],[0,"client","wayland_protocols::unstable::keyboard_shortcuts_inhibit::v1","Client-side API of this protocol",null,null],[0,"zwp_keyboard_shortcuts_inhibit_manager_v1","wayland_protocols::unstable::keyboard_shortcuts_inhibit::v1::client","context object for keyboard grab_manager",null,null],[3,"ZwpKeyboardShortcutsInhibitManagerV1","wayland_protocols::unstable::keyboard_shortcuts_inhibit::v1::client::zwp_keyboard_shortcuts_inhibit_manager_v1","",null,null],[4,"Error","","",null,null],[13,"AlreadyInhibited","","the shortcuts are already inhibited for this surface",16,null],[0,"zwp_keyboard_shortcuts_inhibitor_v1","wayland_protocols::unstable::keyboard_shortcuts_inhibit::v1::client","context object for keyboard shortcuts inhibitor",null,null],[3,"ZwpKeyboardShortcutsInhibitorV1","wayland_protocols::unstable::keyboard_shortcuts_inhibit::v1::client::zwp_keyboard_shortcuts_inhibitor_v1","",null,null],[3,"Implementation","","",null,null],[12,"active","","shortcuts are inhibited",17,null],[12,"inactive","","shortcuts are restored",17,null],[11,"ptr","wayland_protocols::unstable::keyboard_shortcuts_inhibit::v1::client::zwp_keyboard_shortcuts_inhibit_manager_v1","",18,null],[11,"from_ptr_new","","",18,null],[11,"from_ptr_initialized","","",18,null],[11,"interface_ptr","","",18,null],[11,"interface_name","","",18,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",18,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",18,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"status","","",18,{"inputs":[{"name":"self"}],"output":{"name":"liveness"}}],[11,"equals","","",18,{"inputs":[{"name":"self"},{"name":"zwpkeyboardshortcutsinhibitmanagerv1"}],"output":{"name":"bool"}}],[11,"set_user_data","","",18,null],[11,"get_user_data","","",18,null],[11,"clone_unchecked","","",18,{"inputs":[{"name":"self"}],"output":{"name":"zwpkeyboardshortcutsinhibitmanagerv1"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"from_raw","","",16,{"inputs":[{"name":"u32"}],"output":{"generics":["error"],"name":"option"}}],[11,"to_raw","","",16,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"destroy","","destroy the keyboard shortcuts inhibitor object",18,{"inputs":[{"name":"self"}],"output":{"name":"requestresult"}}],[11,"inhibit_shortcuts","","create a new keyboard shortcuts inhibitor object",18,{"inputs":[{"name":"self"},{"name":"wlsurface"},{"name":"wlseat"}],"output":{"generics":["zwpkeyboardshortcutsinhibitorv1"],"name":"requestresult"}}],[11,"ptr","wayland_protocols::unstable::keyboard_shortcuts_inhibit::v1::client::zwp_keyboard_shortcuts_inhibitor_v1","",19,null],[11,"from_ptr_new","","",19,null],[11,"from_ptr_initialized","","",19,null],[11,"interface_ptr","","",19,null],[11,"interface_name","","",19,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",19,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",19,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"status","","",19,{"inputs":[{"name":"self"}],"output":{"name":"liveness"}}],[11,"equals","","",19,{"inputs":[{"name":"self"},{"name":"zwpkeyboardshortcutsinhibitorv1"}],"output":{"name":"bool"}}],[11,"set_user_data","","",19,null],[11,"get_user_data","","",19,null],[11,"clone_unchecked","","",19,{"inputs":[{"name":"self"}],"output":{"name":"zwpkeyboardshortcutsinhibitorv1"}}],[11,"__dispatch_msg","","",19,null],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"implementation"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"implementation"}],"output":{"name":"bool"}}],[11,"destroy","","destroy the keyboard shortcuts inhibitor object",19,{"inputs":[{"name":"self"}],"output":{"name":"requestresult"}}],[0,"linux_dmabuf","wayland_protocols::unstable","Linux DMA-BUF protocol",null,null],[0,"v1","wayland_protocols::unstable::linux_dmabuf","",null,null],[0,"client","wayland_protocols::unstable::linux_dmabuf::v1","Client-side API of this protocol",null,null],[0,"zwp_linux_dmabuf_v1","wayland_protocols::unstable::linux_dmabuf::v1::client","factory for creating dmabuf-based wl_buffers",null,null],[3,"ZwpLinuxDmabufV1","wayland_protocols::unstable::linux_dmabuf::v1::client::zwp_linux_dmabuf_v1","",null,null],[3,"Implementation","","",null,null],[12,"format","","supported buffer format",20,null],[12,"modifier","","supported buffer format modifier",20,null],[0,"zwp_linux_buffer_params_v1","wayland_protocols::unstable::linux_dmabuf::v1::client","parameters for creating a dmabuf-based wl_buffer",null,null],[3,"ZwpLinuxBufferParamsV1","wayland_protocols::unstable::linux_dmabuf::v1::client::zwp_linux_buffer_params_v1","",null,null],[3,"Implementation","","",null,null],[12,"created","","buffer creation succeeded",21,null],[12,"failed","","buffer creation failed",21,null],[4,"Error","","",null,null],[13,"AlreadyUsed","","the dmabuf_batch object has already been used to create a wl_buffer",22,null],[13,"PlaneIdx","","plane index out of bounds",22,null],[13,"PlaneSet","","the plane index was already set",22,null],[13,"Incomplete","","missing or too many planes to create a buffer",22,null],[13,"InvalidFormat","","format not supported",22,null],[13,"InvalidDimensions","","invalid width or height",22,null],[13,"OutOfBounds","","offset + stride * height goes out of dmabuf bounds",22,null],[13,"InvalidWlBuffer","","invalid wl_buffer resulted from importing dmabufs via the create_immed request on given buffer_params",22,null],[4,"Flags","","",null,null],[13,"YInvert","","contents are y-inverted",23,null],[13,"Interlaced","","content is interlaced",23,null],[13,"BottomFirst","","bottom field first",23,null],[11,"ptr","wayland_protocols::unstable::linux_dmabuf::v1::client::zwp_linux_dmabuf_v1","",24,null],[11,"from_ptr_new","","",24,null],[11,"from_ptr_initialized","","",24,null],[11,"interface_ptr","","",24,null],[11,"interface_name","","",24,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",24,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",24,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"status","","",24,{"inputs":[{"name":"self"}],"output":{"name":"liveness"}}],[11,"equals","","",24,{"inputs":[{"name":"self"},{"name":"zwplinuxdmabufv1"}],"output":{"name":"bool"}}],[11,"set_user_data","","",24,null],[11,"get_user_data","","",24,null],[11,"clone_unchecked","","",24,{"inputs":[{"name":"self"}],"output":{"name":"zwplinuxdmabufv1"}}],[11,"__dispatch_msg","","",24,null],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"implementation"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"implementation"}],"output":{"name":"bool"}}],[11,"destroy","","unbind the factory",24,{"inputs":[{"name":"self"}],"output":{"name":"requestresult"}}],[11,"create_params","","create a temporary object for buffer parameters",24,{"inputs":[{"name":"self"}],"output":{"generics":["zwplinuxbufferparamsv1"],"name":"requestresult"}}],[11,"ptr","wayland_protocols::unstable::linux_dmabuf::v1::client::zwp_linux_buffer_params_v1","",25,null],[11,"from_ptr_new","","",25,null],[11,"from_ptr_initialized","","",25,null],[11,"interface_ptr","","",25,null],[11,"interface_name","","",25,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",25,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",25,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"status","","",25,{"inputs":[{"name":"self"}],"output":{"name":"liveness"}}],[11,"equals","","",25,{"inputs":[{"name":"self"},{"name":"zwplinuxbufferparamsv1"}],"output":{"name":"bool"}}],[11,"set_user_data","","",25,null],[11,"get_user_data","","",25,null],[11,"clone_unchecked","","",25,{"inputs":[{"name":"self"}],"output":{"name":"zwplinuxbufferparamsv1"}}],[11,"__dispatch_msg","","",25,null],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"from_raw","","",22,{"inputs":[{"name":"u32"}],"output":{"generics":["error"],"name":"option"}}],[11,"to_raw","","",22,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"flags"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"from_raw","","",23,{"inputs":[{"name":"u32"}],"output":{"generics":["flags"],"name":"option"}}],[11,"to_raw","","",23,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"implementation"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"implementation"}],"output":{"name":"bool"}}],[11,"destroy","","delete this object, used or not",25,{"inputs":[{"name":"self"}],"output":{"name":"requestresult"}}],[11,"add","","add a dmabuf to the temporary set",25,{"inputs":[{"name":"self"},{"name":"rawfd"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"requestresult"}}],[11,"create","","create a wl_buffer from the given dmabufs",25,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"requestresult"}}],[11,"create_immed","","immediately create a wl_buffer from the given dmabufs",25,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["wlbuffer"],"name":"requestresult"}}],[0,"pointer_constraints","wayland_protocols::unstable","protocol for constraining pointer motions",null,null],[0,"v1","wayland_protocols::unstable::pointer_constraints","",null,null],[0,"client","wayland_protocols::unstable::pointer_constraints::v1","Client-side API of this protocol",null,null],[0,"zwp_pointer_constraints_v1","wayland_protocols::unstable::pointer_constraints::v1::client","constrain the movement of a pointer",null,null],[3,"ZwpPointerConstraintsV1","wayland_protocols::unstable::pointer_constraints::v1::client::zwp_pointer_constraints_v1","",null,null],[4,"Error","","wp_pointer_constraints error values",null,null],[13,"AlreadyConstrained","","pointer constraint already requested on that surface",26,null],[4,"Lifetime","","constraint lifetime",null,null],[13,"Oneshot","","the pointer constraint is defunct once deactivated",27,null],[13,"Persistent","","the pointer constraint may reactivate",27,null],[0,"zwp_locked_pointer_v1","wayland_protocols::unstable::pointer_constraints::v1::client","receive relative pointer motion events",null,null],[3,"ZwpLockedPointerV1","wayland_protocols::unstable::pointer_constraints::v1::client::zwp_locked_pointer_v1","",null,null],[3,"Implementation","","",null,null],[12,"locked","","lock activation event",28,null],[12,"unlocked","","lock deactivation event",28,null],[0,"zwp_confined_pointer_v1","wayland_protocols::unstable::pointer_constraints::v1::client","confined pointer object",null,null],[3,"ZwpConfinedPointerV1","wayland_protocols::unstable::pointer_constraints::v1::client::zwp_confined_pointer_v1","",null,null],[3,"Implementation","","",null,null],[12,"confined","","pointer confined",29,null],[12,"unconfined","","pointer unconfined",29,null],[11,"ptr","wayland_protocols::unstable::pointer_constraints::v1::client::zwp_pointer_constraints_v1","",30,null],[11,"from_ptr_new","","",30,null],[11,"from_ptr_initialized","","",30,null],[11,"interface_ptr","","",30,null],[11,"interface_name","","",30,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",30,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",30,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"status","","",30,{"inputs":[{"name":"self"}],"output":{"name":"liveness"}}],[11,"equals","","",30,{"inputs":[{"name":"self"},{"name":"zwppointerconstraintsv1"}],"output":{"name":"bool"}}],[11,"set_user_data","","",30,null],[11,"get_user_data","","",30,null],[11,"clone_unchecked","","",30,{"inputs":[{"name":"self"}],"output":{"name":"zwppointerconstraintsv1"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",26,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"from_raw","","",26,{"inputs":[{"name":"u32"}],"output":{"generics":["error"],"name":"option"}}],[11,"to_raw","","",26,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"lifetime"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",27,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"from_raw","","",27,{"inputs":[{"name":"u32"}],"output":{"generics":["lifetime"],"name":"option"}}],[11,"to_raw","","",27,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"destroy","","destroy the pointer constraints manager object",30,{"inputs":[{"name":"self"}],"output":{"name":"requestresult"}}],[11,"lock_pointer","","lock pointer to a position",30,{"inputs":[{"name":"self"},{"name":"wlsurface"},{"name":"wlpointer"},{"generics":["wlregion"],"name":"option"},{"name":"u32"}],"output":{"generics":["zwplockedpointerv1"],"name":"requestresult"}}],[11,"confine_pointer","","confine pointer to a region",30,{"inputs":[{"name":"self"},{"name":"wlsurface"},{"name":"wlpointer"},{"generics":["wlregion"],"name":"option"},{"name":"u32"}],"output":{"generics":["zwpconfinedpointerv1"],"name":"requestresult"}}],[11,"ptr","wayland_protocols::unstable::pointer_constraints::v1::client::zwp_locked_pointer_v1","",31,null],[11,"from_ptr_new","","",31,null],[11,"from_ptr_initialized","","",31,null],[11,"interface_ptr","","",31,null],[11,"interface_name","","",31,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",31,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",31,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"status","","",31,{"inputs":[{"name":"self"}],"output":{"name":"liveness"}}],[11,"equals","","",31,{"inputs":[{"name":"self"},{"name":"zwplockedpointerv1"}],"output":{"name":"bool"}}],[11,"set_user_data","","",31,null],[11,"get_user_data","","",31,null],[11,"clone_unchecked","","",31,{"inputs":[{"name":"self"}],"output":{"name":"zwplockedpointerv1"}}],[11,"__dispatch_msg","","",31,null],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"implementation"}}],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"implementation"}],"output":{"name":"bool"}}],[11,"destroy","","destroy the locked pointer object",31,{"inputs":[{"name":"self"}],"output":{"name":"requestresult"}}],[11,"set_cursor_position_hint","","set the pointer cursor position hint",31,{"inputs":[{"name":"self"},{"name":"f64"},{"name":"f64"}],"output":{"name":"requestresult"}}],[11,"set_region","","set a new lock region",31,{"inputs":[{"name":"self"},{"generics":["wlregion"],"name":"option"}],"output":{"name":"requestresult"}}],[11,"ptr","wayland_protocols::unstable::pointer_constraints::v1::client::zwp_confined_pointer_v1","",32,null],[11,"from_ptr_new","","",32,null],[11,"from_ptr_initialized","","",32,null],[11,"interface_ptr","","",32,null],[11,"interface_name","","",32,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",32,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",32,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"status","","",32,{"inputs":[{"name":"self"}],"output":{"name":"liveness"}}],[11,"equals","","",32,{"inputs":[{"name":"self"},{"name":"zwpconfinedpointerv1"}],"output":{"name":"bool"}}],[11,"set_user_data","","",32,null],[11,"get_user_data","","",32,null],[11,"clone_unchecked","","",32,{"inputs":[{"name":"self"}],"output":{"name":"zwpconfinedpointerv1"}}],[11,"__dispatch_msg","","",32,null],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"implementation"}}],[11,"eq","","",29,{"inputs":[{"name":"self"},{"name":"implementation"}],"output":{"name":"bool"}}],[11,"destroy","","destroy the confined pointer object",32,{"inputs":[{"name":"self"}],"output":{"name":"requestresult"}}],[11,"set_region","","set a new confine region",32,{"inputs":[{"name":"self"},{"generics":["wlregion"],"name":"option"}],"output":{"name":"requestresult"}}],[0,"pointer_gestures","wayland_protocols::unstable","Pointer gestures protocol",null,null],[0,"v1","wayland_protocols::unstable::pointer_gestures","",null,null],[0,"client","wayland_protocols::unstable::pointer_gestures::v1","Client-side API of this protocol",null,null],[0,"zwp_pointer_gestures_v1","wayland_protocols::unstable::pointer_gestures::v1::client","touchpad gestures",null,null],[3,"ZwpPointerGesturesV1","wayland_protocols::unstable::pointer_gestures::v1::client::zwp_pointer_gestures_v1","",null,null],[0,"zwp_pointer_gesture_swipe_v1","wayland_protocols::unstable::pointer_gestures::v1::client","a swipe gesture object",null,null],[3,"ZwpPointerGestureSwipeV1","wayland_protocols::unstable::pointer_gestures::v1::client::zwp_pointer_gesture_swipe_v1","",null,null],[3,"Implementation","","",null,null],[12,"begin","","multi-finger swipe begin",33,null],[12,"update","","multi-finger swipe motion",33,null],[12,"end","","multi-finger swipe end",33,null],[0,"zwp_pointer_gesture_pinch_v1","wayland_protocols::unstable::pointer_gestures::v1::client","a pinch gesture object",null,null],[3,"ZwpPointerGesturePinchV1","wayland_protocols::unstable::pointer_gestures::v1::client::zwp_pointer_gesture_pinch_v1","",null,null],[3,"Implementation","","",null,null],[12,"begin","","multi-finger pinch begin",34,null],[12,"update","","multi-finger pinch motion",34,null],[12,"end","","multi-finger pinch end",34,null],[11,"ptr","wayland_protocols::unstable::pointer_gestures::v1::client::zwp_pointer_gestures_v1","",35,null],[11,"from_ptr_new","","",35,null],[11,"from_ptr_initialized","","",35,null],[11,"interface_ptr","","",35,null],[11,"interface_name","","",35,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",35,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",35,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"status","","",35,{"inputs":[{"name":"self"}],"output":{"name":"liveness"}}],[11,"equals","","",35,{"inputs":[{"name":"self"},{"name":"zwppointergesturesv1"}],"output":{"name":"bool"}}],[11,"set_user_data","","",35,null],[11,"get_user_data","","",35,null],[11,"clone_unchecked","","",35,{"inputs":[{"name":"self"}],"output":{"name":"zwppointergesturesv1"}}],[11,"get_swipe_gesture","","get swipe gesture",35,{"inputs":[{"name":"self"},{"name":"wlpointer"}],"output":{"name":"zwppointergestureswipev1"}}],[11,"get_pinch_gesture","","get pinch gesture",35,{"inputs":[{"name":"self"},{"name":"wlpointer"}],"output":{"name":"zwppointergesturepinchv1"}}],[11,"ptr","wayland_protocols::unstable::pointer_gestures::v1::client::zwp_pointer_gesture_swipe_v1","",36,null],[11,"from_ptr_new","","",36,null],[11,"from_ptr_initialized","","",36,null],[11,"interface_ptr","","",36,null],[11,"interface_name","","",36,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",36,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",36,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"status","","",36,{"inputs":[{"name":"self"}],"output":{"name":"liveness"}}],[11,"equals","","",36,{"inputs":[{"name":"self"},{"name":"zwppointergestureswipev1"}],"output":{"name":"bool"}}],[11,"set_user_data","","",36,null],[11,"get_user_data","","",36,null],[11,"clone_unchecked","","",36,{"inputs":[{"name":"self"}],"output":{"name":"zwppointergestureswipev1"}}],[11,"__dispatch_msg","","",36,null],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"implementation"}}],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"implementation"}],"output":{"name":"bool"}}],[11,"destroy","","destroy the pointer swipe gesture object",36,{"inputs":[{"name":"self"}],"output":{"name":"requestresult"}}],[11,"ptr","wayland_protocols::unstable::pointer_gestures::v1::client::zwp_pointer_gesture_pinch_v1","",37,null],[11,"from_ptr_new","","",37,null],[11,"from_ptr_initialized","","",37,null],[11,"interface_ptr","","",37,null],[11,"interface_name","","",37,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",37,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",37,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"status","","",37,{"inputs":[{"name":"self"}],"output":{"name":"liveness"}}],[11,"equals","","",37,{"inputs":[{"name":"self"},{"name":"zwppointergesturepinchv1"}],"output":{"name":"bool"}}],[11,"set_user_data","","",37,null],[11,"get_user_data","","",37,null],[11,"clone_unchecked","","",37,{"inputs":[{"name":"self"}],"output":{"name":"zwppointergesturepinchv1"}}],[11,"__dispatch_msg","","",37,null],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"implementation"}}],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"implementation"}],"output":{"name":"bool"}}],[11,"destroy","","destroy the pinch gesture object",37,{"inputs":[{"name":"self"}],"output":{"name":"requestresult"}}],[0,"relative_pointer","wayland_protocols::unstable","protocol for relative pointer motion events",null,null],[0,"v1","wayland_protocols::unstable::relative_pointer","",null,null],[0,"client","wayland_protocols::unstable::relative_pointer::v1","Client-side API of this protocol",null,null],[0,"zwp_relative_pointer_manager_v1","wayland_protocols::unstable::relative_pointer::v1::client","get relative pointer objects",null,null],[3,"ZwpRelativePointerManagerV1","wayland_protocols::unstable::relative_pointer::v1::client::zwp_relative_pointer_manager_v1","",null,null],[0,"zwp_relative_pointer_v1","wayland_protocols::unstable::relative_pointer::v1::client","relative pointer object",null,null],[3,"ZwpRelativePointerV1","wayland_protocols::unstable::relative_pointer::v1::client::zwp_relative_pointer_v1","",null,null],[3,"Implementation","","",null,null],[12,"relative_motion","","relative pointer motion",38,null],[11,"ptr","wayland_protocols::unstable::relative_pointer::v1::client::zwp_relative_pointer_manager_v1","",39,null],[11,"from_ptr_new","","",39,null],[11,"from_ptr_initialized","","",39,null],[11,"interface_ptr","","",39,null],[11,"interface_name","","",39,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",39,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",39,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"status","","",39,{"inputs":[{"name":"self"}],"output":{"name":"liveness"}}],[11,"equals","","",39,{"inputs":[{"name":"self"},{"name":"zwprelativepointermanagerv1"}],"output":{"name":"bool"}}],[11,"set_user_data","","",39,null],[11,"get_user_data","","",39,null],[11,"clone_unchecked","","",39,{"inputs":[{"name":"self"}],"output":{"name":"zwprelativepointermanagerv1"}}],[11,"destroy","","destroy the relative pointer manager object",39,{"inputs":[{"name":"self"}],"output":{"name":"requestresult"}}],[11,"get_relative_pointer","","get a relative pointer object",39,{"inputs":[{"name":"self"},{"name":"wlpointer"}],"output":{"generics":["zwprelativepointerv1"],"name":"requestresult"}}],[11,"ptr","wayland_protocols::unstable::relative_pointer::v1::client::zwp_relative_pointer_v1","",40,null],[11,"from_ptr_new","","",40,null],[11,"from_ptr_initialized","","",40,null],[11,"interface_ptr","","",40,null],[11,"interface_name","","",40,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",40,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",40,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"status","","",40,{"inputs":[{"name":"self"}],"output":{"name":"liveness"}}],[11,"equals","","",40,{"inputs":[{"name":"self"},{"name":"zwprelativepointerv1"}],"output":{"name":"bool"}}],[11,"set_user_data","","",40,null],[11,"get_user_data","","",40,null],[11,"clone_unchecked","","",40,{"inputs":[{"name":"self"}],"output":{"name":"zwprelativepointerv1"}}],[11,"__dispatch_msg","","",40,null],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"implementation"}}],[11,"eq","","",38,{"inputs":[{"name":"self"},{"name":"implementation"}],"output":{"name":"bool"}}],[11,"destroy","","release the relative pointer object",40,{"inputs":[{"name":"self"}],"output":{"name":"requestresult"}}],[0,"tablet","wayland_protocols::unstable","Wayland protocol for graphics tablets",null,null],[0,"v1","wayland_protocols::unstable::tablet","",null,null],[0,"client","wayland_protocols::unstable::tablet::v1","Client-side API of this protocol",null,null],[0,"zwp_tablet_manager_v1","wayland_protocols::unstable::tablet::v1::client","controller object for graphic tablet devices",null,null],[3,"ZwpTabletManagerV1","wayland_protocols::unstable::tablet::v1::client::zwp_tablet_manager_v1","",null,null],[0,"zwp_tablet_seat_v1","wayland_protocols::unstable::tablet::v1::client","controller object for graphic tablet devices of a seat",null,null],[3,"ZwpTabletSeatV1","wayland_protocols::unstable::tablet::v1::client::zwp_tablet_seat_v1","",null,null],[3,"Implementation","","",null,null],[12,"tablet_added","","new device notification",41,null],[12,"tool_added","","a new tool has been used with a tablet",41,null],[0,"zwp_tablet_tool_v1","wayland_protocols::unstable::tablet::v1::client","a physical tablet tool",null,null],[3,"ZwpTabletToolV1","wayland_protocols::unstable::tablet::v1::client::zwp_tablet_tool_v1","",null,null],[3,"Implementation","","",null,null],[12,"type_","","tool type",42,null],[12,"hardware_serial","","unique hardware serial number of the tool",42,null],[12,"hardware_id_wacom","","hardware id notification in Wacom's format",42,null],[12,"capability","","tool capability notification",42,null],[12,"done","","tool description events sequence complete",42,null],[12,"removed","","tool removed",42,null],[12,"proximity_in","","proximity in event",42,null],[12,"proximity_out","","proximity out event",42,null],[12,"down","","tablet tool is making contact",42,null],[12,"up","","tablet tool is no longer making contact",42,null],[12,"motion","","motion event",42,null],[12,"pressure","","pressure change event",42,null],[12,"distance","","distance change event",42,null],[12,"tilt","","tilt change event",42,null],[12,"rotation","","z-rotation change event",42,null],[12,"slider","","Slider position change event",42,null],[12,"wheel","","Wheel delta event",42,null],[12,"button","","button event",42,null],[12,"frame","","frame event",42,null],[4,"Type","","a physical tool type",null,null],[13,"Pen","","Pen",43,null],[13,"Eraser","","Eraser",43,null],[13,"Brush","","Brush",43,null],[13,"Pencil","","Pencil",43,null],[13,"Airbrush","","Airbrush",43,null],[13,"Finger","","Finger",43,null],[13,"Mouse","","Mouse",43,null],[13,"Lens","","Lens",43,null],[4,"Capability","","capability flags for a tool",null,null],[13,"Tilt","","Tilt axes",44,null],[13,"Pressure","","Pressure axis",44,null],[13,"Distance","","Distance axis",44,null],[13,"Rotation","","Z-rotation axis",44,null],[13,"Slider","","Slider axis",44,null],[13,"Wheel","","Wheel axis",44,null],[4,"ButtonState","","physical button state",null,null],[13,"Released","","button is not pressed",45,null],[13,"Pressed","","button is pressed",45,null],[4,"Error","","",null,null],[13,"Role","","given wl_surface has another role",46,null],[0,"zwp_tablet_v1","wayland_protocols::unstable::tablet::v1::client","graphics tablet device",null,null],[3,"ZwpTabletV1","wayland_protocols::unstable::tablet::v1::client::zwp_tablet_v1","",null,null],[3,"Implementation","","",null,null],[12,"name","","tablet device name",47,null],[12,"id","","tablet device USB vendor/product id",47,null],[12,"path","","path to the device",47,null],[12,"done","","tablet description events sequence complete",47,null],[12,"removed","","tablet removed event",47,null],[11,"ptr","wayland_protocols::unstable::tablet::v1::client::zwp_tablet_manager_v1","",48,null],[11,"from_ptr_new","","",48,null],[11,"from_ptr_initialized","","",48,null],[11,"interface_ptr","","",48,null],[11,"interface_name","","",48,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",48,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",48,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"status","","",48,{"inputs":[{"name":"self"}],"output":{"name":"liveness"}}],[11,"equals","","",48,{"inputs":[{"name":"self"},{"name":"zwptabletmanagerv1"}],"output":{"name":"bool"}}],[11,"set_user_data","","",48,null],[11,"get_user_data","","",48,null],[11,"clone_unchecked","","",48,{"inputs":[{"name":"self"}],"output":{"name":"zwptabletmanagerv1"}}],[11,"get_tablet_seat","","get the tablet seat",48,{"inputs":[{"name":"self"},{"name":"wlseat"}],"output":{"generics":["zwptabletseatv1"],"name":"requestresult"}}],[11,"destroy","","release the memory for the tablet manager object",48,{"inputs":[{"name":"self"}],"output":{"name":"requestresult"}}],[11,"ptr","wayland_protocols::unstable::tablet::v1::client::zwp_tablet_seat_v1","",49,null],[11,"from_ptr_new","","",49,null],[11,"from_ptr_initialized","","",49,null],[11,"interface_ptr","","",49,null],[11,"interface_name","","",49,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",49,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",49,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"status","","",49,{"inputs":[{"name":"self"}],"output":{"name":"liveness"}}],[11,"equals","","",49,{"inputs":[{"name":"self"},{"name":"zwptabletseatv1"}],"output":{"name":"bool"}}],[11,"set_user_data","","",49,null],[11,"get_user_data","","",49,null],[11,"clone_unchecked","","",49,{"inputs":[{"name":"self"}],"output":{"name":"zwptabletseatv1"}}],[11,"__dispatch_msg","","",49,null],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"implementation"}}],[11,"eq","","",41,{"inputs":[{"name":"self"},{"name":"implementation"}],"output":{"name":"bool"}}],[11,"destroy","","release the memory for the tablet seat object",49,{"inputs":[{"name":"self"}],"output":{"name":"requestresult"}}],[11,"ptr","wayland_protocols::unstable::tablet::v1::client::zwp_tablet_tool_v1","",50,null],[11,"from_ptr_new","","",50,null],[11,"from_ptr_initialized","","",50,null],[11,"interface_ptr","","",50,null],[11,"interface_name","","",50,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",50,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",50,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"status","","",50,{"inputs":[{"name":"self"}],"output":{"name":"liveness"}}],[11,"equals","","",50,{"inputs":[{"name":"self"},{"name":"zwptablettoolv1"}],"output":{"name":"bool"}}],[11,"set_user_data","","",50,null],[11,"get_user_data","","",50,null],[11,"clone_unchecked","","",50,{"inputs":[{"name":"self"}],"output":{"name":"zwptablettoolv1"}}],[11,"__dispatch_msg","","",50,null],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",43,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"bool"}}],[11,"from_raw","","",43,{"inputs":[{"name":"u32"}],"output":{"generics":["type"],"name":"option"}}],[11,"to_raw","","",43,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"capability"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",44,{"inputs":[{"name":"self"},{"name":"capability"}],"output":{"name":"bool"}}],[11,"from_raw","","",44,{"inputs":[{"name":"u32"}],"output":{"generics":["capability"],"name":"option"}}],[11,"to_raw","","",44,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"buttonstate"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",45,{"inputs":[{"name":"self"},{"name":"buttonstate"}],"output":{"name":"bool"}}],[11,"from_raw","","",45,{"inputs":[{"name":"u32"}],"output":{"generics":["buttonstate"],"name":"option"}}],[11,"to_raw","","",45,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",46,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"from_raw","","",46,{"inputs":[{"name":"u32"}],"output":{"generics":["error"],"name":"option"}}],[11,"to_raw","","",46,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"implementation"}}],[11,"eq","","",42,{"inputs":[{"name":"self"},{"name":"implementation"}],"output":{"name":"bool"}}],[11,"set_cursor","","set the tablet tool's surface",50,{"inputs":[{"name":"self"},{"name":"u32"},{"generics":["wlsurface"],"name":"option"},{"name":"i32"},{"name":"i32"}],"output":{"name":"requestresult"}}],[11,"destroy","","destroy the tool object",50,{"inputs":[{"name":"self"}],"output":{"name":"requestresult"}}],[11,"ptr","wayland_protocols::unstable::tablet::v1::client::zwp_tablet_v1","",51,null],[11,"from_ptr_new","","",51,null],[11,"from_ptr_initialized","","",51,null],[11,"interface_ptr","","",51,null],[11,"interface_name","","",51,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",51,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",51,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"status","","",51,{"inputs":[{"name":"self"}],"output":{"name":"liveness"}}],[11,"equals","","",51,{"inputs":[{"name":"self"},{"name":"zwptabletv1"}],"output":{"name":"bool"}}],[11,"set_user_data","","",51,null],[11,"get_user_data","","",51,null],[11,"clone_unchecked","","",51,{"inputs":[{"name":"self"}],"output":{"name":"zwptabletv1"}}],[11,"__dispatch_msg","","",51,null],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"implementation"}}],[11,"eq","","",47,{"inputs":[{"name":"self"},{"name":"implementation"}],"output":{"name":"bool"}}],[11,"destroy","","destroy the tablet object",51,{"inputs":[{"name":"self"}],"output":{"name":"requestresult"}}],[0,"v2","wayland_protocols::unstable::tablet","",null,null],[0,"client","wayland_protocols::unstable::tablet::v2","Client-side API of this protocol",null,null],[0,"zwp_tablet_manager_v2","wayland_protocols::unstable::tablet::v2::client","controller object for graphic tablet devices",null,null],[3,"ZwpTabletManagerV2","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_manager_v2","",null,null],[0,"zwp_tablet_seat_v2","wayland_protocols::unstable::tablet::v2::client","controller object for graphic tablet devices of a seat",null,null],[3,"ZwpTabletSeatV2","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_seat_v2","",null,null],[3,"Implementation","","",null,null],[12,"tablet_added","","new device notification",52,null],[12,"tool_added","","a new tool has been used with a tablet",52,null],[12,"pad_added","","new pad notification",52,null],[0,"zwp_tablet_tool_v2","wayland_protocols::unstable::tablet::v2::client","a physical tablet tool",null,null],[3,"ZwpTabletToolV2","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_tool_v2","",null,null],[3,"Implementation","","",null,null],[12,"type_","","tool type",53,null],[12,"hardware_serial","","unique hardware serial number of the tool",53,null],[12,"hardware_id_wacom","","hardware id notification in Wacom's format",53,null],[12,"capability","","tool capability notification",53,null],[12,"done","","tool description events sequence complete",53,null],[12,"removed","","tool removed",53,null],[12,"proximity_in","","proximity in event",53,null],[12,"proximity_out","","proximity out event",53,null],[12,"down","","tablet tool is making contact",53,null],[12,"up","","tablet tool is no longer making contact",53,null],[12,"motion","","motion event",53,null],[12,"pressure","","pressure change event",53,null],[12,"distance","","distance change event",53,null],[12,"tilt","","tilt change event",53,null],[12,"rotation","","z-rotation change event",53,null],[12,"slider","","Slider position change event",53,null],[12,"wheel","","Wheel delta event",53,null],[12,"button","","button event",53,null],[12,"frame","","frame event",53,null],[4,"Type","","a physical tool type",null,null],[13,"Pen","","Pen",54,null],[13,"Eraser","","Eraser",54,null],[13,"Brush","","Brush",54,null],[13,"Pencil","","Pencil",54,null],[13,"Airbrush","","Airbrush",54,null],[13,"Finger","","Finger",54,null],[13,"Mouse","","Mouse",54,null],[13,"Lens","","Lens",54,null],[4,"Capability","","capability flags for a tool",null,null],[13,"Tilt","","Tilt axes",55,null],[13,"Pressure","","Pressure axis",55,null],[13,"Distance","","Distance axis",55,null],[13,"Rotation","","Z-rotation axis",55,null],[13,"Slider","","Slider axis",55,null],[13,"Wheel","","Wheel axis",55,null],[4,"ButtonState","","physical button state",null,null],[13,"Released","","button is not pressed",56,null],[13,"Pressed","","button is pressed",56,null],[4,"Error","","",null,null],[13,"Role","","given wl_surface has another role",57,null],[0,"zwp_tablet_v2","wayland_protocols::unstable::tablet::v2::client","graphics tablet device",null,null],[3,"ZwpTabletV2","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_v2","",null,null],[3,"Implementation","","",null,null],[12,"name","","tablet device name",58,null],[12,"id","","tablet device USB vendor/product id",58,null],[12,"path","","path to the device",58,null],[12,"done","","tablet description events sequence complete",58,null],[12,"removed","","tablet removed event",58,null],[0,"zwp_tablet_pad_ring_v2","wayland_protocols::unstable::tablet::v2::client","pad ring",null,null],[3,"ZwpTabletPadRingV2","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_pad_ring_v2","",null,null],[3,"Implementation","","",null,null],[12,"source","","ring event source",59,null],[12,"angle","","angle changed",59,null],[12,"stop","","interaction stopped",59,null],[12,"frame","","end of a ring event sequence",59,null],[4,"Source","","ring axis source",null,null],[13,"Finger","","finger",60,null],[0,"zwp_tablet_pad_strip_v2","wayland_protocols::unstable::tablet::v2::client","pad strip",null,null],[3,"ZwpTabletPadStripV2","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_pad_strip_v2","",null,null],[3,"Implementation","","",null,null],[12,"source","","strip event source",61,null],[12,"position","","position changed",61,null],[12,"stop","","interaction stopped",61,null],[12,"frame","","end of a strip event sequence",61,null],[4,"Source","","strip axis source",null,null],[13,"Finger","","finger",62,null],[0,"zwp_tablet_pad_group_v2","wayland_protocols::unstable::tablet::v2::client","a set of buttons, rings and strips",null,null],[3,"ZwpTabletPadGroupV2","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_pad_group_v2","",null,null],[3,"Implementation","","",null,null],[12,"buttons","","buttons announced",63,null],[12,"ring","","ring announced",63,null],[12,"strip","","strip announced",63,null],[12,"modes","","mode-switch ability announced",63,null],[12,"done","","tablet group description events sequence complete",63,null],[12,"mode_switch","","mode switch event",63,null],[0,"zwp_tablet_pad_v2","wayland_protocols::unstable::tablet::v2::client","a set of buttons, rings and strips",null,null],[3,"ZwpTabletPadV2","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_pad_v2","",null,null],[3,"Implementation","","",null,null],[12,"group","","group announced",64,null],[12,"path","","path to the device",64,null],[12,"buttons","","buttons announced",64,null],[12,"done","","pad description event sequence complete",64,null],[12,"button","","physical button state",64,null],[12,"enter","","enter event",64,null],[12,"leave","","enter event",64,null],[12,"removed","","pad removed event",64,null],[4,"ButtonState","","physical button state",null,null],[13,"Released","","the button is not pressed",65,null],[13,"Pressed","","the button is pressed",65,null],[11,"ptr","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_manager_v2","",66,null],[11,"from_ptr_new","","",66,null],[11,"from_ptr_initialized","","",66,null],[11,"interface_ptr","","",66,null],[11,"interface_name","","",66,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",66,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",66,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"status","","",66,{"inputs":[{"name":"self"}],"output":{"name":"liveness"}}],[11,"equals","","",66,{"inputs":[{"name":"self"},{"name":"zwptabletmanagerv2"}],"output":{"name":"bool"}}],[11,"set_user_data","","",66,null],[11,"get_user_data","","",66,null],[11,"clone_unchecked","","",66,{"inputs":[{"name":"self"}],"output":{"name":"zwptabletmanagerv2"}}],[11,"get_tablet_seat","","get the tablet seat",66,{"inputs":[{"name":"self"},{"name":"wlseat"}],"output":{"generics":["zwptabletseatv2"],"name":"requestresult"}}],[11,"destroy","","release the memory for the tablet manager object",66,{"inputs":[{"name":"self"}],"output":{"name":"requestresult"}}],[11,"ptr","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_seat_v2","",67,null],[11,"from_ptr_new","","",67,null],[11,"from_ptr_initialized","","",67,null],[11,"interface_ptr","","",67,null],[11,"interface_name","","",67,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",67,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",67,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"status","","",67,{"inputs":[{"name":"self"}],"output":{"name":"liveness"}}],[11,"equals","","",67,{"inputs":[{"name":"self"},{"name":"zwptabletseatv2"}],"output":{"name":"bool"}}],[11,"set_user_data","","",67,null],[11,"get_user_data","","",67,null],[11,"clone_unchecked","","",67,{"inputs":[{"name":"self"}],"output":{"name":"zwptabletseatv2"}}],[11,"__dispatch_msg","","",67,null],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"implementation"}}],[11,"eq","","",52,{"inputs":[{"name":"self"},{"name":"implementation"}],"output":{"name":"bool"}}],[11,"destroy","","release the memory for the tablet seat object",67,{"inputs":[{"name":"self"}],"output":{"name":"requestresult"}}],[11,"ptr","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_tool_v2","",68,null],[11,"from_ptr_new","","",68,null],[11,"from_ptr_initialized","","",68,null],[11,"interface_ptr","","",68,null],[11,"interface_name","","",68,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",68,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",68,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"status","","",68,{"inputs":[{"name":"self"}],"output":{"name":"liveness"}}],[11,"equals","","",68,{"inputs":[{"name":"self"},{"name":"zwptablettoolv2"}],"output":{"name":"bool"}}],[11,"set_user_data","","",68,null],[11,"get_user_data","","",68,null],[11,"clone_unchecked","","",68,{"inputs":[{"name":"self"}],"output":{"name":"zwptablettoolv2"}}],[11,"__dispatch_msg","","",68,null],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",54,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"bool"}}],[11,"from_raw","","",54,{"inputs":[{"name":"u32"}],"output":{"generics":["type"],"name":"option"}}],[11,"to_raw","","",54,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"capability"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",55,{"inputs":[{"name":"self"},{"name":"capability"}],"output":{"name":"bool"}}],[11,"from_raw","","",55,{"inputs":[{"name":"u32"}],"output":{"generics":["capability"],"name":"option"}}],[11,"to_raw","","",55,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"buttonstate"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",56,{"inputs":[{"name":"self"},{"name":"buttonstate"}],"output":{"name":"bool"}}],[11,"from_raw","","",56,{"inputs":[{"name":"u32"}],"output":{"generics":["buttonstate"],"name":"option"}}],[11,"to_raw","","",56,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",57,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"from_raw","","",57,{"inputs":[{"name":"u32"}],"output":{"generics":["error"],"name":"option"}}],[11,"to_raw","","",57,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"implementation"}}],[11,"eq","","",53,{"inputs":[{"name":"self"},{"name":"implementation"}],"output":{"name":"bool"}}],[11,"set_cursor","","set the tablet tool's surface",68,{"inputs":[{"name":"self"},{"name":"u32"},{"generics":["wlsurface"],"name":"option"},{"name":"i32"},{"name":"i32"}],"output":{"name":"requestresult"}}],[11,"destroy","","destroy the tool object",68,{"inputs":[{"name":"self"}],"output":{"name":"requestresult"}}],[11,"ptr","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_v2","",69,null],[11,"from_ptr_new","","",69,null],[11,"from_ptr_initialized","","",69,null],[11,"interface_ptr","","",69,null],[11,"interface_name","","",69,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",69,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",69,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"status","","",69,{"inputs":[{"name":"self"}],"output":{"name":"liveness"}}],[11,"equals","","",69,{"inputs":[{"name":"self"},{"name":"zwptabletv2"}],"output":{"name":"bool"}}],[11,"set_user_data","","",69,null],[11,"get_user_data","","",69,null],[11,"clone_unchecked","","",69,{"inputs":[{"name":"self"}],"output":{"name":"zwptabletv2"}}],[11,"__dispatch_msg","","",69,null],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"implementation"}}],[11,"eq","","",58,{"inputs":[{"name":"self"},{"name":"implementation"}],"output":{"name":"bool"}}],[11,"destroy","","destroy the tablet object",69,{"inputs":[{"name":"self"}],"output":{"name":"requestresult"}}],[11,"ptr","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_pad_ring_v2","",70,null],[11,"from_ptr_new","","",70,null],[11,"from_ptr_initialized","","",70,null],[11,"interface_ptr","","",70,null],[11,"interface_name","","",70,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",70,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",70,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"status","","",70,{"inputs":[{"name":"self"}],"output":{"name":"liveness"}}],[11,"equals","","",70,{"inputs":[{"name":"self"},{"name":"zwptabletpadringv2"}],"output":{"name":"bool"}}],[11,"set_user_data","","",70,null],[11,"get_user_data","","",70,null],[11,"clone_unchecked","","",70,{"inputs":[{"name":"self"}],"output":{"name":"zwptabletpadringv2"}}],[11,"__dispatch_msg","","",70,null],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"source"}}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",60,{"inputs":[{"name":"self"},{"name":"source"}],"output":{"name":"bool"}}],[11,"from_raw","","",60,{"inputs":[{"name":"u32"}],"output":{"generics":["source"],"name":"option"}}],[11,"to_raw","","",60,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"implementation"}}],[11,"eq","","",59,{"inputs":[{"name":"self"},{"name":"implementation"}],"output":{"name":"bool"}}],[11,"set_feedback","","set compositor feedback",70,{"inputs":[{"name":"self"},{"name":"string"},{"name":"u32"}],"output":{"name":"requestresult"}}],[11,"destroy","","destroy the ring object",70,{"inputs":[{"name":"self"}],"output":{"name":"requestresult"}}],[11,"ptr","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_pad_strip_v2","",71,null],[11,"from_ptr_new","","",71,null],[11,"from_ptr_initialized","","",71,null],[11,"interface_ptr","","",71,null],[11,"interface_name","","",71,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",71,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",71,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"status","","",71,{"inputs":[{"name":"self"}],"output":{"name":"liveness"}}],[11,"equals","","",71,{"inputs":[{"name":"self"},{"name":"zwptabletpadstripv2"}],"output":{"name":"bool"}}],[11,"set_user_data","","",71,null],[11,"get_user_data","","",71,null],[11,"clone_unchecked","","",71,{"inputs":[{"name":"self"}],"output":{"name":"zwptabletpadstripv2"}}],[11,"__dispatch_msg","","",71,null],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"source"}}],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",62,{"inputs":[{"name":"self"},{"name":"source"}],"output":{"name":"bool"}}],[11,"from_raw","","",62,{"inputs":[{"name":"u32"}],"output":{"generics":["source"],"name":"option"}}],[11,"to_raw","","",62,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"implementation"}}],[11,"eq","","",61,{"inputs":[{"name":"self"},{"name":"implementation"}],"output":{"name":"bool"}}],[11,"set_feedback","","set compositor feedback",71,{"inputs":[{"name":"self"},{"name":"string"},{"name":"u32"}],"output":{"name":"requestresult"}}],[11,"destroy","","destroy the strip object",71,{"inputs":[{"name":"self"}],"output":{"name":"requestresult"}}],[11,"ptr","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_pad_group_v2","",72,null],[11,"from_ptr_new","","",72,null],[11,"from_ptr_initialized","","",72,null],[11,"interface_ptr","","",72,null],[11,"interface_name","","",72,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",72,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",72,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"status","","",72,{"inputs":[{"name":"self"}],"output":{"name":"liveness"}}],[11,"equals","","",72,{"inputs":[{"name":"self"},{"name":"zwptabletpadgroupv2"}],"output":{"name":"bool"}}],[11,"set_user_data","","",72,null],[11,"get_user_data","","",72,null],[11,"clone_unchecked","","",72,{"inputs":[{"name":"self"}],"output":{"name":"zwptabletpadgroupv2"}}],[11,"__dispatch_msg","","",72,null],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"implementation"}}],[11,"eq","","",63,{"inputs":[{"name":"self"},{"name":"implementation"}],"output":{"name":"bool"}}],[11,"destroy","","destroy the pad object",72,{"inputs":[{"name":"self"}],"output":{"name":"requestresult"}}],[11,"ptr","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_pad_v2","",73,null],[11,"from_ptr_new","","",73,null],[11,"from_ptr_initialized","","",73,null],[11,"interface_ptr","","",73,null],[11,"interface_name","","",73,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",73,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",73,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"status","","",73,{"inputs":[{"name":"self"}],"output":{"name":"liveness"}}],[11,"equals","","",73,{"inputs":[{"name":"self"},{"name":"zwptabletpadv2"}],"output":{"name":"bool"}}],[11,"set_user_data","","",73,null],[11,"get_user_data","","",73,null],[11,"clone_unchecked","","",73,{"inputs":[{"name":"self"}],"output":{"name":"zwptabletpadv2"}}],[11,"__dispatch_msg","","",73,null],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"buttonstate"}}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",65,{"inputs":[{"name":"self"},{"name":"buttonstate"}],"output":{"name":"bool"}}],[11,"from_raw","","",65,{"inputs":[{"name":"u32"}],"output":{"generics":["buttonstate"],"name":"option"}}],[11,"to_raw","","",65,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"implementation"}}],[11,"eq","","",64,{"inputs":[{"name":"self"},{"name":"implementation"}],"output":{"name":"bool"}}],[11,"set_feedback","","set compositor feedback",73,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"string"},{"name":"u32"}],"output":{"name":"requestresult"}}],[11,"destroy","","destroy the pad object",73,{"inputs":[{"name":"self"}],"output":{"name":"requestresult"}}],[0,"text_input","wayland_protocols::unstable","Text input protocol",null,null],[0,"v1","wayland_protocols::unstable::text_input","",null,null],[0,"client","wayland_protocols::unstable::text_input::v1","Client-side API of this protocol",null,null],[0,"zwp_text_input_v1","wayland_protocols::unstable::text_input::v1::client","text input",null,null],[3,"ZwpTextInputV1","wayland_protocols::unstable::text_input::v1::client::zwp_text_input_v1","",null,null],[3,"Implementation","","",null,null],[12,"enter","","enter event",74,null],[12,"leave","","leave event",74,null],[12,"modifiers_map","","modifiers map",74,null],[12,"input_panel_state","","state of the input panel",74,null],[12,"preedit_string","","pre-edit",74,null],[12,"preedit_styling","","pre-edit styling",74,null],[12,"preedit_cursor","","pre-edit cursor",74,null],[12,"commit_string","","commit",74,null],[12,"cursor_position","","set cursor to new position",74,null],[12,"delete_surrounding_text","","delete surrounding text",74,null],[12,"keysym","","keysym",74,null],[12,"language","","language",74,null],[12,"text_direction","","text direction",74,null],[4,"ContentHint","","content hint",null,null],[13,"None","","no special behaviour",75,null],[13,"Default","","auto completion, correction and capitalization",75,null],[13,"Password","","hidden and sensitive text",75,null],[13,"AutoCompletion","","suggest word completions",75,null],[13,"AutoCorrection","","suggest word corrections",75,null],[13,"AutoCapitalization","","switch to uppercase letters at the start of a sentence",75,null],[13,"Lowercase","","prefer lowercase letters",75,null],[13,"Uppercase","","prefer uppercase letters",75,null],[13,"Titlecase","","prefer casing for titles and headings (can be language dependent)",75,null],[13,"HiddenText","","characters should be hidden",75,null],[13,"SensitiveData","","typed text should not be stored",75,null],[13,"Latin","","just latin characters should be entered",75,null],[13,"Multiline","","the text input is multiline",75,null],[4,"ContentPurpose","","content purpose",null,null],[13,"Normal","","default input, allowing all characters",76,null],[13,"Alpha","","allow only alphabetic characters",76,null],[13,"Digits","","allow only digits",76,null],[13,"Number","","input a number (including decimal separator and sign)",76,null],[13,"Phone","","input a phone number",76,null],[13,"Url","","input an URL",76,null],[13,"Email","","input an email address",76,null],[13,"Name","","input a name of a person",76,null],[13,"Password","","input a password (combine with password or sensitive_data hint)",76,null],[13,"Date","","input a date",76,null],[13,"Time","","input a time",76,null],[13,"Datetime","","input a date and time",76,null],[13,"Terminal","","input for a terminal",76,null],[4,"PreeditStyle","","",null,null],[13,"Default","","default style for composing text",77,null],[13,"None","","style should be the same as in non-composing text",77,null],[13,"Active","","",77,null],[13,"Inactive","","",77,null],[13,"Highlight","","",77,null],[13,"Underline","","",77,null],[13,"Selection","","",77,null],[13,"Incorrect","","",77,null],[4,"TextDirection","","",null,null],[13,"Auto","","automatic text direction based on text and language",78,null],[13,"Ltr","","left-to-right",78,null],[13,"Rtl","","right-to-left",78,null],[0,"zwp_text_input_manager_v1","wayland_protocols::unstable::text_input::v1::client","text input manager",null,null],[3,"ZwpTextInputManagerV1","wayland_protocols::unstable::text_input::v1::client::zwp_text_input_manager_v1","",null,null],[11,"ptr","wayland_protocols::unstable::text_input::v1::client::zwp_text_input_v1","",79,null],[11,"from_ptr_new","","",79,null],[11,"from_ptr_initialized","","",79,null],[11,"interface_ptr","","",79,null],[11,"interface_name","","",79,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",79,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",79,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"status","","",79,{"inputs":[{"name":"self"}],"output":{"name":"liveness"}}],[11,"equals","","",79,{"inputs":[{"name":"self"},{"name":"zwptextinputv1"}],"output":{"name":"bool"}}],[11,"set_user_data","","",79,null],[11,"get_user_data","","",79,null],[11,"clone_unchecked","","",79,{"inputs":[{"name":"self"}],"output":{"name":"zwptextinputv1"}}],[11,"__dispatch_msg","","",79,null],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"contenthint"}}],[11,"fmt","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",75,{"inputs":[{"name":"self"},{"name":"contenthint"}],"output":{"name":"bool"}}],[11,"from_raw","","",75,{"inputs":[{"name":"u32"}],"output":{"generics":["contenthint"],"name":"option"}}],[11,"to_raw","","",75,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",76,{"inputs":[{"name":"self"}],"output":{"name":"contentpurpose"}}],[11,"fmt","","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",76,{"inputs":[{"name":"self"},{"name":"contentpurpose"}],"output":{"name":"bool"}}],[11,"from_raw","","",76,{"inputs":[{"name":"u32"}],"output":{"generics":["contentpurpose"],"name":"option"}}],[11,"to_raw","","",76,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",77,{"inputs":[{"name":"self"}],"output":{"name":"preeditstyle"}}],[11,"fmt","","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",77,{"inputs":[{"name":"self"},{"name":"preeditstyle"}],"output":{"name":"bool"}}],[11,"from_raw","","",77,{"inputs":[{"name":"u32"}],"output":{"generics":["preeditstyle"],"name":"option"}}],[11,"to_raw","","",77,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"textdirection"}}],[11,"fmt","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",78,{"inputs":[{"name":"self"},{"name":"textdirection"}],"output":{"name":"bool"}}],[11,"from_raw","","",78,{"inputs":[{"name":"u32"}],"output":{"generics":["textdirection"],"name":"option"}}],[11,"to_raw","","",78,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",74,{"inputs":[{"name":"self"}],"output":{"name":"implementation"}}],[11,"eq","","",74,{"inputs":[{"name":"self"},{"name":"implementation"}],"output":{"name":"bool"}}],[11,"activate","","request activation",79,null],[11,"deactivate","","request deactivation",79,null],[11,"show_input_panel","","show input panels",79,null],[11,"hide_input_panel","","hide input panels",79,null],[11,"reset","","reset",79,null],[11,"set_surrounding_text","","sets the surrounding text",79,null],[11,"set_content_type","","set content purpose and hint",79,null],[11,"set_cursor_rectangle","","",79,null],[11,"set_preferred_language","","sets preferred language",79,null],[11,"commit_state","","",79,null],[11,"invoke_action","","",79,null],[11,"ptr","wayland_protocols::unstable::text_input::v1::client::zwp_text_input_manager_v1","",80,null],[11,"from_ptr_new","","",80,null],[11,"from_ptr_initialized","","",80,null],[11,"interface_ptr","","",80,null],[11,"interface_name","","",80,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",80,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",80,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"status","","",80,{"inputs":[{"name":"self"}],"output":{"name":"liveness"}}],[11,"equals","","",80,{"inputs":[{"name":"self"},{"name":"zwptextinputmanagerv1"}],"output":{"name":"bool"}}],[11,"set_user_data","","",80,null],[11,"get_user_data","","",80,null],[11,"clone_unchecked","","",80,{"inputs":[{"name":"self"}],"output":{"name":"zwptextinputmanagerv1"}}],[11,"create_text_input","","create text input",80,{"inputs":[{"name":"self"}],"output":{"name":"zwptextinputv1"}}],[0,"xdg_foreign","wayland_protocols::unstable","Protocol for exporting xdg surface handles",null,null],[0,"v1","wayland_protocols::unstable::xdg_foreign","",null,null],[0,"client","wayland_protocols::unstable::xdg_foreign::v1","Client-side API of this protocol",null,null],[0,"zxdg_exporter_v1","wayland_protocols::unstable::xdg_foreign::v1::client","interface for exporting surfaces",null,null],[3,"ZxdgExporterV1","wayland_protocols::unstable::xdg_foreign::v1::client::zxdg_exporter_v1","",null,null],[0,"zxdg_importer_v1","wayland_protocols::unstable::xdg_foreign::v1::client","interface for importing surfaces",null,null],[3,"ZxdgImporterV1","wayland_protocols::unstable::xdg_foreign::v1::client::zxdg_importer_v1","",null,null],[0,"zxdg_exported_v1","wayland_protocols::unstable::xdg_foreign::v1::client","an exported surface handle",null,null],[3,"ZxdgExportedV1","wayland_protocols::unstable::xdg_foreign::v1::client::zxdg_exported_v1","",null,null],[3,"Implementation","","",null,null],[12,"handle","","the exported surface handle",81,null],[0,"zxdg_imported_v1","wayland_protocols::unstable::xdg_foreign::v1::client","an imported surface handle",null,null],[3,"ZxdgImportedV1","wayland_protocols::unstable::xdg_foreign::v1::client::zxdg_imported_v1","",null,null],[3,"Implementation","","",null,null],[12,"destroyed","","the imported surface handle has been destroyed",82,null],[11,"ptr","wayland_protocols::unstable::xdg_foreign::v1::client::zxdg_exporter_v1","",83,null],[11,"from_ptr_new","","",83,null],[11,"from_ptr_initialized","","",83,null],[11,"interface_ptr","","",83,null],[11,"interface_name","","",83,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",83,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",83,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"status","","",83,{"inputs":[{"name":"self"}],"output":{"name":"liveness"}}],[11,"equals","","",83,{"inputs":[{"name":"self"},{"name":"zxdgexporterv1"}],"output":{"name":"bool"}}],[11,"set_user_data","","",83,null],[11,"get_user_data","","",83,null],[11,"clone_unchecked","","",83,{"inputs":[{"name":"self"}],"output":{"name":"zxdgexporterv1"}}],[11,"destroy","","destroy the xdg_exporter object",83,{"inputs":[{"name":"self"}],"output":{"name":"requestresult"}}],[11,"export","","export a surface",83,{"inputs":[{"name":"self"},{"name":"wlsurface"}],"output":{"generics":["zxdgexportedv1"],"name":"requestresult"}}],[11,"ptr","wayland_protocols::unstable::xdg_foreign::v1::client::zxdg_importer_v1","",84,null],[11,"from_ptr_new","","",84,null],[11,"from_ptr_initialized","","",84,null],[11,"interface_ptr","","",84,null],[11,"interface_name","","",84,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",84,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",84,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"status","","",84,{"inputs":[{"name":"self"}],"output":{"name":"liveness"}}],[11,"equals","","",84,{"inputs":[{"name":"self"},{"name":"zxdgimporterv1"}],"output":{"name":"bool"}}],[11,"set_user_data","","",84,null],[11,"get_user_data","","",84,null],[11,"clone_unchecked","","",84,{"inputs":[{"name":"self"}],"output":{"name":"zxdgimporterv1"}}],[11,"destroy","","destroy the xdg_importer object",84,{"inputs":[{"name":"self"}],"output":{"name":"requestresult"}}],[11,"import","","import a surface",84,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"generics":["zxdgimportedv1"],"name":"requestresult"}}],[11,"ptr","wayland_protocols::unstable::xdg_foreign::v1::client::zxdg_exported_v1","",85,null],[11,"from_ptr_new","","",85,null],[11,"from_ptr_initialized","","",85,null],[11,"interface_ptr","","",85,null],[11,"interface_name","","",85,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",85,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",85,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"status","","",85,{"inputs":[{"name":"self"}],"output":{"name":"liveness"}}],[11,"equals","","",85,{"inputs":[{"name":"self"},{"name":"zxdgexportedv1"}],"output":{"name":"bool"}}],[11,"set_user_data","","",85,null],[11,"get_user_data","","",85,null],[11,"clone_unchecked","","",85,{"inputs":[{"name":"self"}],"output":{"name":"zxdgexportedv1"}}],[11,"__dispatch_msg","","",85,null],[11,"clone","","",81,{"inputs":[{"name":"self"}],"output":{"name":"implementation"}}],[11,"eq","","",81,{"inputs":[{"name":"self"},{"name":"implementation"}],"output":{"name":"bool"}}],[11,"destroy","","unexport the exported surface",85,{"inputs":[{"name":"self"}],"output":{"name":"requestresult"}}],[11,"ptr","wayland_protocols::unstable::xdg_foreign::v1::client::zxdg_imported_v1","",86,null],[11,"from_ptr_new","","",86,null],[11,"from_ptr_initialized","","",86,null],[11,"interface_ptr","","",86,null],[11,"interface_name","","",86,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",86,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",86,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"status","","",86,{"inputs":[{"name":"self"}],"output":{"name":"liveness"}}],[11,"equals","","",86,{"inputs":[{"name":"self"},{"name":"zxdgimportedv1"}],"output":{"name":"bool"}}],[11,"set_user_data","","",86,null],[11,"get_user_data","","",86,null],[11,"clone_unchecked","","",86,{"inputs":[{"name":"self"}],"output":{"name":"zxdgimportedv1"}}],[11,"__dispatch_msg","","",86,null],[11,"clone","","",82,{"inputs":[{"name":"self"}],"output":{"name":"implementation"}}],[11,"eq","","",82,{"inputs":[{"name":"self"},{"name":"implementation"}],"output":{"name":"bool"}}],[11,"destroy","","destroy the xdg_imported object",86,{"inputs":[{"name":"self"}],"output":{"name":"requestresult"}}],[11,"set_parent_of","","set as the parent of some surface",86,{"inputs":[{"name":"self"},{"name":"wlsurface"}],"output":{"name":"requestresult"}}],[0,"v2","wayland_protocols::unstable::xdg_foreign","",null,null],[0,"client","wayland_protocols::unstable::xdg_foreign::v2","Client-side API of this protocol",null,null],[0,"zxdg_exporter_v2","wayland_protocols::unstable::xdg_foreign::v2::client","interface for exporting surfaces",null,null],[3,"ZxdgExporterV2","wayland_protocols::unstable::xdg_foreign::v2::client::zxdg_exporter_v2","",null,null],[0,"zxdg_importer_v2","wayland_protocols::unstable::xdg_foreign::v2::client","interface for importing surfaces",null,null],[3,"ZxdgImporterV2","wayland_protocols::unstable::xdg_foreign::v2::client::zxdg_importer_v2","",null,null],[0,"zxdg_exported_v2","wayland_protocols::unstable::xdg_foreign::v2::client","an exported surface handle",null,null],[3,"ZxdgExportedV2","wayland_protocols::unstable::xdg_foreign::v2::client::zxdg_exported_v2","",null,null],[3,"Implementation","","",null,null],[12,"handle","","the exported surface handle",87,null],[0,"zxdg_imported_v2","wayland_protocols::unstable::xdg_foreign::v2::client","an imported surface handle",null,null],[3,"ZxdgImportedV2","wayland_protocols::unstable::xdg_foreign::v2::client::zxdg_imported_v2","",null,null],[3,"Implementation","","",null,null],[12,"destroyed","","the imported surface handle has been destroyed",88,null],[11,"ptr","wayland_protocols::unstable::xdg_foreign::v2::client::zxdg_exporter_v2","",89,null],[11,"from_ptr_new","","",89,null],[11,"from_ptr_initialized","","",89,null],[11,"interface_ptr","","",89,null],[11,"interface_name","","",89,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",89,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",89,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"status","","",89,{"inputs":[{"name":"self"}],"output":{"name":"liveness"}}],[11,"equals","","",89,{"inputs":[{"name":"self"},{"name":"zxdgexporterv2"}],"output":{"name":"bool"}}],[11,"set_user_data","","",89,null],[11,"get_user_data","","",89,null],[11,"clone_unchecked","","",89,{"inputs":[{"name":"self"}],"output":{"name":"zxdgexporterv2"}}],[11,"destroy","","destroy the xdg_exporter object",89,{"inputs":[{"name":"self"}],"output":{"name":"requestresult"}}],[11,"export_toplevel","","export a toplevel surface",89,{"inputs":[{"name":"self"},{"name":"wlsurface"}],"output":{"generics":["zxdgexportedv2"],"name":"requestresult"}}],[11,"ptr","wayland_protocols::unstable::xdg_foreign::v2::client::zxdg_importer_v2","",90,null],[11,"from_ptr_new","","",90,null],[11,"from_ptr_initialized","","",90,null],[11,"interface_ptr","","",90,null],[11,"interface_name","","",90,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",90,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",90,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"status","","",90,{"inputs":[{"name":"self"}],"output":{"name":"liveness"}}],[11,"equals","","",90,{"inputs":[{"name":"self"},{"name":"zxdgimporterv2"}],"output":{"name":"bool"}}],[11,"set_user_data","","",90,null],[11,"get_user_data","","",90,null],[11,"clone_unchecked","","",90,{"inputs":[{"name":"self"}],"output":{"name":"zxdgimporterv2"}}],[11,"destroy","","destroy the xdg_importer object",90,{"inputs":[{"name":"self"}],"output":{"name":"requestresult"}}],[11,"import_toplevel","","import a toplevel surface",90,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"generics":["zxdgimportedv2"],"name":"requestresult"}}],[11,"ptr","wayland_protocols::unstable::xdg_foreign::v2::client::zxdg_exported_v2","",91,null],[11,"from_ptr_new","","",91,null],[11,"from_ptr_initialized","","",91,null],[11,"interface_ptr","","",91,null],[11,"interface_name","","",91,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",91,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",91,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"status","","",91,{"inputs":[{"name":"self"}],"output":{"name":"liveness"}}],[11,"equals","","",91,{"inputs":[{"name":"self"},{"name":"zxdgexportedv2"}],"output":{"name":"bool"}}],[11,"set_user_data","","",91,null],[11,"get_user_data","","",91,null],[11,"clone_unchecked","","",91,{"inputs":[{"name":"self"}],"output":{"name":"zxdgexportedv2"}}],[11,"__dispatch_msg","","",91,null],[11,"clone","","",87,{"inputs":[{"name":"self"}],"output":{"name":"implementation"}}],[11,"eq","","",87,{"inputs":[{"name":"self"},{"name":"implementation"}],"output":{"name":"bool"}}],[11,"destroy","","unexport the exported surface",91,{"inputs":[{"name":"self"}],"output":{"name":"requestresult"}}],[11,"ptr","wayland_protocols::unstable::xdg_foreign::v2::client::zxdg_imported_v2","",92,null],[11,"from_ptr_new","","",92,null],[11,"from_ptr_initialized","","",92,null],[11,"interface_ptr","","",92,null],[11,"interface_name","","",92,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",92,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",92,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"status","","",92,{"inputs":[{"name":"self"}],"output":{"name":"liveness"}}],[11,"equals","","",92,{"inputs":[{"name":"self"},{"name":"zxdgimportedv2"}],"output":{"name":"bool"}}],[11,"set_user_data","","",92,null],[11,"get_user_data","","",92,null],[11,"clone_unchecked","","",92,{"inputs":[{"name":"self"}],"output":{"name":"zxdgimportedv2"}}],[11,"__dispatch_msg","","",92,null],[11,"clone","","",88,{"inputs":[{"name":"self"}],"output":{"name":"implementation"}}],[11,"eq","","",88,{"inputs":[{"name":"self"},{"name":"implementation"}],"output":{"name":"bool"}}],[11,"destroy","","destroy the xdg_imported object",92,{"inputs":[{"name":"self"}],"output":{"name":"requestresult"}}],[11,"set_parent_of","","set as the parent of some surface",92,{"inputs":[{"name":"self"},{"name":"wlsurface"}],"output":{"name":"requestresult"}}],[0,"xdg_output","wayland_protocols::unstable","Protocol to describe output regions",null,null],[0,"v1","wayland_protocols::unstable::xdg_output","",null,null],[0,"client","wayland_protocols::unstable::xdg_output::v1","Client-side API of this protocol",null,null],[0,"zxdg_output_manager_v1","wayland_protocols::unstable::xdg_output::v1::client","manage xdg_output objects",null,null],[3,"ZxdgOutputManagerV1","wayland_protocols::unstable::xdg_output::v1::client::zxdg_output_manager_v1","",null,null],[0,"zxdg_output_v1","wayland_protocols::unstable::xdg_output::v1::client","compositor logical output region",null,null],[3,"ZxdgOutputV1","wayland_protocols::unstable::xdg_output::v1::client::zxdg_output_v1","",null,null],[3,"Implementation","","",null,null],[12,"logical_position","","position of the output within the global compositor space",93,null],[12,"logical_size","","size of the output in the global compositor space",93,null],[12,"done","","all information about the output have been sent",93,null],[11,"ptr","wayland_protocols::unstable::xdg_output::v1::client::zxdg_output_manager_v1","",94,null],[11,"from_ptr_new","","",94,null],[11,"from_ptr_initialized","","",94,null],[11,"interface_ptr","","",94,null],[11,"interface_name","","",94,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",94,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",94,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"status","","",94,{"inputs":[{"name":"self"}],"output":{"name":"liveness"}}],[11,"equals","","",94,{"inputs":[{"name":"self"},{"name":"zxdgoutputmanagerv1"}],"output":{"name":"bool"}}],[11,"set_user_data","","",94,null],[11,"get_user_data","","",94,null],[11,"clone_unchecked","","",94,{"inputs":[{"name":"self"}],"output":{"name":"zxdgoutputmanagerv1"}}],[11,"destroy","","destroy the xdg_output_manager object",94,{"inputs":[{"name":"self"}],"output":{"name":"requestresult"}}],[11,"get_xdg_output","","create an xdg output from a wl_output",94,{"inputs":[{"name":"self"},{"name":"wloutput"}],"output":{"generics":["zxdgoutputv1"],"name":"requestresult"}}],[11,"ptr","wayland_protocols::unstable::xdg_output::v1::client::zxdg_output_v1","",95,null],[11,"from_ptr_new","","",95,null],[11,"from_ptr_initialized","","",95,null],[11,"interface_ptr","","",95,null],[11,"interface_name","","",95,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",95,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",95,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"status","","",95,{"inputs":[{"name":"self"}],"output":{"name":"liveness"}}],[11,"equals","","",95,{"inputs":[{"name":"self"},{"name":"zxdgoutputv1"}],"output":{"name":"bool"}}],[11,"set_user_data","","",95,null],[11,"get_user_data","","",95,null],[11,"clone_unchecked","","",95,{"inputs":[{"name":"self"}],"output":{"name":"zxdgoutputv1"}}],[11,"__dispatch_msg","","",95,null],[11,"clone","","",93,{"inputs":[{"name":"self"}],"output":{"name":"implementation"}}],[11,"eq","","",93,{"inputs":[{"name":"self"},{"name":"implementation"}],"output":{"name":"bool"}}],[11,"destroy","","destroy the xdg_output object",95,{"inputs":[{"name":"self"}],"output":{"name":"requestresult"}}],[0,"xdg_shell","wayland_protocols::unstable","XDG Shell protocol",null,null],[0,"v5","wayland_protocols::unstable::xdg_shell","",null,null],[0,"client","wayland_protocols::unstable::xdg_shell::v5","Client-side API of this protocol",null,null],[0,"xdg_shell","wayland_protocols::unstable::xdg_shell::v5::client","create desktop-style surfaces",null,null],[3,"XdgShell","wayland_protocols::unstable::xdg_shell::v5::client::xdg_shell","",null,null],[3,"Implementation","","",null,null],[12,"ping","","check if the client is alive",96,null],[4,"Version","","latest protocol version",null,null],[13,"Current","","Always the latest version",97,null],[4,"Error","","",null,null],[13,"Role","","given wl_surface has another role",98,null],[13,"DefunctSurfaces","","xdg_shell was destroyed before children",98,null],[13,"NotTheTopmostPopup","","the client tried to map or destroy a non-topmost popup",98,null],[13,"InvalidPopupParent","","the client specified an invalid popup parent surface",98,null],[0,"xdg_surface","wayland_protocols::unstable::xdg_shell::v5::client","A desktop window",null,null],[3,"XdgSurface","wayland_protocols::unstable::xdg_shell::v5::client::xdg_surface","",null,null],[3,"Implementation","","",null,null],[12,"configure","","suggest a surface change",99,null],[12,"close","","surface wants to be closed",99,null],[4,"ResizeEdge","","edge values for resizing",null,null],[13,"None","","",100,null],[13,"Top","","",100,null],[13,"Bottom","","",100,null],[13,"Left","","",100,null],[13,"TopLeft","","",100,null],[13,"BottomLeft","","",100,null],[13,"Right","","",100,null],[13,"TopRight","","",100,null],[13,"BottomRight","","",100,null],[4,"State","","types of state on the surface",null,null],[13,"Maximized","","the surface is maximized",101,null],[13,"Fullscreen","","the surface is fullscreen",101,null],[13,"Resizing","","the surface is being resized",101,null],[13,"Activated","","the surface is now activated",101,null],[0,"xdg_popup","wayland_protocols::unstable::xdg_shell::v5::client","short-lived, popup surfaces for menus",null,null],[3,"XdgPopup","wayland_protocols::unstable::xdg_shell::v5::client::xdg_popup","",null,null],[3,"Implementation","","",null,null],[12,"popup_done","","popup interaction is done",102,null],[11,"ptr","wayland_protocols::unstable::xdg_shell::v5::client::xdg_shell","",103,null],[11,"from_ptr_new","","",103,null],[11,"from_ptr_initialized","","",103,null],[11,"interface_ptr","","",103,null],[11,"interface_name","","",103,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",103,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",103,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"status","","",103,{"inputs":[{"name":"self"}],"output":{"name":"liveness"}}],[11,"equals","","",103,{"inputs":[{"name":"self"},{"name":"xdgshell"}],"output":{"name":"bool"}}],[11,"set_user_data","","",103,null],[11,"get_user_data","","",103,null],[11,"clone_unchecked","","",103,{"inputs":[{"name":"self"}],"output":{"name":"xdgshell"}}],[11,"__dispatch_msg","","",103,null],[11,"clone","","",97,{"inputs":[{"name":"self"}],"output":{"name":"version"}}],[11,"fmt","","",97,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",97,{"inputs":[{"name":"self"},{"name":"version"}],"output":{"name":"bool"}}],[11,"from_raw","","",97,{"inputs":[{"name":"u32"}],"output":{"generics":["version"],"name":"option"}}],[11,"to_raw","","",97,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",98,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",98,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",98,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"from_raw","","",98,{"inputs":[{"name":"u32"}],"output":{"generics":["error"],"name":"option"}}],[11,"to_raw","","",98,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",96,{"inputs":[{"name":"self"}],"output":{"name":"implementation"}}],[11,"eq","","",96,{"inputs":[{"name":"self"},{"name":"implementation"}],"output":{"name":"bool"}}],[11,"destroy","","destroy xdg_shell",103,{"inputs":[{"name":"self"}],"output":{"name":"requestresult"}}],[11,"use_unstable_version","","enable use of this unstable version",103,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"requestresult"}}],[11,"get_xdg_surface","","create a shell surface from a surface",103,{"inputs":[{"name":"self"},{"name":"wlsurface"}],"output":{"generics":["xdgsurface"],"name":"requestresult"}}],[11,"get_xdg_popup","","create a popup for a surface",103,{"inputs":[{"name":"self"},{"name":"wlsurface"},{"name":"wlsurface"},{"name":"wlseat"},{"name":"u32"},{"name":"i32"},{"name":"i32"}],"output":{"generics":["xdgpopup"],"name":"requestresult"}}],[11,"pong","","respond to a ping event",103,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"requestresult"}}],[11,"ptr","wayland_protocols::unstable::xdg_shell::v5::client::xdg_surface","",104,null],[11,"from_ptr_new","","",104,null],[11,"from_ptr_initialized","","",104,null],[11,"interface_ptr","","",104,null],[11,"interface_name","","",104,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",104,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",104,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"status","","",104,{"inputs":[{"name":"self"}],"output":{"name":"liveness"}}],[11,"equals","","",104,{"inputs":[{"name":"self"},{"name":"xdgsurface"}],"output":{"name":"bool"}}],[11,"set_user_data","","",104,null],[11,"get_user_data","","",104,null],[11,"clone_unchecked","","",104,{"inputs":[{"name":"self"}],"output":{"name":"xdgsurface"}}],[11,"__dispatch_msg","","",104,null],[11,"clone","","",100,{"inputs":[{"name":"self"}],"output":{"name":"resizeedge"}}],[11,"fmt","","",100,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",100,{"inputs":[{"name":"self"},{"name":"resizeedge"}],"output":{"name":"bool"}}],[11,"from_raw","","",100,{"inputs":[{"name":"u32"}],"output":{"generics":["resizeedge"],"name":"option"}}],[11,"to_raw","","",100,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",101,{"inputs":[{"name":"self"}],"output":{"name":"state"}}],[11,"fmt","","",101,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",101,{"inputs":[{"name":"self"},{"name":"state"}],"output":{"name":"bool"}}],[11,"from_raw","","",101,{"inputs":[{"name":"u32"}],"output":{"generics":["state"],"name":"option"}}],[11,"to_raw","","",101,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",99,{"inputs":[{"name":"self"}],"output":{"name":"implementation"}}],[11,"eq","","",99,{"inputs":[{"name":"self"},{"name":"implementation"}],"output":{"name":"bool"}}],[11,"destroy","","Destroy the xdg_surface",104,{"inputs":[{"name":"self"}],"output":{"name":"requestresult"}}],[11,"set_parent","","set the parent of this surface",104,{"inputs":[{"name":"self"},{"generics":["xdgsurface"],"name":"option"}],"output":{"name":"requestresult"}}],[11,"set_title","","set surface title",104,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"requestresult"}}],[11,"set_app_id","","set application ID",104,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"requestresult"}}],[11,"show_window_menu","","show the window menu",104,{"inputs":[{"name":"self"},{"name":"wlseat"},{"name":"u32"},{"name":"i32"},{"name":"i32"}],"output":{"name":"requestresult"}}],[11,"_move","","start an interactive move",104,{"inputs":[{"name":"self"},{"name":"wlseat"},{"name":"u32"}],"output":{"name":"requestresult"}}],[11,"resize","","start an interactive resize",104,{"inputs":[{"name":"self"},{"name":"wlseat"},{"name":"u32"},{"name":"u32"}],"output":{"name":"requestresult"}}],[11,"ack_configure","","ack a configure event",104,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"requestresult"}}],[11,"set_window_geometry","","set the new window geometry",104,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":{"name":"requestresult"}}],[11,"set_maximized","","maximize the window",104,{"inputs":[{"name":"self"}],"output":{"name":"requestresult"}}],[11,"unset_maximized","","unmaximize the window",104,{"inputs":[{"name":"self"}],"output":{"name":"requestresult"}}],[11,"set_fullscreen","","set the window as fullscreen on a monitor",104,{"inputs":[{"name":"self"},{"generics":["wloutput"],"name":"option"}],"output":{"name":"requestresult"}}],[11,"unset_fullscreen","","",104,{"inputs":[{"name":"self"}],"output":{"name":"requestresult"}}],[11,"set_minimized","","set the window as minimized",104,{"inputs":[{"name":"self"}],"output":{"name":"requestresult"}}],[11,"ptr","wayland_protocols::unstable::xdg_shell::v5::client::xdg_popup","",105,null],[11,"from_ptr_new","","",105,null],[11,"from_ptr_initialized","","",105,null],[11,"interface_ptr","","",105,null],[11,"interface_name","","",105,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",105,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",105,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"status","","",105,{"inputs":[{"name":"self"}],"output":{"name":"liveness"}}],[11,"equals","","",105,{"inputs":[{"name":"self"},{"name":"xdgpopup"}],"output":{"name":"bool"}}],[11,"set_user_data","","",105,null],[11,"get_user_data","","",105,null],[11,"clone_unchecked","","",105,{"inputs":[{"name":"self"}],"output":{"name":"xdgpopup"}}],[11,"__dispatch_msg","","",105,null],[11,"clone","","",102,{"inputs":[{"name":"self"}],"output":{"name":"implementation"}}],[11,"eq","","",102,{"inputs":[{"name":"self"},{"name":"implementation"}],"output":{"name":"bool"}}],[11,"destroy","","remove xdg_popup interface",105,{"inputs":[{"name":"self"}],"output":{"name":"requestresult"}}],[0,"v6","wayland_protocols::unstable::xdg_shell","",null,null],[0,"client","wayland_protocols::unstable::xdg_shell::v6","Client-side API of this protocol",null,null],[0,"zxdg_shell_v6","wayland_protocols::unstable::xdg_shell::v6::client","create desktop-style surfaces",null,null],[3,"ZxdgShellV6","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_shell_v6","",null,null],[3,"Implementation","","",null,null],[12,"ping","","check if the client is alive",106,null],[4,"Error","","",null,null],[13,"Role","","given wl_surface has another role",107,null],[13,"DefunctSurfaces","","xdg_shell was destroyed before children",107,null],[13,"NotTheTopmostPopup","","the client tried to map or destroy a non-topmost popup",107,null],[13,"InvalidPopupParent","","the client specified an invalid popup parent surface",107,null],[13,"InvalidSurfaceState","","the client provided an invalid surface state",107,null],[13,"InvalidPositioner","","the client provided an invalid positioner",107,null],[0,"zxdg_positioner_v6","wayland_protocols::unstable::xdg_shell::v6::client","child surface positioner",null,null],[3,"ZxdgPositionerV6","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_positioner_v6","",null,null],[3,"Anchor","","",null,null],[3,"Gravity","","",null,null],[3,"ConstraintAdjustment","","constraint adjustments",null,null],[4,"Error","","",null,null],[13,"InvalidInput","","invalid input provided",108,null],[0,"zxdg_surface_v6","wayland_protocols::unstable::xdg_shell::v6::client","desktop user interface surface base interface",null,null],[3,"ZxdgSurfaceV6","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_surface_v6","",null,null],[3,"Implementation","","",null,null],[12,"configure","","suggest a surface change",109,null],[4,"Error","","",null,null],[13,"NotConstructed","","",110,null],[13,"AlreadyConstructed","","",110,null],[13,"UnconfiguredBuffer","","",110,null],[0,"zxdg_toplevel_v6","wayland_protocols::unstable::xdg_shell::v6::client","toplevel surface",null,null],[3,"ZxdgToplevelV6","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_toplevel_v6","",null,null],[3,"Implementation","","",null,null],[12,"configure","","suggest a surface change",111,null],[12,"close","","surface wants to be closed",111,null],[4,"ResizeEdge","","edge values for resizing",null,null],[13,"None","","",112,null],[13,"Top","","",112,null],[13,"Bottom","","",112,null],[13,"Left","","",112,null],[13,"TopLeft","","",112,null],[13,"BottomLeft","","",112,null],[13,"Right","","",112,null],[13,"TopRight","","",112,null],[13,"BottomRight","","",112,null],[4,"State","","types of state on the surface",null,null],[13,"Maximized","","the surface is maximized",113,null],[13,"Fullscreen","","the surface is fullscreen",113,null],[13,"Resizing","","the surface is being resized",113,null],[13,"Activated","","the surface is now activated",113,null],[0,"zxdg_popup_v6","wayland_protocols::unstable::xdg_shell::v6::client","short-lived, popup surfaces for menus",null,null],[3,"ZxdgPopupV6","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_popup_v6","",null,null],[3,"Implementation","","",null,null],[12,"configure","","configure the popup surface",114,null],[12,"popup_done","","popup interaction is done",114,null],[4,"Error","","",null,null],[13,"InvalidGrab","","tried to grab after being mapped",115,null],[11,"ptr","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_shell_v6","",116,null],[11,"from_ptr_new","","",116,null],[11,"from_ptr_initialized","","",116,null],[11,"interface_ptr","","",116,null],[11,"interface_name","","",116,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",116,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",116,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"status","","",116,{"inputs":[{"name":"self"}],"output":{"name":"liveness"}}],[11,"equals","","",116,{"inputs":[{"name":"self"},{"name":"zxdgshellv6"}],"output":{"name":"bool"}}],[11,"set_user_data","","",116,null],[11,"get_user_data","","",116,null],[11,"clone_unchecked","","",116,{"inputs":[{"name":"self"}],"output":{"name":"zxdgshellv6"}}],[11,"__dispatch_msg","","",116,null],[11,"clone","","",107,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",107,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",107,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"from_raw","","",107,{"inputs":[{"name":"u32"}],"output":{"generics":["error"],"name":"option"}}],[11,"to_raw","","",107,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",106,{"inputs":[{"name":"self"}],"output":{"name":"implementation"}}],[11,"eq","","",106,{"inputs":[{"name":"self"},{"name":"implementation"}],"output":{"name":"bool"}}],[11,"destroy","","destroy xdg_shell",116,{"inputs":[{"name":"self"}],"output":{"name":"requestresult"}}],[11,"create_positioner","","create a positioner object",116,{"inputs":[{"name":"self"}],"output":{"generics":["zxdgpositionerv6"],"name":"requestresult"}}],[11,"get_xdg_surface","","create a shell surface from a surface",116,{"inputs":[{"name":"self"},{"name":"wlsurface"}],"output":{"generics":["zxdgsurfacev6"],"name":"requestresult"}}],[11,"pong","","respond to a ping event",116,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"requestresult"}}],[11,"ptr","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_positioner_v6","",117,null],[11,"from_ptr_new","","",117,null],[11,"from_ptr_initialized","","",117,null],[11,"interface_ptr","","",117,null],[11,"interface_name","","",117,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",117,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",117,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"status","","",117,{"inputs":[{"name":"self"}],"output":{"name":"liveness"}}],[11,"equals","","",117,{"inputs":[{"name":"self"},{"name":"zxdgpositionerv6"}],"output":{"name":"bool"}}],[11,"set_user_data","","",117,null],[11,"get_user_data","","",117,null],[11,"clone_unchecked","","",117,{"inputs":[{"name":"self"}],"output":{"name":"zxdgpositionerv6"}}],[11,"clone","","",108,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",108,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",108,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"from_raw","","",108,{"inputs":[{"name":"u32"}],"output":{"generics":["error"],"name":"option"}}],[11,"to_raw","","",108,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"eq","","",118,{"inputs":[{"name":"self"},{"name":"anchor"}],"output":{"name":"bool"}}],[11,"ne","","",118,{"inputs":[{"name":"self"},{"name":"anchor"}],"output":{"name":"bool"}}],[11,"clone","","",118,{"inputs":[{"name":"self"}],"output":{"name":"anchor"}}],[11,"partial_cmp","","",118,{"inputs":[{"name":"self"},{"name":"anchor"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",118,{"inputs":[{"name":"self"},{"name":"anchor"}],"output":{"name":"bool"}}],[11,"le","","",118,{"inputs":[{"name":"self"},{"name":"anchor"}],"output":{"name":"bool"}}],[11,"gt","","",118,{"inputs":[{"name":"self"},{"name":"anchor"}],"output":{"name":"bool"}}],[11,"ge","","",118,{"inputs":[{"name":"self"},{"name":"anchor"}],"output":{"name":"bool"}}],[11,"cmp","","",118,{"inputs":[{"name":"self"},{"name":"anchor"}],"output":{"name":"ordering"}}],[11,"hash","","",118,null],[11,"fmt","","",118,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",118,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",118,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",118,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",118,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"None","","the center of the anchor rectangle",118,null],[18,"Top","","the top edge of the anchor rectangle",118,null],[18,"Bottom","","the bottom edge of the anchor rectangle",118,null],[18,"Left","","the left edge of the anchor rectangle",118,null],[18,"Right","","the right edge of the anchor rectangle",118,null],[11,"empty","","Returns an empty set of flags.",118,{"inputs":[],"output":{"name":"anchor"}}],[11,"all","","Returns the set containing all flags.",118,{"inputs":[],"output":{"name":"anchor"}}],[11,"bits","","Returns the raw value of the flags currently stored.",118,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",118,{"inputs":[{"name":"u32"}],"output":{"generics":["anchor"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",118,{"inputs":[{"name":"u32"}],"output":{"name":"anchor"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",118,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",118,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",118,{"inputs":[{"name":"self"},{"name":"anchor"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",118,{"inputs":[{"name":"self"},{"name":"anchor"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",118,{"inputs":[{"name":"self"},{"name":"anchor"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",118,{"inputs":[{"name":"self"},{"name":"anchor"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",118,{"inputs":[{"name":"self"},{"name":"anchor"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",118,{"inputs":[{"name":"self"},{"name":"anchor"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",118,{"inputs":[{"name":"self"},{"name":"anchor"}],"output":{"name":"anchor"}}],[11,"bitor_assign","","Adds the set of flags.",118,{"inputs":[{"name":"self"},{"name":"anchor"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",118,{"inputs":[{"name":"self"},{"name":"anchor"}],"output":{"name":"anchor"}}],[11,"bitxor_assign","","Toggles the set of flags.",118,{"inputs":[{"name":"self"},{"name":"anchor"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",118,{"inputs":[{"name":"self"},{"name":"anchor"}],"output":{"name":"anchor"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",118,{"inputs":[{"name":"self"},{"name":"anchor"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",118,{"inputs":[{"name":"self"},{"name":"anchor"}],"output":{"name":"anchor"}}],[11,"sub_assign","","Disables all flags enabled in the set.",118,{"inputs":[{"name":"self"},{"name":"anchor"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",118,{"inputs":[{"name":"self"}],"output":{"name":"anchor"}}],[11,"extend","","",118,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",118,{"inputs":[{"name":"t"}],"output":{"name":"anchor"}}],[11,"from_raw","","",118,{"inputs":[{"name":"u32"}],"output":{"generics":["anchor"],"name":"option"}}],[11,"to_raw","","",118,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"eq","","",119,{"inputs":[{"name":"self"},{"name":"gravity"}],"output":{"name":"bool"}}],[11,"ne","","",119,{"inputs":[{"name":"self"},{"name":"gravity"}],"output":{"name":"bool"}}],[11,"clone","","",119,{"inputs":[{"name":"self"}],"output":{"name":"gravity"}}],[11,"partial_cmp","","",119,{"inputs":[{"name":"self"},{"name":"gravity"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",119,{"inputs":[{"name":"self"},{"name":"gravity"}],"output":{"name":"bool"}}],[11,"le","","",119,{"inputs":[{"name":"self"},{"name":"gravity"}],"output":{"name":"bool"}}],[11,"gt","","",119,{"inputs":[{"name":"self"},{"name":"gravity"}],"output":{"name":"bool"}}],[11,"ge","","",119,{"inputs":[{"name":"self"},{"name":"gravity"}],"output":{"name":"bool"}}],[11,"cmp","","",119,{"inputs":[{"name":"self"},{"name":"gravity"}],"output":{"name":"ordering"}}],[11,"hash","","",119,null],[11,"fmt","","",119,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",119,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",119,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",119,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",119,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"None","","center over the anchor edge",119,null],[18,"Top","","position above the anchor edge",119,null],[18,"Bottom","","position below the anchor edge",119,null],[18,"Left","","position to the left of the anchor edge",119,null],[18,"Right","","position to the right of the anchor edge",119,null],[11,"empty","","Returns an empty set of flags.",119,{"inputs":[],"output":{"name":"gravity"}}],[11,"all","","Returns the set containing all flags.",119,{"inputs":[],"output":{"name":"gravity"}}],[11,"bits","","Returns the raw value of the flags currently stored.",119,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",119,{"inputs":[{"name":"u32"}],"output":{"generics":["gravity"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",119,{"inputs":[{"name":"u32"}],"output":{"name":"gravity"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",119,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",119,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",119,{"inputs":[{"name":"self"},{"name":"gravity"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",119,{"inputs":[{"name":"self"},{"name":"gravity"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",119,{"inputs":[{"name":"self"},{"name":"gravity"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",119,{"inputs":[{"name":"self"},{"name":"gravity"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",119,{"inputs":[{"name":"self"},{"name":"gravity"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",119,{"inputs":[{"name":"self"},{"name":"gravity"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",119,{"inputs":[{"name":"self"},{"name":"gravity"}],"output":{"name":"gravity"}}],[11,"bitor_assign","","Adds the set of flags.",119,{"inputs":[{"name":"self"},{"name":"gravity"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",119,{"inputs":[{"name":"self"},{"name":"gravity"}],"output":{"name":"gravity"}}],[11,"bitxor_assign","","Toggles the set of flags.",119,{"inputs":[{"name":"self"},{"name":"gravity"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",119,{"inputs":[{"name":"self"},{"name":"gravity"}],"output":{"name":"gravity"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",119,{"inputs":[{"name":"self"},{"name":"gravity"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",119,{"inputs":[{"name":"self"},{"name":"gravity"}],"output":{"name":"gravity"}}],[11,"sub_assign","","Disables all flags enabled in the set.",119,{"inputs":[{"name":"self"},{"name":"gravity"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",119,{"inputs":[{"name":"self"}],"output":{"name":"gravity"}}],[11,"extend","","",119,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",119,{"inputs":[{"name":"t"}],"output":{"name":"gravity"}}],[11,"from_raw","","",119,{"inputs":[{"name":"u32"}],"output":{"generics":["gravity"],"name":"option"}}],[11,"to_raw","","",119,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"eq","","",120,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":{"name":"bool"}}],[11,"ne","","",120,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":{"name":"bool"}}],[11,"clone","","",120,{"inputs":[{"name":"self"}],"output":{"name":"constraintadjustment"}}],[11,"partial_cmp","","",120,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",120,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":{"name":"bool"}}],[11,"le","","",120,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":{"name":"bool"}}],[11,"gt","","",120,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":{"name":"bool"}}],[11,"ge","","",120,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":{"name":"bool"}}],[11,"cmp","","",120,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":{"name":"ordering"}}],[11,"hash","","",120,null],[11,"fmt","","",120,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",120,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",120,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",120,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",120,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"None","","don't move the child surface when constrained",120,null],[18,"SlideX","","move along the x axis until unconstrained",120,null],[18,"SlideY","","move along the y axis until unconstrained",120,null],[18,"FlipX","","invert the anchor and gravity on the x axis",120,null],[18,"FlipY","","invert the anchor and gravity on the y axis",120,null],[18,"ResizeX","","horizontally resize the surface",120,null],[18,"ResizeY","","vertically resize the surface",120,null],[11,"empty","","Returns an empty set of flags.",120,{"inputs":[],"output":{"name":"constraintadjustment"}}],[11,"all","","Returns the set containing all flags.",120,{"inputs":[],"output":{"name":"constraintadjustment"}}],[11,"bits","","Returns the raw value of the flags currently stored.",120,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",120,{"inputs":[{"name":"u32"}],"output":{"generics":["constraintadjustment"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",120,{"inputs":[{"name":"u32"}],"output":{"name":"constraintadjustment"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",120,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",120,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",120,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",120,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",120,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",120,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",120,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",120,{"inputs":[{"name":"self"},{"name":"constraintadjustment"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",120,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":{"name":"constraintadjustment"}}],[11,"bitor_assign","","Adds the set of flags.",120,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",120,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":{"name":"constraintadjustment"}}],[11,"bitxor_assign","","Toggles the set of flags.",120,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",120,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":{"name":"constraintadjustment"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",120,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",120,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":{"name":"constraintadjustment"}}],[11,"sub_assign","","Disables all flags enabled in the set.",120,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",120,{"inputs":[{"name":"self"}],"output":{"name":"constraintadjustment"}}],[11,"extend","","",120,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",120,{"inputs":[{"name":"t"}],"output":{"name":"constraintadjustment"}}],[11,"from_raw","","",120,{"inputs":[{"name":"u32"}],"output":{"generics":["constraintadjustment"],"name":"option"}}],[11,"to_raw","","",120,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"destroy","","destroy the xdg_positioner object",117,{"inputs":[{"name":"self"}],"output":{"name":"requestresult"}}],[11,"set_size","","set the size of the to-be positioned rectangle",117,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":{"name":"requestresult"}}],[11,"set_anchor_rect","","set the anchor rectangle within the parent surface",117,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":{"name":"requestresult"}}],[11,"set_anchor","","set anchor rectangle anchor edges",117,{"inputs":[{"name":"self"},{"name":"anchor"}],"output":{"name":"requestresult"}}],[11,"set_gravity","","set child surface gravity",117,{"inputs":[{"name":"self"},{"name":"gravity"}],"output":{"name":"requestresult"}}],[11,"set_constraint_adjustment","","set the adjustment to be done when constrained",117,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"requestresult"}}],[11,"set_offset","","set surface position offset",117,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":{"name":"requestresult"}}],[11,"ptr","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_surface_v6","",121,null],[11,"from_ptr_new","","",121,null],[11,"from_ptr_initialized","","",121,null],[11,"interface_ptr","","",121,null],[11,"interface_name","","",121,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",121,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",121,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"status","","",121,{"inputs":[{"name":"self"}],"output":{"name":"liveness"}}],[11,"equals","","",121,{"inputs":[{"name":"self"},{"name":"zxdgsurfacev6"}],"output":{"name":"bool"}}],[11,"set_user_data","","",121,null],[11,"get_user_data","","",121,null],[11,"clone_unchecked","","",121,{"inputs":[{"name":"self"}],"output":{"name":"zxdgsurfacev6"}}],[11,"__dispatch_msg","","",121,null],[11,"clone","","",110,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",110,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",110,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"from_raw","","",110,{"inputs":[{"name":"u32"}],"output":{"generics":["error"],"name":"option"}}],[11,"to_raw","","",110,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",109,{"inputs":[{"name":"self"}],"output":{"name":"implementation"}}],[11,"eq","","",109,{"inputs":[{"name":"self"},{"name":"implementation"}],"output":{"name":"bool"}}],[11,"destroy","","destroy the xdg_surface",121,{"inputs":[{"name":"self"}],"output":{"name":"requestresult"}}],[11,"get_toplevel","","assign the xdg_toplevel surface role",121,{"inputs":[{"name":"self"}],"output":{"generics":["zxdgtoplevelv6"],"name":"requestresult"}}],[11,"get_popup","","assign the xdg_popup surface role",121,{"inputs":[{"name":"self"},{"name":"zxdgsurfacev6"},{"name":"zxdgpositionerv6"}],"output":{"generics":["zxdgpopupv6"],"name":"requestresult"}}],[11,"set_window_geometry","","set the new window geometry",121,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":{"name":"requestresult"}}],[11,"ack_configure","","ack a configure event",121,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"requestresult"}}],[11,"ptr","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_toplevel_v6","",122,null],[11,"from_ptr_new","","",122,null],[11,"from_ptr_initialized","","",122,null],[11,"interface_ptr","","",122,null],[11,"interface_name","","",122,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",122,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",122,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"status","","",122,{"inputs":[{"name":"self"}],"output":{"name":"liveness"}}],[11,"equals","","",122,{"inputs":[{"name":"self"},{"name":"zxdgtoplevelv6"}],"output":{"name":"bool"}}],[11,"set_user_data","","",122,null],[11,"get_user_data","","",122,null],[11,"clone_unchecked","","",122,{"inputs":[{"name":"self"}],"output":{"name":"zxdgtoplevelv6"}}],[11,"__dispatch_msg","","",122,null],[11,"clone","","",112,{"inputs":[{"name":"self"}],"output":{"name":"resizeedge"}}],[11,"fmt","","",112,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",112,{"inputs":[{"name":"self"},{"name":"resizeedge"}],"output":{"name":"bool"}}],[11,"from_raw","","",112,{"inputs":[{"name":"u32"}],"output":{"generics":["resizeedge"],"name":"option"}}],[11,"to_raw","","",112,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",113,{"inputs":[{"name":"self"}],"output":{"name":"state"}}],[11,"fmt","","",113,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",113,{"inputs":[{"name":"self"},{"name":"state"}],"output":{"name":"bool"}}],[11,"from_raw","","",113,{"inputs":[{"name":"u32"}],"output":{"generics":["state"],"name":"option"}}],[11,"to_raw","","",113,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",111,{"inputs":[{"name":"self"}],"output":{"name":"implementation"}}],[11,"eq","","",111,{"inputs":[{"name":"self"},{"name":"implementation"}],"output":{"name":"bool"}}],[11,"destroy","","destroy the xdg_toplevel",122,{"inputs":[{"name":"self"}],"output":{"name":"requestresult"}}],[11,"set_parent","","set the parent of this surface",122,{"inputs":[{"name":"self"},{"generics":["zxdgtoplevelv6"],"name":"option"}],"output":{"name":"requestresult"}}],[11,"set_title","","set surface title",122,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"requestresult"}}],[11,"set_app_id","","set application ID",122,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"requestresult"}}],[11,"show_window_menu","","show the window menu",122,{"inputs":[{"name":"self"},{"name":"wlseat"},{"name":"u32"},{"name":"i32"},{"name":"i32"}],"output":{"name":"requestresult"}}],[11,"_move","","start an interactive move",122,{"inputs":[{"name":"self"},{"name":"wlseat"},{"name":"u32"}],"output":{"name":"requestresult"}}],[11,"resize","","start an interactive resize",122,{"inputs":[{"name":"self"},{"name":"wlseat"},{"name":"u32"},{"name":"u32"}],"output":{"name":"requestresult"}}],[11,"set_max_size","","set the maximum size",122,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":{"name":"requestresult"}}],[11,"set_min_size","","set the minimum size",122,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":{"name":"requestresult"}}],[11,"set_maximized","","maximize the window",122,{"inputs":[{"name":"self"}],"output":{"name":"requestresult"}}],[11,"unset_maximized","","unmaximize the window",122,{"inputs":[{"name":"self"}],"output":{"name":"requestresult"}}],[11,"set_fullscreen","","set the window as fullscreen on a monitor",122,{"inputs":[{"name":"self"},{"generics":["wloutput"],"name":"option"}],"output":{"name":"requestresult"}}],[11,"unset_fullscreen","","",122,{"inputs":[{"name":"self"}],"output":{"name":"requestresult"}}],[11,"set_minimized","","set the window as minimized",122,{"inputs":[{"name":"self"}],"output":{"name":"requestresult"}}],[11,"ptr","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_popup_v6","",123,null],[11,"from_ptr_new","","",123,null],[11,"from_ptr_initialized","","",123,null],[11,"interface_ptr","","",123,null],[11,"interface_name","","",123,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",123,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",123,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"status","","",123,{"inputs":[{"name":"self"}],"output":{"name":"liveness"}}],[11,"equals","","",123,{"inputs":[{"name":"self"},{"name":"zxdgpopupv6"}],"output":{"name":"bool"}}],[11,"set_user_data","","",123,null],[11,"get_user_data","","",123,null],[11,"clone_unchecked","","",123,{"inputs":[{"name":"self"}],"output":{"name":"zxdgpopupv6"}}],[11,"__dispatch_msg","","",123,null],[11,"clone","","",115,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",115,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",115,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"from_raw","","",115,{"inputs":[{"name":"u32"}],"output":{"generics":["error"],"name":"option"}}],[11,"to_raw","","",115,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",114,{"inputs":[{"name":"self"}],"output":{"name":"implementation"}}],[11,"eq","","",114,{"inputs":[{"name":"self"},{"name":"implementation"}],"output":{"name":"bool"}}],[11,"destroy","","remove xdg_popup interface",123,{"inputs":[{"name":"self"}],"output":{"name":"requestresult"}}],[11,"grab","","make the popup take an explicit grab",123,{"inputs":[{"name":"self"},{"name":"wlseat"},{"name":"u32"}],"output":{"name":"requestresult"}}],[0,"xwayland_keyboard_grab","wayland_protocols::unstable","Protocol for grabbing the keyboard from Xwayland",null,null],[0,"v1","wayland_protocols::unstable::xwayland_keyboard_grab","",null,null],[0,"client","wayland_protocols::unstable::xwayland_keyboard_grab::v1","Client-side API of this protocol",null,null],[0,"zwp_xwayland_keyboard_grab_manager_v1","wayland_protocols::unstable::xwayland_keyboard_grab::v1::client","context object for keyboard grab manager",null,null],[3,"ZwpXwaylandKeyboardGrabManagerV1","wayland_protocols::unstable::xwayland_keyboard_grab::v1::client::zwp_xwayland_keyboard_grab_manager_v1","",null,null],[0,"zwp_xwayland_keyboard_grab_v1","wayland_protocols::unstable::xwayland_keyboard_grab::v1::client","interface for grabbing the keyboard",null,null],[3,"ZwpXwaylandKeyboardGrabV1","wayland_protocols::unstable::xwayland_keyboard_grab::v1::client::zwp_xwayland_keyboard_grab_v1","",null,null],[11,"ptr","wayland_protocols::unstable::xwayland_keyboard_grab::v1::client::zwp_xwayland_keyboard_grab_manager_v1","",124,null],[11,"from_ptr_new","","",124,null],[11,"from_ptr_initialized","","",124,null],[11,"interface_ptr","","",124,null],[11,"interface_name","","",124,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",124,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",124,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"status","","",124,{"inputs":[{"name":"self"}],"output":{"name":"liveness"}}],[11,"equals","","",124,{"inputs":[{"name":"self"},{"name":"zwpxwaylandkeyboardgrabmanagerv1"}],"output":{"name":"bool"}}],[11,"set_user_data","","",124,null],[11,"get_user_data","","",124,null],[11,"clone_unchecked","","",124,{"inputs":[{"name":"self"}],"output":{"name":"zwpxwaylandkeyboardgrabmanagerv1"}}],[11,"destroy","","destroy the keyboard grab manager",124,{"inputs":[{"name":"self"}],"output":{"name":"requestresult"}}],[11,"grab_keyboard","","grab the keyboard to a surface",124,{"inputs":[{"name":"self"},{"name":"wlsurface"},{"name":"wlseat"}],"output":{"generics":["zwpxwaylandkeyboardgrabv1"],"name":"requestresult"}}],[11,"ptr","wayland_protocols::unstable::xwayland_keyboard_grab::v1::client::zwp_xwayland_keyboard_grab_v1","",125,null],[11,"from_ptr_new","","",125,null],[11,"from_ptr_initialized","","",125,null],[11,"interface_ptr","","",125,null],[11,"interface_name","","",125,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",125,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",125,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"status","","",125,{"inputs":[{"name":"self"}],"output":{"name":"liveness"}}],[11,"equals","","",125,{"inputs":[{"name":"self"},{"name":"zwpxwaylandkeyboardgrabv1"}],"output":{"name":"bool"}}],[11,"set_user_data","","",125,null],[11,"get_user_data","","",125,null],[11,"clone_unchecked","","",125,{"inputs":[{"name":"self"}],"output":{"name":"zwpxwaylandkeyboardgrabv1"}}],[11,"destroy","","destroy the grabbed keyboard object",125,{"inputs":[{"name":"self"}],"output":{"name":"requestresult"}}],[0,"presentation_time","wayland_protocols","Presentation time protocol",null,null],[0,"client","wayland_protocols::presentation_time","Client-side API of this protocol",null,null],[0,"wp_presentation","wayland_protocols::presentation_time::client","timed presentation related wl_surface requests",null,null],[3,"WpPresentation","wayland_protocols::presentation_time::client::wp_presentation","",null,null],[3,"Implementation","","",null,null],[12,"clock_id","","clock ID for timestamps",126,null],[4,"Error","","fatal presentation errors",null,null],[13,"InvalidTimestamp","","invalid value in tv_nsec",127,null],[13,"InvalidFlag","","invalid flag",127,null],[0,"wp_presentation_feedback","wayland_protocols::presentation_time::client","presentation time feedback event",null,null],[3,"WpPresentationFeedback","wayland_protocols::presentation_time::client::wp_presentation_feedback","",null,null],[3,"Implementation","","",null,null],[12,"sync_output","","presentation synchronized to this output",128,null],[12,"presented","","the content update was displayed",128,null],[12,"discarded","","the content update was not displayed",128,null],[4,"Kind","","bitmask of flags in presented event",null,null],[13,"Vsync","","presentation was vsync'd",129,null],[13,"HwClock","","hardware provided the presentation timestamp",129,null],[13,"HwCompletion","","hardware signalled the start of the presentation",129,null],[13,"ZeroCopy","","presentation was done zero-copy",129,null],[0,"xdg_shell","wayland_protocols","XDG Shell protocol",null,null],[0,"client","wayland_protocols::xdg_shell","Client-side API of this protocol",null,null],[0,"xdg_wm_base","wayland_protocols::xdg_shell::client","create desktop-style surfaces",null,null],[3,"XdgWmBase","wayland_protocols::xdg_shell::client::xdg_wm_base","",null,null],[3,"Implementation","","",null,null],[12,"ping","","check if the client is alive",130,null],[4,"Error","","",null,null],[13,"Role","","given wl_surface has another role",131,null],[13,"DefunctSurfaces","","xdg_wm_base was destroyed before children",131,null],[13,"NotTheTopmostPopup","","the client tried to map or destroy a non-topmost popup",131,null],[13,"InvalidPopupParent","","the client specified an invalid popup parent surface",131,null],[13,"InvalidSurfaceState","","the client provided an invalid surface state",131,null],[13,"InvalidPositioner","","the client provided an invalid positioner",131,null],[0,"xdg_positioner","wayland_protocols::xdg_shell::client","child surface positioner",null,null],[3,"XdgPositioner","wayland_protocols::xdg_shell::client::xdg_positioner","",null,null],[3,"ConstraintAdjustment","","constraint adjustments",null,null],[4,"Error","","",null,null],[13,"InvalidInput","","invalid input provided",132,null],[4,"Anchor","","",null,null],[13,"None","","",133,null],[13,"Top","","",133,null],[13,"Bottom","","",133,null],[13,"Left","","",133,null],[13,"Right","","",133,null],[13,"TopLeft","","",133,null],[13,"BottomLeft","","",133,null],[13,"TopRight","","",133,null],[13,"BottomRight","","",133,null],[4,"Gravity","","",null,null],[13,"None","","",134,null],[13,"Top","","",134,null],[13,"Bottom","","",134,null],[13,"Left","","",134,null],[13,"Right","","",134,null],[13,"TopLeft","","",134,null],[13,"BottomLeft","","",134,null],[13,"TopRight","","",134,null],[13,"BottomRight","","",134,null],[0,"xdg_surface","wayland_protocols::xdg_shell::client","desktop user interface surface base interface",null,null],[3,"XdgSurface","wayland_protocols::xdg_shell::client::xdg_surface","",null,null],[3,"Implementation","","",null,null],[12,"configure","","suggest a surface change",135,null],[4,"Error","","",null,null],[13,"NotConstructed","","",136,null],[13,"AlreadyConstructed","","",136,null],[13,"UnconfiguredBuffer","","",136,null],[0,"xdg_toplevel","wayland_protocols::xdg_shell::client","toplevel surface",null,null],[3,"XdgToplevel","wayland_protocols::xdg_shell::client::xdg_toplevel","",null,null],[3,"Implementation","","",null,null],[12,"configure","","suggest a surface change",137,null],[12,"close","","surface wants to be closed",137,null],[4,"ResizeEdge","","edge values for resizing",null,null],[13,"None","","",138,null],[13,"Top","","",138,null],[13,"Bottom","","",138,null],[13,"Left","","",138,null],[13,"TopLeft","","",138,null],[13,"BottomLeft","","",138,null],[13,"Right","","",138,null],[13,"TopRight","","",138,null],[13,"BottomRight","","",138,null],[4,"State","","types of state on the surface",null,null],[13,"Maximized","","the surface is maximized",139,null],[13,"Fullscreen","","the surface is fullscreen",139,null],[13,"Resizing","","the surface is being resized",139,null],[13,"Activated","","the surface is now activated",139,null],[0,"xdg_popup","wayland_protocols::xdg_shell::client","short-lived, popup surfaces for menus",null,null],[3,"XdgPopup","wayland_protocols::xdg_shell::client::xdg_popup","",null,null],[3,"Implementation","","",null,null],[12,"configure","","configure the popup surface",140,null],[12,"popup_done","","popup interaction is done",140,null],[4,"Error","","",null,null],[13,"InvalidGrab","","tried to grab after being mapped",141,null],[0,"viewporter","wayland_protocols","Viewporter protocol",null,null],[0,"client","wayland_protocols::viewporter","Client-side API of this protocol",null,null],[0,"wp_viewporter","wayland_protocols::viewporter::client","surface cropping and scaling",null,null],[3,"WpViewporter","wayland_protocols::viewporter::client::wp_viewporter","",null,null],[4,"Error","","",null,null],[13,"ViewportExists","","the surface already has a viewport object associated",142,null],[0,"wp_viewport","wayland_protocols::viewporter::client","crop and scale interface to a wl_surface",null,null],[3,"WpViewport","wayland_protocols::viewporter::client::wp_viewport","",null,null],[4,"Error","","",null,null],[13,"BadValue","","negative or zero values in width or height",143,null],[13,"BadSize","","destination size is not integer",143,null],[13,"OutOfBuffer","","source rectangle extends outside of the content area",143,null],[13,"NoSurface","","the wl_surface was destroyed",143,null],[11,"ptr","wayland_protocols::presentation_time::client::wp_presentation","",144,null],[11,"from_ptr_new","","",144,null],[11,"from_ptr_initialized","","",144,null],[11,"interface_ptr","","",144,null],[11,"interface_name","","",144,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",144,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",144,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"status","","",144,{"inputs":[{"name":"self"}],"output":{"name":"liveness"}}],[11,"equals","","",144,{"inputs":[{"name":"self"},{"name":"wppresentation"}],"output":{"name":"bool"}}],[11,"set_user_data","","",144,null],[11,"get_user_data","","",144,null],[11,"clone_unchecked","","",144,{"inputs":[{"name":"self"}],"output":{"name":"wppresentation"}}],[11,"__dispatch_msg","","",144,null],[11,"clone","","",127,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",127,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",127,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"from_raw","","",127,{"inputs":[{"name":"u32"}],"output":{"generics":["error"],"name":"option"}}],[11,"to_raw","","",127,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",126,{"inputs":[{"name":"self"}],"output":{"name":"implementation"}}],[11,"eq","","",126,{"inputs":[{"name":"self"},{"name":"implementation"}],"output":{"name":"bool"}}],[11,"destroy","","unbind from the presentation interface",144,{"inputs":[{"name":"self"}],"output":{"name":"requestresult"}}],[11,"feedback","","request presentation feedback information",144,{"inputs":[{"name":"self"},{"name":"wlsurface"}],"output":{"generics":["wppresentationfeedback"],"name":"requestresult"}}],[11,"ptr","wayland_protocols::presentation_time::client::wp_presentation_feedback","",145,null],[11,"from_ptr_new","","",145,null],[11,"from_ptr_initialized","","",145,null],[11,"interface_ptr","","",145,null],[11,"interface_name","","",145,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",145,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",145,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"status","","",145,{"inputs":[{"name":"self"}],"output":{"name":"liveness"}}],[11,"equals","","",145,{"inputs":[{"name":"self"},{"name":"wppresentationfeedback"}],"output":{"name":"bool"}}],[11,"set_user_data","","",145,null],[11,"get_user_data","","",145,null],[11,"clone_unchecked","","",145,{"inputs":[{"name":"self"}],"output":{"name":"wppresentationfeedback"}}],[11,"__dispatch_msg","","",145,null],[11,"clone","","",129,{"inputs":[{"name":"self"}],"output":{"name":"kind"}}],[11,"fmt","","",129,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",129,{"inputs":[{"name":"self"},{"name":"kind"}],"output":{"name":"bool"}}],[11,"from_raw","","",129,{"inputs":[{"name":"u32"}],"output":{"generics":["kind"],"name":"option"}}],[11,"to_raw","","",129,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",128,{"inputs":[{"name":"self"}],"output":{"name":"implementation"}}],[11,"eq","","",128,{"inputs":[{"name":"self"},{"name":"implementation"}],"output":{"name":"bool"}}],[11,"ptr","wayland_protocols::xdg_shell::client::xdg_wm_base","",146,null],[11,"from_ptr_new","","",146,null],[11,"from_ptr_initialized","","",146,null],[11,"interface_ptr","","",146,null],[11,"interface_name","","",146,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",146,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",146,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"status","","",146,{"inputs":[{"name":"self"}],"output":{"name":"liveness"}}],[11,"equals","","",146,{"inputs":[{"name":"self"},{"name":"xdgwmbase"}],"output":{"name":"bool"}}],[11,"set_user_data","","",146,null],[11,"get_user_data","","",146,null],[11,"clone_unchecked","","",146,{"inputs":[{"name":"self"}],"output":{"name":"xdgwmbase"}}],[11,"__dispatch_msg","","",146,null],[11,"clone","","",131,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",131,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",131,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"from_raw","","",131,{"inputs":[{"name":"u32"}],"output":{"generics":["error"],"name":"option"}}],[11,"to_raw","","",131,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",130,{"inputs":[{"name":"self"}],"output":{"name":"implementation"}}],[11,"eq","","",130,{"inputs":[{"name":"self"},{"name":"implementation"}],"output":{"name":"bool"}}],[11,"destroy","","destroy xdg_wm_base",146,{"inputs":[{"name":"self"}],"output":{"name":"requestresult"}}],[11,"create_positioner","","create a positioner object",146,{"inputs":[{"name":"self"}],"output":{"generics":["xdgpositioner"],"name":"requestresult"}}],[11,"get_xdg_surface","","create a shell surface from a surface",146,{"inputs":[{"name":"self"},{"name":"wlsurface"}],"output":{"generics":["xdgsurface"],"name":"requestresult"}}],[11,"pong","","respond to a ping event",146,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"requestresult"}}],[11,"ptr","wayland_protocols::xdg_shell::client::xdg_positioner","",147,null],[11,"from_ptr_new","","",147,null],[11,"from_ptr_initialized","","",147,null],[11,"interface_ptr","","",147,null],[11,"interface_name","","",147,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",147,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",147,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"status","","",147,{"inputs":[{"name":"self"}],"output":{"name":"liveness"}}],[11,"equals","","",147,{"inputs":[{"name":"self"},{"name":"xdgpositioner"}],"output":{"name":"bool"}}],[11,"set_user_data","","",147,null],[11,"get_user_data","","",147,null],[11,"clone_unchecked","","",147,{"inputs":[{"name":"self"}],"output":{"name":"xdgpositioner"}}],[11,"clone","","",132,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",132,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",132,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"from_raw","","",132,{"inputs":[{"name":"u32"}],"output":{"generics":["error"],"name":"option"}}],[11,"to_raw","","",132,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",133,{"inputs":[{"name":"self"}],"output":{"name":"anchor"}}],[11,"fmt","","",133,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",133,{"inputs":[{"name":"self"},{"name":"anchor"}],"output":{"name":"bool"}}],[11,"from_raw","","",133,{"inputs":[{"name":"u32"}],"output":{"generics":["anchor"],"name":"option"}}],[11,"to_raw","","",133,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",134,{"inputs":[{"name":"self"}],"output":{"name":"gravity"}}],[11,"fmt","","",134,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",134,{"inputs":[{"name":"self"},{"name":"gravity"}],"output":{"name":"bool"}}],[11,"from_raw","","",134,{"inputs":[{"name":"u32"}],"output":{"generics":["gravity"],"name":"option"}}],[11,"to_raw","","",134,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"eq","","",148,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":{"name":"bool"}}],[11,"ne","","",148,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":{"name":"bool"}}],[11,"clone","","",148,{"inputs":[{"name":"self"}],"output":{"name":"constraintadjustment"}}],[11,"partial_cmp","","",148,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",148,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":{"name":"bool"}}],[11,"le","","",148,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":{"name":"bool"}}],[11,"gt","","",148,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":{"name":"bool"}}],[11,"ge","","",148,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":{"name":"bool"}}],[11,"cmp","","",148,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":{"name":"ordering"}}],[11,"hash","","",148,null],[11,"fmt","","",148,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",148,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",148,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",148,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",148,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"None","","don't move the child surface when constrained",148,null],[18,"SlideX","","move along the x axis until unconstrained",148,null],[18,"SlideY","","move along the y axis until unconstrained",148,null],[18,"FlipX","","invert the anchor and gravity on the x axis",148,null],[18,"FlipY","","invert the anchor and gravity on the y axis",148,null],[18,"ResizeX","","horizontally resize the surface",148,null],[18,"ResizeY","","vertically resize the surface",148,null],[11,"empty","","Returns an empty set of flags.",148,{"inputs":[],"output":{"name":"constraintadjustment"}}],[11,"all","","Returns the set containing all flags.",148,{"inputs":[],"output":{"name":"constraintadjustment"}}],[11,"bits","","Returns the raw value of the flags currently stored.",148,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",148,{"inputs":[{"name":"u32"}],"output":{"generics":["constraintadjustment"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",148,{"inputs":[{"name":"u32"}],"output":{"name":"constraintadjustment"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",148,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",148,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",148,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",148,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",148,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",148,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",148,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",148,{"inputs":[{"name":"self"},{"name":"constraintadjustment"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",148,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":{"name":"constraintadjustment"}}],[11,"bitor_assign","","Adds the set of flags.",148,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",148,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":{"name":"constraintadjustment"}}],[11,"bitxor_assign","","Toggles the set of flags.",148,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",148,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":{"name":"constraintadjustment"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",148,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",148,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":{"name":"constraintadjustment"}}],[11,"sub_assign","","Disables all flags enabled in the set.",148,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",148,{"inputs":[{"name":"self"}],"output":{"name":"constraintadjustment"}}],[11,"extend","","",148,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",148,{"inputs":[{"name":"t"}],"output":{"name":"constraintadjustment"}}],[11,"from_raw","","",148,{"inputs":[{"name":"u32"}],"output":{"generics":["constraintadjustment"],"name":"option"}}],[11,"to_raw","","",148,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"destroy","","destroy the xdg_positioner object",147,{"inputs":[{"name":"self"}],"output":{"name":"requestresult"}}],[11,"set_size","","set the size of the to-be positioned rectangle",147,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":{"name":"requestresult"}}],[11,"set_anchor_rect","","set the anchor rectangle within the parent surface",147,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":{"name":"requestresult"}}],[11,"set_anchor","","set anchor rectangle anchor",147,{"inputs":[{"name":"self"},{"name":"anchor"}],"output":{"name":"requestresult"}}],[11,"set_gravity","","set child surface gravity",147,{"inputs":[{"name":"self"},{"name":"gravity"}],"output":{"name":"requestresult"}}],[11,"set_constraint_adjustment","","set the adjustment to be done when constrained",147,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"requestresult"}}],[11,"set_offset","","set surface position offset",147,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":{"name":"requestresult"}}],[11,"ptr","wayland_protocols::xdg_shell::client::xdg_surface","",149,null],[11,"from_ptr_new","","",149,null],[11,"from_ptr_initialized","","",149,null],[11,"interface_ptr","","",149,null],[11,"interface_name","","",149,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",149,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",149,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"status","","",149,{"inputs":[{"name":"self"}],"output":{"name":"liveness"}}],[11,"equals","","",149,{"inputs":[{"name":"self"},{"name":"xdgsurface"}],"output":{"name":"bool"}}],[11,"set_user_data","","",149,null],[11,"get_user_data","","",149,null],[11,"clone_unchecked","","",149,{"inputs":[{"name":"self"}],"output":{"name":"xdgsurface"}}],[11,"__dispatch_msg","","",149,null],[11,"clone","","",136,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",136,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",136,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"from_raw","","",136,{"inputs":[{"name":"u32"}],"output":{"generics":["error"],"name":"option"}}],[11,"to_raw","","",136,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",135,{"inputs":[{"name":"self"}],"output":{"name":"implementation"}}],[11,"eq","","",135,{"inputs":[{"name":"self"},{"name":"implementation"}],"output":{"name":"bool"}}],[11,"destroy","","destroy the xdg_surface",149,{"inputs":[{"name":"self"}],"output":{"name":"requestresult"}}],[11,"get_toplevel","","assign the xdg_toplevel surface role",149,{"inputs":[{"name":"self"}],"output":{"generics":["xdgtoplevel"],"name":"requestresult"}}],[11,"get_popup","","assign the xdg_popup surface role",149,{"inputs":[{"name":"self"},{"generics":["xdgsurface"],"name":"option"},{"name":"xdgpositioner"}],"output":{"generics":["xdgpopup"],"name":"requestresult"}}],[11,"set_window_geometry","","set the new window geometry",149,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":{"name":"requestresult"}}],[11,"ack_configure","","ack a configure event",149,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"requestresult"}}],[11,"ptr","wayland_protocols::xdg_shell::client::xdg_toplevel","",150,null],[11,"from_ptr_new","","",150,null],[11,"from_ptr_initialized","","",150,null],[11,"interface_ptr","","",150,null],[11,"interface_name","","",150,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",150,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",150,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"status","","",150,{"inputs":[{"name":"self"}],"output":{"name":"liveness"}}],[11,"equals","","",150,{"inputs":[{"name":"self"},{"name":"xdgtoplevel"}],"output":{"name":"bool"}}],[11,"set_user_data","","",150,null],[11,"get_user_data","","",150,null],[11,"clone_unchecked","","",150,{"inputs":[{"name":"self"}],"output":{"name":"xdgtoplevel"}}],[11,"__dispatch_msg","","",150,null],[11,"clone","","",138,{"inputs":[{"name":"self"}],"output":{"name":"resizeedge"}}],[11,"fmt","","",138,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",138,{"inputs":[{"name":"self"},{"name":"resizeedge"}],"output":{"name":"bool"}}],[11,"from_raw","","",138,{"inputs":[{"name":"u32"}],"output":{"generics":["resizeedge"],"name":"option"}}],[11,"to_raw","","",138,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",139,{"inputs":[{"name":"self"}],"output":{"name":"state"}}],[11,"fmt","","",139,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",139,{"inputs":[{"name":"self"},{"name":"state"}],"output":{"name":"bool"}}],[11,"from_raw","","",139,{"inputs":[{"name":"u32"}],"output":{"generics":["state"],"name":"option"}}],[11,"to_raw","","",139,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",137,{"inputs":[{"name":"self"}],"output":{"name":"implementation"}}],[11,"eq","","",137,{"inputs":[{"name":"self"},{"name":"implementation"}],"output":{"name":"bool"}}],[11,"destroy","","destroy the xdg_toplevel",150,{"inputs":[{"name":"self"}],"output":{"name":"requestresult"}}],[11,"set_parent","","set the parent of this surface",150,{"inputs":[{"name":"self"},{"generics":["xdgtoplevel"],"name":"option"}],"output":{"name":"requestresult"}}],[11,"set_title","","set surface title",150,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"requestresult"}}],[11,"set_app_id","","set application ID",150,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"requestresult"}}],[11,"show_window_menu","","show the window menu",150,{"inputs":[{"name":"self"},{"name":"wlseat"},{"name":"u32"},{"name":"i32"},{"name":"i32"}],"output":{"name":"requestresult"}}],[11,"_move","","start an interactive move",150,{"inputs":[{"name":"self"},{"name":"wlseat"},{"name":"u32"}],"output":{"name":"requestresult"}}],[11,"resize","","start an interactive resize",150,{"inputs":[{"name":"self"},{"name":"wlseat"},{"name":"u32"},{"name":"u32"}],"output":{"name":"requestresult"}}],[11,"set_max_size","","set the maximum size",150,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":{"name":"requestresult"}}],[11,"set_min_size","","set the minimum size",150,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":{"name":"requestresult"}}],[11,"set_maximized","","maximize the window",150,{"inputs":[{"name":"self"}],"output":{"name":"requestresult"}}],[11,"unset_maximized","","unmaximize the window",150,{"inputs":[{"name":"self"}],"output":{"name":"requestresult"}}],[11,"set_fullscreen","","set the window as fullscreen on an output",150,{"inputs":[{"name":"self"},{"generics":["wloutput"],"name":"option"}],"output":{"name":"requestresult"}}],[11,"unset_fullscreen","","unset the window as fullscreen",150,{"inputs":[{"name":"self"}],"output":{"name":"requestresult"}}],[11,"set_minimized","","set the window as minimized",150,{"inputs":[{"name":"self"}],"output":{"name":"requestresult"}}],[11,"ptr","wayland_protocols::xdg_shell::client::xdg_popup","",151,null],[11,"from_ptr_new","","",151,null],[11,"from_ptr_initialized","","",151,null],[11,"interface_ptr","","",151,null],[11,"interface_name","","",151,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",151,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",151,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"status","","",151,{"inputs":[{"name":"self"}],"output":{"name":"liveness"}}],[11,"equals","","",151,{"inputs":[{"name":"self"},{"name":"xdgpopup"}],"output":{"name":"bool"}}],[11,"set_user_data","","",151,null],[11,"get_user_data","","",151,null],[11,"clone_unchecked","","",151,{"inputs":[{"name":"self"}],"output":{"name":"xdgpopup"}}],[11,"__dispatch_msg","","",151,null],[11,"clone","","",141,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",141,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",141,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"from_raw","","",141,{"inputs":[{"name":"u32"}],"output":{"generics":["error"],"name":"option"}}],[11,"to_raw","","",141,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",140,{"inputs":[{"name":"self"}],"output":{"name":"implementation"}}],[11,"eq","","",140,{"inputs":[{"name":"self"},{"name":"implementation"}],"output":{"name":"bool"}}],[11,"destroy","","remove xdg_popup interface",151,{"inputs":[{"name":"self"}],"output":{"name":"requestresult"}}],[11,"grab","","make the popup take an explicit grab",151,{"inputs":[{"name":"self"},{"name":"wlseat"},{"name":"u32"}],"output":{"name":"requestresult"}}],[11,"ptr","wayland_protocols::viewporter::client::wp_viewporter","",152,null],[11,"from_ptr_new","","",152,null],[11,"from_ptr_initialized","","",152,null],[11,"interface_ptr","","",152,null],[11,"interface_name","","",152,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",152,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",152,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"status","","",152,{"inputs":[{"name":"self"}],"output":{"name":"liveness"}}],[11,"equals","","",152,{"inputs":[{"name":"self"},{"name":"wpviewporter"}],"output":{"name":"bool"}}],[11,"set_user_data","","",152,null],[11,"get_user_data","","",152,null],[11,"clone_unchecked","","",152,{"inputs":[{"name":"self"}],"output":{"name":"wpviewporter"}}],[11,"clone","","",142,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",142,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",142,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"from_raw","","",142,{"inputs":[{"name":"u32"}],"output":{"generics":["error"],"name":"option"}}],[11,"to_raw","","",142,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"destroy","","unbind from the cropping and scaling interface",152,{"inputs":[{"name":"self"}],"output":{"name":"requestresult"}}],[11,"get_viewport","","extend surface interface for crop and scale",152,{"inputs":[{"name":"self"},{"name":"wlsurface"}],"output":{"generics":["wpviewport"],"name":"requestresult"}}],[11,"ptr","wayland_protocols::viewporter::client::wp_viewport","",153,null],[11,"from_ptr_new","","",153,null],[11,"from_ptr_initialized","","",153,null],[11,"interface_ptr","","",153,null],[11,"interface_name","","",153,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",153,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",153,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"status","","",153,{"inputs":[{"name":"self"}],"output":{"name":"liveness"}}],[11,"equals","","",153,{"inputs":[{"name":"self"},{"name":"wpviewport"}],"output":{"name":"bool"}}],[11,"set_user_data","","",153,null],[11,"get_user_data","","",153,null],[11,"clone_unchecked","","",153,{"inputs":[{"name":"self"}],"output":{"name":"wpviewport"}}],[11,"clone","","",143,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",143,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",143,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"from_raw","","",143,{"inputs":[{"name":"u32"}],"output":{"generics":["error"],"name":"option"}}],[11,"to_raw","","",143,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"destroy","","remove scaling and cropping from the surface",153,{"inputs":[{"name":"self"}],"output":{"name":"requestresult"}}],[11,"set_source","","set the source rectangle for cropping",153,{"inputs":[{"name":"self"},{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"f64"}],"output":{"name":"requestresult"}}],[11,"set_destination","","set the surface size for scaling",153,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":{"name":"requestresult"}}]],"paths":[[3,"Implementation"],[4,"Capability"],[4,"PresentMethod"],[4,"Error"],[3,"Implementation"],[3,"ZwpFullscreenShellV1"],[3,"ZwpFullscreenShellModeFeedbackV1"],[3,"ZwpIdleInhibitManagerV1"],[3,"ZwpIdleInhibitorV1"],[3,"Implementation"],[3,"Implementation"],[4,"Position"],[3,"ZwpInputMethodContextV1"],[3,"ZwpInputMethodV1"],[3,"ZwpInputPanelV1"],[3,"ZwpInputPanelSurfaceV1"],[4,"Error"],[3,"Implementation"],[3,"ZwpKeyboardShortcutsInhibitManagerV1"],[3,"ZwpKeyboardShortcutsInhibitorV1"],[3,"Implementation"],[3,"Implementation"],[4,"Error"],[4,"Flags"],[3,"ZwpLinuxDmabufV1"],[3,"ZwpLinuxBufferParamsV1"],[4,"Error"],[4,"Lifetime"],[3,"Implementation"],[3,"Implementation"],[3,"ZwpPointerConstraintsV1"],[3,"ZwpLockedPointerV1"],[3,"ZwpConfinedPointerV1"],[3,"Implementation"],[3,"Implementation"],[3,"ZwpPointerGesturesV1"],[3,"ZwpPointerGestureSwipeV1"],[3,"ZwpPointerGesturePinchV1"],[3,"Implementation"],[3,"ZwpRelativePointerManagerV1"],[3,"ZwpRelativePointerV1"],[3,"Implementation"],[3,"Implementation"],[4,"Type"],[4,"Capability"],[4,"ButtonState"],[4,"Error"],[3,"Implementation"],[3,"ZwpTabletManagerV1"],[3,"ZwpTabletSeatV1"],[3,"ZwpTabletToolV1"],[3,"ZwpTabletV1"],[3,"Implementation"],[3,"Implementation"],[4,"Type"],[4,"Capability"],[4,"ButtonState"],[4,"Error"],[3,"Implementation"],[3,"Implementation"],[4,"Source"],[3,"Implementation"],[4,"Source"],[3,"Implementation"],[3,"Implementation"],[4,"ButtonState"],[3,"ZwpTabletManagerV2"],[3,"ZwpTabletSeatV2"],[3,"ZwpTabletToolV2"],[3,"ZwpTabletV2"],[3,"ZwpTabletPadRingV2"],[3,"ZwpTabletPadStripV2"],[3,"ZwpTabletPadGroupV2"],[3,"ZwpTabletPadV2"],[3,"Implementation"],[4,"ContentHint"],[4,"ContentPurpose"],[4,"PreeditStyle"],[4,"TextDirection"],[3,"ZwpTextInputV1"],[3,"ZwpTextInputManagerV1"],[3,"Implementation"],[3,"Implementation"],[3,"ZxdgExporterV1"],[3,"ZxdgImporterV1"],[3,"ZxdgExportedV1"],[3,"ZxdgImportedV1"],[3,"Implementation"],[3,"Implementation"],[3,"ZxdgExporterV2"],[3,"ZxdgImporterV2"],[3,"ZxdgExportedV2"],[3,"ZxdgImportedV2"],[3,"Implementation"],[3,"ZxdgOutputManagerV1"],[3,"ZxdgOutputV1"],[3,"Implementation"],[4,"Version"],[4,"Error"],[3,"Implementation"],[4,"ResizeEdge"],[4,"State"],[3,"Implementation"],[3,"XdgShell"],[3,"XdgSurface"],[3,"XdgPopup"],[3,"Implementation"],[4,"Error"],[4,"Error"],[3,"Implementation"],[4,"Error"],[3,"Implementation"],[4,"ResizeEdge"],[4,"State"],[3,"Implementation"],[4,"Error"],[3,"ZxdgShellV6"],[3,"ZxdgPositionerV6"],[3,"Anchor"],[3,"Gravity"],[3,"ConstraintAdjustment"],[3,"ZxdgSurfaceV6"],[3,"ZxdgToplevelV6"],[3,"ZxdgPopupV6"],[3,"ZwpXwaylandKeyboardGrabManagerV1"],[3,"ZwpXwaylandKeyboardGrabV1"],[3,"Implementation"],[4,"Error"],[3,"Implementation"],[4,"Kind"],[3,"Implementation"],[4,"Error"],[4,"Error"],[4,"Anchor"],[4,"Gravity"],[3,"Implementation"],[4,"Error"],[3,"Implementation"],[4,"ResizeEdge"],[4,"State"],[3,"Implementation"],[4,"Error"],[4,"Error"],[4,"Error"],[3,"WpPresentation"],[3,"WpPresentationFeedback"],[3,"XdgWmBase"],[3,"XdgPositioner"],[3,"ConstraintAdjustment"],[3,"XdgSurface"],[3,"XdgToplevel"],[3,"XdgPopup"],[3,"WpViewporter"],[3,"WpViewport"]]};
searchIndex["wayland_sys"] = {"doc":"FFI bindings to the wayland system libraries.","items":[[0,"common","wayland_sys","Various types and functions that are used by both the client and the server libraries.",null,null],[3,"wl_message","wayland_sys::common","",null,null],[12,"name","","",0,null],[12,"signature","","",0,null],[12,"types","","",0,null],[3,"wl_interface","","",null,null],[12,"name","","",1,null],[12,"version","","",1,null],[12,"request_count","","",1,null],[12,"requests","","",1,null],[12,"event_count","","",1,null],[12,"events","","",1,null],[3,"wl_list","","",null,null],[12,"prev","","",2,null],[12,"next","","",2,null],[3,"wl_array","","",null,null],[12,"size","","",3,null],[12,"alloc","","",3,null],[12,"data","","",3,null],[3,"wl_argument","","",null,null],[5,"wl_fixed_to_double","","",null,{"inputs":[{"name":"wl_fixed_t"}],"output":{"name":"f64"}}],[5,"wl_fixed_from_double","","",null,{"inputs":[{"name":"f64"}],"output":{"name":"wl_fixed_t"}}],[5,"wl_fixed_to_int","","",null,{"inputs":[{"name":"wl_fixed_t"}],"output":{"name":"i32"}}],[5,"wl_fixed_from_int","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"wl_fixed_t"}}],[6,"wl_fixed_t","","",null,null],[6,"wl_dispatcher_func_t","","",null,null],[6,"wl_log_func_t","","",null,null],[0,"client","wayland_sys","Bindings to the client library `libwayland-client.so`",null,null],[3,"WaylandClient","wayland_sys::client","",null,null],[12,"wl_display_connect_to_fd","","",4,null],[12,"wl_display_connect","","",4,null],[12,"wl_display_disconnect","","",4,null],[12,"wl_display_get_fd","","",4,null],[12,"wl_display_roundtrip","","",4,null],[12,"wl_display_read_events","","",4,null],[12,"wl_display_prepare_read","","",4,null],[12,"wl_display_cancel_read","","",4,null],[12,"wl_display_dispatch","","",4,null],[12,"wl_display_dispatch_pending","","",4,null],[12,"wl_display_get_error","","",4,null],[12,"wl_display_get_protocol_error","","",4,null],[12,"wl_display_flush","","",4,null],[12,"wl_event_queue_destroy","","",4,null],[12,"wl_display_create_queue","","",4,null],[12,"wl_display_roundtrip_queue","","",4,null],[12,"wl_display_prepare_read_queue","","",4,null],[12,"wl_display_dispatch_queue","","",4,null],[12,"wl_display_dispatch_queue_pending","","",4,null],[12,"wl_proxy_create","","",4,null],[12,"wl_proxy_destroy","","",4,null],[12,"wl_proxy_add_listener","","",4,null],[12,"wl_proxy_get_listener","","",4,null],[12,"wl_proxy_add_dispatcher","","",4,null],[12,"wl_proxy_marshal_array_constructor","","",4,null],[12,"wl_proxy_marshal_array_constructor_versioned","","",4,null],[12,"wl_proxy_marshal_array","","",4,null],[12,"wl_proxy_set_user_data","","",4,null],[12,"wl_proxy_get_user_data","","",4,null],[12,"wl_proxy_get_id","","",4,null],[12,"wl_proxy_get_class","","",4,null],[12,"wl_proxy_set_queue","","",4,null],[12,"wl_proxy_get_version","","",4,null],[12,"wl_log_set_handler_client","","",4,null],[12,"wl_list_init","","",4,null],[12,"wl_list_insert","","",4,null],[12,"wl_list_remove","","",4,null],[12,"wl_list_length","","",4,null],[12,"wl_list_empty","","",4,null],[12,"wl_list_insert_list","","",4,null],[12,"wl_array_init","","",4,null],[12,"wl_array_release","","",4,null],[12,"wl_array_add","","",4,null],[12,"wl_array_copy","","",4,null],[12,"wl_proxy_marshal_constructor","","",4,null],[12,"wl_proxy_marshal_constructor_versioned","","",4,null],[12,"wl_proxy_marshal","","",4,null],[3,"WAYLAND_CLIENT_OPTION","","",null,null],[3,"WAYLAND_CLIENT_HANDLE","","",null,null],[4,"wl_proxy","","",null,null],[4,"wl_display","","",null,null],[4,"wl_event_queue","","",null,null],[5,"is_lib_available","","",null,{"inputs":[],"output":{"name":"bool"}}],[11,"open","","",4,{"inputs":[{"name":"str"}],"output":{"generics":["waylandclient","dlerror"],"name":"result"}}],[11,"deref","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"initialize","","",5,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",6,{"inputs":[{"name":"self"}],"output":{"name":"waylandclient"}}],[11,"initialize","","",6,{"inputs":[{"name":"self"}],"output":null}],[0,"egl","wayland_sys","Bindings to the EGL library `libwayland-egl.so`",null,null],[3,"WaylandEgl","wayland_sys::egl","",null,null],[12,"wl_egl_window_create","","",7,null],[12,"wl_egl_window_destroy","","",7,null],[12,"wl_egl_window_resize","","",7,null],[12,"wl_egl_window_get_attached_size","","",7,null],[3,"WAYLAND_EGL_OPTION","","",null,null],[3,"WAYLAND_EGL_HANDLE","","",null,null],[4,"wl_egl_window","","",null,null],[5,"is_lib_available","","",null,{"inputs":[],"output":{"name":"bool"}}],[11,"open","","",7,{"inputs":[{"name":"str"}],"output":{"generics":["waylandegl","dlerror"],"name":"result"}}],[11,"deref","","",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"initialize","","",8,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",9,{"inputs":[{"name":"self"}],"output":{"name":"waylandegl"}}],[11,"initialize","","",9,{"inputs":[{"name":"self"}],"output":null}],[0,"cursor","wayland_sys","Bindings to the `wayland-cursor.so` library",null,null],[3,"wl_cursor_image","wayland_sys::cursor","",null,null],[12,"width","","actual width",10,null],[12,"height","","actual height",10,null],[12,"hotspot_x","","hot spot x (must be inside image)",10,null],[12,"hotspot_y","","hot spot y (must be inside image)",10,null],[12,"delay","","animation delay to next frame",10,null],[3,"wl_cursor","","",null,null],[12,"image_count","","",11,null],[12,"images","","",11,null],[12,"name","","",11,null],[3,"WaylandCursor","","",null,null],[12,"wl_cursor_theme_load","","",12,null],[12,"wl_cursor_theme_destroy","","",12,null],[12,"wl_cursor_theme_get_cursor","","",12,null],[12,"wl_cursor_image_get_buffer","","",12,null],[12,"wl_cursor_frame","","",12,null],[12,"wl_cursor_frame_and_duration","","",12,null],[3,"WAYLAND_CURSOR_OPTION","","",null,null],[3,"WAYLAND_CURSOR_HANDLE","","",null,null],[4,"wl_cursor_theme","","",null,null],[5,"is_lib_available","","",null,{"inputs":[],"output":{"name":"bool"}}],[11,"open","","",12,{"inputs":[{"name":"str"}],"output":{"generics":["waylandcursor","dlerror"],"name":"result"}}],[11,"deref","","",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"initialize","","",13,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",14,{"inputs":[{"name":"self"}],"output":{"name":"waylandcursor"}}],[11,"initialize","","",14,{"inputs":[{"name":"self"}],"output":null}],[7,"RUST_MANAGED","wayland_sys","Magic pointer for wayland objects managed by wayland-client or wayland-server",null,null],[14,"ffi_dispatch","","",null,null]],"paths":[[3,"wl_message"],[3,"wl_interface"],[3,"wl_list"],[3,"wl_array"],[3,"WaylandClient"],[3,"WAYLAND_CLIENT_OPTION"],[3,"WAYLAND_CLIENT_HANDLE"],[3,"WaylandEgl"],[3,"WAYLAND_EGL_OPTION"],[3,"WAYLAND_EGL_HANDLE"],[3,"wl_cursor_image"],[3,"wl_cursor"],[3,"WaylandCursor"],[3,"WAYLAND_CURSOR_OPTION"],[3,"WAYLAND_CURSOR_HANDLE"]]};
searchIndex["wayland_window"] = {"doc":"Wayland Window, a minimalistic decoration-drawing library for wayland applications.","items":[[3,"Frame","wayland_window","A decorated frame for a window",null,null],[3,"FrameImplementation","","For handling events that occur to a Frame.",null,null],[12,"configure","","Called whenever the Frame has been resized.",0,null],[12,"close","","Called when the Frame is closed.",0,null],[12,"refresh","","Called when the Frame wants to be refreshed",0,null],[4,"State","","Possible requested state for a window",null,null],[13,"Regular","","Regular floating window",1,null],[13,"Minimized","","Minimized window",1,null],[13,"Maximized","","Maximized window",1,null],[13,"Fullscreen","","Fullscreen, with optional specification of an output to maximize over",1,null],[4,"Configure","","Configure data for a decorated surface handler.",null,null],[13,"Xdg","","Configure data from xdg_shell",2,null],[13,"Wl","","Configure data from wl_shell",2,null],[4,"Shell","","Enum over the supported shells",null,null],[13,"Xdg","","A xdg_shell from unstable v6",3,null],[13,"Wl","","A wl_shell",3,null],[5,"add_borders","","Adds the border dimensions to the given dimensions.",null,null],[5,"subtract_borders","","Subtracts the border dimensions from the given dimensions.",null,null],[5,"create_frame","","Create a decoration frame for a wl_surface",null,{"inputs":[{"name":"eventqueuehandle"},{"name":"frameimplementation"},{"name":"id"},{"name":"wlsurface"},{"name":"i32"},{"name":"i32"},{"name":"wlcompositor"},{"name":"wlsubcompositor"},{"name":"wlshm"},{"name":"shell"},{"generics":["wlseat"],"name":"option"}],"output":{"generics":["frame"],"name":"result"}}],[11,"refresh","","Refreshes the frame",4,{"inputs":[{"name":"self"}],"output":null}],[11,"set_title","","Set a short title for the window.",4,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"set_app_id","","Set an app id for the surface.",4,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"set_decorate","","Set wether the window should be decorated or not",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"resize","","Resize the decorations",4,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":null}],[11,"set_state","","Sets the requested state of this surface",4,{"inputs":[{"name":"self"},{"name":"state"}],"output":null}],[11,"set_min_size","","Sets the minimum possible size for this window",4,{"inputs":[{"name":"self"},{"name":"option"}],"output":null}],[11,"set_max_size","","Sets the maximum possible size for this window",4,{"inputs":[{"name":"self"},{"name":"option"}],"output":null}],[11,"drop","","",4,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"configure"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"frameimplementation"}}]],"paths":[[3,"FrameImplementation"],[4,"State"],[4,"Configure"],[4,"Shell"],[3,"Frame"]]};
searchIndex["winit"] = {"doc":"Winit allows you to build a window on as many platforms as possible.","items":[[3,"KeyboardInput","winit","Describes a keyboard input event.",null,null],[12,"scancode","","Identifies the physical key pressed",0,null],[12,"state","","",0,null],[12,"virtual_keycode","","Identifies the semantic meaning of the key",0,null],[12,"modifiers","","Modifier keys active at the time of this input.",0,null],[3,"Touch","","Represents touch event",null,null],[12,"device_id","","",1,null],[12,"phase","","",1,null],[12,"location","","",1,null],[12,"id","","unique identifier of a finger.",1,null],[3,"ModifiersState","","Represents the current state of the keyboard modifiers",null,null],[12,"shift","","The \"shift\" key",2,null],[12,"ctrl","","The \"control\" key",2,null],[12,"alt","","The \"alt\" key",2,null],[12,"logo","","The \"logo\" key",2,null],[3,"AvailableMonitorsIter","","An iterator for the list of available monitors.",null,null],[3,"MonitorId","","Identifier for a monitor.",null,null],[3,"Window","","Represents a window.",null,null],[3,"WindowId","","Identifier of a window. Unique for each window.",null,null],[3,"DeviceId","","Identifier of an input device.",null,null],[3,"EventsLoop","","Provides a way to retreive events from the system and from the windows that were registered to the events loop.",null,null],[3,"EventsLoopProxy","","Used to wake up the `EventsLoop` from another thread.",null,null],[3,"EventsLoopClosed","","The error that is returned when an `EventsLoopProxy` attempts to wake up an `EventsLoop` that no longer exists.",null,null],[3,"WindowBuilder","","Object that allows you to build windows.",null,null],[12,"window","","The attributes to use to create the window.",3,null],[3,"WindowAttributes","","Attributes to use when creating a window.",null,null],[12,"dimensions","","The dimensions of the window. If this is `None`, some platform-specific dimensions will be used.",4,null],[12,"min_dimensions","","The minimum dimensions a window can be, If this is `None`, the window will have no minimum dimensions (aside from reserved).",4,null],[12,"max_dimensions","","The maximum dimensions a window can be, If this is `None`, the maximum will have no maximum or will be set to the primary monitor's dimensions by the platform.",4,null],[12,"fullscreen","","Whether the window should be set as fullscreen upon creation.",4,null],[12,"title","","The title of the window in the title bar.",4,null],[12,"maximized","","Whether the window should be maximized upon creation.",4,null],[12,"visible","","Whether the window should be immediately visible upon creation.",4,null],[12,"transparent","","Whether the the window should be transparent. If this is true, writing colors with alpha values different than `1.0` will produce a transparent window.",4,null],[12,"decorations","","Whether the window should have borders and bars.",4,null],[12,"multitouch","","[iOS only] Enable multitouch, see multipleTouchEnabled",4,null],[4,"Event","","Describes a generic event.",null,null],[13,"WindowEvent","","",5,null],[12,"window_id","winit::Event","",5,null],[12,"event","","",5,null],[13,"DeviceEvent","winit","",5,null],[12,"device_id","winit::Event","",5,null],[12,"event","","",5,null],[13,"Awakened","winit","",5,null],[13,"Suspended","","The application has been suspended or resumed.",5,null],[4,"WindowEvent","","Describes an event from a `Window`.",null,null],[13,"Resized","","The size of the window has changed.",6,null],[13,"Moved","","The position of the window has changed.",6,null],[13,"Closed","","The window has been closed.",6,null],[13,"DroppedFile","","A file has been dropped into the window.",6,null],[13,"HoveredFile","","A file is being hovered over the window.",6,null],[13,"HoveredFileCancelled","","A file was hovered, but has exited the window.",6,null],[13,"ReceivedCharacter","","The window received a unicode character.",6,null],[13,"Focused","","The window gained or lost focus.",6,null],[13,"KeyboardInput","","An event from the keyboard has been received.",6,null],[12,"device_id","winit::WindowEvent","",6,null],[12,"input","","",6,null],[13,"CursorMoved","winit","The cursor has moved on the window.",6,null],[12,"device_id","winit::WindowEvent","",6,null],[12,"position","","(x,y) coords in pixels relative to the top-left corner of the window. Because the range of this data is limited by the display area and it may have been transformed by the OS to implement effects such as cursor acceleration, it should not be used to implement non-cursor-like interactions such as 3D camera control.",6,null],[12,"modifiers","","",6,null],[13,"CursorEntered","winit","The cursor has entered the window.",6,null],[12,"device_id","winit::WindowEvent","",6,null],[13,"CursorLeft","winit","The cursor has left the window.",6,null],[12,"device_id","winit::WindowEvent","",6,null],[13,"MouseWheel","winit","A mouse wheel movement or touchpad scroll occurred.",6,null],[12,"device_id","winit::WindowEvent","",6,null],[12,"delta","","",6,null],[12,"phase","","",6,null],[12,"modifiers","","",6,null],[13,"MouseInput","winit","An mouse button press has been received.",6,null],[12,"device_id","winit::WindowEvent","",6,null],[12,"state","","",6,null],[12,"button","","",6,null],[12,"modifiers","","",6,null],[13,"TouchpadPressure","winit","Touchpad pressure event.",6,null],[12,"device_id","winit::WindowEvent","",6,null],[12,"pressure","","",6,null],[12,"stage","","",6,null],[13,"AxisMotion","winit","Motion on some analog axis. May report data redundant to other, more specific events.",6,null],[12,"device_id","winit::WindowEvent","",6,null],[12,"axis","","",6,null],[12,"value","","",6,null],[13,"Refresh","winit","The window needs to be redrawn.",6,null],[13,"Touch","","Touch event has been received",6,null],[13,"HiDPIFactorChanged","","DPI scaling factor of the window has changed.",6,null],[4,"DeviceEvent","","Represents raw hardware events that are not associated with any particular window.",null,null],[13,"Added","","",7,null],[13,"Removed","","",7,null],[13,"MouseMotion","","Change in physical position of a pointing device.",7,null],[12,"delta","winit::DeviceEvent","(x, y) change in position in unspecified units.",7,null],[13,"MouseWheel","winit","Physical scroll event",7,null],[12,"delta","winit::DeviceEvent","",7,null],[13,"Motion","winit","Motion on some analog axis.  This event will be reported for all arbitrary input devices that winit supports on this platform, including mouse devices.  If the device is a mouse device then this will be reported alongside the MouseMotion event.",7,null],[12,"axis","winit::DeviceEvent","",7,null],[12,"value","","",7,null],[13,"Button","winit","",7,null],[12,"button","winit::DeviceEvent","",7,null],[12,"state","","",7,null],[13,"Key","winit","",7,null],[13,"Text","","",7,null],[12,"codepoint","winit::DeviceEvent","",7,null],[4,"TouchPhase","winit","Describes touch-screen input state.",null,null],[13,"Started","","",8,null],[13,"Moved","","",8,null],[13,"Ended","","",8,null],[13,"Cancelled","","",8,null],[4,"ElementState","","Describes the input state of a key.",null,null],[13,"Pressed","","",9,null],[13,"Released","","",9,null],[4,"MouseButton","","Describes a button of a mouse controller.",null,null],[13,"Left","","",10,null],[13,"Right","","",10,null],[13,"Middle","","",10,null],[13,"Other","","",10,null],[4,"MouseScrollDelta","","Describes a difference in the mouse scroll wheel state.",null,null],[13,"LineDelta","","Amount in lines or rows to scroll in the horizontal and vertical directions.",11,null],[13,"PixelDelta","","Amount in pixels to scroll in the horizontal and vertical direction.",11,null],[4,"VirtualKeyCode","","Symbolic name for a keyboard key.",null,null],[13,"Key1","","The '1' key over the letters.",12,null],[13,"Key2","","The '2' key over the letters.",12,null],[13,"Key3","","The '3' key over the letters.",12,null],[13,"Key4","","The '4' key over the letters.",12,null],[13,"Key5","","The '5' key over the letters.",12,null],[13,"Key6","","The '6' key over the letters.",12,null],[13,"Key7","","The '7' key over the letters.",12,null],[13,"Key8","","The '8' key over the letters.",12,null],[13,"Key9","","The '9' key over the letters.",12,null],[13,"Key0","","The '0' key over the 'O' and 'P' keys.",12,null],[13,"A","","",12,null],[13,"B","","",12,null],[13,"C","","",12,null],[13,"D","","",12,null],[13,"E","","",12,null],[13,"F","","",12,null],[13,"G","","",12,null],[13,"H","","",12,null],[13,"I","","",12,null],[13,"J","","",12,null],[13,"K","","",12,null],[13,"L","","",12,null],[13,"M","","",12,null],[13,"N","","",12,null],[13,"O","","",12,null],[13,"P","","",12,null],[13,"Q","","",12,null],[13,"R","","",12,null],[13,"S","","",12,null],[13,"T","","",12,null],[13,"U","","",12,null],[13,"V","","",12,null],[13,"W","","",12,null],[13,"X","","",12,null],[13,"Y","","",12,null],[13,"Z","","",12,null],[13,"Escape","","The Escape key, next to F1.",12,null],[13,"F1","","",12,null],[13,"F2","","",12,null],[13,"F3","","",12,null],[13,"F4","","",12,null],[13,"F5","","",12,null],[13,"F6","","",12,null],[13,"F7","","",12,null],[13,"F8","","",12,null],[13,"F9","","",12,null],[13,"F10","","",12,null],[13,"F11","","",12,null],[13,"F12","","",12,null],[13,"F13","","",12,null],[13,"F14","","",12,null],[13,"F15","","",12,null],[13,"Snapshot","","Print Screen/SysRq.",12,null],[13,"Scroll","","Scroll Lock.",12,null],[13,"Pause","","Pause/Break key, next to Scroll lock.",12,null],[13,"Insert","","`Insert`, next to Backspace.",12,null],[13,"Home","","",12,null],[13,"Delete","","",12,null],[13,"End","","",12,null],[13,"PageDown","","",12,null],[13,"PageUp","","",12,null],[13,"Left","","",12,null],[13,"Up","","",12,null],[13,"Right","","",12,null],[13,"Down","","",12,null],[13,"Back","","The Backspace key, right over Enter.",12,null],[13,"Return","","The Enter key.",12,null],[13,"Space","","The space bar.",12,null],[13,"Compose","","The \"Compose\" key on Linux.",12,null],[13,"Numlock","","",12,null],[13,"Numpad0","","",12,null],[13,"Numpad1","","",12,null],[13,"Numpad2","","",12,null],[13,"Numpad3","","",12,null],[13,"Numpad4","","",12,null],[13,"Numpad5","","",12,null],[13,"Numpad6","","",12,null],[13,"Numpad7","","",12,null],[13,"Numpad8","","",12,null],[13,"Numpad9","","",12,null],[13,"AbntC1","","",12,null],[13,"AbntC2","","",12,null],[13,"Add","","",12,null],[13,"Apostrophe","","",12,null],[13,"Apps","","",12,null],[13,"At","","",12,null],[13,"Ax","","",12,null],[13,"Backslash","","",12,null],[13,"Calculator","","",12,null],[13,"Capital","","",12,null],[13,"Colon","","",12,null],[13,"Comma","","",12,null],[13,"Convert","","",12,null],[13,"Decimal","","",12,null],[13,"Divide","","",12,null],[13,"Equals","","",12,null],[13,"Grave","","",12,null],[13,"Kana","","",12,null],[13,"Kanji","","",12,null],[13,"LAlt","","",12,null],[13,"LBracket","","",12,null],[13,"LControl","","",12,null],[13,"LMenu","","",12,null],[13,"LShift","","",12,null],[13,"LWin","","",12,null],[13,"Mail","","",12,null],[13,"MediaSelect","","",12,null],[13,"MediaStop","","",12,null],[13,"Minus","","",12,null],[13,"Multiply","","",12,null],[13,"Mute","","",12,null],[13,"MyComputer","","",12,null],[13,"NavigateForward","","",12,null],[13,"NavigateBackward","","",12,null],[13,"NextTrack","","",12,null],[13,"NoConvert","","",12,null],[13,"NumpadComma","","",12,null],[13,"NumpadEnter","","",12,null],[13,"NumpadEquals","","",12,null],[13,"OEM102","","",12,null],[13,"Period","","",12,null],[13,"PlayPause","","",12,null],[13,"Power","","",12,null],[13,"PrevTrack","","",12,null],[13,"RAlt","","",12,null],[13,"RBracket","","",12,null],[13,"RControl","","",12,null],[13,"RMenu","","",12,null],[13,"RShift","","",12,null],[13,"RWin","","",12,null],[13,"Semicolon","","",12,null],[13,"Slash","","",12,null],[13,"Sleep","","",12,null],[13,"Stop","","",12,null],[13,"Subtract","","",12,null],[13,"Sysrq","","",12,null],[13,"Tab","","",12,null],[13,"Underline","","",12,null],[13,"Unlabeled","","",12,null],[13,"VolumeDown","","",12,null],[13,"VolumeUp","","",12,null],[13,"Wake","","",12,null],[13,"WebBack","","",12,null],[13,"WebFavorites","","",12,null],[13,"WebForward","","",12,null],[13,"WebHome","","",12,null],[13,"WebRefresh","","",12,null],[13,"WebSearch","","",12,null],[13,"WebStop","","",12,null],[13,"Yen","","",12,null],[4,"ControlFlow","","Returned by the user callback given to the `EventsLoop::run_forever` method.",null,null],[13,"Continue","","Continue looping and waiting for events.",13,null],[13,"Break","","Break from the event loop.",13,null],[4,"CreationError","","Error that can happen while creating a window or a headless renderer.",null,null],[13,"OsError","","",14,null],[13,"NotSupported","","TODO: remove this error",14,null],[4,"MouseCursor","","Describes the appearance of the mouse cursor.",null,null],[13,"Default","","The platform-dependent default cursor.",15,null],[13,"Crosshair","","A simple crosshair.",15,null],[13,"Hand","","A hand (often used to indicate links in web browsers).",15,null],[13,"Arrow","","Self explanatory.",15,null],[13,"Move","","Indicates something is to be moved.",15,null],[13,"Text","","Indicates text that may be selected or edited.",15,null],[13,"Wait","","Program busy indicator.",15,null],[13,"Help","","Help indicator (often rendered as a \"?\")",15,null],[13,"Progress","","Progress indicator. Shows that processing is being done. But in contrast with \"Wait\" the user may still interact with the program. Often rendered as a spinning beach ball, or an arrow with a watch or hourglass.",15,null],[13,"NotAllowed","","Cursor showing that something cannot be done.",15,null],[13,"ContextMenu","","",15,null],[13,"NoneCursor","","",15,null],[13,"Cell","","",15,null],[13,"VerticalText","","",15,null],[13,"Alias","","",15,null],[13,"Copy","","",15,null],[13,"NoDrop","","",15,null],[13,"Grab","","",15,null],[13,"Grabbing","","",15,null],[13,"AllScroll","","",15,null],[13,"ZoomIn","","",15,null],[13,"ZoomOut","","",15,null],[13,"EResize","","Indicate that some edge is to be moved. For example, the 'SeResize' cursor is used when the movement starts from the south-east corner of the box.",15,null],[13,"NResize","","",15,null],[13,"NeResize","","",15,null],[13,"NwResize","","",15,null],[13,"SResize","","",15,null],[13,"SeResize","","",15,null],[13,"SwResize","","",15,null],[13,"WResize","","",15,null],[13,"EwResize","","",15,null],[13,"NsResize","","",15,null],[13,"NeswResize","","",15,null],[13,"NwseResize","","",15,null],[13,"ColResize","","",15,null],[13,"RowResize","","",15,null],[4,"CursorState","","Describes how winit handles the cursor.",null,null],[13,"Normal","","Normal cursor behavior.",16,null],[13,"Hide","","The cursor will be invisible when over the window.",16,null],[13,"Grab","","Grabs the mouse cursor. The cursor's motion will be confined to this window and the window has exclusive access to further events regarding the cursor.",16,null],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"windowevent"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"deviceevent"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"keyboardinput"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",8,null],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"touchphase"}],"output":{"name":"bool"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"touchphase"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"touch"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",9,null],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"elementstate"}],"output":{"name":"bool"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"elementstate"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",10,null],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"mousebutton"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"mousebutton"}],"output":{"name":"bool"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"mousebutton"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"mousescrolldelta"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"mousescrolldelta"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"mousescrolldelta"}],"output":{"name":"bool"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",12,null],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"virtualkeycode"}],"output":{"name":"bool"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"virtualkeycode"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"modifiersstate"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"modifiersstate"}}],[11,"new","","Initializes a new `WindowBuilder` with default values.",3,{"inputs":[],"output":{"name":"windowbuilder"}}],[11,"with_dimensions","","Requests the window to be of specific dimensions.",3,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":{"name":"windowbuilder"}}],[11,"with_min_dimensions","","Sets a minimum dimension size for the window",3,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":{"name":"windowbuilder"}}],[11,"with_max_dimensions","","Sets a maximum dimension size for the window",3,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":{"name":"windowbuilder"}}],[11,"with_title","","Requests a specific title for the window.",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"windowbuilder"}}],[11,"with_fullscreen","","Sets the window fullscreen state. None means a normal window, Some(MonitorId) means a fullscreen window on that specific monitor",3,{"inputs":[{"name":"self"},{"generics":["monitorid"],"name":"option"}],"output":{"name":"windowbuilder"}}],[11,"with_maximized","","Requests maximized mode.",3,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"windowbuilder"}}],[11,"with_visibility","","Sets whether the window will be initially hidden or visible.",3,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"windowbuilder"}}],[11,"with_transparency","","Sets whether the background of the window should be transparent.",3,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"windowbuilder"}}],[11,"with_decorations","","Sets whether the window should have a border, a title bar, etc.",3,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"windowbuilder"}}],[11,"with_multitouch","","Enables multitouch.",3,{"inputs":[{"name":"self"}],"output":{"name":"windowbuilder"}}],[11,"build","","Builds the window.",3,{"inputs":[{"name":"self"},{"name":"eventsloop"}],"output":{"generics":["window","creationerror"],"name":"result"}}],[11,"new","","Creates a new Window for platforms where this is appropriate.",17,{"inputs":[{"name":"eventsloop"}],"output":{"generics":["window","creationerror"],"name":"result"}}],[11,"set_title","","Modifies the title of the window.",17,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"show","","Shows the window if it was hidden.",17,{"inputs":[{"name":"self"}],"output":null}],[11,"hide","","Hides the window if it was visible.",17,{"inputs":[{"name":"self"}],"output":null}],[11,"get_position","","Returns the position of the top-left hand corner of the window relative to the  top-left hand corner of the desktop.",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"set_position","","Modifies the position of the window.",17,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":null}],[11,"get_inner_size","","Returns the size in pixels of the client area of the window.",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_inner_size_points","","Returns the size in points of the client area of the window.",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_inner_size_pixels","","Returns the size in pixels of the client area of the window.",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_outer_size","","Returns the size in pixels of the window.",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"set_inner_size","","Modifies the inner size of the window.",17,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":null}],[11,"platform_display","","DEPRECATED. Gets the native platform specific display for this window. This is typically only required when integrating with other libraries that need this information.",17,null],[11,"platform_window","","DEPRECATED. Gets the native platform specific window handle. This is typically only required when integrating with other libraries that need this information.",17,null],[11,"set_cursor","","Modifies the mouse cursor of the window. Has no effect on Android.",17,{"inputs":[{"name":"self"},{"name":"mousecursor"}],"output":null}],[11,"hidpi_factor","","Returns the ratio between the backing framebuffer resolution and the window size in screen pixels. This is typically one for a normal display and two for a retina display.",17,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"set_cursor_position","","Changes the position of the cursor in window coordinates.",17,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":{"name":"result"}}],[11,"set_cursor_state","","Sets how winit handles the cursor. See the documentation of `CursorState` for details.",17,{"inputs":[{"name":"self"},{"name":"cursorstate"}],"output":{"generics":["string"],"name":"result"}}],[11,"set_maximized","","Sets the window to maximized or back",17,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"set_fullscreen","","Sets the window to fullscreen or back",17,{"inputs":[{"name":"self"},{"generics":["monitorid"],"name":"option"}],"output":null}],[11,"set_decorations","","Turn window decorations on or off.",17,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_current_monitor","","Returns the current monitor the window is on or the primary monitor is nothing matches",17,{"inputs":[{"name":"self"}],"output":{"name":"monitorid"}}],[11,"id","","",17,{"inputs":[{"name":"self"}],"output":{"name":"windowid"}}],[11,"next","","",18,{"inputs":[{"name":"self"}],"output":{"generics":["monitorid"],"name":"option"}}],[11,"size_hint","","",18,null],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"monitorid"}}],[11,"get_name","","Returns a human-readable name of the monitor.",19,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[11,"get_dimensions","","Returns the number of pixels currently displayed on the monitor.",19,null],[11,"get_position","","Returns the top-left corner position of the monitor relative to the larger full screen area.",19,null],[11,"get_hidpi_factor","","Returns the ratio between the monitor's physical pixels and logical pixels.",19,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[0,"os","","Contains traits with platform-specific methods in them.",null,null],[0,"unix","winit::os","",null,null],[4,"XNotSupported","winit::os::unix","Error returned if this system doesn't have XLib or can't create an X connection.",null,null],[13,"LibraryOpenError","","Failed to load one or several shared libraries.",20,null],[13,"XOpenDisplayFailed","","Connecting to the X server with `XOpenDisplay` failed.",20,null],[8,"EventsLoopExt","","Additional methods on `EventsLoop` that are specific to Linux.",null,null],[10,"new_x11","","Builds a new `EventsLoop` that is forced to use X11.",21,{"inputs":[],"output":{"generics":["xnotsupported"],"name":"result"}}],[10,"new_wayland","","Builds a new `EventsLoop` that is forced to use Wayland.",21,{"inputs":[],"output":{"name":"self"}}],[10,"is_wayland","","True if the `EventsLoop` uses Wayland.",21,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_x11","","True if the `EventsLoop` uses X11.",21,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"WindowExt","","Additional methods on `Window` that are specific to Unix.",null,null],[10,"get_xlib_window","","Returns the ID of the `Window` xlib object that is used by this window.",22,{"inputs":[{"name":"self"}],"output":{"generics":["c_ulong"],"name":"option"}}],[10,"get_xlib_display","","Returns a pointer to the `Display` object of xlib that is used by this window.",22,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"get_xlib_screen_id","","",22,{"inputs":[{"name":"self"}],"output":{"generics":["c_int"],"name":"option"}}],[10,"get_xlib_xconnection","","",22,{"inputs":[{"name":"self"}],"output":{"generics":["arc"],"name":"option"}}],[10,"send_xim_spot","","",22,{"inputs":[{"name":"self"},{"name":"i16"},{"name":"i16"}],"output":null}],[10,"get_xcb_connection","","This function returns the underlying `xcb_connection_t` of an xlib `Display`.",22,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"get_wayland_surface","","Returns a pointer to the `wl_surface` object of wayland that is used by this window.",22,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"get_wayland_display","","Returns a pointer to the `wl_display` object of wayland that is used by this window.",22,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"is_ready","","Check if the window is ready for drawing",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"WindowBuilderExt","","Additional methods on `WindowBuilder` that are specific to Unix.",null,null],[10,"with_x11_visual","","",23,null],[10,"with_x11_screen","","",23,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"windowbuilder"}}],[8,"MonitorIdExt","","Additional methods on `MonitorId` that are specific to Linux.",null,null],[10,"native_id","","Returns the inner identifier of the monitor.",24,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"new_x11","winit","",25,{"inputs":[],"output":{"generics":["xnotsupported"],"name":"result"}}],[11,"new_wayland","","",25,{"inputs":[],"output":{"name":"self"}}],[11,"is_wayland","","",25,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_x11","","",25,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_xlib_xconnection","","",25,{"inputs":[{"name":"self"}],"output":{"generics":["arc"],"name":"option"}}],[11,"get_xlib_window","","",17,{"inputs":[{"name":"self"}],"output":{"generics":["c_ulong"],"name":"option"}}],[11,"get_xlib_display","","",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_xlib_screen_id","","",17,{"inputs":[{"name":"self"}],"output":{"generics":["c_int"],"name":"option"}}],[11,"get_xlib_xconnection","","",17,{"inputs":[{"name":"self"}],"output":{"generics":["arc"],"name":"option"}}],[11,"get_xcb_connection","","",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"send_xim_spot","","",17,{"inputs":[{"name":"self"},{"name":"i16"},{"name":"i16"}],"output":null}],[11,"get_wayland_surface","","",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_wayland_display","","",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_ready","","",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"with_x11_visual","","",3,null],[11,"with_x11_screen","","",3,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"windowbuilder"}}],[11,"native_id","","",19,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[6,"ScanCode","","Hardware-dependent keyboard scan code.",null,null],[6,"AxisId","","Identifier for a specific analog axis on some device.",null,null],[6,"ButtonId","","Identifier for a specific button on some device.",null,null],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"windowid"}}],[11,"eq","","",26,{"inputs":[{"name":"self"},{"name":"windowid"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"self"},{"name":"windowid"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",26,{"inputs":[{"name":"self"},{"name":"windowid"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",26,{"inputs":[{"name":"self"},{"name":"windowid"}],"output":{"name":"bool"}}],[11,"le","","",26,{"inputs":[{"name":"self"},{"name":"windowid"}],"output":{"name":"bool"}}],[11,"gt","","",26,{"inputs":[{"name":"self"},{"name":"windowid"}],"output":{"name":"bool"}}],[11,"ge","","",26,{"inputs":[{"name":"self"},{"name":"windowid"}],"output":{"name":"bool"}}],[11,"cmp","","",26,{"inputs":[{"name":"self"},{"name":"windowid"}],"output":{"name":"ordering"}}],[11,"hash","","",26,null],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"deviceid"}}],[11,"eq","","",27,{"inputs":[{"name":"self"},{"name":"deviceid"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"self"},{"name":"deviceid"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",27,{"inputs":[{"name":"self"},{"name":"deviceid"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",27,{"inputs":[{"name":"self"},{"name":"deviceid"}],"output":{"name":"bool"}}],[11,"le","","",27,{"inputs":[{"name":"self"},{"name":"deviceid"}],"output":{"name":"bool"}}],[11,"gt","","",27,{"inputs":[{"name":"self"},{"name":"deviceid"}],"output":{"name":"bool"}}],[11,"ge","","",27,{"inputs":[{"name":"self"},{"name":"deviceid"}],"output":{"name":"bool"}}],[11,"cmp","","",27,{"inputs":[{"name":"self"},{"name":"deviceid"}],"output":{"name":"ordering"}}],[11,"hash","","",27,null],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"controlflow"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"controlflow"}],"output":{"name":"bool"}}],[11,"new","","Builds a new events loop.",25,{"inputs":[],"output":{"name":"eventsloop"}}],[11,"get_available_monitors","","Returns the list of all the monitors available on the system.",25,{"inputs":[{"name":"self"}],"output":{"name":"availablemonitorsiter"}}],[11,"get_primary_monitor","","Returns the primary monitor of the system.",25,{"inputs":[{"name":"self"}],"output":{"name":"monitorid"}}],[11,"poll_events","","Fetches all the events that are pending, calls the callback function for each of them, and returns.",25,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"run_forever","","Calls `callback` every time an event is received. If no event is available, sleeps the current thread and waits for an event. If the callback returns `ControlFlow::Break` then `run_forever` will immediately return.",25,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"create_proxy","","Creates an `EventsLoopProxy` that can be used to wake up the `EventsLoop` from another thread.",25,{"inputs":[{"name":"self"}],"output":{"name":"eventsloopproxy"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"eventsloopproxy"}}],[11,"wakeup","","Wake up the `EventsLoop` from which this proxy was created.",28,{"inputs":[{"name":"self"}],"output":{"generics":["eventsloopclosed"],"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"eventsloopclosed"}}],[11,"eq","","",29,{"inputs":[{"name":"self"},{"name":"eventsloopclosed"}],"output":{"name":"bool"}}],[11,"hash","","",29,null],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",29,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"windowbuilder"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"creationerror"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"description","","",14,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"mousecursor"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"mousecursor"}],"output":{"name":"bool"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"cursorstate"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"cursorstate"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"windowattributes"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"windowattributes"}}],[11,"clone","winit::os::unix","",20,{"inputs":[{"name":"self"}],"output":{"name":"xnotsupported"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",20,{"inputs":[{"name":"openerror"}],"output":{"name":"xnotsupported"}}],[11,"description","","",20,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",20,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}]],"paths":[[3,"KeyboardInput"],[3,"Touch"],[3,"ModifiersState"],[3,"WindowBuilder"],[3,"WindowAttributes"],[4,"Event"],[4,"WindowEvent"],[4,"DeviceEvent"],[4,"TouchPhase"],[4,"ElementState"],[4,"MouseButton"],[4,"MouseScrollDelta"],[4,"VirtualKeyCode"],[4,"ControlFlow"],[4,"CreationError"],[4,"MouseCursor"],[4,"CursorState"],[3,"Window"],[3,"AvailableMonitorsIter"],[3,"MonitorId"],[4,"XNotSupported"],[8,"EventsLoopExt"],[8,"WindowExt"],[8,"WindowBuilderExt"],[8,"MonitorIdExt"],[3,"EventsLoop"],[3,"WindowId"],[3,"DeviceId"],[3,"EventsLoopProxy"],[3,"EventsLoopClosed"]]};
searchIndex["x11_dl"] = {"doc":"","items":[[0,"error","x11_dl","",null,null],[3,"OpenError","x11_dl::error","",null,null],[4,"OpenErrorKind","","",null,null],[13,"Library","","",0,null],[13,"Symbol","","",0,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"openerror"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"detail","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"kind","","",1,{"inputs":[{"name":"self"}],"output":{"name":"openerrorkind"}}],[11,"new","","",1,{"inputs":[{"name":"openerrorkind"},{"name":"string"}],"output":{"name":"openerror"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"openerrorkind"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",0,null],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"openerrorkind"}],"output":{"name":"bool"}}],[11,"as_str","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[0,"xlib","x11_dl","",null,null],[3,"Xlib","x11_dl::xlib","",null,null],[12,"XActivateScreenSaver","","",2,null],[12,"XAddConnectionWatch","","",2,null],[12,"XAddExtension","","",2,null],[12,"XAddHost","","",2,null],[12,"XAddHosts","","",2,null],[12,"XAddPixel","","",2,null],[12,"XAddToExtensionList","","",2,null],[12,"XAddToSaveSet","","",2,null],[12,"XAllocClassHint","","",2,null],[12,"XAllocColor","","",2,null],[12,"XAllocColorCells","","",2,null],[12,"XAllocColorPlanes","","",2,null],[12,"XAllocIconSize","","",2,null],[12,"XAllocNamedColor","","",2,null],[12,"XAllocSizeHints","","",2,null],[12,"XAllocStandardColormap","","",2,null],[12,"XAllocWMHints","","",2,null],[12,"XAllowEvents","","",2,null],[12,"XAllPlanes","","",2,null],[12,"XAutoRepeatOff","","",2,null],[12,"XAutoRepeatOn","","",2,null],[12,"XBaseFontNameListOfFontSet","","",2,null],[12,"XBell","","",2,null],[12,"XBitmapBitOrder","","",2,null],[12,"XBitmapPad","","",2,null],[12,"XBitmapUnit","","",2,null],[12,"XBlackPixel","","",2,null],[12,"XBlackPixelOfScreen","","",2,null],[12,"XCellsOfScreen","","",2,null],[12,"XChangeActivePointerGrab","","",2,null],[12,"XChangeGC","","",2,null],[12,"XChangeKeyboardControl","","",2,null],[12,"XChangeKeyboardMapping","","",2,null],[12,"XChangePointerControl","","",2,null],[12,"XChangeProperty","","",2,null],[12,"XChangeSaveSet","","",2,null],[12,"XChangeWindowAttributes","","",2,null],[12,"XCheckIfEvent","","",2,null],[12,"XCheckMaskEvent","","",2,null],[12,"XCheckTypedEvent","","",2,null],[12,"XCheckTypedWindowEvent","","",2,null],[12,"XCheckWindowEvent","","",2,null],[12,"XCirculateSubwindows","","",2,null],[12,"XCirculateSubwindowsDown","","",2,null],[12,"XCirculateSubwindowsUp","","",2,null],[12,"XClearArea","","",2,null],[12,"XClearWindow","","",2,null],[12,"XClipBox","","",2,null],[12,"XCloseDisplay","","",2,null],[12,"XCloseIM","","",2,null],[12,"XCloseOM","","",2,null],[12,"XcmsAddColorSpace","","",2,null],[12,"XcmsAddFunctionSet","","",2,null],[12,"XcmsAllocColor","","",2,null],[12,"XcmsAllocNamedColor","","",2,null],[12,"XcmsCCCOfColormap","","",2,null],[12,"XcmsCIELabClipab","","",2,null],[12,"XcmsCIELabClipL","","",2,null],[12,"XcmsCIELabClipLab","","",2,null],[12,"XcmsCIELabQueryMaxC","","",2,null],[12,"XcmsCIELabQueryMaxL","","",2,null],[12,"XcmsCIELabQueryMaxLC","","",2,null],[12,"XcmsCIELabQueryMinL","","",2,null],[12,"XcmsCIELabToCIEXYZ","","",2,null],[12,"XcmsCIELabWhiteShiftColors","","",2,null],[12,"XcmsCIELuvClipL","","",2,null],[12,"XcmsCIELuvClipLuv","","",2,null],[12,"XcmsCIELuvClipuv","","",2,null],[12,"XcmsCIELuvQueryMaxC","","",2,null],[12,"XcmsCIELuvQueryMaxL","","",2,null],[12,"XcmsCIELuvQueryMaxLC","","",2,null],[12,"XcmsCIELuvQueryMinL","","",2,null],[12,"XcmsCIELuvToCIEuvY","","",2,null],[12,"XcmsCIELuvWhiteShiftColors","","",2,null],[12,"XcmsCIEuvYToCIELuv","","",2,null],[12,"XcmsCIEuvYToCIEXYZ","","",2,null],[12,"XcmsCIEuvYToTekHVC","","",2,null],[12,"XcmsCIExyYToCIEXYZ","","",2,null],[12,"XcmsCIEXYZToCIELab","","",2,null],[12,"XcmsCIEXYZToCIEuvY","","",2,null],[12,"XcmsCIEXYZToCIExyY","","",2,null],[12,"XcmsCIEXYZToRGBi","","",2,null],[12,"XcmsClientWhitePointOfCCC","","",2,null],[12,"XcmsConvertColors","","",2,null],[12,"XcmsCreateCCC","","",2,null],[12,"XcmsDefaultCCC","","",2,null],[12,"XcmsDisplayOfCCC","","",2,null],[12,"XcmsFormatOfPrefix","","",2,null],[12,"XcmsFreeCCC","","",2,null],[12,"XcmsLookupColor","","",2,null],[12,"XcmsPrefixOfFormat","","",2,null],[12,"XcmsQueryBlack","","",2,null],[12,"XcmsQueryBlue","","",2,null],[12,"XcmsQueryColor","","",2,null],[12,"XcmsQueryColors","","",2,null],[12,"XcmsQueryGreen","","",2,null],[12,"XcmsQueryRed","","",2,null],[12,"XcmsQueryWhite","","",2,null],[12,"XcmsRGBiToCIEXYZ","","",2,null],[12,"XcmsRGBiToRGB","","",2,null],[12,"XcmsRGBToRGBi","","",2,null],[12,"XcmsScreenNumberOfCCC","","",2,null],[12,"XcmsScreenWhitePointOfCCC","","",2,null],[12,"XcmsSetCCCOfColormap","","",2,null],[12,"XcmsSetCompressionProc","","",2,null],[12,"XcmsSetWhiteAdjustProc","","",2,null],[12,"XcmsSetWhitePoint","","",2,null],[12,"XcmsStoreColor","","",2,null],[12,"XcmsStoreColors","","",2,null],[12,"XcmsTekHVCClipC","","",2,null],[12,"XcmsTekHVCClipV","","",2,null],[12,"XcmsTekHVCClipVC","","",2,null],[12,"XcmsTekHVCQueryMaxC","","",2,null],[12,"XcmsTekHVCQueryMaxV","","",2,null],[12,"XcmsTekHVCQueryMaxVC","","",2,null],[12,"XcmsTekHVCQueryMaxVSamples","","",2,null],[12,"XcmsTekHVCQueryMinV","","",2,null],[12,"XcmsTekHVCToCIEuvY","","",2,null],[12,"XcmsTekHVCWhiteShiftColors","","",2,null],[12,"XcmsVisualOfCCC","","",2,null],[12,"XConfigureWindow","","",2,null],[12,"XConnectionNumber","","",2,null],[12,"XContextDependentDrawing","","",2,null],[12,"XContextualDrawing","","",2,null],[12,"XConvertCase","","",2,null],[12,"XConvertSelection","","",2,null],[12,"XCopyArea","","",2,null],[12,"XCopyColormapAndFree","","",2,null],[12,"XCopyGC","","",2,null],[12,"XCopyPlane","","",2,null],[12,"XCreateBitmapFromData","","",2,null],[12,"XCreateColormap","","",2,null],[12,"XCreateFontCursor","","",2,null],[12,"XCreateFontSet","","",2,null],[12,"XCreateGC","","",2,null],[12,"XCreateGlyphCursor","","",2,null],[12,"XCreateImage","","",2,null],[12,"XCreatePixmap","","",2,null],[12,"XCreatePixmapCursor","","",2,null],[12,"XCreatePixmapFromBitmapData","","",2,null],[12,"XCreateRegion","","",2,null],[12,"XCreateSimpleWindow","","",2,null],[12,"XCreateWindow","","",2,null],[12,"XDefaultColormap","","",2,null],[12,"XDefaultColormapOfScreen","","",2,null],[12,"XDefaultDepth","","",2,null],[12,"XDefaultDepthOfScreen","","",2,null],[12,"XDefaultGC","","",2,null],[12,"XDefaultGCOfScreen","","",2,null],[12,"XDefaultRootWindow","","",2,null],[12,"XDefaultScreen","","",2,null],[12,"XDefaultScreenOfDisplay","","",2,null],[12,"XDefaultString","","",2,null],[12,"XDefaultVisual","","",2,null],[12,"XDefaultVisualOfScreen","","",2,null],[12,"XDefineCursor","","",2,null],[12,"XDeleteContext","","",2,null],[12,"XDeleteModifiermapEntry","","",2,null],[12,"XDeleteProperty","","",2,null],[12,"XDestroyIC","","",2,null],[12,"XDestroyImage","","",2,null],[12,"XDestroyOC","","",2,null],[12,"XDestroyRegion","","",2,null],[12,"XDestroySubwindows","","",2,null],[12,"XDestroyWindow","","",2,null],[12,"XDirectionalDependentDrawing","","",2,null],[12,"XDisableAccessControl","","",2,null],[12,"XDisplayCells","","",2,null],[12,"XDisplayHeight","","",2,null],[12,"XDisplayHeightMM","","",2,null],[12,"XDisplayKeycodes","","",2,null],[12,"XDisplayMotionBufferSize","","",2,null],[12,"XDisplayName","","",2,null],[12,"XDisplayOfIM","","",2,null],[12,"XDisplayOfOM","","",2,null],[12,"XDisplayOfScreen","","",2,null],[12,"XDisplayPlanes","","",2,null],[12,"XDisplayString","","",2,null],[12,"XDisplayWidth","","",2,null],[12,"XDisplayWidthMM","","",2,null],[12,"XDoesBackingStore","","",2,null],[12,"XDoesSaveUnders","","",2,null],[12,"XDrawArc","","",2,null],[12,"XDrawArcs","","",2,null],[12,"XDrawImageString","","",2,null],[12,"XDrawImageString16","","",2,null],[12,"XDrawLine","","",2,null],[12,"XDrawLines","","",2,null],[12,"XDrawPoint","","",2,null],[12,"XDrawPoints","","",2,null],[12,"XDrawRectangle","","",2,null],[12,"XDrawRectangles","","",2,null],[12,"XDrawSegments","","",2,null],[12,"XDrawString","","",2,null],[12,"XDrawString16","","",2,null],[12,"XDrawText","","",2,null],[12,"XDrawText16","","",2,null],[12,"XEHeadOfExtensionList","","",2,null],[12,"XEmptyRegion","","",2,null],[12,"XEnableAccessControl","","",2,null],[12,"XEqualRegion","","",2,null],[12,"XESetBeforeFlush","","",2,null],[12,"XESetCloseDisplay","","",2,null],[12,"XESetCopyEventCookie","","",2,null],[12,"XESetCopyGC","","",2,null],[12,"XESetCreateFont","","",2,null],[12,"XESetCreateGC","","",2,null],[12,"XESetError","","",2,null],[12,"XESetErrorString","","",2,null],[12,"XESetEventToWire","","",2,null],[12,"XESetFlushGC","","",2,null],[12,"XESetFreeFont","","",2,null],[12,"XESetFreeGC","","",2,null],[12,"XESetPrintErrorValues","","",2,null],[12,"XESetWireToError","","",2,null],[12,"XESetWireToEvent","","",2,null],[12,"XESetWireToEventCookie","","",2,null],[12,"XEventMaskOfScreen","","",2,null],[12,"XEventsQueued","","",2,null],[12,"XExtendedMaxRequestSize","","",2,null],[12,"XExtentsOfFontSet","","",2,null],[12,"XFetchBuffer","","",2,null],[12,"XFetchBytes","","",2,null],[12,"XFetchName","","",2,null],[12,"XFillArc","","",2,null],[12,"XFillArcs","","",2,null],[12,"XFillPolygon","","",2,null],[12,"XFillRectangle","","",2,null],[12,"XFillRectangles","","",2,null],[12,"XFilterEvent","","",2,null],[12,"XFindContext","","",2,null],[12,"XFindOnExtensionList","","",2,null],[12,"XFlush","","",2,null],[12,"XFlushGC","","",2,null],[12,"XFontsOfFontSet","","",2,null],[12,"XForceScreenSaver","","",2,null],[12,"XFree","","",2,null],[12,"XFreeColormap","","",2,null],[12,"XFreeColors","","",2,null],[12,"XFreeCursor","","",2,null],[12,"XFreeEventData","","",2,null],[12,"XFreeExtensionList","","",2,null],[12,"XFreeFont","","",2,null],[12,"XFreeFontInfo","","",2,null],[12,"XFreeFontNames","","",2,null],[12,"XFreeFontPath","","",2,null],[12,"XFreeFontSet","","",2,null],[12,"XFreeGC","","",2,null],[12,"XFreeModifiermap","","",2,null],[12,"XFreePixmap","","",2,null],[12,"XFreeStringList","","",2,null],[12,"XGContextFromGC","","",2,null],[12,"XGeometry","","",2,null],[12,"XGetAtomName","","",2,null],[12,"XGetAtomNames","","",2,null],[12,"XGetClassHint","","",2,null],[12,"XGetCommand","","",2,null],[12,"XGetDefault","","",2,null],[12,"XGetErrorDatabaseText","","",2,null],[12,"XGetErrorText","","",2,null],[12,"XGetEventData","","",2,null],[12,"XGetFontPath","","",2,null],[12,"XGetFontProperty","","",2,null],[12,"XGetGCValues","","",2,null],[12,"XGetGeometry","","",2,null],[12,"XGetIconName","","",2,null],[12,"XGetIconSizes","","",2,null],[12,"XGetImage","","",2,null],[12,"XGetInputFocus","","",2,null],[12,"XGetKeyboardControl","","",2,null],[12,"XGetKeyboardMapping","","",2,null],[12,"XGetModifierMapping","","",2,null],[12,"XGetMotionEvents","","",2,null],[12,"XGetNormalHints","","",2,null],[12,"XGetPixel","","",2,null],[12,"XGetPointerControl","","",2,null],[12,"XGetPointerMapping","","",2,null],[12,"XGetRGBColormaps","","",2,null],[12,"XGetScreenSaver","","",2,null],[12,"XGetSelectionOwner","","",2,null],[12,"XGetSizeHints","","",2,null],[12,"XGetStandardColormap","","",2,null],[12,"XGetSubImage","","",2,null],[12,"XGetTextProperty","","",2,null],[12,"XGetTransientForHint","","",2,null],[12,"XGetVisualInfo","","",2,null],[12,"XGetWindowAttributes","","",2,null],[12,"XGetWindowProperty","","",2,null],[12,"XGetWMClientMachine","","",2,null],[12,"XGetWMColormapWindows","","",2,null],[12,"XGetWMHints","","",2,null],[12,"XGetWMIconName","","",2,null],[12,"XGetWMName","","",2,null],[12,"XGetWMNormalHints","","",2,null],[12,"XGetWMProtocols","","",2,null],[12,"XGetWMSizeHints","","",2,null],[12,"XGetZoomHints","","",2,null],[12,"XGrabButton","","",2,null],[12,"XGrabKey","","",2,null],[12,"XGrabKeyboard","","",2,null],[12,"XGrabPointer","","",2,null],[12,"XGrabServer","","",2,null],[12,"XHeightMMOfScreen","","",2,null],[12,"XHeightOfScreen","","",2,null],[12,"XIconifyWindow","","",2,null],[12,"XIfEvent","","",2,null],[12,"XImageByteOrder","","",2,null],[12,"XIMOfIC","","",2,null],[12,"XInitExtension","","",2,null],[12,"XInitImage","","",2,null],[12,"XInitThreads","","",2,null],[12,"XInsertModifiermapEntry","","",2,null],[12,"XInstallColormap","","",2,null],[12,"XInternalConnectionNumbers","","",2,null],[12,"XInternAtom","","",2,null],[12,"XInternAtoms","","",2,null],[12,"XIntersectRegion","","",2,null],[12,"XkbAddDeviceLedInfo","","",2,null],[12,"XkbAddGeomColor","","",2,null],[12,"XkbAddGeomDoodad","","",2,null],[12,"XkbAddGeomKey","","",2,null],[12,"XkbAddGeomKeyAlias","","",2,null],[12,"XkbAddGeomOutline","","",2,null],[12,"XkbAddGeomOverlay","","",2,null],[12,"XkbAddGeomOverlayKey","","",2,null],[12,"XkbAddGeomOverlayRow","","",2,null],[12,"XkbAddGeomProperty","","",2,null],[12,"XkbAddGeomRow","","",2,null],[12,"XkbAddGeomSection","","",2,null],[12,"XkbAddGeomShape","","",2,null],[12,"XkbAddKeyType","","",2,null],[12,"XkbAllocClientMap","","",2,null],[12,"XkbAllocCompatMap","","",2,null],[12,"XkbAllocControls","","",2,null],[12,"XkbAllocDeviceInfo","","",2,null],[12,"XkbAllocGeomColors","","",2,null],[12,"XkbAllocGeomDoodads","","",2,null],[12,"XkbAllocGeometry","","",2,null],[12,"XkbAllocGeomKeyAliases","","",2,null],[12,"XkbAllocGeomKeys","","",2,null],[12,"XkbAllocGeomOutlines","","",2,null],[12,"XkbAllocGeomOverlayKeys","","",2,null],[12,"XkbAllocGeomOverlayRows","","",2,null],[12,"XkbAllocGeomOverlays","","",2,null],[12,"XkbAllocGeomPoints","","",2,null],[12,"XkbAllocGeomProps","","",2,null],[12,"XkbAllocGeomRows","","",2,null],[12,"XkbAllocGeomSectionDoodads","","",2,null],[12,"XkbAllocGeomSections","","",2,null],[12,"XkbAllocGeomShapes","","",2,null],[12,"XkbAllocIndicatorMaps","","",2,null],[12,"XkbAllocKeyboard","","",2,null],[12,"XkbAllocNames","","",2,null],[12,"XkbAllocServerMap","","",2,null],[12,"XkbApplyCompatMapToKey","","",2,null],[12,"XkbApplyVirtualModChanges","","",2,null],[12,"XkbBell","","",2,null],[12,"XkbBellEvent","","",2,null],[12,"XkbChangeDeviceInfo","","",2,null],[12,"XkbChangeEnabledControls","","",2,null],[12,"XkbChangeKeycodeRange","","",2,null],[12,"XkbChangeMap","","",2,null],[12,"XkbChangeNames","","",2,null],[12,"XkbChangeTypesOfKey","","",2,null],[12,"XkbComputeEffectiveMap","","",2,null],[12,"XkbComputeRowBounds","","",2,null],[12,"XkbComputeSectionBounds","","",2,null],[12,"XkbComputeShapeBounds","","",2,null],[12,"XkbComputeShapeTop","","",2,null],[12,"XkbCopyKeyType","","",2,null],[12,"XkbCopyKeyTypes","","",2,null],[12,"XkbDeviceBell","","",2,null],[12,"XkbDeviceBellEvent","","",2,null],[12,"XkbFindOverlayForKey","","",2,null],[12,"XkbForceBell","","",2,null],[12,"XkbForceDeviceBell","","",2,null],[12,"XkbFreeClientMap","","",2,null],[12,"XkbFreeCompatMap","","",2,null],[12,"XkbFreeComponentList","","",2,null],[12,"XkbFreeControls","","",2,null],[12,"XkbFreeDeviceInfo","","",2,null],[12,"XkbFreeGeomColors","","",2,null],[12,"XkbFreeGeomDoodads","","",2,null],[12,"XkbFreeGeometry","","",2,null],[12,"XkbFreeGeomKeyAliases","","",2,null],[12,"XkbFreeGeomKeys","","",2,null],[12,"XkbFreeGeomOutlines","","",2,null],[12,"XkbFreeGeomOverlayKeys","","",2,null],[12,"XkbFreeGeomOverlayRows","","",2,null],[12,"XkbFreeGeomOverlays","","",2,null],[12,"XkbFreeGeomPoints","","",2,null],[12,"XkbFreeGeomProperties","","",2,null],[12,"XkbFreeGeomRows","","",2,null],[12,"XkbFreeGeomSections","","",2,null],[12,"XkbFreeGeomShapes","","",2,null],[12,"XkbFreeIndicatorMaps","","",2,null],[12,"XkbFreeKeyboard","","",2,null],[12,"XkbFreeNames","","",2,null],[12,"XkbFreeServerMap","","",2,null],[12,"XkbGetAutoRepeatRate","","",2,null],[12,"XkbGetAutoResetControls","","",2,null],[12,"XkbGetCompatMap","","",2,null],[12,"XkbGetControls","","",2,null],[12,"XkbGetDetectableAutoRepeat","","",2,null],[12,"XkbGetDeviceButtonActions","","",2,null],[12,"XkbGetDeviceInfo","","",2,null],[12,"XkbGetDeviceInfoChanges","","",2,null],[12,"XkbGetDeviceLedInfo","","",2,null],[12,"XkbGetGeometry","","",2,null],[12,"XkbGetIndicatorMap","","",2,null],[12,"XkbGetIndicatorState","","",2,null],[12,"XkbGetKeyActions","","",2,null],[12,"XkbGetKeyBehaviors","","",2,null],[12,"XkbGetKeyboard","","",2,null],[12,"XkbGetKeyboardByName","","",2,null],[12,"XkbGetKeyExplicitComponents","","",2,null],[12,"XkbGetKeyModifierMap","","",2,null],[12,"XkbGetKeySyms","","",2,null],[12,"XkbGetKeyTypes","","",2,null],[12,"XkbGetKeyVirtualModMap","","",2,null],[12,"XkbGetMap","","",2,null],[12,"XkbGetMapChanges","","",2,null],[12,"XkbGetNamedDeviceIndicator","","",2,null],[12,"XkbGetNamedGeometry","","",2,null],[12,"XkbGetNamedIndicator","","",2,null],[12,"XkbGetNames","","",2,null],[12,"XkbGetPerClientControls","","",2,null],[12,"XkbGetState","","",2,null],[12,"XkbGetUpdatedMap","","",2,null],[12,"XkbGetVirtualMods","","",2,null],[12,"XkbGetXlibControls","","",2,null],[12,"XkbIgnoreExtension","","",2,null],[12,"XkbInitCanonicalKeyTypes","","",2,null],[12,"XkbKeycodeToKeysym","","",2,null],[12,"XkbKeysymToModifiers","","",2,null],[12,"XkbKeyTypesForCoreSymbols","","",2,null],[12,"XkbLatchGroup","","",2,null],[12,"XkbLatchModifiers","","",2,null],[12,"XkbLibraryVersion","","",2,null],[12,"XkbListComponents","","",2,null],[12,"XkbLockGroup","","",2,null],[12,"XkbLockModifiers","","",2,null],[12,"XkbLookupKeyBinding","","",2,null],[12,"XkbLookupKeySym","","",2,null],[12,"XkbNoteControlsChanges","","",2,null],[12,"XkbNoteDeviceChanges","","",2,null],[12,"XkbNoteMapChanges","","",2,null],[12,"XkbNoteNameChanges","","",2,null],[12,"XkbOpenDisplay","","",2,null],[12,"XkbQueryExtension","","",2,null],[12,"XkbRefreshKeyboardMapping","","",2,null],[12,"XkbResizeDeviceButtonActions","","",2,null],[12,"XkbResizeKeyActions","","",2,null],[12,"XkbResizeKeySyms","","",2,null],[12,"XkbResizeKeyType","","",2,null],[12,"XkbSelectEventDetails","","",2,null],[12,"XkbSelectEvents","","",2,null],[12,"XkbSetAtomFuncs","","",2,null],[12,"XkbSetAutoRepeatRate","","",2,null],[12,"XkbSetAutoResetControls","","",2,null],[12,"XkbSetCompatMap","","",2,null],[12,"XkbSetControls","","",2,null],[12,"XkbSetDebuggingFlags","","",2,null],[12,"XkbSetDetectableAutoRepeat","","",2,null],[12,"XkbSetDeviceButtonActions","","",2,null],[12,"XkbSetDeviceInfo","","",2,null],[12,"XkbSetDeviceLedInfo","","",2,null],[12,"XkbSetGeometry","","",2,null],[12,"XkbSetIgnoreLockMods","","",2,null],[12,"XkbSetIndicatorMap","","",2,null],[12,"XkbSetMap","","",2,null],[12,"XkbSetNamedDeviceIndicator","","",2,null],[12,"XkbSetNamedIndicator","","",2,null],[12,"XkbSetNames","","",2,null],[12,"XkbSetPerClientControls","","",2,null],[12,"XkbSetServerInternalMods","","",2,null],[12,"XkbSetXlibControls","","",2,null],[12,"XkbToControl","","",2,null],[12,"XkbTranslateKeyCode","","",2,null],[12,"XkbTranslateKeySym","","",2,null],[12,"XkbUpdateActionVirtualMods","","",2,null],[12,"XkbUpdateKeyTypeVirtualMods","","",2,null],[12,"XkbUpdateMapFromCore","","",2,null],[12,"XkbUseExtension","","",2,null],[12,"XkbVirtualModsToReal","","",2,null],[12,"XkbXlibControlsImplemented","","",2,null],[12,"XKeycodeToKeysym","","",2,null],[12,"XKeysymToKeycode","","",2,null],[12,"XKeysymToString","","",2,null],[12,"XKillClient","","",2,null],[12,"XLastKnownRequestProcessed","","",2,null],[12,"XListDepths","","",2,null],[12,"XListExtensions","","",2,null],[12,"XListFonts","","",2,null],[12,"XListFontsWithInfo","","",2,null],[12,"XListHosts","","",2,null],[12,"XListInstalledColormaps","","",2,null],[12,"XListPixmapFormats","","",2,null],[12,"XListProperties","","",2,null],[12,"XLoadFont","","",2,null],[12,"XLoadQueryFont","","",2,null],[12,"XLocaleOfFontSet","","",2,null],[12,"XLocaleOfIM","","",2,null],[12,"XLocaleOfOM","","",2,null],[12,"XLockDisplay","","",2,null],[12,"XLookupColor","","",2,null],[12,"XLookupKeysym","","",2,null],[12,"XLookupString","","",2,null],[12,"XLowerWindow","","",2,null],[12,"XMapRaised","","",2,null],[12,"XMapSubwindows","","",2,null],[12,"XMapWindow","","",2,null],[12,"XMaskEvent","","",2,null],[12,"XMatchVisualInfo","","",2,null],[12,"XMaxCmapsOfScreen","","",2,null],[12,"XMaxRequestSize","","",2,null],[12,"XmbDrawImageString","","",2,null],[12,"XmbDrawString","","",2,null],[12,"XmbDrawText","","",2,null],[12,"XmbLookupString","","",2,null],[12,"XmbResetIC","","",2,null],[12,"XmbSetWMProperties","","",2,null],[12,"XmbTextEscapement","","",2,null],[12,"XmbTextExtents","","",2,null],[12,"XmbTextListToTextProperty","","",2,null],[12,"XmbTextPerCharExtents","","",2,null],[12,"XmbTextPropertyToTextList","","",2,null],[12,"XMinCmapsOfScreen","","",2,null],[12,"XMoveResizeWindow","","",2,null],[12,"XMoveWindow","","",2,null],[12,"XNewModifiermap","","",2,null],[12,"XNextEvent","","",2,null],[12,"XNextRequest","","",2,null],[12,"XNoOp","","",2,null],[12,"XOffsetRegion","","",2,null],[12,"XOMOfOC","","",2,null],[12,"XOpenDisplay","","",2,null],[12,"XOpenIM","","",2,null],[12,"XOpenOM","","",2,null],[12,"XParseColor","","",2,null],[12,"XParseGeometry","","",2,null],[12,"XPeekEvent","","",2,null],[12,"XPeekIfEvent","","",2,null],[12,"XPending","","",2,null],[12,"Xpermalloc","","",2,null],[12,"XPlanesOfScreen","","",2,null],[12,"XPointInRegion","","",2,null],[12,"XPolygonRegion","","",2,null],[12,"XProcessInternalConnection","","",2,null],[12,"XProtocolRevision","","",2,null],[12,"XProtocolVersion","","",2,null],[12,"XPutBackEvent","","",2,null],[12,"XPutImage","","",2,null],[12,"XPutPixel","","",2,null],[12,"XQLength","","",2,null],[12,"XQueryBestCursor","","",2,null],[12,"XQueryBestSize","","",2,null],[12,"XQueryBestStipple","","",2,null],[12,"XQueryBestTile","","",2,null],[12,"XQueryColor","","",2,null],[12,"XQueryColors","","",2,null],[12,"XQueryExtension","","",2,null],[12,"XQueryFont","","",2,null],[12,"XQueryKeymap","","",2,null],[12,"XQueryPointer","","",2,null],[12,"XQueryTextExtents","","",2,null],[12,"XQueryTextExtents16","","",2,null],[12,"XQueryTree","","",2,null],[12,"XRaiseWindow","","",2,null],[12,"XReadBitmapFile","","",2,null],[12,"XReadBitmapFileData","","",2,null],[12,"XRebindKeysym","","",2,null],[12,"XRecolorCursor","","",2,null],[12,"XReconfigureWMWindow","","",2,null],[12,"XRectInRegion","","",2,null],[12,"XRefreshKeyboardMapping","","",2,null],[12,"XRegisterIMInstantiateCallback","","",2,null],[12,"XRemoveConnectionWatch","","",2,null],[12,"XRemoveFromSaveSet","","",2,null],[12,"XRemoveHost","","",2,null],[12,"XRemoveHosts","","",2,null],[12,"XReparentWindow","","",2,null],[12,"XResetScreenSaver","","",2,null],[12,"XResizeWindow","","",2,null],[12,"XResourceManagerString","","",2,null],[12,"XRestackWindows","","",2,null],[12,"XrmCombineDatabase","","",2,null],[12,"XrmCombineFileDatabase","","",2,null],[12,"XrmDestroyDatabase","","",2,null],[12,"XrmEnumerateDatabase","","",2,null],[12,"XrmGetDatabase","","",2,null],[12,"XrmGetFileDatabase","","",2,null],[12,"XrmGetResource","","",2,null],[12,"XrmGetStringDatabase","","",2,null],[12,"XrmInitialize","","",2,null],[12,"XrmLocaleOfDatabase","","",2,null],[12,"XrmMergeDatabases","","",2,null],[12,"XrmParseCommand","","",2,null],[12,"XrmPermStringToQuark","","",2,null],[12,"XrmPutFileDatabase","","",2,null],[12,"XrmPutLineResource","","",2,null],[12,"XrmPutResource","","",2,null],[12,"XrmPutStringResource","","",2,null],[12,"XrmQGetResource","","",2,null],[12,"XrmQGetSearchList","","",2,null],[12,"XrmQGetSearchResource","","",2,null],[12,"XrmQPutResource","","",2,null],[12,"XrmQPutStringResource","","",2,null],[12,"XrmQuarkToString","","",2,null],[12,"XrmSetDatabase","","",2,null],[12,"XrmStringToBindingQuarkList","","",2,null],[12,"XrmStringToQuark","","",2,null],[12,"XrmStringToQuarkList","","",2,null],[12,"XrmUniqueQuark","","",2,null],[12,"XRootWindow","","",2,null],[12,"XRootWindowOfScreen","","",2,null],[12,"XRotateBuffers","","",2,null],[12,"XRotateWindowProperties","","",2,null],[12,"XSaveContext","","",2,null],[12,"XScreenCount","","",2,null],[12,"XScreenNumberOfScreen","","",2,null],[12,"XScreenOfDisplay","","",2,null],[12,"XScreenResourceString","","",2,null],[12,"XSelectInput","","",2,null],[12,"XSendEvent","","",2,null],[12,"XServerVendor","","",2,null],[12,"XSetAccessControl","","",2,null],[12,"XSetAfterFunction","","",2,null],[12,"XSetArcMode","","",2,null],[12,"XSetAuthorization","","",2,null],[12,"XSetBackground","","",2,null],[12,"XSetClassHint","","",2,null],[12,"XSetClipMask","","",2,null],[12,"XSetClipOrigin","","",2,null],[12,"XSetClipRectangles","","",2,null],[12,"XSetCloseDownMode","","",2,null],[12,"XSetCommand","","",2,null],[12,"XSetDashes","","",2,null],[12,"XSetErrorHandler","","",2,null],[12,"XSetFillRule","","",2,null],[12,"XSetFillStyle","","",2,null],[12,"XSetFont","","",2,null],[12,"XSetFontPath","","",2,null],[12,"XSetForeground","","",2,null],[12,"XSetFunction","","",2,null],[12,"XSetGraphicsExposures","","",2,null],[12,"XSetICFocus","","",2,null],[12,"XSetIconName","","",2,null],[12,"XSetIconSizes","","",2,null],[12,"XSetInputFocus","","",2,null],[12,"XSetIOErrorHandler","","",2,null],[12,"XSetLineAttributes","","",2,null],[12,"XSetLocaleModifiers","","",2,null],[12,"XSetModifierMapping","","",2,null],[12,"XSetNormalHints","","",2,null],[12,"XSetPlaneMask","","",2,null],[12,"XSetPointerMapping","","",2,null],[12,"XSetRegion","","",2,null],[12,"XSetRGBColormaps","","",2,null],[12,"XSetScreenSaver","","",2,null],[12,"XSetSelectionOwner","","",2,null],[12,"XSetSizeHints","","",2,null],[12,"XSetStandardColormap","","",2,null],[12,"XSetStandardProperties","","",2,null],[12,"XSetState","","",2,null],[12,"XSetStipple","","",2,null],[12,"XSetSubwindowMode","","",2,null],[12,"XSetTextProperty","","",2,null],[12,"XSetTile","","",2,null],[12,"XSetTransientForHint","","",2,null],[12,"XSetTSOrigin","","",2,null],[12,"XSetWindowBackground","","",2,null],[12,"XSetWindowBackgroundPixmap","","",2,null],[12,"XSetWindowBorder","","",2,null],[12,"XSetWindowBorderPixmap","","",2,null],[12,"XSetWindowBorderWidth","","",2,null],[12,"XSetWindowColormap","","",2,null],[12,"XSetWMClientMachine","","",2,null],[12,"XSetWMColormapWindows","","",2,null],[12,"XSetWMHints","","",2,null],[12,"XSetWMIconName","","",2,null],[12,"XSetWMName","","",2,null],[12,"XSetWMNormalHints","","",2,null],[12,"XSetWMProperties","","",2,null],[12,"XSetWMProtocols","","",2,null],[12,"XSetWMSizeHints","","",2,null],[12,"XSetZoomHints","","",2,null],[12,"XShrinkRegion","","",2,null],[12,"XStoreBuffer","","",2,null],[12,"XStoreBytes","","",2,null],[12,"XStoreColor","","",2,null],[12,"XStoreColors","","",2,null],[12,"XStoreName","","",2,null],[12,"XStoreNamedColor","","",2,null],[12,"XStringListToTextProperty","","",2,null],[12,"XStringToKeysym","","",2,null],[12,"XSubImage","","",2,null],[12,"XSubtractRegion","","",2,null],[12,"XSupportsLocale","","",2,null],[12,"XSync","","",2,null],[12,"XSynchronize","","",2,null],[12,"XTextExtents","","",2,null],[12,"XTextExtents16","","",2,null],[12,"XTextPropertyToStringList","","",2,null],[12,"XTextWidth","","",2,null],[12,"XTextWidth16","","",2,null],[12,"XTranslateCoordinates","","",2,null],[12,"XUndefineCursor","","",2,null],[12,"XUngrabButton","","",2,null],[12,"XUngrabKey","","",2,null],[12,"XUngrabKeyboard","","",2,null],[12,"XUngrabPointer","","",2,null],[12,"XUngrabServer","","",2,null],[12,"XUninstallColormap","","",2,null],[12,"XUnionRectWithRegion","","",2,null],[12,"XUnionRegion","","",2,null],[12,"XUnloadFont","","",2,null],[12,"XUnlockDisplay","","",2,null],[12,"XUnmapSubwindows","","",2,null],[12,"XUnmapWindow","","",2,null],[12,"XUnregisterIMInstantiateCallback","","",2,null],[12,"XUnsetICFocus","","",2,null],[12,"Xutf8DrawImageString","","",2,null],[12,"Xutf8DrawString","","",2,null],[12,"Xutf8DrawText","","",2,null],[12,"Xutf8LookupString","","",2,null],[12,"Xutf8ResetIC","","",2,null],[12,"Xutf8SetWMProperties","","",2,null],[12,"Xutf8TextEscapement","","",2,null],[12,"Xutf8TextExtents","","",2,null],[12,"Xutf8TextListToTextProperty","","",2,null],[12,"Xutf8TextPerCharExtents","","",2,null],[12,"Xutf8TextPropertyToTextList","","",2,null],[12,"XVendorRelease","","",2,null],[12,"XVisualIDFromVisual","","",2,null],[12,"XWarpPointer","","",2,null],[12,"XwcDrawImageString","","",2,null],[12,"XwcDrawString","","",2,null],[12,"XwcDrawText","","",2,null],[12,"XwcFreeStringList","","",2,null],[12,"XwcLookupString","","",2,null],[12,"XwcResetIC","","",2,null],[12,"XwcTextEscapement","","",2,null],[12,"XwcTextExtents","","",2,null],[12,"XwcTextListToTextProperty","","",2,null],[12,"XwcTextPerCharExtents","","",2,null],[12,"XwcTextPropertyToTextList","","",2,null],[12,"XWhitePixel","","",2,null],[12,"XWhitePixelOfScreen","","",2,null],[12,"XWidthMMOfScreen","","",2,null],[12,"XWidthOfScreen","","",2,null],[12,"XWindowEvent","","",2,null],[12,"XWithdrawWindow","","",2,null],[12,"XWMGeometry","","",2,null],[12,"XWriteBitmapFile","","",2,null],[12,"XXorRegion","","",2,null],[12,"XCreateIC","","",2,null],[12,"XCreateOC","","",2,null],[12,"XGetICValues","","",2,null],[12,"XGetIMValues","","",2,null],[12,"XGetOCValues","","",2,null],[12,"XGetOMValues","","",2,null],[12,"XSetICValues","","",2,null],[12,"XSetIMValues","","",2,null],[12,"XSetOCValues","","",2,null],[12,"XSetOMValues","","",2,null],[12,"XVaCreateNestedList","","",2,null],[3,"_XcmsCCC","","",null,null],[3,"XcmsColor","","",null,null],[3,"_XcmsColorSpace","","",null,null],[3,"_XcmsFunctionSet","","",null,null],[3,"_XkbAction","","",null,null],[3,"_XkbBounds","","",null,null],[3,"_XkbChanges","","",null,null],[3,"_XkbClientMapRec","","",null,null],[3,"_XkbColor","","",null,null],[3,"_XkbComponentList","","",null,null],[3,"_XkbComponentNames","","",null,null],[3,"_XkbControls","","",null,null],[3,"_XkbControlsChanges","","",null,null],[3,"_XkbControlsNotify","","",null,null],[3,"_XkbDeviceChanges","","",null,null],[3,"_XkbDeviceInfo","","",null,null],[3,"_XkbDeviceLedInfo","","",null,null],[3,"_XkbDoodad","","",null,null],[3,"_XkbExtensionDeviceNotify","","",null,null],[3,"_XkbGeometry","","",null,null],[3,"_XkbGeometrySizes","","",null,null],[3,"_XkbIndicatorMapRec","","",null,null],[3,"_XkbKey","","",null,null],[3,"_XkbKeyType","","",null,null],[3,"_XkbMapChanges","","",null,null],[3,"_XkbMods","","",null,null],[3,"_XkbNameChanges","","",null,null],[3,"_XkbNamesNotify","","",null,null],[3,"_XkbOutline","","",null,null],[3,"_XkbOverlay","","",null,null],[3,"_XkbOverlayKey","","",null,null],[3,"_XkbOverlayRow","","",null,null],[3,"_XkbProperty","","",null,null],[3,"_XkbRow","","",null,null],[3,"_XkbSection","","",null,null],[3,"_XkbServerMapRec","","",null,null],[3,"_XkbShape","","",null,null],[3,"_XkbStateRec","","",null,null],[3,"_XkbSymInterpretRec","","",null,null],[3,"XAnyEvent","","",null,null],[12,"type_","","",3,null],[12,"serial","","",3,null],[12,"send_event","","",3,null],[12,"display","","",3,null],[12,"window","","",3,null],[3,"XButtonEvent","","",null,null],[12,"type_","","",4,null],[12,"serial","","",4,null],[12,"send_event","","",4,null],[12,"display","","",4,null],[12,"window","","",4,null],[12,"root","","",4,null],[12,"subwindow","","",4,null],[12,"time","","",4,null],[12,"x","","",4,null],[12,"y","","",4,null],[12,"x_root","","",4,null],[12,"y_root","","",4,null],[12,"state","","",4,null],[12,"button","","",4,null],[12,"same_screen","","",4,null],[3,"XCirculateEvent","","",null,null],[12,"type_","","",5,null],[12,"serial","","",5,null],[12,"send_event","","",5,null],[12,"display","","",5,null],[12,"event","","",5,null],[12,"window","","",5,null],[12,"place","","",5,null],[3,"XCirculateRequestEvent","","",null,null],[12,"type_","","",6,null],[12,"serial","","",6,null],[12,"send_event","","",6,null],[12,"display","","",6,null],[12,"parent","","",6,null],[12,"window","","",6,null],[12,"place","","",6,null],[3,"XClientMessageEvent","","",null,null],[12,"type_","","",7,null],[12,"serial","","",7,null],[12,"send_event","","",7,null],[12,"display","","",7,null],[12,"window","","",7,null],[12,"message_type","","",7,null],[12,"format","","",7,null],[12,"data","","",7,null],[3,"XColormapEvent","","",null,null],[12,"type_","","",8,null],[12,"serial","","",8,null],[12,"send_event","","",8,null],[12,"display","","",8,null],[12,"window","","",8,null],[12,"colormap","","",8,null],[12,"new","","",8,null],[12,"state","","",8,null],[3,"XConfigureEvent","","",null,null],[12,"type_","","",9,null],[12,"serial","","",9,null],[12,"send_event","","",9,null],[12,"display","","",9,null],[12,"event","","",9,null],[12,"window","","",9,null],[12,"x","","",9,null],[12,"y","","",9,null],[12,"width","","",9,null],[12,"height","","",9,null],[12,"border_width","","",9,null],[12,"above","","",9,null],[12,"override_redirect","","",9,null],[3,"XConfigureRequestEvent","","",null,null],[12,"type_","","",10,null],[12,"serial","","",10,null],[12,"send_event","","",10,null],[12,"display","","",10,null],[12,"parent","","",10,null],[12,"window","","",10,null],[12,"x","","",10,null],[12,"y","","",10,null],[12,"width","","",10,null],[12,"height","","",10,null],[12,"border_width","","",10,null],[12,"above","","",10,null],[12,"detail","","",10,null],[12,"value_mask","","",10,null],[3,"XCreateWindowEvent","","",null,null],[12,"type_","","",11,null],[12,"serial","","",11,null],[12,"send_event","","",11,null],[12,"display","","",11,null],[12,"parent","","",11,null],[12,"window","","",11,null],[12,"x","","",11,null],[12,"y","","",11,null],[12,"width","","",11,null],[12,"height","","",11,null],[12,"border_width","","",11,null],[12,"override_redirect","","",11,null],[3,"XCrossingEvent","","",null,null],[12,"type_","","",12,null],[12,"serial","","",12,null],[12,"send_event","","",12,null],[12,"display","","",12,null],[12,"window","","",12,null],[12,"root","","",12,null],[12,"subwindow","","",12,null],[12,"time","","",12,null],[12,"x","","",12,null],[12,"y","","",12,null],[12,"x_root","","",12,null],[12,"y_root","","",12,null],[12,"mode","","",12,null],[12,"detail","","",12,null],[12,"same_screen","","",12,null],[12,"focus","","",12,null],[12,"state","","",12,null],[3,"XDestroyWindowEvent","","",null,null],[12,"type_","","",13,null],[12,"serial","","",13,null],[12,"send_event","","",13,null],[12,"display","","",13,null],[12,"event","","",13,null],[12,"window","","",13,null],[3,"XErrorEvent","","",null,null],[12,"type_","","",14,null],[12,"display","","",14,null],[12,"resourceid","","",14,null],[12,"serial","","",14,null],[12,"error_code","","",14,null],[12,"request_code","","",14,null],[12,"minor_code","","",14,null],[3,"XExposeEvent","","",null,null],[12,"type_","","",15,null],[12,"serial","","",15,null],[12,"send_event","","",15,null],[12,"display","","",15,null],[12,"window","","",15,null],[12,"x","","",15,null],[12,"y","","",15,null],[12,"width","","",15,null],[12,"height","","",15,null],[12,"count","","",15,null],[3,"XFocusChangeEvent","","",null,null],[12,"type_","","",16,null],[12,"serial","","",16,null],[12,"send_event","","",16,null],[12,"display","","",16,null],[12,"window","","",16,null],[12,"mode","","",16,null],[12,"detail","","",16,null],[3,"XGraphicsExposeEvent","","",null,null],[12,"type_","","",17,null],[12,"serial","","",17,null],[12,"send_event","","",17,null],[12,"display","","",17,null],[12,"drawable","","",17,null],[12,"x","","",17,null],[12,"y","","",17,null],[12,"width","","",17,null],[12,"height","","",17,null],[12,"count","","",17,null],[12,"major_code","","",17,null],[12,"minor_code","","",17,null],[3,"XGravityEvent","","",null,null],[12,"type_","","",18,null],[12,"serial","","",18,null],[12,"send_event","","",18,null],[12,"display","","",18,null],[12,"event","","",18,null],[12,"window","","",18,null],[12,"x","","",18,null],[12,"y","","",18,null],[3,"XKeyEvent","","",null,null],[12,"type_","","",19,null],[12,"serial","","",19,null],[12,"send_event","","",19,null],[12,"display","","",19,null],[12,"window","","",19,null],[12,"root","","",19,null],[12,"subwindow","","",19,null],[12,"time","","",19,null],[12,"x","","",19,null],[12,"y","","",19,null],[12,"x_root","","",19,null],[12,"y_root","","",19,null],[12,"state","","",19,null],[12,"keycode","","",19,null],[12,"same_screen","","",19,null],[3,"XKeymapEvent","","",null,null],[12,"type_","","",20,null],[12,"serial","","",20,null],[12,"send_event","","",20,null],[12,"display","","",20,null],[12,"window","","",20,null],[12,"key_vector","","",20,null],[3,"XMapEvent","","",null,null],[12,"type_","","",21,null],[12,"serial","","",21,null],[12,"send_event","","",21,null],[12,"display","","",21,null],[12,"event","","",21,null],[12,"window","","",21,null],[12,"override_redirect","","",21,null],[3,"XMappingEvent","","",null,null],[12,"type_","","",22,null],[12,"serial","","",22,null],[12,"send_event","","",22,null],[12,"display","","",22,null],[12,"event","","",22,null],[12,"request","","",22,null],[12,"first_keycode","","",22,null],[12,"count","","",22,null],[3,"XMapRequestEvent","","",null,null],[12,"type_","","",23,null],[12,"serial","","",23,null],[12,"send_event","","",23,null],[12,"display","","",23,null],[12,"parent","","",23,null],[12,"window","","",23,null],[3,"XMotionEvent","","",null,null],[12,"type_","","",24,null],[12,"serial","","",24,null],[12,"send_event","","",24,null],[12,"display","","",24,null],[12,"window","","",24,null],[12,"root","","",24,null],[12,"subwindow","","",24,null],[12,"time","","",24,null],[12,"x","","",24,null],[12,"y","","",24,null],[12,"x_root","","",24,null],[12,"y_root","","",24,null],[12,"state","","",24,null],[12,"is_hint","","",24,null],[12,"same_screen","","",24,null],[3,"XNoExposeEvent","","",null,null],[12,"type_","","",25,null],[12,"serial","","",25,null],[12,"send_event","","",25,null],[12,"display","","",25,null],[12,"drawable","","",25,null],[12,"major_code","","",25,null],[12,"minor_code","","",25,null],[3,"XPropertyEvent","","",null,null],[12,"type_","","",26,null],[12,"serial","","",26,null],[12,"send_event","","",26,null],[12,"display","","",26,null],[12,"window","","",26,null],[12,"atom","","",26,null],[12,"time","","",26,null],[12,"state","","",26,null],[3,"XReparentEvent","","",null,null],[12,"type_","","",27,null],[12,"serial","","",27,null],[12,"send_event","","",27,null],[12,"display","","",27,null],[12,"event","","",27,null],[12,"window","","",27,null],[12,"parent","","",27,null],[12,"x","","",27,null],[12,"y","","",27,null],[12,"override_redirect","","",27,null],[3,"XResizeRequestEvent","","",null,null],[12,"type_","","",28,null],[12,"serial","","",28,null],[12,"send_event","","",28,null],[12,"display","","",28,null],[12,"window","","",28,null],[12,"width","","",28,null],[12,"height","","",28,null],[3,"XSelectionClearEvent","","",null,null],[12,"type_","","",29,null],[12,"serial","","",29,null],[12,"send_event","","",29,null],[12,"display","","",29,null],[12,"window","","",29,null],[12,"selection","","",29,null],[12,"time","","",29,null],[3,"XSelectionEvent","","",null,null],[12,"type_","","",30,null],[12,"serial","","",30,null],[12,"send_event","","",30,null],[12,"display","","",30,null],[12,"requestor","","",30,null],[12,"selection","","",30,null],[12,"target","","",30,null],[12,"property","","",30,null],[12,"time","","",30,null],[3,"XSelectionRequestEvent","","",null,null],[12,"type_","","",31,null],[12,"serial","","",31,null],[12,"send_event","","",31,null],[12,"display","","",31,null],[12,"owner","","",31,null],[12,"requestor","","",31,null],[12,"selection","","",31,null],[12,"target","","",31,null],[12,"property","","",31,null],[12,"time","","",31,null],[3,"XUnmapEvent","","",null,null],[12,"type_","","",32,null],[12,"serial","","",32,null],[12,"send_event","","",32,null],[12,"display","","",32,null],[12,"event","","",32,null],[12,"window","","",32,null],[12,"from_configure","","",32,null],[3,"XVisibilityEvent","","",null,null],[12,"type_","","",33,null],[12,"serial","","",33,null],[12,"send_event","","",33,null],[12,"display","","",33,null],[12,"window","","",33,null],[12,"state","","",33,null],[3,"_XkbCompatMapRec","","",null,null],[12,"sym_interpret","","",34,null],[12,"groups","","",34,null],[12,"num_si","","",34,null],[12,"size_si","","",34,null],[3,"_XkbDesc","","",null,null],[12,"dpy","","",35,null],[12,"flags","","",35,null],[12,"device_spec","","",35,null],[12,"min_key_code","","",35,null],[12,"max_key_code","","",35,null],[12,"ctrls","","",35,null],[12,"server","","",35,null],[12,"map","","",35,null],[12,"indicators","","",35,null],[12,"names","","",35,null],[12,"compat","","",35,null],[12,"geom","","",35,null],[3,"_XkbIndicatorRec","","",null,null],[12,"phys_indicators","","",36,null],[12,"maps","","",36,null],[3,"_XkbKeyAliasRec","","",null,null],[12,"real","","",37,null],[12,"alias","","",37,null],[3,"_XkbKeyNameRec","","",null,null],[12,"name","","",38,null],[3,"_XkbNamesRec","","",null,null],[12,"keycodes","","",39,null],[12,"geometry","","",39,null],[12,"symbols","","",39,null],[12,"types","","",39,null],[12,"compat","","",39,null],[12,"vmods","","",39,null],[12,"indicators","","",39,null],[12,"groups","","",39,null],[12,"keys","","",39,null],[12,"key_aliases","","",39,null],[12,"radio_groups","","",39,null],[12,"phys_symbols","","",39,null],[12,"num_keys","","",39,null],[12,"num_key_aliases","","",39,null],[12,"num_rg","","",39,null],[3,"XkbAnyEvent","","",null,null],[12,"type_","","",40,null],[12,"serial","","",40,null],[12,"send_event","","",40,null],[12,"display","","",40,null],[12,"time","","",40,null],[12,"xkb_type","","",40,null],[12,"device","","",40,null],[3,"XkbNewKeyboardNotifyEvent","","",null,null],[12,"type_","","",41,null],[12,"serial","","",41,null],[12,"send_event","","",41,null],[12,"display","","",41,null],[12,"time","","",41,null],[12,"xkb_type","","",41,null],[12,"device","","",41,null],[12,"old_device","","",41,null],[12,"min_key_code","","",41,null],[12,"max_key_code","","",41,null],[12,"old_min_key_code","","",41,null],[12,"old_max_key_code","","",41,null],[12,"changed","","",41,null],[12,"req_major","","",41,null],[12,"req_minor","","",41,null],[3,"_XkbMapNotifyEvent","","",null,null],[12,"type_","","",42,null],[12,"serial","","",42,null],[12,"send_event","","",42,null],[12,"display","","",42,null],[12,"time","","",42,null],[12,"xkb_type","","",42,null],[12,"device","","",42,null],[12,"changed","","",42,null],[12,"flags","","",42,null],[12,"first_type","","",42,null],[12,"num_types","","",42,null],[12,"min_key_code","","",42,null],[12,"max_key_code","","",42,null],[12,"first_key_sym","","",42,null],[12,"first_key_act","","",42,null],[12,"first_key_bahavior","","",42,null],[12,"first_key_explicit","","",42,null],[12,"first_modmap_key","","",42,null],[12,"first_vmodmap_key","","",42,null],[12,"num_key_syms","","",42,null],[12,"num_key_acts","","",42,null],[12,"num_key_behaviors","","",42,null],[12,"num_key_explicit","","",42,null],[12,"num_modmap_keys","","",42,null],[12,"num_vmodmap_keys","","",42,null],[12,"vmods","","",42,null],[3,"XkbStateNotifyEvent","","",null,null],[12,"type_","","",43,null],[12,"serial","","",43,null],[12,"send_event","","",43,null],[12,"display","","",43,null],[12,"time","","",43,null],[12,"xkb_type","","",43,null],[12,"device","","",43,null],[12,"changed","","",43,null],[12,"group","","",43,null],[12,"base_group","","",43,null],[12,"latched_group","","",43,null],[12,"locked_group","","",43,null],[12,"mods","","",43,null],[12,"base_mods","","",43,null],[12,"latched_mods","","",43,null],[12,"locked_mods","","",43,null],[12,"compat_state","","",43,null],[12,"grab_mods","","",43,null],[12,"compat_grab_mods","","",43,null],[12,"lookup_mods","","",43,null],[12,"compat_lookup_mods","","",43,null],[12,"ptr_buttons","","",43,null],[12,"keycode","","",43,null],[12,"event_type","","",43,null],[12,"req_major","","",43,null],[12,"req_minor","","",43,null],[3,"_XkbControlsNotifyEvent","","",null,null],[12,"type_","","",44,null],[12,"serial","","",44,null],[12,"send_event","","",44,null],[12,"display","","",44,null],[12,"time","","",44,null],[12,"xkb_type","","",44,null],[12,"device","","",44,null],[12,"changed_ctrls","","",44,null],[12,"enabled_ctrls","","",44,null],[12,"enabled_ctrl_changes","","",44,null],[12,"num_groups","","",44,null],[12,"keycode","","",44,null],[12,"event_type","","",44,null],[12,"req_major","","",44,null],[12,"req_minor","","",44,null],[3,"XkbIndicatorNotifyEvent","","",null,null],[12,"type_","","",45,null],[12,"serial","","",45,null],[12,"send_event","","",45,null],[12,"display","","",45,null],[12,"time","","",45,null],[12,"xkb_type","","",45,null],[12,"device","","",45,null],[12,"changed","","",45,null],[12,"state","","",45,null],[3,"_XkbNamesNotifyEvent","","",null,null],[12,"type_","","",46,null],[12,"serial","","",46,null],[12,"send_event","","",46,null],[12,"display","","",46,null],[12,"time","","",46,null],[12,"xkb_type","","",46,null],[12,"device","","",46,null],[12,"changed","","",46,null],[12,"first_type","","",46,null],[12,"num_types","","",46,null],[12,"first_lvl","","",46,null],[12,"num_lvls","","",46,null],[12,"num_aliases","","",46,null],[12,"num_radio_groups","","",46,null],[12,"changed_vmods","","",46,null],[12,"changed_groups","","",46,null],[12,"changed_indicators","","",46,null],[12,"first_key","","",46,null],[12,"num_keys","","",46,null],[3,"XkbCompatMapNotifyEvent","","",null,null],[12,"type_","","",47,null],[12,"serial","","",47,null],[12,"send_event","","",47,null],[12,"display","","",47,null],[12,"time","","",47,null],[12,"xkb_type","","",47,null],[12,"device","","",47,null],[12,"changed_groups","","",47,null],[12,"first_si","","",47,null],[12,"num_si","","",47,null],[12,"num_total_si","","",47,null],[3,"XkbBellNotifyEvent","","",null,null],[12,"type_","","",48,null],[12,"serial","","",48,null],[12,"send_event","","",48,null],[12,"display","","",48,null],[12,"time","","",48,null],[12,"xkb_type","","",48,null],[12,"device","","",48,null],[12,"percent","","",48,null],[12,"pitch","","",48,null],[12,"duration","","",48,null],[12,"bell_class","","",48,null],[12,"bell_id","","",48,null],[12,"name","","",48,null],[12,"window","","",48,null],[12,"event_only","","",48,null],[3,"XkbActionMessageEvent","","",null,null],[12,"type_","","",49,null],[12,"serial","","",49,null],[12,"send_event","","",49,null],[12,"display","","",49,null],[12,"time","","",49,null],[12,"xkb_type","","",49,null],[12,"device","","",49,null],[12,"keycode","","",49,null],[12,"press","","",49,null],[12,"key_event_follows","","",49,null],[12,"group","","",49,null],[12,"mods","","",49,null],[12,"message","","",49,null],[3,"XkbAccessXNotifyEvent","","",null,null],[12,"type_","","",50,null],[12,"serial","","",50,null],[12,"send_event","","",50,null],[12,"display","","",50,null],[12,"time","","",50,null],[12,"xkb_type","","",50,null],[12,"device","","",50,null],[12,"detail","","",50,null],[12,"keycode","","",50,null],[12,"sk_delay","","",50,null],[12,"debounce_delay","","",50,null],[3,"_XkbExtensionDeviceNotifyEvent","","",null,null],[12,"type_","","",51,null],[12,"serial","","",51,null],[12,"send_event","","",51,null],[12,"display","","",51,null],[12,"time","","",51,null],[12,"xkb_type","","",51,null],[12,"device","","",51,null],[12,"reason","","",51,null],[12,"supported","","",51,null],[12,"unsupported","","",51,null],[12,"first_btn","","",51,null],[12,"num_btns","","",51,null],[12,"leds_defined","","",51,null],[12,"led_state","","",51,null],[12,"led_class","","",51,null],[12,"led_id","","",51,null],[3,"XkbEvent","","",null,null],[3,"Depth","","",null,null],[12,"depth","","",52,null],[12,"nvisuals","","",52,null],[12,"visuals","","",52,null],[3,"Screen","","",null,null],[12,"ext_data","","",53,null],[12,"display","","",53,null],[12,"root","","",53,null],[12,"width","","",53,null],[12,"height","","",53,null],[12,"mwidth","","",53,null],[12,"mheight","","",53,null],[12,"ndepths","","",53,null],[12,"depths","","",53,null],[12,"root_depth","","",53,null],[12,"root_visual","","",53,null],[12,"default_gc","","",53,null],[12,"cmap","","",53,null],[12,"white_pixel","","",53,null],[12,"black_pixel","","",53,null],[12,"max_maps","","",53,null],[12,"min_maps","","",53,null],[12,"backing_store","","",53,null],[12,"save_unders","","",53,null],[12,"root_input_mask","","",53,null],[3,"ScreenFormat","","",null,null],[12,"ext_data","","",54,null],[12,"depth","","",54,null],[12,"bits_per_pixel","","",54,null],[12,"scanline_pad","","",54,null],[3,"Visual","","",null,null],[12,"ext_data","","",55,null],[12,"visualid","","",55,null],[12,"class","","",55,null],[12,"red_mask","","",55,null],[12,"green_mask","","",55,null],[12,"blue_mask","","",55,null],[12,"bits_per_rgb","","",55,null],[12,"map_entries","","",55,null],[3,"XArc","","",null,null],[12,"x","","",56,null],[12,"y","","",56,null],[12,"width","","",56,null],[12,"height","","",56,null],[12,"angle1","","",56,null],[12,"angle2","","",56,null],[3,"XChar2b","","",null,null],[12,"byte1","","",57,null],[12,"byte2","","",57,null],[3,"XCharStruct","","",null,null],[12,"lbearing","","",58,null],[12,"rbearing","","",58,null],[12,"width","","",58,null],[12,"ascent","","",58,null],[12,"descent","","",58,null],[12,"attributes","","",58,null],[3,"XClassHint","","",null,null],[12,"res_name","","",59,null],[12,"res_class","","",59,null],[3,"XColor","","",null,null],[12,"pixel","","",60,null],[12,"red","","",60,null],[12,"green","","",60,null],[12,"blue","","",60,null],[12,"flags","","",60,null],[12,"pad","","",60,null],[3,"XComposeStatus","","",null,null],[12,"compose_ptr","","",61,null],[12,"chars_matched","","",61,null],[3,"XExtCodes","","",null,null],[12,"extension","","",62,null],[12,"major_opcode","","",62,null],[12,"first_event","","",62,null],[12,"first_error","","",62,null],[3,"XExtData","","",null,null],[12,"number","","",63,null],[12,"next","","",63,null],[12,"free_private","","",63,null],[12,"private_data","","",63,null],[3,"XFontProp","","",null,null],[12,"name","","",64,null],[12,"card32","","",64,null],[3,"XFontSetExtents","","",null,null],[12,"max_ink_extent","","",65,null],[12,"max_logical_extent","","",65,null],[3,"XFontStruct","","",null,null],[12,"ext_data","","",66,null],[12,"fid","","",66,null],[12,"direction","","",66,null],[12,"min_char_or_byte2","","",66,null],[12,"max_char_or_byte2","","",66,null],[12,"min_byte1","","",66,null],[12,"max_byte1","","",66,null],[12,"all_chars_exist","","",66,null],[12,"default_char","","",66,null],[12,"n_properties","","",66,null],[12,"properties","","",66,null],[12,"min_bounds","","",66,null],[12,"max_bounds","","",66,null],[12,"per_char","","",66,null],[12,"ascent","","",66,null],[12,"descent","","",66,null],[3,"XGCValues","","",null,null],[12,"function","","",67,null],[12,"plane_mask","","",67,null],[12,"foreground","","",67,null],[12,"background","","",67,null],[12,"line_width","","",67,null],[12,"line_style","","",67,null],[12,"cap_style","","",67,null],[12,"join_style","","",67,null],[12,"fill_style","","",67,null],[12,"fill_rule","","",67,null],[12,"arc_mode","","",67,null],[12,"tile","","",67,null],[12,"stipple","","",67,null],[12,"ts_x_origin","","",67,null],[12,"ts_y_origin","","",67,null],[12,"font","","",67,null],[12,"subwindow_mode","","",67,null],[12,"graphics_exposures","","",67,null],[12,"clip_x_origin","","",67,null],[12,"clip_y_origin","","",67,null],[12,"clip_mask","","",67,null],[12,"dash_offset","","",67,null],[12,"dashes","","",67,null],[3,"XGenericEventCookie","","",null,null],[12,"type_","","",68,null],[12,"serial","","",68,null],[12,"send_event","","",68,null],[12,"display","","",68,null],[12,"extension","","",68,null],[12,"evtype","","",68,null],[12,"cookie","","",68,null],[12,"data","","",68,null],[3,"XHostAddress","","",null,null],[12,"family","","",69,null],[12,"length","","",69,null],[12,"address","","",69,null],[3,"XIconSize","","",null,null],[12,"min_width","","",70,null],[12,"min_height","","",70,null],[12,"max_width","","",70,null],[12,"max_height","","",70,null],[12,"width_inc","","",70,null],[12,"height_inc","","",70,null],[3,"XImage","","",null,null],[12,"width","","",71,null],[12,"height","","",71,null],[12,"xoffset","","",71,null],[12,"format","","",71,null],[12,"data","","",71,null],[12,"byte_order","","",71,null],[12,"bitmap_unit","","",71,null],[12,"bitmap_bit_order","","",71,null],[12,"bitmap_pad","","",71,null],[12,"depth","","",71,null],[12,"bytes_per_line","","",71,null],[12,"bits_per_pixel","","",71,null],[12,"red_mask","","",71,null],[12,"green_mask","","",71,null],[12,"blue_mask","","",71,null],[12,"obdata","","",71,null],[12,"funcs","","",71,null],[3,"XKeyboardControl","","",null,null],[12,"key_click_percent","","",72,null],[12,"bell_percent","","",72,null],[12,"bell_pitch","","",72,null],[12,"bell_duration","","",72,null],[12,"led","","",72,null],[12,"led_mode","","",72,null],[12,"key","","",72,null],[12,"auto_repeat_mode","","",72,null],[3,"XKeyboardState","","",null,null],[12,"key_click_percent","","",73,null],[12,"bell_percent","","",73,null],[12,"bell_pitch","","",73,null],[12,"bell_duration","","",73,null],[12,"led_mask","","",73,null],[12,"global_auto_repeat","","",73,null],[12,"auto_repeats","","",73,null],[3,"XmbTextItem","","",null,null],[12,"chars","","",74,null],[12,"nchars","","",74,null],[12,"delta","","",74,null],[12,"font_set","","",74,null],[3,"XModifierKeymap","","",null,null],[12,"max_keypermod","","",75,null],[12,"modifiermap","","",75,null],[3,"XOMCharSetList","","",null,null],[12,"charset_count","","",76,null],[12,"charset_list","","",76,null],[3,"XPixmapFormatValues","","",null,null],[12,"depth","","",77,null],[12,"bits_per_pixel","","",77,null],[12,"scanline_pad","","",77,null],[3,"XPoint","","",null,null],[12,"x","","",78,null],[12,"y","","",78,null],[3,"XRectangle","","",null,null],[12,"x","","",79,null],[12,"y","","",79,null],[12,"width","","",79,null],[12,"height","","",79,null],[3,"XrmOptionDescRec","","",null,null],[12,"option","","",80,null],[12,"specifier","","",80,null],[12,"argKind","","",80,null],[12,"value","","",80,null],[3,"XrmValue","","",null,null],[12,"size","","",81,null],[12,"addr","","",81,null],[3,"XSegment","","",null,null],[12,"x1","","",82,null],[12,"y1","","",82,null],[12,"x2","","",82,null],[12,"y2","","",82,null],[3,"XSetWindowAttributes","","",null,null],[12,"background_pixmap","","",83,null],[12,"background_pixel","","",83,null],[12,"border_pixmap","","",83,null],[12,"border_pixel","","",83,null],[12,"bit_gravity","","",83,null],[12,"win_gravity","","",83,null],[12,"backing_store","","",83,null],[12,"backing_planes","","",83,null],[12,"backing_pixel","","",83,null],[12,"save_under","","",83,null],[12,"event_mask","","",83,null],[12,"do_not_propagate_mask","","",83,null],[12,"override_redirect","","",83,null],[12,"colormap","","",83,null],[12,"cursor","","",83,null],[3,"XSizeHints","","",null,null],[12,"flags","","",84,null],[12,"x","","",84,null],[12,"y","","",84,null],[12,"width","","",84,null],[12,"height","","",84,null],[12,"min_width","","",84,null],[12,"min_height","","",84,null],[12,"max_width","","",84,null],[12,"max_height","","",84,null],[12,"width_inc","","",84,null],[12,"height_inc","","",84,null],[12,"min_aspect","","",84,null],[12,"max_aspect","","",84,null],[12,"base_width","","",84,null],[12,"base_height","","",84,null],[12,"win_gravity","","",84,null],[3,"XStandardColormap","","",null,null],[12,"colormap","","",85,null],[12,"red_max","","",85,null],[12,"red_mult","","",85,null],[12,"green_max","","",85,null],[12,"green_mult","","",85,null],[12,"blue_max","","",85,null],[12,"blue_mult","","",85,null],[12,"base_pixel","","",85,null],[12,"visualid","","",85,null],[12,"killid","","",85,null],[3,"XTextItem","","",null,null],[12,"chars","","",86,null],[12,"nchars","","",86,null],[12,"delta","","",86,null],[12,"font","","",86,null],[3,"XTextItem16","","",null,null],[12,"chars","","",87,null],[12,"nchars","","",87,null],[12,"delta","","",87,null],[12,"font","","",87,null],[3,"XTextProperty","","",null,null],[12,"value","","",88,null],[12,"encoding","","",88,null],[12,"format","","",88,null],[12,"nitems","","",88,null],[3,"XTimeCoord","","",null,null],[12,"time","","",89,null],[12,"x","","",89,null],[12,"y","","",89,null],[3,"XVisualInfo","","",null,null],[12,"visual","","",90,null],[12,"visualid","","",90,null],[12,"screen","","",90,null],[12,"depth","","",90,null],[12,"class","","",90,null],[12,"red_mask","","",90,null],[12,"green_mask","","",90,null],[12,"blue_mask","","",90,null],[12,"colormap_size","","",90,null],[12,"bits_per_rgb","","",90,null],[3,"XwcTextItem","","",null,null],[12,"chars","","",91,null],[12,"nchars","","",91,null],[12,"delta","","",91,null],[12,"font_set","","",91,null],[3,"XWindowAttributes","","",null,null],[12,"x","","",92,null],[12,"y","","",92,null],[12,"width","","",92,null],[12,"height","","",92,null],[12,"border_width","","",92,null],[12,"depth","","",92,null],[12,"visual","","",92,null],[12,"root","","",92,null],[12,"class","","",92,null],[12,"bit_gravity","","",92,null],[12,"win_gravity","","",92,null],[12,"backing_store","","",92,null],[12,"backing_planes","","",92,null],[12,"backing_pixel","","",92,null],[12,"save_under","","",92,null],[12,"colormap","","",92,null],[12,"map_installed","","",92,null],[12,"map_state","","",92,null],[12,"all_event_masks","","",92,null],[12,"your_event_mask","","",92,null],[12,"do_not_propagate_mask","","",92,null],[12,"override_redirect","","",92,null],[12,"screen","","",92,null],[3,"XWindowChanges","","",null,null],[12,"x","","",93,null],[12,"y","","",93,null],[12,"width","","",93,null],[12,"height","","",93,null],[12,"border_width","","",93,null],[12,"sibling","","",93,null],[12,"stack_mode","","",93,null],[3,"XWMHints","","",null,null],[12,"flags","","",94,null],[12,"input","","",94,null],[12,"initial_state","","",94,null],[12,"icon_pixmap","","",94,null],[12,"icon_window","","",94,null],[12,"icon_x","","",94,null],[12,"icon_y","","",94,null],[12,"icon_mask","","",94,null],[12,"window_group","","",94,null],[3,"AspectRatio","","",null,null],[12,"x","","",95,null],[12,"y","","",95,null],[3,"ClientMessageData","","",null,null],[3,"ImageFns","","",null,null],[12,"create_image","","",96,null],[12,"destroy_image","","",96,null],[12,"get_pixel","","",96,null],[12,"put_pixel","","",96,null],[12,"sub_image","","",96,null],[12,"add_pixel","","",96,null],[19,"XEvent","","",null,null],[12,"type_","","",97,null],[12,"any","","",97,null],[12,"button","","",97,null],[12,"circulate","","",97,null],[12,"circulate_request","","",97,null],[12,"client_message","","",97,null],[12,"colormap","","",97,null],[12,"configure","","",97,null],[12,"configure_request","","",97,null],[12,"create_window","","",97,null],[12,"crossing","","",97,null],[12,"destroy_window","","",97,null],[12,"error","","",97,null],[12,"expose","","",97,null],[12,"focus_change","","",97,null],[12,"generic_event_cookie","","",97,null],[12,"graphics_expose","","",97,null],[12,"gravity","","",97,null],[12,"key","","",97,null],[12,"keymap","","",97,null],[12,"map","","",97,null],[12,"mapping","","",97,null],[12,"map_request","","",97,null],[12,"motion","","",97,null],[12,"no_expose","","",97,null],[12,"property","","",97,null],[12,"reparent","","",97,null],[12,"resize_request","","",97,null],[12,"selection_clear","","",97,null],[12,"selection","","",97,null],[12,"selection_request","","",97,null],[12,"unmap","","",97,null],[12,"visibility","","",97,null],[12,"pad","","",97,null],[12,"xf86vm_notify","","",97,null],[12,"xrr_screen_change_notify","","",97,null],[12,"xrr_notify","","",97,null],[12,"xrr_output_change_notify","","",97,null],[12,"xrr_crtc_change_notify","","",97,null],[12,"xrr_output_property_notify","","",97,null],[12,"xrr_provider_change_notify","","",97,null],[12,"xrr_provider_property_notify","","",97,null],[12,"xrr_resource_change_notify","","",97,null],[12,"xss_notify","","",97,null],[4,"_XDisplay","","",null,null],[4,"xError","","",null,null],[4,"xEvent","","",null,null],[4,"_XGC","","",null,null],[4,"_XIC","","",null,null],[4,"_XIM","","",null,null],[4,"_XRegion","","",null,null],[4,"_XOC","","",null,null],[4,"_XOM","","",null,null],[4,"_XrmHashBucketRec","","",null,null],[4,"XkbKbdDpyStateRec","","",null,null],[0,"xkb","","",null,null],[6,"Atom","","",null,null],[6,"Bool","","",null,null],[6,"Colormap","","",null,null],[6,"Cursor","","",null,null],[6,"Drawable","","",null,null],[6,"Font","","",null,null],[6,"GContext","","",null,null],[6,"KeyCode","","",null,null],[6,"KeySym","","",null,null],[6,"Mask","","",null,null],[6,"Pixmap","","",null,null],[6,"Status","","",null,null],[6,"Time","","",null,null],[6,"VisualID","","",null,null],[6,"Window","","",null,null],[6,"XID","","",null,null],[6,"XPointer","","",null,null],[6,"XEDataObject","","",null,null],[6,"Display","","",null,null],[6,"GC","","",null,null],[6,"Region","","",null,null],[6,"XcmsCCC","","",null,null],[6,"XcmsColorSpace","","",null,null],[6,"XcmsFunctionSet","","",null,null],[6,"XContext","","",null,null],[6,"XFontSet","","",null,null],[6,"XIC","","",null,null],[6,"XIM","","",null,null],[6,"XkbAction","","",null,null],[6,"XkbBoundsPtr","","",null,null],[6,"XkbChangesPtr","","",null,null],[6,"XkbClientMapPtr","","",null,null],[6,"XkbColorPtr","","",null,null],[6,"XkbCompatMapPtr","","",null,null],[6,"XkbComponentListPtr","","",null,null],[6,"XkbComponentNamesPtr","","",null,null],[6,"XkbControlsChangesPtr","","",null,null],[6,"XkbControlsNotifyEvent","","",null,null],[6,"XkbControlsPtr","","",null,null],[6,"XkbDescPtr","","",null,null],[6,"XkbDeviceChangesPtr","","",null,null],[6,"XkbDeviceInfoPtr","","",null,null],[6,"XkbDeviceLedInfoPtr","","",null,null],[6,"XkbDoodadPtr","","",null,null],[6,"XkbExtensionDeviceNotifyEvent","","",null,null],[6,"XkbGeometryPtr","","",null,null],[6,"XkbGeometrySizesPtr","","",null,null],[6,"XkbIndicatorMapPtr","","",null,null],[6,"XkbIndicatorMapRec","","",null,null],[6,"XkbIndicatorPtr","","",null,null],[6,"XkbKeyTypePtr","","",null,null],[6,"XkbMapChangesPtr","","",null,null],[6,"XkbMapNotifyEvent","","",null,null],[6,"XkbModsPtr","","",null,null],[6,"XkbModsRec","","",null,null],[6,"XkbNameChangesPtr","","",null,null],[6,"XkbNamesNotifyEvent","","",null,null],[6,"XkbNamesPtr","","",null,null],[6,"XkbKeyAliasPtr","","",null,null],[6,"XkbKeyNamePtr","","",null,null],[6,"XkbKeyPtr","","",null,null],[6,"XkbOutlinePtr","","",null,null],[6,"XkbOverlayKeyPtr","","",null,null],[6,"XkbOverlayPtr","","",null,null],[6,"XkbOverlayRowPtr","","",null,null],[6,"XkbPropertyPtr","","",null,null],[6,"XkbRowPtr","","",null,null],[6,"XkbSectionPtr","","",null,null],[6,"XkbServerMapPtr","","",null,null],[6,"XkbShapePtr","","",null,null],[6,"XkbStatePtr","","",null,null],[6,"XkbSymInterpretPtr","","",null,null],[6,"XOM","","",null,null],[6,"XrmDatabase","","",null,null],[6,"XrmOptionDescList","","",null,null],[6,"XConnectionWatchProc","","",null,null],[6,"XICCEncodingStyle","","",null,null],[6,"XOrientation","","",null,null],[6,"XrmBinding","","",null,null],[6,"XrmOptionKind","","",null,null],[6,"XButtonPressedEvent","","",null,null],[6,"XButtonReleasedEvent","","",null,null],[6,"XEnterWindowEvent","","",null,null],[6,"XLeaveWindowEvent","","",null,null],[6,"XFocusInEvent","","",null,null],[6,"XFocusOutEvent","","",null,null],[6,"XKeyPressedEvent","","",null,null],[6,"XKeyReleasedEvent","","",null,null],[6,"XPointerMovedEvent","","",null,null],[6,"XkbKbdDpyStatePtr","","",null,null],[17,"AllocNone","","",null,null],[17,"AllocAll","","",null,null],[17,"XkbKeyNameLength","","",null,null],[17,"XkbNumIndicators","","",null,null],[17,"XkbNumKbdGroups","","",null,null],[17,"XkbNumVirtualMods","","",null,null],[17,"XA_PRIMARY","","",null,null],[17,"XA_SECONDARY","","",null,null],[17,"XA_ARC","","",null,null],[17,"XA_ATOM","","",null,null],[17,"XA_BITMAP","","",null,null],[17,"XA_CARDINAL","","",null,null],[17,"XA_COLORMAP","","",null,null],[17,"XA_CURSOR","","",null,null],[17,"XA_CUT_BUFFER0","","",null,null],[17,"XA_CUT_BUFFER1","","",null,null],[17,"XA_CUT_BUFFER2","","",null,null],[17,"XA_CUT_BUFFER3","","",null,null],[17,"XA_CUT_BUFFER4","","",null,null],[17,"XA_CUT_BUFFER5","","",null,null],[17,"XA_CUT_BUFFER6","","",null,null],[17,"XA_CUT_BUFFER7","","",null,null],[17,"XA_DRAWABLE","","",null,null],[17,"XA_FONT","","",null,null],[17,"XA_INTEGER","","",null,null],[17,"XA_PIXMAP","","",null,null],[17,"XA_POINT","","",null,null],[17,"XA_RECTANGLE","","",null,null],[17,"XA_RESOURCE_MANAGER","","",null,null],[17,"XA_RGB_COLOR_MAP","","",null,null],[17,"XA_RGB_BEST_MAP","","",null,null],[17,"XA_RGB_BLUE_MAP","","",null,null],[17,"XA_RGB_DEFAULT_MAP","","",null,null],[17,"XA_RGB_GRAY_MAP","","",null,null],[17,"XA_RGB_GREEN_MAP","","",null,null],[17,"XA_RGB_RED_MAP","","",null,null],[17,"XA_STRING","","",null,null],[17,"XA_VISUALID","","",null,null],[17,"XA_WINDOW","","",null,null],[17,"XA_WM_COMMAND","","",null,null],[17,"XA_WM_HINTS","","",null,null],[17,"XA_WM_CLIENT_MACHINE","","",null,null],[17,"XA_WM_ICON_NAME","","",null,null],[17,"XA_WM_ICON_SIZE","","",null,null],[17,"XA_WM_NAME","","",null,null],[17,"XA_WM_NORMAL_HINTS","","",null,null],[17,"XA_WM_SIZE_HINTS","","",null,null],[17,"XA_WM_ZOOM_HINTS","","",null,null],[17,"XA_MIN_SPACE","","",null,null],[17,"XA_NORM_SPACE","","",null,null],[17,"XA_MAX_SPACE","","",null,null],[17,"XA_END_SPACE","","",null,null],[17,"XA_SUPERSCRIPT_X","","",null,null],[17,"XA_SUPERSCRIPT_Y","","",null,null],[17,"XA_SUBSCRIPT_X","","",null,null],[17,"XA_SUBSCRIPT_Y","","",null,null],[17,"XA_UNDERLINE_POSITION","","",null,null],[17,"XA_UNDERLINE_THICKNESS","","",null,null],[17,"XA_STRIKEOUT_ASCENT","","",null,null],[17,"XA_STRIKEOUT_DESCENT","","",null,null],[17,"XA_ITALIC_ANGLE","","",null,null],[17,"XA_X_HEIGHT","","",null,null],[17,"XA_QUAD_WIDTH","","",null,null],[17,"XA_WEIGHT","","",null,null],[17,"XA_POINT_SIZE","","",null,null],[17,"XA_RESOLUTION","","",null,null],[17,"XA_COPYRIGHT","","",null,null],[17,"XA_NOTICE","","",null,null],[17,"XA_FONT_NAME","","",null,null],[17,"XA_FAMILY_NAME","","",null,null],[17,"XA_FULL_NAME","","",null,null],[17,"XA_CAP_HEIGHT","","",null,null],[17,"XA_WM_CLASS","","",null,null],[17,"XA_WM_TRANSIENT_FOR","","",null,null],[17,"False","","",null,null],[17,"True","","",null,null],[17,"Unsorted","","",null,null],[17,"YSorted","","",null,null],[17,"YXSorted","","",null,null],[17,"YXBanded","","",null,null],[17,"DoRed","","",null,null],[17,"DoGreen","","",null,null],[17,"DoBlue","","",null,null],[17,"Success","","",null,null],[17,"BadRequest","","",null,null],[17,"BadValue","","",null,null],[17,"BadWindow","","",null,null],[17,"BadPixmap","","",null,null],[17,"BadAtom","","",null,null],[17,"BadCursor","","",null,null],[17,"BadFont","","",null,null],[17,"BadMatch","","",null,null],[17,"BadDrawable","","",null,null],[17,"BadAccess","","",null,null],[17,"BadAlloc","","",null,null],[17,"BadColor","","",null,null],[17,"BadGC","","",null,null],[17,"BadIDChoice","","",null,null],[17,"BadName","","",null,null],[17,"BadLength","","",null,null],[17,"BadImplementation","","",null,null],[17,"FirstExtensionError","","",null,null],[17,"LastExtensionError","","",null,null],[17,"KeyPress","","",null,null],[17,"KeyRelease","","",null,null],[17,"ButtonPress","","",null,null],[17,"ButtonRelease","","",null,null],[17,"MotionNotify","","",null,null],[17,"EnterNotify","","",null,null],[17,"LeaveNotify","","",null,null],[17,"FocusIn","","",null,null],[17,"FocusOut","","",null,null],[17,"KeymapNotify","","",null,null],[17,"Expose","","",null,null],[17,"GraphicsExpose","","",null,null],[17,"NoExpose","","",null,null],[17,"VisibilityNotify","","",null,null],[17,"CreateNotify","","",null,null],[17,"DestroyNotify","","",null,null],[17,"UnmapNotify","","",null,null],[17,"MapNotify","","",null,null],[17,"MapRequest","","",null,null],[17,"ReparentNotify","","",null,null],[17,"ConfigureNotify","","",null,null],[17,"ConfigureRequest","","",null,null],[17,"GravityNotify","","",null,null],[17,"ResizeRequest","","",null,null],[17,"CirculateNotify","","",null,null],[17,"CirculateRequest","","",null,null],[17,"PropertyNotify","","",null,null],[17,"SelectionClear","","",null,null],[17,"SelectionRequest","","",null,null],[17,"SelectionNotify","","",null,null],[17,"ColormapNotify","","",null,null],[17,"ClientMessage","","",null,null],[17,"MappingNotify","","",null,null],[17,"GenericEvent","","",null,null],[17,"LASTEvent","","",null,null],[17,"NoEventMask","","",null,null],[17,"KeyPressMask","","",null,null],[17,"KeyReleaseMask","","",null,null],[17,"ButtonPressMask","","",null,null],[17,"ButtonReleaseMask","","",null,null],[17,"EnterWindowMask","","",null,null],[17,"LeaveWindowMask","","",null,null],[17,"PointerMotionMask","","",null,null],[17,"PointerMotionHintMask","","",null,null],[17,"Button1MotionMask","","",null,null],[17,"Button2MotionMask","","",null,null],[17,"Button3MotionMask","","",null,null],[17,"Button4MotionMask","","",null,null],[17,"Button5MotionMask","","",null,null],[17,"ButtonMotionMask","","",null,null],[17,"KeymapStateMask","","",null,null],[17,"ExposureMask","","",null,null],[17,"VisibilityChangeMask","","",null,null],[17,"StructureNotifyMask","","",null,null],[17,"ResizeRedirectMask","","",null,null],[17,"SubstructureNotifyMask","","",null,null],[17,"SubstructureRedirectMask","","",null,null],[17,"FocusChangeMask","","",null,null],[17,"PropertyChangeMask","","",null,null],[17,"ColormapChangeMask","","",null,null],[17,"OwnerGrabButtonMask","","",null,null],[17,"PropModeReplace","","",null,null],[17,"PropModePrepend","","",null,null],[17,"PropModeAppend","","",null,null],[17,"ShiftMapIndex","","",null,null],[17,"LockMapIndex","","",null,null],[17,"ControlMapIndex","","",null,null],[17,"Mod1MapIndex","","",null,null],[17,"Mod2MapIndex","","",null,null],[17,"Mod3MapIndex","","",null,null],[17,"Mod4MapIndex","","",null,null],[17,"Mod5MapIndex","","",null,null],[17,"Button1Mask","","",null,null],[17,"Button2Mask","","",null,null],[17,"Button3Mask","","",null,null],[17,"Button4Mask","","",null,null],[17,"Button5Mask","","",null,null],[17,"AnyModifier","","",null,null],[17,"NotifyNormal","","",null,null],[17,"NotifyGrab","","",null,null],[17,"NotifyUngrab","","",null,null],[17,"NotifyWhileGrabbed","","",null,null],[17,"NotifyHint","","",null,null],[17,"NotifyAncestor","","",null,null],[17,"NotifyVirtual","","",null,null],[17,"NotifyInferior","","",null,null],[17,"NotifyNonlinear","","",null,null],[17,"NotifyNonlinearVirtual","","",null,null],[17,"NotifyPointer","","",null,null],[17,"NotifyPointerRoot","","",null,null],[17,"NotifyDetailNone","","",null,null],[17,"VisibilityUnobscured","","",null,null],[17,"VisibilityPartiallyObscured","","",null,null],[17,"VisibilityFullyObscured","","",null,null],[17,"PlaceOnTop","","",null,null],[17,"PlaceOnBottom","","",null,null],[17,"FamilyInternet","","",null,null],[17,"FamilyDECnet","","",null,null],[17,"FamilyChaos","","",null,null],[17,"FamilyInternet6","","",null,null],[17,"FamilyServerInterpreted","","",null,null],[17,"PropertyNewValue","","",null,null],[17,"PropertyDelete","","",null,null],[17,"ColormapUninstalled","","",null,null],[17,"ColormapInstalled","","",null,null],[17,"GrabModeSync","","",null,null],[17,"GrabModeAsync","","",null,null],[17,"GrabSuccess","","",null,null],[17,"AlreadyGrabbed","","",null,null],[17,"GrabInvalidTime","","",null,null],[17,"GrabNotViewable","","",null,null],[17,"GrabFrozen","","",null,null],[17,"AsyncPointer","","",null,null],[17,"SyncPointer","","",null,null],[17,"ReplayPointer","","",null,null],[17,"AsyncKeyboard","","",null,null],[17,"SyncKeyboard","","",null,null],[17,"ReplayKeyboard","","",null,null],[17,"AsyncBoth","","",null,null],[17,"SyncBoth","","",null,null],[17,"RevertToNone","","",null,null],[17,"RevertToPointerRoot","","",null,null],[17,"RevertToParent","","",null,null],[17,"CWX","","",null,null],[17,"CWY","","",null,null],[17,"CWWidth","","",null,null],[17,"CWHeight","","",null,null],[17,"CWBorderWidth","","",null,null],[17,"CWSibling","","",null,null],[17,"CWStackMode","","",null,null],[17,"ForgetGravity","","",null,null],[17,"UnmapGravity","","",null,null],[17,"NorthWestGravity","","",null,null],[17,"NorthGravity","","",null,null],[17,"NorthEastGravity","","",null,null],[17,"WestGravity","","",null,null],[17,"CenterGravity","","",null,null],[17,"EastGravity","","",null,null],[17,"SouthWestGravity","","",null,null],[17,"SouthGravity","","",null,null],[17,"SouthEastGravity","","",null,null],[17,"StaticGravity","","",null,null],[17,"XYBitmap","","",null,null],[17,"XYPixmap","","",null,null],[17,"ZPixmap","","",null,null],[17,"NotUseful","","",null,null],[17,"WhenMapped","","",null,null],[17,"Always","","",null,null],[17,"IsUnmapped","","",null,null],[17,"IsUnviewable","","",null,null],[17,"IsViewable","","",null,null],[17,"ShiftMask","","",null,null],[17,"LockMask","","",null,null],[17,"ControlMask","","",null,null],[17,"Mod1Mask","","",null,null],[17,"Mod2Mask","","",null,null],[17,"Mod3Mask","","",null,null],[17,"Mod4Mask","","",null,null],[17,"Mod5Mask","","",null,null],[17,"Button1","","",null,null],[17,"Button2","","",null,null],[17,"Button3","","",null,null],[17,"Button4","","",null,null],[17,"Button5","","",null,null],[17,"USPosition","","",null,null],[17,"USSize","","",null,null],[17,"PPosition","","",null,null],[17,"PSize","","",null,null],[17,"PMinSize","","",null,null],[17,"PMaxSize","","",null,null],[17,"PResizeInc","","",null,null],[17,"PAspect","","",null,null],[17,"PBaseSize","","",null,null],[17,"PWinGravity","","",null,null],[17,"PAllHints","","",null,null],[17,"SetModeInsert","","",null,null],[17,"SetModeDelete","","",null,null],[17,"DestroyAll","","",null,null],[17,"RetainPermanent","","",null,null],[17,"RetainTemporary","","",null,null],[17,"Above","","",null,null],[17,"Below","","",null,null],[17,"TopIf","","",null,null],[17,"BottomIf","","",null,null],[17,"Opposite","","",null,null],[17,"RaiseLowest","","",null,null],[17,"LowerHighest","","",null,null],[17,"GXclear","","",null,null],[17,"GXand","","",null,null],[17,"GXandReverse","","",null,null],[17,"GXcopy","","",null,null],[17,"GXandInverted","","",null,null],[17,"GXnoop","","",null,null],[17,"GXxor","","",null,null],[17,"GXor","","",null,null],[17,"GXnor","","",null,null],[17,"GXequiv","","",null,null],[17,"GXinvert","","",null,null],[17,"GXorReverse","","",null,null],[17,"GXcopyInverted","","",null,null],[17,"GXorInverted","","",null,null],[17,"GXnand","","",null,null],[17,"GXset","","",null,null],[17,"LineSolid","","",null,null],[17,"LineOnOffDash","","",null,null],[17,"LineDoubleDash","","",null,null],[17,"CapNotLast","","",null,null],[17,"CapButt","","",null,null],[17,"CapRound","","",null,null],[17,"CapProjecting","","",null,null],[17,"JoinMiter","","",null,null],[17,"JoinRound","","",null,null],[17,"JoinBevel","","",null,null],[17,"FillSolid","","",null,null],[17,"FillTiled","","",null,null],[17,"FillStippled","","",null,null],[17,"FillOpaqueStippled","","",null,null],[17,"EvenOddRule","","",null,null],[17,"WindingRule","","",null,null],[17,"ClipByChildren","","",null,null],[17,"IncludeInferiors","","",null,null],[17,"CoordModeOrigin","","",null,null],[17,"CoordModePrevious","","",null,null],[17,"Complex","","",null,null],[17,"Nonconvex","","",null,null],[17,"Convex","","",null,null],[17,"ArcChord","","",null,null],[17,"ArcPieSlice","","",null,null],[17,"GCFunction","","",null,null],[17,"GCPlaneMask","","",null,null],[17,"GCForeground","","",null,null],[17,"GCBackground","","",null,null],[17,"GCLineWidth","","",null,null],[17,"GCLineStyle","","",null,null],[17,"GCCapStyle","","",null,null],[17,"GCJoinStyle","","",null,null],[17,"GCFillStyle","","",null,null],[17,"GCFillRule","","",null,null],[17,"GCTile","","",null,null],[17,"GCStipple","","",null,null],[17,"GCTileStipXOrigin","","",null,null],[17,"GCTileStipYOrigin","","",null,null],[17,"GCFont","","",null,null],[17,"GCSubwindowMode","","",null,null],[17,"GCGraphicsExposures","","",null,null],[17,"GCClipXOrigin","","",null,null],[17,"GCClipYOrigin","","",null,null],[17,"GCClipMask","","",null,null],[17,"GCDashOffset","","",null,null],[17,"GCDashList","","",null,null],[17,"GCArcMode","","",null,null],[17,"GCLastBit","","",null,null],[17,"FontLeftToRight","","",null,null],[17,"FontRightToLeft","","",null,null],[17,"FontChange","","",null,null],[17,"CursorShape","","",null,null],[17,"TileShape","","",null,null],[17,"StippleShape","","",null,null],[17,"AutoRepeatModeOff","","",null,null],[17,"AutoRepeatModeOn","","",null,null],[17,"AutoRepeatModeDefault","","",null,null],[17,"LedModeOff","","",null,null],[17,"LedModeOn","","",null,null],[17,"KBKeyClickPercent","","",null,null],[17,"KBBellPercent","","",null,null],[17,"KBBellPitch","","",null,null],[17,"KBBellDuration","","",null,null],[17,"KBLed","","",null,null],[17,"KBLedMode","","",null,null],[17,"KBKey","","",null,null],[17,"KBAutoRepeatMode","","",null,null],[17,"MappingSuccess","","",null,null],[17,"MappingBusy","","",null,null],[17,"MappingFailed","","",null,null],[17,"MappingModifier","","",null,null],[17,"MappingKeyboard","","",null,null],[17,"MappingPointer","","",null,null],[17,"DontPreferBlanking","","",null,null],[17,"PreferBlanking","","",null,null],[17,"DefaultBlanking","","",null,null],[17,"DisableScreenSaver","","",null,null],[17,"DisableScreenInterval","","",null,null],[17,"DontAllowExposures","","",null,null],[17,"AllowExposures","","",null,null],[17,"DefaultExposures","","",null,null],[17,"ScreenSaverReset","","",null,null],[17,"ScreenSaverActive","","",null,null],[17,"HostInsert","","",null,null],[17,"HostDelete","","",null,null],[17,"EnableAccess","","",null,null],[17,"DisableAccess","","",null,null],[17,"StaticGray","","",null,null],[17,"GrayScale","","",null,null],[17,"StaticColor","","",null,null],[17,"PseudoColor","","",null,null],[17,"TrueColor","","",null,null],[17,"DirectColor","","",null,null],[17,"VisualNoMask","","",null,null],[17,"VisualIDMask","","",null,null],[17,"VisualScreenMask","","",null,null],[17,"VisualDepthMask","","",null,null],[17,"VisualClassMask","","",null,null],[17,"VisualRedMaskMask","","",null,null],[17,"VisualGreenMaskMask","","",null,null],[17,"VisualBlueMaskMask","","",null,null],[17,"VisualColormapSizeMask","","",null,null],[17,"VisualBitsPerRGBMask","","",null,null],[17,"VisualAllMask","","",null,null],[17,"CWBackPixmap","","",null,null],[17,"CWBackPixel","","",null,null],[17,"CWBorderPixmap","","",null,null],[17,"CWBorderPixel","","",null,null],[17,"CWBitGravity","","",null,null],[17,"CWWinGravity","","",null,null],[17,"CWBackingStore","","",null,null],[17,"CWBackingPlanes","","",null,null],[17,"CWBackingPixel","","",null,null],[17,"CWOverrideRedirect","","",null,null],[17,"CWSaveUnder","","",null,null],[17,"CWEventMask","","",null,null],[17,"CWDontPropagate","","",null,null],[17,"CWColormap","","",null,null],[17,"CWCursor","","",null,null],[17,"InputOutput","","",null,null],[17,"InputOnly","","",null,null],[17,"XIMPreeditArea","","",null,null],[17,"XIMPreeditCallbacks","","",null,null],[17,"XIMPreeditPosition","","",null,null],[17,"XIMPreeditNothing","","",null,null],[17,"XIMPreeditNone","","",null,null],[17,"XIMStatusArea","","",null,null],[17,"XIMStatusCallbacks","","",null,null],[17,"XIMStatusNothing","","",null,null],[17,"XIMStatusNone","","",null,null],[17,"LSBFirst","","",null,null],[17,"MSBFirst","","",null,null],[17,"ParentRelative","","",null,null],[17,"CopyFromParent","","",null,null],[17,"PointerWindow","","",null,null],[17,"InputFocus","","",null,null],[17,"PointerRoot","","",null,null],[17,"AnyPropertyType","","",null,null],[17,"AnyKey","","",null,null],[17,"AnyButton","","",null,null],[17,"AllTemporary","","",null,null],[17,"CurrentTime","","",null,null],[17,"NoSymbol","","",null,null],[17,"X_PROTOCOL","","",null,null],[17,"X_PROTOCOL_REVISION","","",null,null],[17,"XNVaNestedList","","",null,null],[17,"XNQueryInputStyle","","",null,null],[17,"XNClientWindow","","",null,null],[17,"XNInputStyle","","",null,null],[17,"XNFocusWindow","","",null,null],[17,"XNResourceName","","",null,null],[17,"XNResourceClass","","",null,null],[17,"XNGeometryCallback","","",null,null],[17,"XNDestroyCallback","","",null,null],[17,"XNFilterEvents","","",null,null],[17,"XNPreeditStartCallback","","",null,null],[17,"XNPreeditDoneCallback","","",null,null],[17,"XNPreeditDrawCallback","","",null,null],[17,"XNPreeditCaretCallback","","",null,null],[17,"XNPreeditStateNotifyCallback","","",null,null],[17,"XNPreeditAttributes","","",null,null],[17,"XNStatusStartCallback","","",null,null],[17,"XNStatusDoneCallback","","",null,null],[17,"XNStatusDrawCallback","","",null,null],[17,"XNStatusAttributes","","",null,null],[17,"XNArea","","",null,null],[17,"XNAreaNeeded","","",null,null],[17,"XNSpotLocation","","",null,null],[17,"XNColormap","","",null,null],[17,"XNStdColormap","","",null,null],[17,"XNForeground","","",null,null],[17,"XNBackground","","",null,null],[17,"XNBackgroundPixmap","","",null,null],[17,"XNFontSet","","",null,null],[17,"XNLineSpace","","",null,null],[17,"XNCursor","","",null,null],[17,"XNVaNestedList_0","","",null,null],[17,"XNQueryInputStyle_0","","",null,null],[17,"XNClientWindow_0","","",null,null],[17,"XNInputStyle_0","","",null,null],[17,"XNFocusWindow_0","","",null,null],[17,"XNResourceName_0","","",null,null],[17,"XNResourceClass_0","","",null,null],[17,"XNGeometryCallback_0","","",null,null],[17,"XNDestroyCallback_0","","",null,null],[17,"XNFilterEvents_0","","",null,null],[17,"XNPreeditStartCallback_0","","",null,null],[17,"XNPreeditDoneCallback_0","","",null,null],[17,"XNPreeditDrawCallback_0","","",null,null],[17,"XNPreeditCaretCallback_0","","",null,null],[17,"XNPreeditStateNotifyCallback_0","","",null,null],[17,"XNPreeditAttributes_0","","",null,null],[17,"XNStatusStartCallback_0","","",null,null],[17,"XNStatusDoneCallback_0","","",null,null],[17,"XNStatusDrawCallback_0","","",null,null],[17,"XNStatusAttributes_0","","",null,null],[17,"XNArea_0","","",null,null],[17,"XNAreaNeeded_0","","",null,null],[17,"XNSpotLocation_0","","",null,null],[17,"XNColormap_0","","",null,null],[17,"XNStdColormap_0","","",null,null],[17,"XNForeground_0","","",null,null],[17,"XNBackground_0","","",null,null],[17,"XNBackgroundPixmap_0","","",null,null],[17,"XNFontSet_0","","",null,null],[17,"XNLineSpace_0","","",null,null],[17,"XNCursor_0","","",null,null],[17,"XNQueryIMValuesList","","",null,null],[17,"XNQueryICValuesList","","",null,null],[17,"XNVisiblePosition","","",null,null],[17,"XNR6PreeditCallback","","",null,null],[17,"XNStringConversionCallback","","",null,null],[17,"XNStringConversion","","",null,null],[17,"XNResetState","","",null,null],[17,"XNHotKey","","",null,null],[17,"XNHotKeyState","","",null,null],[17,"XNPreeditState","","",null,null],[17,"XNSeparatorofNestedList","","",null,null],[17,"XNQueryIMValuesList_0","","",null,null],[17,"XNQueryICValuesList_0","","",null,null],[17,"XNVisiblePosition_0","","",null,null],[17,"XNR6PreeditCallback_0","","",null,null],[17,"XNStringConversionCallback_0","","",null,null],[17,"XNStringConversion_0","","",null,null],[17,"XNResetState_0","","",null,null],[17,"XNHotKey_0","","",null,null],[17,"XNHotKeyState_0","","",null,null],[17,"XNPreeditState_0","","",null,null],[17,"XNSeparatorofNestedList_0","","",null,null],[17,"XBufferOverflow","","",null,null],[17,"XLookupNone","","",null,null],[17,"XLookupChars","","",null,null],[17,"XLookupKeySym","","",null,null],[17,"XLookupBoth","","",null,null],[17,"XkbActionMessageLength","","",null,null],[17,"XkbOD_Success","","",null,null],[17,"XkbOD_BadLibraryVersion","","",null,null],[17,"XkbOD_ConnectionRefused","","",null,null],[17,"XkbOD_NonXkbServer","","",null,null],[17,"XkbOD_BadServerVersion","","",null,null],[17,"XkbLC_ForceLatinLookup","","",null,null],[17,"XkbLC_ConsumeLookupMods","","",null,null],[17,"XkbLC_AlwaysConsumeShiftAndLock","","",null,null],[17,"XkbLC_IgnoreNewKeyboards","","",null,null],[17,"XkbLC_ControlFallback","","",null,null],[17,"XkbLC_ConsumeKeysOnComposeFail","","",null,null],[17,"XkbLC_ComposeLED","","",null,null],[17,"XkbLC_BeepOnComposeFail","","",null,null],[17,"XkbLC_AllComposeControls","","",null,null],[17,"XkbLC_AllControls","","",null,null],[17,"XkbNewKeyboardNotify","","",null,null],[17,"XkbMapNotify","","",null,null],[17,"XkbStateNotify","","",null,null],[17,"XkbControlsNotify","","",null,null],[17,"XkbIndicatorStateNotify","","",null,null],[17,"XkbIndicatorMapNotify","","",null,null],[17,"XkbNamesNotify","","",null,null],[17,"XkbCompatMapNotify","","",null,null],[17,"XkbBellNotify","","",null,null],[17,"XkbActionMessage","","",null,null],[17,"XkbAccessXNotify","","",null,null],[17,"XkbExtensionDeviceNotify","","",null,null],[17,"XkbNewKeyboardNotifyMask","","",null,null],[17,"XkbMapNotifyMask","","",null,null],[17,"XkbStateNotifyMask","","",null,null],[17,"XkbControlsNotifyMask","","",null,null],[17,"XkbIndicatorStateNotifyMask","","",null,null],[17,"XkbIndicatorMapNotifyMask","","",null,null],[17,"XkbNamesNotifyMask","","",null,null],[17,"XkbCompatMapNotifyMask","","",null,null],[17,"XkbBellNotifyMask","","",null,null],[17,"XkbActionMessageMask","","",null,null],[17,"XkbAccessXNotifyMask","","",null,null],[17,"XkbExtensionDeviceNotifyMask","","",null,null],[17,"XkbAllEventsMask","","",null,null],[17,"NoValue","","",null,null],[17,"XValue","","",null,null],[17,"YValue","","",null,null],[17,"WidthValue","","",null,null],[17,"HeightValue","","",null,null],[17,"AllValues","","",null,null],[17,"XNegative","","",null,null],[17,"YNegative","","",null,null],[17,"InputHint","","",null,null],[17,"StateHint","","",null,null],[17,"IconPixmapHint","","",null,null],[17,"IconWindowHint","","",null,null],[17,"IconPositionHint","","",null,null],[17,"IconMaskHint","","",null,null],[17,"WindowGroupHint","","",null,null],[17,"AllHints","","",null,null],[17,"XUrgencyHint","","",null,null],[17,"XStringStyle","","",null,null],[17,"XCompoundTextStyle","","",null,null],[17,"XTextStyle","","",null,null],[17,"XStdICCTextStyle","","",null,null],[17,"XUTF8StringStyle","","",null,null],[11,"open","","",2,{"inputs":[],"output":{"generics":["xlib","openerror"],"name":"result"}}],[11,"clone","","",97,{"inputs":[{"name":"self"}],"output":{"name":"xevent"}}],[11,"get_type","","",97,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[11,"fmt","","",97,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_mut","","",97,{"inputs":[{"name":"self"}],"output":{"name":"xanyevent"}}],[11,"as_ref","","",97,{"inputs":[{"name":"self"}],"output":{"name":"xanyevent"}}],[11,"from","","",97,{"inputs":[{"name":"xanyevent"}],"output":{"name":"xevent"}}],[11,"from","","",97,{"inputs":[{"name":"xanyevent"}],"output":{"name":"xevent"}}],[11,"from","","",3,{"inputs":[{"name":"xevent"}],"output":{"name":"xanyevent"}}],[11,"from","","",3,{"inputs":[{"name":"xevent"}],"output":{"name":"xanyevent"}}],[11,"as_mut","","",97,{"inputs":[{"name":"self"}],"output":{"name":"xbuttonevent"}}],[11,"as_ref","","",97,{"inputs":[{"name":"self"}],"output":{"name":"xbuttonevent"}}],[11,"from","","",97,{"inputs":[{"name":"xbuttonevent"}],"output":{"name":"xevent"}}],[11,"from","","",97,{"inputs":[{"name":"xbuttonevent"}],"output":{"name":"xevent"}}],[11,"from","","",4,{"inputs":[{"name":"xevent"}],"output":{"name":"xbuttonevent"}}],[11,"from","","",4,{"inputs":[{"name":"xevent"}],"output":{"name":"xbuttonevent"}}],[11,"as_mut","","",97,{"inputs":[{"name":"self"}],"output":{"name":"xcirculateevent"}}],[11,"as_ref","","",97,{"inputs":[{"name":"self"}],"output":{"name":"xcirculateevent"}}],[11,"from","","",97,{"inputs":[{"name":"xcirculateevent"}],"output":{"name":"xevent"}}],[11,"from","","",97,{"inputs":[{"name":"xcirculateevent"}],"output":{"name":"xevent"}}],[11,"from","","",5,{"inputs":[{"name":"xevent"}],"output":{"name":"xcirculateevent"}}],[11,"from","","",5,{"inputs":[{"name":"xevent"}],"output":{"name":"xcirculateevent"}}],[11,"as_mut","","",97,{"inputs":[{"name":"self"}],"output":{"name":"xcirculaterequestevent"}}],[11,"as_ref","","",97,{"inputs":[{"name":"self"}],"output":{"name":"xcirculaterequestevent"}}],[11,"from","","",97,{"inputs":[{"name":"xcirculaterequestevent"}],"output":{"name":"xevent"}}],[11,"from","","",97,{"inputs":[{"name":"xcirculaterequestevent"}],"output":{"name":"xevent"}}],[11,"from","","",6,{"inputs":[{"name":"xevent"}],"output":{"name":"xcirculaterequestevent"}}],[11,"from","","",6,{"inputs":[{"name":"xevent"}],"output":{"name":"xcirculaterequestevent"}}],[11,"as_mut","","",97,{"inputs":[{"name":"self"}],"output":{"name":"xclientmessageevent"}}],[11,"as_ref","","",97,{"inputs":[{"name":"self"}],"output":{"name":"xclientmessageevent"}}],[11,"from","","",97,{"inputs":[{"name":"xclientmessageevent"}],"output":{"name":"xevent"}}],[11,"from","","",97,{"inputs":[{"name":"xclientmessageevent"}],"output":{"name":"xevent"}}],[11,"from","","",7,{"inputs":[{"name":"xevent"}],"output":{"name":"xclientmessageevent"}}],[11,"from","","",7,{"inputs":[{"name":"xevent"}],"output":{"name":"xclientmessageevent"}}],[11,"as_mut","","",97,{"inputs":[{"name":"self"}],"output":{"name":"xcolormapevent"}}],[11,"as_ref","","",97,{"inputs":[{"name":"self"}],"output":{"name":"xcolormapevent"}}],[11,"from","","",97,{"inputs":[{"name":"xcolormapevent"}],"output":{"name":"xevent"}}],[11,"from","","",97,{"inputs":[{"name":"xcolormapevent"}],"output":{"name":"xevent"}}],[11,"from","","",8,{"inputs":[{"name":"xevent"}],"output":{"name":"xcolormapevent"}}],[11,"from","","",8,{"inputs":[{"name":"xevent"}],"output":{"name":"xcolormapevent"}}],[11,"as_mut","","",97,{"inputs":[{"name":"self"}],"output":{"name":"xconfigureevent"}}],[11,"as_ref","","",97,{"inputs":[{"name":"self"}],"output":{"name":"xconfigureevent"}}],[11,"from","","",97,{"inputs":[{"name":"xconfigureevent"}],"output":{"name":"xevent"}}],[11,"from","","",97,{"inputs":[{"name":"xconfigureevent"}],"output":{"name":"xevent"}}],[11,"from","","",9,{"inputs":[{"name":"xevent"}],"output":{"name":"xconfigureevent"}}],[11,"from","","",9,{"inputs":[{"name":"xevent"}],"output":{"name":"xconfigureevent"}}],[11,"as_mut","","",97,{"inputs":[{"name":"self"}],"output":{"name":"xconfigurerequestevent"}}],[11,"as_ref","","",97,{"inputs":[{"name":"self"}],"output":{"name":"xconfigurerequestevent"}}],[11,"from","","",97,{"inputs":[{"name":"xconfigurerequestevent"}],"output":{"name":"xevent"}}],[11,"from","","",97,{"inputs":[{"name":"xconfigurerequestevent"}],"output":{"name":"xevent"}}],[11,"from","","",10,{"inputs":[{"name":"xevent"}],"output":{"name":"xconfigurerequestevent"}}],[11,"from","","",10,{"inputs":[{"name":"xevent"}],"output":{"name":"xconfigurerequestevent"}}],[11,"as_mut","","",97,{"inputs":[{"name":"self"}],"output":{"name":"xcreatewindowevent"}}],[11,"as_ref","","",97,{"inputs":[{"name":"self"}],"output":{"name":"xcreatewindowevent"}}],[11,"from","","",97,{"inputs":[{"name":"xcreatewindowevent"}],"output":{"name":"xevent"}}],[11,"from","","",97,{"inputs":[{"name":"xcreatewindowevent"}],"output":{"name":"xevent"}}],[11,"from","","",11,{"inputs":[{"name":"xevent"}],"output":{"name":"xcreatewindowevent"}}],[11,"from","","",11,{"inputs":[{"name":"xevent"}],"output":{"name":"xcreatewindowevent"}}],[11,"as_mut","","",97,{"inputs":[{"name":"self"}],"output":{"name":"xcrossingevent"}}],[11,"as_ref","","",97,{"inputs":[{"name":"self"}],"output":{"name":"xcrossingevent"}}],[11,"from","","",97,{"inputs":[{"name":"xcrossingevent"}],"output":{"name":"xevent"}}],[11,"from","","",97,{"inputs":[{"name":"xcrossingevent"}],"output":{"name":"xevent"}}],[11,"from","","",12,{"inputs":[{"name":"xevent"}],"output":{"name":"xcrossingevent"}}],[11,"from","","",12,{"inputs":[{"name":"xevent"}],"output":{"name":"xcrossingevent"}}],[11,"as_mut","","",97,{"inputs":[{"name":"self"}],"output":{"name":"xdestroywindowevent"}}],[11,"as_ref","","",97,{"inputs":[{"name":"self"}],"output":{"name":"xdestroywindowevent"}}],[11,"from","","",97,{"inputs":[{"name":"xdestroywindowevent"}],"output":{"name":"xevent"}}],[11,"from","","",97,{"inputs":[{"name":"xdestroywindowevent"}],"output":{"name":"xevent"}}],[11,"from","","",13,{"inputs":[{"name":"xevent"}],"output":{"name":"xdestroywindowevent"}}],[11,"from","","",13,{"inputs":[{"name":"xevent"}],"output":{"name":"xdestroywindowevent"}}],[11,"as_mut","","",97,{"inputs":[{"name":"self"}],"output":{"name":"xerrorevent"}}],[11,"as_ref","","",97,{"inputs":[{"name":"self"}],"output":{"name":"xerrorevent"}}],[11,"from","","",97,{"inputs":[{"name":"xerrorevent"}],"output":{"name":"xevent"}}],[11,"from","","",97,{"inputs":[{"name":"xerrorevent"}],"output":{"name":"xevent"}}],[11,"from","","",14,{"inputs":[{"name":"xevent"}],"output":{"name":"xerrorevent"}}],[11,"from","","",14,{"inputs":[{"name":"xevent"}],"output":{"name":"xerrorevent"}}],[11,"as_mut","","",97,{"inputs":[{"name":"self"}],"output":{"name":"xexposeevent"}}],[11,"as_ref","","",97,{"inputs":[{"name":"self"}],"output":{"name":"xexposeevent"}}],[11,"from","","",97,{"inputs":[{"name":"xexposeevent"}],"output":{"name":"xevent"}}],[11,"from","","",97,{"inputs":[{"name":"xexposeevent"}],"output":{"name":"xevent"}}],[11,"from","","",15,{"inputs":[{"name":"xevent"}],"output":{"name":"xexposeevent"}}],[11,"from","","",15,{"inputs":[{"name":"xevent"}],"output":{"name":"xexposeevent"}}],[11,"as_mut","","",97,{"inputs":[{"name":"self"}],"output":{"name":"xfocuschangeevent"}}],[11,"as_ref","","",97,{"inputs":[{"name":"self"}],"output":{"name":"xfocuschangeevent"}}],[11,"from","","",97,{"inputs":[{"name":"xfocuschangeevent"}],"output":{"name":"xevent"}}],[11,"from","","",97,{"inputs":[{"name":"xfocuschangeevent"}],"output":{"name":"xevent"}}],[11,"from","","",16,{"inputs":[{"name":"xevent"}],"output":{"name":"xfocuschangeevent"}}],[11,"from","","",16,{"inputs":[{"name":"xevent"}],"output":{"name":"xfocuschangeevent"}}],[11,"as_mut","","",97,{"inputs":[{"name":"self"}],"output":{"name":"xgenericeventcookie"}}],[11,"as_ref","","",97,{"inputs":[{"name":"self"}],"output":{"name":"xgenericeventcookie"}}],[11,"from","","",97,{"inputs":[{"name":"xgenericeventcookie"}],"output":{"name":"xevent"}}],[11,"from","","",97,{"inputs":[{"name":"xgenericeventcookie"}],"output":{"name":"xevent"}}],[11,"from","","",68,{"inputs":[{"name":"xevent"}],"output":{"name":"xgenericeventcookie"}}],[11,"from","","",68,{"inputs":[{"name":"xevent"}],"output":{"name":"xgenericeventcookie"}}],[11,"as_mut","","",97,{"inputs":[{"name":"self"}],"output":{"name":"xgraphicsexposeevent"}}],[11,"as_ref","","",97,{"inputs":[{"name":"self"}],"output":{"name":"xgraphicsexposeevent"}}],[11,"from","","",97,{"inputs":[{"name":"xgraphicsexposeevent"}],"output":{"name":"xevent"}}],[11,"from","","",97,{"inputs":[{"name":"xgraphicsexposeevent"}],"output":{"name":"xevent"}}],[11,"from","","",17,{"inputs":[{"name":"xevent"}],"output":{"name":"xgraphicsexposeevent"}}],[11,"from","","",17,{"inputs":[{"name":"xevent"}],"output":{"name":"xgraphicsexposeevent"}}],[11,"as_mut","","",97,{"inputs":[{"name":"self"}],"output":{"name":"xgravityevent"}}],[11,"as_ref","","",97,{"inputs":[{"name":"self"}],"output":{"name":"xgravityevent"}}],[11,"from","","",97,{"inputs":[{"name":"xgravityevent"}],"output":{"name":"xevent"}}],[11,"from","","",97,{"inputs":[{"name":"xgravityevent"}],"output":{"name":"xevent"}}],[11,"from","","",18,{"inputs":[{"name":"xevent"}],"output":{"name":"xgravityevent"}}],[11,"from","","",18,{"inputs":[{"name":"xevent"}],"output":{"name":"xgravityevent"}}],[11,"as_mut","","",97,{"inputs":[{"name":"self"}],"output":{"name":"xkeyevent"}}],[11,"as_ref","","",97,{"inputs":[{"name":"self"}],"output":{"name":"xkeyevent"}}],[11,"from","","",97,{"inputs":[{"name":"xkeyevent"}],"output":{"name":"xevent"}}],[11,"from","","",97,{"inputs":[{"name":"xkeyevent"}],"output":{"name":"xevent"}}],[11,"from","","",19,{"inputs":[{"name":"xevent"}],"output":{"name":"xkeyevent"}}],[11,"from","","",19,{"inputs":[{"name":"xevent"}],"output":{"name":"xkeyevent"}}],[11,"as_mut","","",97,{"inputs":[{"name":"self"}],"output":{"name":"xkeymapevent"}}],[11,"as_ref","","",97,{"inputs":[{"name":"self"}],"output":{"name":"xkeymapevent"}}],[11,"from","","",97,{"inputs":[{"name":"xkeymapevent"}],"output":{"name":"xevent"}}],[11,"from","","",97,{"inputs":[{"name":"xkeymapevent"}],"output":{"name":"xevent"}}],[11,"from","","",20,{"inputs":[{"name":"xevent"}],"output":{"name":"xkeymapevent"}}],[11,"from","","",20,{"inputs":[{"name":"xevent"}],"output":{"name":"xkeymapevent"}}],[11,"as_mut","","",97,{"inputs":[{"name":"self"}],"output":{"name":"xmapevent"}}],[11,"as_ref","","",97,{"inputs":[{"name":"self"}],"output":{"name":"xmapevent"}}],[11,"from","","",97,{"inputs":[{"name":"xmapevent"}],"output":{"name":"xevent"}}],[11,"from","","",97,{"inputs":[{"name":"xmapevent"}],"output":{"name":"xevent"}}],[11,"from","","",21,{"inputs":[{"name":"xevent"}],"output":{"name":"xmapevent"}}],[11,"from","","",21,{"inputs":[{"name":"xevent"}],"output":{"name":"xmapevent"}}],[11,"as_mut","","",97,{"inputs":[{"name":"self"}],"output":{"name":"xmappingevent"}}],[11,"as_ref","","",97,{"inputs":[{"name":"self"}],"output":{"name":"xmappingevent"}}],[11,"from","","",97,{"inputs":[{"name":"xmappingevent"}],"output":{"name":"xevent"}}],[11,"from","","",97,{"inputs":[{"name":"xmappingevent"}],"output":{"name":"xevent"}}],[11,"from","","",22,{"inputs":[{"name":"xevent"}],"output":{"name":"xmappingevent"}}],[11,"from","","",22,{"inputs":[{"name":"xevent"}],"output":{"name":"xmappingevent"}}],[11,"as_mut","","",97,{"inputs":[{"name":"self"}],"output":{"name":"xmaprequestevent"}}],[11,"as_ref","","",97,{"inputs":[{"name":"self"}],"output":{"name":"xmaprequestevent"}}],[11,"from","","",97,{"inputs":[{"name":"xmaprequestevent"}],"output":{"name":"xevent"}}],[11,"from","","",97,{"inputs":[{"name":"xmaprequestevent"}],"output":{"name":"xevent"}}],[11,"from","","",23,{"inputs":[{"name":"xevent"}],"output":{"name":"xmaprequestevent"}}],[11,"from","","",23,{"inputs":[{"name":"xevent"}],"output":{"name":"xmaprequestevent"}}],[11,"as_mut","","",97,{"inputs":[{"name":"self"}],"output":{"name":"xmotionevent"}}],[11,"as_ref","","",97,{"inputs":[{"name":"self"}],"output":{"name":"xmotionevent"}}],[11,"from","","",97,{"inputs":[{"name":"xmotionevent"}],"output":{"name":"xevent"}}],[11,"from","","",97,{"inputs":[{"name":"xmotionevent"}],"output":{"name":"xevent"}}],[11,"from","","",24,{"inputs":[{"name":"xevent"}],"output":{"name":"xmotionevent"}}],[11,"from","","",24,{"inputs":[{"name":"xevent"}],"output":{"name":"xmotionevent"}}],[11,"as_mut","","",97,{"inputs":[{"name":"self"}],"output":{"name":"xnoexposeevent"}}],[11,"as_ref","","",97,{"inputs":[{"name":"self"}],"output":{"name":"xnoexposeevent"}}],[11,"from","","",97,{"inputs":[{"name":"xnoexposeevent"}],"output":{"name":"xevent"}}],[11,"from","","",97,{"inputs":[{"name":"xnoexposeevent"}],"output":{"name":"xevent"}}],[11,"from","","",25,{"inputs":[{"name":"xevent"}],"output":{"name":"xnoexposeevent"}}],[11,"from","","",25,{"inputs":[{"name":"xevent"}],"output":{"name":"xnoexposeevent"}}],[11,"as_mut","","",97,{"inputs":[{"name":"self"}],"output":{"name":"xpropertyevent"}}],[11,"as_ref","","",97,{"inputs":[{"name":"self"}],"output":{"name":"xpropertyevent"}}],[11,"from","","",97,{"inputs":[{"name":"xpropertyevent"}],"output":{"name":"xevent"}}],[11,"from","","",97,{"inputs":[{"name":"xpropertyevent"}],"output":{"name":"xevent"}}],[11,"from","","",26,{"inputs":[{"name":"xevent"}],"output":{"name":"xpropertyevent"}}],[11,"from","","",26,{"inputs":[{"name":"xevent"}],"output":{"name":"xpropertyevent"}}],[11,"as_mut","","",97,{"inputs":[{"name":"self"}],"output":{"name":"xreparentevent"}}],[11,"as_ref","","",97,{"inputs":[{"name":"self"}],"output":{"name":"xreparentevent"}}],[11,"from","","",97,{"inputs":[{"name":"xreparentevent"}],"output":{"name":"xevent"}}],[11,"from","","",97,{"inputs":[{"name":"xreparentevent"}],"output":{"name":"xevent"}}],[11,"from","","",27,{"inputs":[{"name":"xevent"}],"output":{"name":"xreparentevent"}}],[11,"from","","",27,{"inputs":[{"name":"xevent"}],"output":{"name":"xreparentevent"}}],[11,"as_mut","","",97,{"inputs":[{"name":"self"}],"output":{"name":"xresizerequestevent"}}],[11,"as_ref","","",97,{"inputs":[{"name":"self"}],"output":{"name":"xresizerequestevent"}}],[11,"from","","",97,{"inputs":[{"name":"xresizerequestevent"}],"output":{"name":"xevent"}}],[11,"from","","",97,{"inputs":[{"name":"xresizerequestevent"}],"output":{"name":"xevent"}}],[11,"from","","",28,{"inputs":[{"name":"xevent"}],"output":{"name":"xresizerequestevent"}}],[11,"from","","",28,{"inputs":[{"name":"xevent"}],"output":{"name":"xresizerequestevent"}}],[11,"as_mut","","",97,{"inputs":[{"name":"self"}],"output":{"name":"xselectionclearevent"}}],[11,"as_ref","","",97,{"inputs":[{"name":"self"}],"output":{"name":"xselectionclearevent"}}],[11,"from","","",97,{"inputs":[{"name":"xselectionclearevent"}],"output":{"name":"xevent"}}],[11,"from","","",97,{"inputs":[{"name":"xselectionclearevent"}],"output":{"name":"xevent"}}],[11,"from","","",29,{"inputs":[{"name":"xevent"}],"output":{"name":"xselectionclearevent"}}],[11,"from","","",29,{"inputs":[{"name":"xevent"}],"output":{"name":"xselectionclearevent"}}],[11,"as_mut","","",97,{"inputs":[{"name":"self"}],"output":{"name":"xselectionevent"}}],[11,"as_ref","","",97,{"inputs":[{"name":"self"}],"output":{"name":"xselectionevent"}}],[11,"from","","",97,{"inputs":[{"name":"xselectionevent"}],"output":{"name":"xevent"}}],[11,"from","","",97,{"inputs":[{"name":"xselectionevent"}],"output":{"name":"xevent"}}],[11,"from","","",30,{"inputs":[{"name":"xevent"}],"output":{"name":"xselectionevent"}}],[11,"from","","",30,{"inputs":[{"name":"xevent"}],"output":{"name":"xselectionevent"}}],[11,"as_mut","","",97,{"inputs":[{"name":"self"}],"output":{"name":"xselectionrequestevent"}}],[11,"as_ref","","",97,{"inputs":[{"name":"self"}],"output":{"name":"xselectionrequestevent"}}],[11,"from","","",97,{"inputs":[{"name":"xselectionrequestevent"}],"output":{"name":"xevent"}}],[11,"from","","",97,{"inputs":[{"name":"xselectionrequestevent"}],"output":{"name":"xevent"}}],[11,"from","","",31,{"inputs":[{"name":"xevent"}],"output":{"name":"xselectionrequestevent"}}],[11,"from","","",31,{"inputs":[{"name":"xevent"}],"output":{"name":"xselectionrequestevent"}}],[11,"as_mut","","",97,{"inputs":[{"name":"self"}],"output":{"name":"xunmapevent"}}],[11,"as_ref","","",97,{"inputs":[{"name":"self"}],"output":{"name":"xunmapevent"}}],[11,"from","","",97,{"inputs":[{"name":"xunmapevent"}],"output":{"name":"xevent"}}],[11,"from","","",97,{"inputs":[{"name":"xunmapevent"}],"output":{"name":"xevent"}}],[11,"from","","",32,{"inputs":[{"name":"xevent"}],"output":{"name":"xunmapevent"}}],[11,"from","","",32,{"inputs":[{"name":"xevent"}],"output":{"name":"xunmapevent"}}],[11,"as_mut","","",97,{"inputs":[{"name":"self"}],"output":{"name":"xvisibilityevent"}}],[11,"as_ref","","",97,{"inputs":[{"name":"self"}],"output":{"name":"xvisibilityevent"}}],[11,"from","","",97,{"inputs":[{"name":"xvisibilityevent"}],"output":{"name":"xevent"}}],[11,"from","","",97,{"inputs":[{"name":"xvisibilityevent"}],"output":{"name":"xevent"}}],[11,"from","","",33,{"inputs":[{"name":"xevent"}],"output":{"name":"xvisibilityevent"}}],[11,"from","","",33,{"inputs":[{"name":"xevent"}],"output":{"name":"xvisibilityevent"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"xanyevent"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"xanyevent"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"xanyevent"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"xbuttonevent"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"xbuttonevent"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"xbuttonevent"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"xcirculateevent"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"xcirculateevent"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"xcirculateevent"}],"output":{"name":"bool"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"xcirculaterequestevent"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"xcirculaterequestevent"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"xcirculaterequestevent"}],"output":{"name":"bool"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"xclientmessageevent"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"xclientmessageevent"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"xclientmessageevent"}],"output":{"name":"bool"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"xcolormapevent"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"xcolormapevent"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"xcolormapevent"}],"output":{"name":"bool"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"xconfigureevent"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"xconfigureevent"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"xconfigureevent"}],"output":{"name":"bool"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"xconfigurerequestevent"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"xconfigurerequestevent"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"xconfigurerequestevent"}],"output":{"name":"bool"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"xcreatewindowevent"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"xcreatewindowevent"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"xcreatewindowevent"}],"output":{"name":"bool"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"xcrossingevent"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"xcrossingevent"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"xcrossingevent"}],"output":{"name":"bool"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"xdestroywindowevent"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"xdestroywindowevent"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"xdestroywindowevent"}],"output":{"name":"bool"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"xerrorevent"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"xerrorevent"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"xerrorevent"}],"output":{"name":"bool"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"xexposeevent"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"xexposeevent"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"xexposeevent"}],"output":{"name":"bool"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"xfocuschangeevent"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"xfocuschangeevent"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"xfocuschangeevent"}],"output":{"name":"bool"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"xgraphicsexposeevent"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"xgraphicsexposeevent"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"xgraphicsexposeevent"}],"output":{"name":"bool"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"xgravityevent"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"xgravityevent"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"self"},{"name":"xgravityevent"}],"output":{"name":"bool"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"xkeyevent"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"xkeyevent"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"self"},{"name":"xkeyevent"}],"output":{"name":"bool"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"xkeymapevent"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"xkeymapevent"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"self"},{"name":"xkeymapevent"}],"output":{"name":"bool"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"xmapevent"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"xmapevent"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"self"},{"name":"xmapevent"}],"output":{"name":"bool"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"xmappingevent"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"xmappingevent"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"self"},{"name":"xmappingevent"}],"output":{"name":"bool"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"xmaprequestevent"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"xmaprequestevent"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"self"},{"name":"xmaprequestevent"}],"output":{"name":"bool"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"xmotionevent"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"xmotionevent"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"self"},{"name":"xmotionevent"}],"output":{"name":"bool"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"xnoexposeevent"}}],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"xnoexposeevent"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"self"},{"name":"xnoexposeevent"}],"output":{"name":"bool"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"xpropertyevent"}}],[11,"eq","","",26,{"inputs":[{"name":"self"},{"name":"xpropertyevent"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"self"},{"name":"xpropertyevent"}],"output":{"name":"bool"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"xreparentevent"}}],[11,"eq","","",27,{"inputs":[{"name":"self"},{"name":"xreparentevent"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"self"},{"name":"xreparentevent"}],"output":{"name":"bool"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"xresizerequestevent"}}],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"xresizerequestevent"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"self"},{"name":"xresizerequestevent"}],"output":{"name":"bool"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"xselectionclearevent"}}],[11,"eq","","",29,{"inputs":[{"name":"self"},{"name":"xselectionclearevent"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"self"},{"name":"xselectionclearevent"}],"output":{"name":"bool"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"xselectionevent"}}],[11,"eq","","",30,{"inputs":[{"name":"self"},{"name":"xselectionevent"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"self"},{"name":"xselectionevent"}],"output":{"name":"bool"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"xselectionrequestevent"}}],[11,"eq","","",31,{"inputs":[{"name":"self"},{"name":"xselectionrequestevent"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"self"},{"name":"xselectionrequestevent"}],"output":{"name":"bool"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"xunmapevent"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"xunmapevent"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"self"},{"name":"xunmapevent"}],"output":{"name":"bool"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"xvisibilityevent"}}],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"xvisibilityevent"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"self"},{"name":"xvisibilityevent"}],"output":{"name":"bool"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"_xkbdesc"}}],[11,"eq","","",35,{"inputs":[{"name":"self"},{"name":"_xkbdesc"}],"output":{"name":"bool"}}],[11,"ne","","",35,{"inputs":[{"name":"self"},{"name":"_xkbdesc"}],"output":{"name":"bool"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"_xkbkeyaliasrec"}}],[11,"eq","","",37,{"inputs":[{"name":"self"},{"name":"_xkbkeyaliasrec"}],"output":{"name":"bool"}}],[11,"ne","","",37,{"inputs":[{"name":"self"},{"name":"_xkbkeyaliasrec"}],"output":{"name":"bool"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"_xkbkeynamerec"}}],[11,"eq","","",38,{"inputs":[{"name":"self"},{"name":"_xkbkeynamerec"}],"output":{"name":"bool"}}],[11,"ne","","",38,{"inputs":[{"name":"self"},{"name":"_xkbkeynamerec"}],"output":{"name":"bool"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"_xkbnamesrec"}}],[11,"eq","","",39,{"inputs":[{"name":"self"},{"name":"_xkbnamesrec"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"self"},{"name":"_xkbnamesrec"}],"output":{"name":"bool"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"xkbanyevent"}}],[11,"eq","","",40,{"inputs":[{"name":"self"},{"name":"xkbanyevent"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"self"},{"name":"xkbanyevent"}],"output":{"name":"bool"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"xkbnewkeyboardnotifyevent"}}],[11,"eq","","",41,{"inputs":[{"name":"self"},{"name":"xkbnewkeyboardnotifyevent"}],"output":{"name":"bool"}}],[11,"ne","","",41,{"inputs":[{"name":"self"},{"name":"xkbnewkeyboardnotifyevent"}],"output":{"name":"bool"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"_xkbmapnotifyevent"}}],[11,"eq","","",42,{"inputs":[{"name":"self"},{"name":"_xkbmapnotifyevent"}],"output":{"name":"bool"}}],[11,"ne","","",42,{"inputs":[{"name":"self"},{"name":"_xkbmapnotifyevent"}],"output":{"name":"bool"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"xkbstatenotifyevent"}}],[11,"eq","","",43,{"inputs":[{"name":"self"},{"name":"xkbstatenotifyevent"}],"output":{"name":"bool"}}],[11,"ne","","",43,{"inputs":[{"name":"self"},{"name":"xkbstatenotifyevent"}],"output":{"name":"bool"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"_xkbcontrolsnotifyevent"}}],[11,"eq","","",44,{"inputs":[{"name":"self"},{"name":"_xkbcontrolsnotifyevent"}],"output":{"name":"bool"}}],[11,"ne","","",44,{"inputs":[{"name":"self"},{"name":"_xkbcontrolsnotifyevent"}],"output":{"name":"bool"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"xkbindicatornotifyevent"}}],[11,"eq","","",45,{"inputs":[{"name":"self"},{"name":"xkbindicatornotifyevent"}],"output":{"name":"bool"}}],[11,"ne","","",45,{"inputs":[{"name":"self"},{"name":"xkbindicatornotifyevent"}],"output":{"name":"bool"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"_xkbnamesnotifyevent"}}],[11,"eq","","",46,{"inputs":[{"name":"self"},{"name":"_xkbnamesnotifyevent"}],"output":{"name":"bool"}}],[11,"ne","","",46,{"inputs":[{"name":"self"},{"name":"_xkbnamesnotifyevent"}],"output":{"name":"bool"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"xkbcompatmapnotifyevent"}}],[11,"eq","","",47,{"inputs":[{"name":"self"},{"name":"xkbcompatmapnotifyevent"}],"output":{"name":"bool"}}],[11,"ne","","",47,{"inputs":[{"name":"self"},{"name":"xkbcompatmapnotifyevent"}],"output":{"name":"bool"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"xkbbellnotifyevent"}}],[11,"eq","","",48,{"inputs":[{"name":"self"},{"name":"xkbbellnotifyevent"}],"output":{"name":"bool"}}],[11,"ne","","",48,{"inputs":[{"name":"self"},{"name":"xkbbellnotifyevent"}],"output":{"name":"bool"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"xkbactionmessageevent"}}],[11,"eq","","",49,{"inputs":[{"name":"self"},{"name":"xkbactionmessageevent"}],"output":{"name":"bool"}}],[11,"ne","","",49,{"inputs":[{"name":"self"},{"name":"xkbactionmessageevent"}],"output":{"name":"bool"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"xkbaccessxnotifyevent"}}],[11,"eq","","",50,{"inputs":[{"name":"self"},{"name":"xkbaccessxnotifyevent"}],"output":{"name":"bool"}}],[11,"ne","","",50,{"inputs":[{"name":"self"},{"name":"xkbaccessxnotifyevent"}],"output":{"name":"bool"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"_xkbextensiondevicenotifyevent"}}],[11,"eq","","",51,{"inputs":[{"name":"self"},{"name":"_xkbextensiondevicenotifyevent"}],"output":{"name":"bool"}}],[11,"ne","","",51,{"inputs":[{"name":"self"},{"name":"_xkbextensiondevicenotifyevent"}],"output":{"name":"bool"}}],[11,"fmt","","",98,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",98,{"inputs":[{"name":"self"}],"output":{"name":"xkbevent"}}],[11,"eq","","",98,{"inputs":[{"name":"self"},{"name":"xkbevent"}],"output":{"name":"bool"}}],[11,"ne","","",98,{"inputs":[{"name":"self"},{"name":"xkbevent"}],"output":{"name":"bool"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"depth"}}],[11,"eq","","",52,{"inputs":[{"name":"self"},{"name":"depth"}],"output":{"name":"bool"}}],[11,"ne","","",52,{"inputs":[{"name":"self"},{"name":"depth"}],"output":{"name":"bool"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"screen"}}],[11,"eq","","",53,{"inputs":[{"name":"self"},{"name":"screen"}],"output":{"name":"bool"}}],[11,"ne","","",53,{"inputs":[{"name":"self"},{"name":"screen"}],"output":{"name":"bool"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"screenformat"}}],[11,"eq","","",54,{"inputs":[{"name":"self"},{"name":"screenformat"}],"output":{"name":"bool"}}],[11,"ne","","",54,{"inputs":[{"name":"self"},{"name":"screenformat"}],"output":{"name":"bool"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"visual"}}],[11,"eq","","",55,{"inputs":[{"name":"self"},{"name":"visual"}],"output":{"name":"bool"}}],[11,"ne","","",55,{"inputs":[{"name":"self"},{"name":"visual"}],"output":{"name":"bool"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"xarc"}}],[11,"eq","","",56,{"inputs":[{"name":"self"},{"name":"xarc"}],"output":{"name":"bool"}}],[11,"ne","","",56,{"inputs":[{"name":"self"},{"name":"xarc"}],"output":{"name":"bool"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"xchar2b"}}],[11,"eq","","",57,{"inputs":[{"name":"self"},{"name":"xchar2b"}],"output":{"name":"bool"}}],[11,"ne","","",57,{"inputs":[{"name":"self"},{"name":"xchar2b"}],"output":{"name":"bool"}}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"xcharstruct"}}],[11,"eq","","",58,{"inputs":[{"name":"self"},{"name":"xcharstruct"}],"output":{"name":"bool"}}],[11,"ne","","",58,{"inputs":[{"name":"self"},{"name":"xcharstruct"}],"output":{"name":"bool"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"xclasshint"}}],[11,"eq","","",59,{"inputs":[{"name":"self"},{"name":"xclasshint"}],"output":{"name":"bool"}}],[11,"ne","","",59,{"inputs":[{"name":"self"},{"name":"xclasshint"}],"output":{"name":"bool"}}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"xcolor"}}],[11,"eq","","",60,{"inputs":[{"name":"self"},{"name":"xcolor"}],"output":{"name":"bool"}}],[11,"ne","","",60,{"inputs":[{"name":"self"},{"name":"xcolor"}],"output":{"name":"bool"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"xcomposestatus"}}],[11,"eq","","",61,{"inputs":[{"name":"self"},{"name":"xcomposestatus"}],"output":{"name":"bool"}}],[11,"ne","","",61,{"inputs":[{"name":"self"},{"name":"xcomposestatus"}],"output":{"name":"bool"}}],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"xextcodes"}}],[11,"eq","","",62,{"inputs":[{"name":"self"},{"name":"xextcodes"}],"output":{"name":"bool"}}],[11,"ne","","",62,{"inputs":[{"name":"self"},{"name":"xextcodes"}],"output":{"name":"bool"}}],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"xfontprop"}}],[11,"eq","","",64,{"inputs":[{"name":"self"},{"name":"xfontprop"}],"output":{"name":"bool"}}],[11,"ne","","",64,{"inputs":[{"name":"self"},{"name":"xfontprop"}],"output":{"name":"bool"}}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"xfontsetextents"}}],[11,"eq","","",65,{"inputs":[{"name":"self"},{"name":"xfontsetextents"}],"output":{"name":"bool"}}],[11,"ne","","",65,{"inputs":[{"name":"self"},{"name":"xfontsetextents"}],"output":{"name":"bool"}}],[11,"fmt","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"xfontstruct"}}],[11,"eq","","",66,{"inputs":[{"name":"self"},{"name":"xfontstruct"}],"output":{"name":"bool"}}],[11,"ne","","",66,{"inputs":[{"name":"self"},{"name":"xfontstruct"}],"output":{"name":"bool"}}],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"xgcvalues"}}],[11,"eq","","",67,{"inputs":[{"name":"self"},{"name":"xgcvalues"}],"output":{"name":"bool"}}],[11,"ne","","",67,{"inputs":[{"name":"self"},{"name":"xgcvalues"}],"output":{"name":"bool"}}],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"xgenericeventcookie"}}],[11,"eq","","",68,{"inputs":[{"name":"self"},{"name":"xgenericeventcookie"}],"output":{"name":"bool"}}],[11,"ne","","",68,{"inputs":[{"name":"self"},{"name":"xgenericeventcookie"}],"output":{"name":"bool"}}],[11,"fmt","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"xhostaddress"}}],[11,"eq","","",69,{"inputs":[{"name":"self"},{"name":"xhostaddress"}],"output":{"name":"bool"}}],[11,"ne","","",69,{"inputs":[{"name":"self"},{"name":"xhostaddress"}],"output":{"name":"bool"}}],[11,"fmt","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"xiconsize"}}],[11,"eq","","",70,{"inputs":[{"name":"self"},{"name":"xiconsize"}],"output":{"name":"bool"}}],[11,"ne","","",70,{"inputs":[{"name":"self"},{"name":"xiconsize"}],"output":{"name":"bool"}}],[11,"fmt","","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"ximage"}}],[11,"eq","","",71,{"inputs":[{"name":"self"},{"name":"ximage"}],"output":{"name":"bool"}}],[11,"ne","","",71,{"inputs":[{"name":"self"},{"name":"ximage"}],"output":{"name":"bool"}}],[11,"fmt","","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"xkeyboardcontrol"}}],[11,"eq","","",72,{"inputs":[{"name":"self"},{"name":"xkeyboardcontrol"}],"output":{"name":"bool"}}],[11,"ne","","",72,{"inputs":[{"name":"self"},{"name":"xkeyboardcontrol"}],"output":{"name":"bool"}}],[11,"fmt","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"xkeyboardstate"}}],[11,"eq","","",73,{"inputs":[{"name":"self"},{"name":"xkeyboardstate"}],"output":{"name":"bool"}}],[11,"ne","","",73,{"inputs":[{"name":"self"},{"name":"xkeyboardstate"}],"output":{"name":"bool"}}],[11,"fmt","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",74,{"inputs":[{"name":"self"}],"output":{"name":"xmbtextitem"}}],[11,"eq","","",74,{"inputs":[{"name":"self"},{"name":"xmbtextitem"}],"output":{"name":"bool"}}],[11,"ne","","",74,{"inputs":[{"name":"self"},{"name":"xmbtextitem"}],"output":{"name":"bool"}}],[11,"fmt","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"xmodifierkeymap"}}],[11,"eq","","",75,{"inputs":[{"name":"self"},{"name":"xmodifierkeymap"}],"output":{"name":"bool"}}],[11,"ne","","",75,{"inputs":[{"name":"self"},{"name":"xmodifierkeymap"}],"output":{"name":"bool"}}],[11,"fmt","","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",76,{"inputs":[{"name":"self"}],"output":{"name":"xomcharsetlist"}}],[11,"eq","","",76,{"inputs":[{"name":"self"},{"name":"xomcharsetlist"}],"output":{"name":"bool"}}],[11,"ne","","",76,{"inputs":[{"name":"self"},{"name":"xomcharsetlist"}],"output":{"name":"bool"}}],[11,"fmt","","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",77,{"inputs":[{"name":"self"}],"output":{"name":"xpixmapformatvalues"}}],[11,"eq","","",77,{"inputs":[{"name":"self"},{"name":"xpixmapformatvalues"}],"output":{"name":"bool"}}],[11,"ne","","",77,{"inputs":[{"name":"self"},{"name":"xpixmapformatvalues"}],"output":{"name":"bool"}}],[11,"fmt","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"xpoint"}}],[11,"eq","","",78,{"inputs":[{"name":"self"},{"name":"xpoint"}],"output":{"name":"bool"}}],[11,"ne","","",78,{"inputs":[{"name":"self"},{"name":"xpoint"}],"output":{"name":"bool"}}],[11,"fmt","","",79,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",79,{"inputs":[{"name":"self"}],"output":{"name":"xrectangle"}}],[11,"eq","","",79,{"inputs":[{"name":"self"},{"name":"xrectangle"}],"output":{"name":"bool"}}],[11,"ne","","",79,{"inputs":[{"name":"self"},{"name":"xrectangle"}],"output":{"name":"bool"}}],[11,"fmt","","",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",80,{"inputs":[{"name":"self"}],"output":{"name":"xrmoptiondescrec"}}],[11,"eq","","",80,{"inputs":[{"name":"self"},{"name":"xrmoptiondescrec"}],"output":{"name":"bool"}}],[11,"ne","","",80,{"inputs":[{"name":"self"},{"name":"xrmoptiondescrec"}],"output":{"name":"bool"}}],[11,"fmt","","",81,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",81,{"inputs":[{"name":"self"}],"output":{"name":"xrmvalue"}}],[11,"eq","","",81,{"inputs":[{"name":"self"},{"name":"xrmvalue"}],"output":{"name":"bool"}}],[11,"ne","","",81,{"inputs":[{"name":"self"},{"name":"xrmvalue"}],"output":{"name":"bool"}}],[11,"fmt","","",82,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",82,{"inputs":[{"name":"self"}],"output":{"name":"xsegment"}}],[11,"eq","","",82,{"inputs":[{"name":"self"},{"name":"xsegment"}],"output":{"name":"bool"}}],[11,"ne","","",82,{"inputs":[{"name":"self"},{"name":"xsegment"}],"output":{"name":"bool"}}],[11,"fmt","","",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",83,{"inputs":[{"name":"self"}],"output":{"name":"xsetwindowattributes"}}],[11,"eq","","",83,{"inputs":[{"name":"self"},{"name":"xsetwindowattributes"}],"output":{"name":"bool"}}],[11,"ne","","",83,{"inputs":[{"name":"self"},{"name":"xsetwindowattributes"}],"output":{"name":"bool"}}],[11,"fmt","","",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",84,{"inputs":[{"name":"self"}],"output":{"name":"xsizehints"}}],[11,"eq","","",84,{"inputs":[{"name":"self"},{"name":"xsizehints"}],"output":{"name":"bool"}}],[11,"ne","","",84,{"inputs":[{"name":"self"},{"name":"xsizehints"}],"output":{"name":"bool"}}],[11,"fmt","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",85,{"inputs":[{"name":"self"}],"output":{"name":"xstandardcolormap"}}],[11,"eq","","",85,{"inputs":[{"name":"self"},{"name":"xstandardcolormap"}],"output":{"name":"bool"}}],[11,"ne","","",85,{"inputs":[{"name":"self"},{"name":"xstandardcolormap"}],"output":{"name":"bool"}}],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",86,{"inputs":[{"name":"self"}],"output":{"name":"xtextitem"}}],[11,"eq","","",86,{"inputs":[{"name":"self"},{"name":"xtextitem"}],"output":{"name":"bool"}}],[11,"ne","","",86,{"inputs":[{"name":"self"},{"name":"xtextitem"}],"output":{"name":"bool"}}],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",87,{"inputs":[{"name":"self"}],"output":{"name":"xtextitem16"}}],[11,"eq","","",87,{"inputs":[{"name":"self"},{"name":"xtextitem16"}],"output":{"name":"bool"}}],[11,"ne","","",87,{"inputs":[{"name":"self"},{"name":"xtextitem16"}],"output":{"name":"bool"}}],[11,"fmt","","",88,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",88,{"inputs":[{"name":"self"}],"output":{"name":"xtextproperty"}}],[11,"eq","","",88,{"inputs":[{"name":"self"},{"name":"xtextproperty"}],"output":{"name":"bool"}}],[11,"ne","","",88,{"inputs":[{"name":"self"},{"name":"xtextproperty"}],"output":{"name":"bool"}}],[11,"fmt","","",89,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",89,{"inputs":[{"name":"self"}],"output":{"name":"xtimecoord"}}],[11,"eq","","",89,{"inputs":[{"name":"self"},{"name":"xtimecoord"}],"output":{"name":"bool"}}],[11,"ne","","",89,{"inputs":[{"name":"self"},{"name":"xtimecoord"}],"output":{"name":"bool"}}],[11,"fmt","","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",90,{"inputs":[{"name":"self"}],"output":{"name":"xvisualinfo"}}],[11,"eq","","",90,{"inputs":[{"name":"self"},{"name":"xvisualinfo"}],"output":{"name":"bool"}}],[11,"ne","","",90,{"inputs":[{"name":"self"},{"name":"xvisualinfo"}],"output":{"name":"bool"}}],[11,"fmt","","",91,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",91,{"inputs":[{"name":"self"}],"output":{"name":"xwctextitem"}}],[11,"eq","","",91,{"inputs":[{"name":"self"},{"name":"xwctextitem"}],"output":{"name":"bool"}}],[11,"ne","","",91,{"inputs":[{"name":"self"},{"name":"xwctextitem"}],"output":{"name":"bool"}}],[11,"fmt","","",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",92,{"inputs":[{"name":"self"}],"output":{"name":"xwindowattributes"}}],[11,"eq","","",92,{"inputs":[{"name":"self"},{"name":"xwindowattributes"}],"output":{"name":"bool"}}],[11,"ne","","",92,{"inputs":[{"name":"self"},{"name":"xwindowattributes"}],"output":{"name":"bool"}}],[11,"fmt","","",93,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",93,{"inputs":[{"name":"self"}],"output":{"name":"xwindowchanges"}}],[11,"eq","","",93,{"inputs":[{"name":"self"},{"name":"xwindowchanges"}],"output":{"name":"bool"}}],[11,"ne","","",93,{"inputs":[{"name":"self"},{"name":"xwindowchanges"}],"output":{"name":"bool"}}],[11,"fmt","","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",94,{"inputs":[{"name":"self"}],"output":{"name":"xwmhints"}}],[11,"eq","","",94,{"inputs":[{"name":"self"},{"name":"xwmhints"}],"output":{"name":"bool"}}],[11,"ne","","",94,{"inputs":[{"name":"self"},{"name":"xwmhints"}],"output":{"name":"bool"}}],[11,"fmt","","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",95,{"inputs":[{"name":"self"}],"output":{"name":"aspectratio"}}],[11,"eq","","",95,{"inputs":[{"name":"self"},{"name":"aspectratio"}],"output":{"name":"bool"}}],[11,"ne","","",95,{"inputs":[{"name":"self"},{"name":"aspectratio"}],"output":{"name":"bool"}}],[11,"fmt","","",99,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",99,{"inputs":[{"name":"self"}],"output":{"name":"clientmessagedata"}}],[11,"default","","",99,{"inputs":[],"output":{"name":"clientmessagedata"}}],[11,"eq","","",99,{"inputs":[{"name":"self"},{"name":"clientmessagedata"}],"output":{"name":"bool"}}],[11,"ne","","",99,{"inputs":[{"name":"self"},{"name":"clientmessagedata"}],"output":{"name":"bool"}}],[11,"as_bytes","","",99,null],[11,"as_bytes_mut","","",99,null],[11,"as_longs","","",99,null],[11,"as_longs_mut","","",99,null],[11,"as_shorts","","",99,null],[11,"as_shorts_mut","","",99,null],[11,"get_byte","","",99,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"c_char"}}],[11,"get_long","","",99,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"c_long"}}],[11,"get_short","","",99,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"c_short"}}],[11,"new","","",99,{"inputs":[],"output":{"name":"clientmessagedata"}}],[11,"set_byte","","",99,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"c_char"}],"output":null}],[11,"set_long","","",99,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"c_long"}],"output":null}],[11,"set_short","","",99,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"c_short"}],"output":null}],[11,"as_mut","","",99,null],[11,"as_ref","","",99,null],[11,"from","","",99,null],[11,"as_mut","","",99,null],[11,"as_ref","","",99,null],[11,"from","","",99,null],[11,"as_mut","","",99,null],[11,"as_ref","","",99,null],[11,"from","","",99,null],[11,"as_mut","","",99,null],[11,"as_ref","","",99,null],[11,"from","","",99,null],[11,"as_mut","","",99,null],[11,"as_ref","","",99,null],[11,"from","","",99,null],[11,"as_mut","","",99,null],[11,"as_ref","","",99,null],[11,"from","","",99,null],[11,"fmt","","",96,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",96,{"inputs":[{"name":"self"}],"output":{"name":"imagefns"}}],[11,"eq","","",96,{"inputs":[{"name":"self"},{"name":"imagefns"}],"output":{"name":"bool"}}],[0,"dpms","x11_dl","",null,null],[3,"Xext","x11_dl::dpms","",null,null],[12,"DPMSQueryExtension","","",100,null],[12,"DPMSGetVersion","","",100,null],[12,"DPMSCapable","","",100,null],[12,"DPMSSetTimeouts","","",100,null],[12,"DPMSGetTimeouts","","",100,null],[12,"DPMSEnable","","",100,null],[12,"DPMSDisable","","",100,null],[12,"DPMSForceLevel","","",100,null],[12,"DPMSInfo","","",100,null],[17,"DPMSMajorVersion","","",null,null],[17,"DPMSMinorVersion","","",null,null],[17,"DPMSExtensionName","","",null,null],[17,"DPMSModeOn","","",null,null],[17,"DPMSModeStandby","","",null,null],[17,"DPMSModeSuspend","","",null,null],[17,"DPMSModeOff","","",null,null],[11,"open","","",100,{"inputs":[],"output":{"generics":["xext","openerror"],"name":"result"}}],[0,"glx","x11_dl","",null,null],[3,"Glx","x11_dl::glx","",null,null],[12,"glXChooseFBConfig","","",101,null],[12,"glXChooseVisual","","",101,null],[12,"glXCopyContext","","",101,null],[12,"glXCreateContext","","",101,null],[12,"glXCreateGLXPixmap","","",101,null],[12,"glXCreateNewContext","","",101,null],[12,"glXCreatePbuffer","","",101,null],[12,"glXCreatePixmap","","",101,null],[12,"glXCreateWindow","","",101,null],[12,"glXDestroyContext","","",101,null],[12,"glXDestroyGLXPixmap","","",101,null],[12,"glXDestroyPbuffer","","",101,null],[12,"glXDestroyPixmap","","",101,null],[12,"glXDestroyWindow","","",101,null],[12,"glXGetClientString","","",101,null],[12,"glXGetConfig","","",101,null],[12,"glXGetCurrentContext","","",101,null],[12,"glXGetCurrentDisplay","","",101,null],[12,"glXGetCurrentDrawable","","",101,null],[12,"glXGetCurrentReadDrawable","","",101,null],[12,"glXGetFBConfigAttrib","","",101,null],[12,"glXGetFBConfigs","","",101,null],[12,"glXGetProcAddress","","",101,null],[12,"glXGetProcAddressARB","","",101,null],[12,"glXGetSelectedEvent","","",101,null],[12,"glXGetVisualFromFBConfig","","",101,null],[12,"glXIsDirect","","",101,null],[12,"glXMakeContextCurrent","","",101,null],[12,"glXMakeCurrent","","",101,null],[12,"glXQueryContext","","",101,null],[12,"glXQueryDrawable","","",101,null],[12,"glXQueryExtension","","",101,null],[12,"glXQueryExtensionsString","","",101,null],[12,"glXQueryServerString","","",101,null],[12,"glXQueryVersion","","",101,null],[12,"glXSelectEvent","","",101,null],[12,"glXSwapBuffers","","",101,null],[12,"glXUseXFont","","",101,null],[12,"glXWaitGL","","",101,null],[12,"glXWaitX","","",101,null],[3,"__GLXcontextRec","","",null,null],[3,"__GLXFBConfigRec","","",null,null],[0,"arb","","",null,null],[17,"GLX_CONTEXT_MAJOR_VERSION_ARB","x11_dl::glx::arb","",null,null],[17,"GLX_CONTEXT_MINOR_VERSION_ARB","","",null,null],[17,"GLX_CONTEXT_FLAGS_ARB","","",null,null],[17,"GLX_CONTEXT_PROFILE_MASK_ARB","","",null,null],[17,"GLX_CONTEXT_DEBUG_BIT_ARB","","",null,null],[17,"GLX_CONTEXT_FORWARD_COMPATIBLE_BIT_ARB","","",null,null],[17,"GLX_CONTEXT_CORE_PROFILE_BIT_ARB","","",null,null],[17,"GLX_CONTEXT_COMPATIBILITY_PROFILE_BIT_ARB","","",null,null],[0,"ext","x11_dl::glx","",null,null],[17,"GLX_SWAP_INTERVAL_EXT","x11_dl::glx::ext","",null,null],[17,"GLX_MAX_SWAP_INTERVAL_EXT","","",null,null],[6,"GLXContext","x11_dl::glx","",null,null],[6,"GLXContextID","","",null,null],[6,"GLXDrawable","","",null,null],[6,"GLXFBConfig","","",null,null],[6,"GLXFBConfigID","","",null,null],[6,"GLXPbuffer","","",null,null],[6,"GLXPixmap","","",null,null],[6,"GLXWindow","","",null,null],[17,"GLX_SLOW_CONFIG","","",null,null],[17,"GLX_NON_CONFORMANT_CONFIG","","",null,null],[17,"GLX_WINDOW_BIT","","",null,null],[17,"GLX_PIXMAP_BIT","","",null,null],[17,"GLX_PBUFFER_BIT","","",null,null],[17,"GLX_USE_GL","","",null,null],[17,"GLX_BUFFER_SIZE","","",null,null],[17,"GLX_LEVEL","","",null,null],[17,"GLX_RGBA","","",null,null],[17,"GLX_DOUBLEBUFFER","","",null,null],[17,"GLX_STEREO","","",null,null],[17,"GLX_AUX_BUFFERS","","",null,null],[17,"GLX_RED_SIZE","","",null,null],[17,"GLX_GREEN_SIZE","","",null,null],[17,"GLX_BLUE_SIZE","","",null,null],[17,"GLX_ALPHA_SIZE","","",null,null],[17,"GLX_DEPTH_SIZE","","",null,null],[17,"GLX_STENCIL_SIZE","","",null,null],[17,"GLX_ACCUM_RED_SIZE","","",null,null],[17,"GLX_ACCUM_GREEN_SIZE","","",null,null],[17,"GLX_ACCUM_BLUE_SIZE","","",null,null],[17,"GLX_ACCUM_ALPHA_SIZE","","",null,null],[17,"GLX_CONFIG_CAVEAT","","",null,null],[17,"GLX_X_VISUAL_TYPE","","",null,null],[17,"GLX_TRANSPARENT_TYPE","","",null,null],[17,"GLX_TRANSPARENT_INDEX_VALUE","","",null,null],[17,"GLX_TRANSPARENT_RED_VALUE","","",null,null],[17,"GLX_TRANSPARENT_GREEN_VALUE","","",null,null],[17,"GLX_TRANSPARENT_BLUE_VALUE","","",null,null],[17,"GLX_TRANSPARENT_ALPHA_VALUE","","",null,null],[17,"GLX_VISUAL_ID","","",null,null],[17,"GLX_SCREEN","","",null,null],[17,"GLX_DRAWABLE_TYPE","","",null,null],[17,"GLX_RENDER_TYPE","","",null,null],[17,"GLX_X_RENDERABLE","","",null,null],[17,"GLX_FBCONFIG_ID","","",null,null],[17,"GLX_MAX_PBUFFER_WIDTH","","",null,null],[17,"GLX_MAX_PBUFFER_HEIGHT","","",null,null],[17,"GLX_MAX_PBUFFER_PIXELS","","",null,null],[17,"GLX_SAMPLE_BUFFERS","","",null,null],[17,"GLX_SAMPLES","","",null,null],[17,"GLX_DONT_CARE","","",null,null],[17,"GLX_NONE","","",null,null],[17,"GLX_RGBA_BIT","","",null,null],[17,"GLX_COLOR_INDEX_BIT","","",null,null],[17,"GLX_TRANSPARENT_RGB","","",null,null],[17,"GLX_TRANSPARENT_INDEX","","",null,null],[17,"GLX_TRUE_COLOR","","",null,null],[17,"GLX_DIRECT_COLOR","","",null,null],[17,"GLX_PSEUDO_COLOR","","",null,null],[17,"GLX_STATIC_COLOR","","",null,null],[17,"GLX_GRAY_SCALE","","",null,null],[17,"GLX_STATIC_GRAY","","",null,null],[17,"GLX_BAD_SCREEN","","",null,null],[17,"GLX_BAD_ATTRIBUTE","","",null,null],[17,"GLX_NO_EXTENSION","","",null,null],[17,"GLX_BAD_VISUAL","","",null,null],[17,"GLX_BAD_CONTEXT","","",null,null],[17,"GLX_BAD_VALUE","","",null,null],[17,"GLX_BAD_ENUM","","",null,null],[17,"GLX_VENDOR","","",null,null],[17,"GLX_VERSION","","",null,null],[17,"GLX_EXTENSIONS","","",null,null],[17,"GLX_FRONT_LEFT_BUFFER_BIT","","",null,null],[17,"GLX_FRONT_RIGHT_BUFFER_BIT","","",null,null],[17,"GLX_BACK_LEFT_BUFFER_BIT","","",null,null],[17,"GLX_BACK_RIGHT_BUFFER_BIT","","",null,null],[17,"GLX_AUX_BUFFERS_BIT","","",null,null],[17,"GLX_DEPTH_BUFFER_BIT","","",null,null],[17,"GLX_STENCIL_BUFFER_BIT","","",null,null],[17,"GLX_ACCUM_BUFFER_BIT","","",null,null],[17,"GLX_RGBA_TYPE","","",null,null],[17,"GLX_COLOR_INDEX_TYPE","","",null,null],[17,"GLX_PRESERVED_CONTENTS","","",null,null],[17,"GLX_LARGEST_PBUFFER","","",null,null],[17,"GLX_WIDTH","","",null,null],[17,"GLX_HEIGHT","","",null,null],[17,"GLX_PBUFFER_HEIGHT","","",null,null],[17,"GLX_PBUFFER_WIDTH","","",null,null],[17,"GLX_EVENT_MASK","","",null,null],[17,"GLX_PBUFFER_CLOBBER_MASK","","",null,null],[17,"GLX_DAMAGED","","",null,null],[17,"GLX_SAVED","","",null,null],[17,"GLX_WINDOW","","",null,null],[17,"GLX_PBUFFER","","",null,null],[11,"open","","",101,{"inputs":[],"output":{"generics":["glx","openerror"],"name":"result"}}],[0,"keysym","x11_dl","",null,null],[17,"XK_BackSpace","x11_dl::keysym","",null,null],[17,"XK_Tab","","",null,null],[17,"XK_Linefeed","","",null,null],[17,"XK_Clear","","",null,null],[17,"XK_Return","","",null,null],[17,"XK_Pause","","",null,null],[17,"XK_Scroll_Lock","","",null,null],[17,"XK_Sys_Req","","",null,null],[17,"XK_Escape","","",null,null],[17,"XK_Delete","","",null,null],[17,"XK_Multi_key","","",null,null],[17,"XK_Kanji","","",null,null],[17,"XK_Muhenkan","","",null,null],[17,"XK_Henkan_Mode","","",null,null],[17,"XK_Henkan","","",null,null],[17,"XK_Romaji","","",null,null],[17,"XK_Hiragana","","",null,null],[17,"XK_Katakana","","",null,null],[17,"XK_Hiragana_Katakana","","",null,null],[17,"XK_Zenkaku","","",null,null],[17,"XK_Hankaku","","",null,null],[17,"XK_Zenkaku_Hankaku","","",null,null],[17,"XK_Touroku","","",null,null],[17,"XK_Massyo","","",null,null],[17,"XK_Kana_Lock","","",null,null],[17,"XK_Kana_Shift","","",null,null],[17,"XK_Eisu_Shift","","",null,null],[17,"XK_Eisu_toggle","","",null,null],[17,"XK_Home","","",null,null],[17,"XK_Left","","",null,null],[17,"XK_Up","","",null,null],[17,"XK_Right","","",null,null],[17,"XK_Down","","",null,null],[17,"XK_Prior","","",null,null],[17,"XK_Page_Up","","",null,null],[17,"XK_Next","","",null,null],[17,"XK_Page_Down","","",null,null],[17,"XK_End","","",null,null],[17,"XK_Begin","","",null,null],[17,"XK_Win_L","","",null,null],[17,"XK_Win_R","","",null,null],[17,"XK_App","","",null,null],[17,"XK_Select","","",null,null],[17,"XK_Print","","",null,null],[17,"XK_Execute","","",null,null],[17,"XK_Insert","","",null,null],[17,"XK_Undo","","",null,null],[17,"XK_Redo","","",null,null],[17,"XK_Menu","","",null,null],[17,"XK_Find","","",null,null],[17,"XK_Cancel","","",null,null],[17,"XK_Help","","",null,null],[17,"XK_Break","","",null,null],[17,"XK_Mode_switch","","",null,null],[17,"XK_script_switch","","",null,null],[17,"XK_Num_Lock","","",null,null],[17,"XK_KP_Space","","",null,null],[17,"XK_KP_Tab","","",null,null],[17,"XK_KP_Enter","","",null,null],[17,"XK_KP_F1","","",null,null],[17,"XK_KP_F2","","",null,null],[17,"XK_KP_F3","","",null,null],[17,"XK_KP_F4","","",null,null],[17,"XK_KP_Home","","",null,null],[17,"XK_KP_Left","","",null,null],[17,"XK_KP_Up","","",null,null],[17,"XK_KP_Right","","",null,null],[17,"XK_KP_Down","","",null,null],[17,"XK_KP_Prior","","",null,null],[17,"XK_KP_Page_Up","","",null,null],[17,"XK_KP_Next","","",null,null],[17,"XK_KP_Page_Down","","",null,null],[17,"XK_KP_End","","",null,null],[17,"XK_KP_Begin","","",null,null],[17,"XK_KP_Insert","","",null,null],[17,"XK_KP_Delete","","",null,null],[17,"XK_KP_Equal","","",null,null],[17,"XK_KP_Multiply","","",null,null],[17,"XK_KP_Add","","",null,null],[17,"XK_KP_Separator","","",null,null],[17,"XK_KP_Subtract","","",null,null],[17,"XK_KP_Decimal","","",null,null],[17,"XK_KP_Divide","","",null,null],[17,"XK_KP_0","","",null,null],[17,"XK_KP_1","","",null,null],[17,"XK_KP_2","","",null,null],[17,"XK_KP_3","","",null,null],[17,"XK_KP_4","","",null,null],[17,"XK_KP_5","","",null,null],[17,"XK_KP_6","","",null,null],[17,"XK_KP_7","","",null,null],[17,"XK_KP_8","","",null,null],[17,"XK_KP_9","","",null,null],[17,"XK_F1","","",null,null],[17,"XK_F2","","",null,null],[17,"XK_F3","","",null,null],[17,"XK_F4","","",null,null],[17,"XK_F5","","",null,null],[17,"XK_F6","","",null,null],[17,"XK_F7","","",null,null],[17,"XK_F8","","",null,null],[17,"XK_F9","","",null,null],[17,"XK_F10","","",null,null],[17,"XK_F11","","",null,null],[17,"XK_L1","","",null,null],[17,"XK_F12","","",null,null],[17,"XK_L2","","",null,null],[17,"XK_F13","","",null,null],[17,"XK_L3","","",null,null],[17,"XK_F14","","",null,null],[17,"XK_L4","","",null,null],[17,"XK_F15","","",null,null],[17,"XK_L5","","",null,null],[17,"XK_F16","","",null,null],[17,"XK_L6","","",null,null],[17,"XK_F17","","",null,null],[17,"XK_L7","","",null,null],[17,"XK_F18","","",null,null],[17,"XK_L8","","",null,null],[17,"XK_F19","","",null,null],[17,"XK_L9","","",null,null],[17,"XK_F20","","",null,null],[17,"XK_L10","","",null,null],[17,"XK_F21","","",null,null],[17,"XK_R1","","",null,null],[17,"XK_F22","","",null,null],[17,"XK_R2","","",null,null],[17,"XK_F23","","",null,null],[17,"XK_R3","","",null,null],[17,"XK_F24","","",null,null],[17,"XK_R4","","",null,null],[17,"XK_F25","","",null,null],[17,"XK_R5","","",null,null],[17,"XK_F26","","",null,null],[17,"XK_R6","","",null,null],[17,"XK_F27","","",null,null],[17,"XK_R7","","",null,null],[17,"XK_F28","","",null,null],[17,"XK_R8","","",null,null],[17,"XK_F29","","",null,null],[17,"XK_R9","","",null,null],[17,"XK_F30","","",null,null],[17,"XK_R10","","",null,null],[17,"XK_F31","","",null,null],[17,"XK_R11","","",null,null],[17,"XK_F32","","",null,null],[17,"XK_R12","","",null,null],[17,"XK_F33","","",null,null],[17,"XK_R13","","",null,null],[17,"XK_F34","","",null,null],[17,"XK_R14","","",null,null],[17,"XK_F35","","",null,null],[17,"XK_R15","","",null,null],[17,"XK_Shift_L","","",null,null],[17,"XK_Shift_R","","",null,null],[17,"XK_Control_L","","",null,null],[17,"XK_Control_R","","",null,null],[17,"XK_Caps_Lock","","",null,null],[17,"XK_Shift_Lock","","",null,null],[17,"XK_Meta_L","","",null,null],[17,"XK_Meta_R","","",null,null],[17,"XK_Alt_L","","",null,null],[17,"XK_Alt_R","","",null,null],[17,"XK_Super_L","","",null,null],[17,"XK_Super_R","","",null,null],[17,"XK_Hyper_L","","",null,null],[17,"XK_Hyper_R","","",null,null],[17,"XK_space","","",null,null],[17,"XK_exclam","","",null,null],[17,"XK_quotedbl","","",null,null],[17,"XK_numbersign","","",null,null],[17,"XK_dollar","","",null,null],[17,"XK_percent","","",null,null],[17,"XK_ampersand","","",null,null],[17,"XK_apostrophe","","",null,null],[17,"XK_quoteright","","",null,null],[17,"XK_parenleft","","",null,null],[17,"XK_parenright","","",null,null],[17,"XK_asterisk","","",null,null],[17,"XK_plus","","",null,null],[17,"XK_comma","","",null,null],[17,"XK_minus","","",null,null],[17,"XK_period","","",null,null],[17,"XK_slash","","",null,null],[17,"XK_0","","",null,null],[17,"XK_1","","",null,null],[17,"XK_2","","",null,null],[17,"XK_3","","",null,null],[17,"XK_4","","",null,null],[17,"XK_5","","",null,null],[17,"XK_6","","",null,null],[17,"XK_7","","",null,null],[17,"XK_8","","",null,null],[17,"XK_9","","",null,null],[17,"XK_colon","","",null,null],[17,"XK_semicolon","","",null,null],[17,"XK_less","","",null,null],[17,"XK_equal","","",null,null],[17,"XK_greater","","",null,null],[17,"XK_question","","",null,null],[17,"XK_at","","",null,null],[17,"XK_A","","",null,null],[17,"XK_B","","",null,null],[17,"XK_C","","",null,null],[17,"XK_D","","",null,null],[17,"XK_E","","",null,null],[17,"XK_F","","",null,null],[17,"XK_G","","",null,null],[17,"XK_H","","",null,null],[17,"XK_I","","",null,null],[17,"XK_J","","",null,null],[17,"XK_K","","",null,null],[17,"XK_L","","",null,null],[17,"XK_M","","",null,null],[17,"XK_N","","",null,null],[17,"XK_O","","",null,null],[17,"XK_P","","",null,null],[17,"XK_Q","","",null,null],[17,"XK_R","","",null,null],[17,"XK_S","","",null,null],[17,"XK_T","","",null,null],[17,"XK_U","","",null,null],[17,"XK_V","","",null,null],[17,"XK_W","","",null,null],[17,"XK_X","","",null,null],[17,"XK_Y","","",null,null],[17,"XK_Z","","",null,null],[17,"XK_bracketleft","","",null,null],[17,"XK_backslash","","",null,null],[17,"XK_bracketright","","",null,null],[17,"XK_asciicircum","","",null,null],[17,"XK_underscore","","",null,null],[17,"XK_grave","","",null,null],[17,"XK_quoteleft","","",null,null],[17,"XK_a","","",null,null],[17,"XK_b","","",null,null],[17,"XK_c","","",null,null],[17,"XK_d","","",null,null],[17,"XK_e","","",null,null],[17,"XK_f","","",null,null],[17,"XK_g","","",null,null],[17,"XK_h","","",null,null],[17,"XK_i","","",null,null],[17,"XK_j","","",null,null],[17,"XK_k","","",null,null],[17,"XK_l","","",null,null],[17,"XK_m","","",null,null],[17,"XK_n","","",null,null],[17,"XK_o","","",null,null],[17,"XK_p","","",null,null],[17,"XK_q","","",null,null],[17,"XK_r","","",null,null],[17,"XK_s","","",null,null],[17,"XK_t","","",null,null],[17,"XK_u","","",null,null],[17,"XK_v","","",null,null],[17,"XK_w","","",null,null],[17,"XK_x","","",null,null],[17,"XK_y","","",null,null],[17,"XK_z","","",null,null],[17,"XK_braceleft","","",null,null],[17,"XK_bar","","",null,null],[17,"XK_braceright","","",null,null],[17,"XK_asciitilde","","",null,null],[17,"XK_nobreakspace","","",null,null],[17,"XK_exclamdown","","",null,null],[17,"XK_cent","","",null,null],[17,"XK_sterling","","",null,null],[17,"XK_currency","","",null,null],[17,"XK_yen","","",null,null],[17,"XK_brokenbar","","",null,null],[17,"XK_section","","",null,null],[17,"XK_diaeresis","","",null,null],[17,"XK_copyright","","",null,null],[17,"XK_ordfeminine","","",null,null],[17,"XK_guillemotleft","","",null,null],[17,"XK_notsign","","",null,null],[17,"XK_hyphen","","",null,null],[17,"XK_registered","","",null,null],[17,"XK_macron","","",null,null],[17,"XK_degree","","",null,null],[17,"XK_plusminus","","",null,null],[17,"XK_twosuperior","","",null,null],[17,"XK_threesuperior","","",null,null],[17,"XK_acute","","",null,null],[17,"XK_mu","","",null,null],[17,"XK_paragraph","","",null,null],[17,"XK_periodcentered","","",null,null],[17,"XK_cedilla","","",null,null],[17,"XK_onesuperior","","",null,null],[17,"XK_masculine","","",null,null],[17,"XK_guillemotright","","",null,null],[17,"XK_onequarter","","",null,null],[17,"XK_onehalf","","",null,null],[17,"XK_threequarters","","",null,null],[17,"XK_questiondown","","",null,null],[17,"XK_Agrave","","",null,null],[17,"XK_Aacute","","",null,null],[17,"XK_Acircumflex","","",null,null],[17,"XK_Atilde","","",null,null],[17,"XK_Adiaeresis","","",null,null],[17,"XK_Aring","","",null,null],[17,"XK_AE","","",null,null],[17,"XK_Ccedilla","","",null,null],[17,"XK_Egrave","","",null,null],[17,"XK_Eacute","","",null,null],[17,"XK_Ecircumflex","","",null,null],[17,"XK_Ediaeresis","","",null,null],[17,"XK_Igrave","","",null,null],[17,"XK_Iacute","","",null,null],[17,"XK_Icircumflex","","",null,null],[17,"XK_Idiaeresis","","",null,null],[17,"XK_ETH","","",null,null],[17,"XK_Eth","","",null,null],[17,"XK_Ntilde","","",null,null],[17,"XK_Ograve","","",null,null],[17,"XK_Oacute","","",null,null],[17,"XK_Ocircumflex","","",null,null],[17,"XK_Otilde","","",null,null],[17,"XK_Odiaeresis","","",null,null],[17,"XK_multiply","","",null,null],[17,"XK_Ooblique","","",null,null],[17,"XK_Ugrave","","",null,null],[17,"XK_Uacute","","",null,null],[17,"XK_Ucircumflex","","",null,null],[17,"XK_Udiaeresis","","",null,null],[17,"XK_Yacute","","",null,null],[17,"XK_THORN","","",null,null],[17,"XK_Thorn","","",null,null],[17,"XK_ssharp","","",null,null],[17,"XK_agrave","","",null,null],[17,"XK_aacute","","",null,null],[17,"XK_acircumflex","","",null,null],[17,"XK_atilde","","",null,null],[17,"XK_adiaeresis","","",null,null],[17,"XK_aring","","",null,null],[17,"XK_ae","","",null,null],[17,"XK_ccedilla","","",null,null],[17,"XK_egrave","","",null,null],[17,"XK_eacute","","",null,null],[17,"XK_ecircumflex","","",null,null],[17,"XK_ediaeresis","","",null,null],[17,"XK_igrave","","",null,null],[17,"XK_iacute","","",null,null],[17,"XK_icircumflex","","",null,null],[17,"XK_idiaeresis","","",null,null],[17,"XK_eth","","",null,null],[17,"XK_ntilde","","",null,null],[17,"XK_ograve","","",null,null],[17,"XK_oacute","","",null,null],[17,"XK_ocircumflex","","",null,null],[17,"XK_otilde","","",null,null],[17,"XK_odiaeresis","","",null,null],[17,"XK_division","","",null,null],[17,"XK_oslash","","",null,null],[17,"XK_ugrave","","",null,null],[17,"XK_uacute","","",null,null],[17,"XK_ucircumflex","","",null,null],[17,"XK_udiaeresis","","",null,null],[17,"XK_yacute","","",null,null],[17,"XK_thorn","","",null,null],[17,"XK_ydiaeresis","","",null,null],[17,"XK_Aogonek","","",null,null],[17,"XK_breve","","",null,null],[17,"XK_Lstroke","","",null,null],[17,"XK_Lcaron","","",null,null],[17,"XK_Sacute","","",null,null],[17,"XK_Scaron","","",null,null],[17,"XK_Scedilla","","",null,null],[17,"XK_Tcaron","","",null,null],[17,"XK_Zacute","","",null,null],[17,"XK_Zcaron","","",null,null],[17,"XK_Zabovedot","","",null,null],[17,"XK_aogonek","","",null,null],[17,"XK_ogonek","","",null,null],[17,"XK_lstroke","","",null,null],[17,"XK_lcaron","","",null,null],[17,"XK_sacute","","",null,null],[17,"XK_caron","","",null,null],[17,"XK_scaron","","",null,null],[17,"XK_scedilla","","",null,null],[17,"XK_tcaron","","",null,null],[17,"XK_zacute","","",null,null],[17,"XK_doubleacute","","",null,null],[17,"XK_zcaron","","",null,null],[17,"XK_zabovedot","","",null,null],[17,"XK_Racute","","",null,null],[17,"XK_Abreve","","",null,null],[17,"XK_Lacute","","",null,null],[17,"XK_Cacute","","",null,null],[17,"XK_Ccaron","","",null,null],[17,"XK_Eogonek","","",null,null],[17,"XK_Ecaron","","",null,null],[17,"XK_Dcaron","","",null,null],[17,"XK_Dstroke","","",null,null],[17,"XK_Nacute","","",null,null],[17,"XK_Ncaron","","",null,null],[17,"XK_Odoubleacute","","",null,null],[17,"XK_Rcaron","","",null,null],[17,"XK_Uring","","",null,null],[17,"XK_Udoubleacute","","",null,null],[17,"XK_Tcedilla","","",null,null],[17,"XK_racute","","",null,null],[17,"XK_abreve","","",null,null],[17,"XK_lacute","","",null,null],[17,"XK_cacute","","",null,null],[17,"XK_ccaron","","",null,null],[17,"XK_eogonek","","",null,null],[17,"XK_ecaron","","",null,null],[17,"XK_dcaron","","",null,null],[17,"XK_dstroke","","",null,null],[17,"XK_nacute","","",null,null],[17,"XK_ncaron","","",null,null],[17,"XK_odoubleacute","","",null,null],[17,"XK_udoubleacute","","",null,null],[17,"XK_rcaron","","",null,null],[17,"XK_uring","","",null,null],[17,"XK_tcedilla","","",null,null],[17,"XK_abovedot","","",null,null],[17,"XK_Hstroke","","",null,null],[17,"XK_Hcircumflex","","",null,null],[17,"XK_Iabovedot","","",null,null],[17,"XK_Gbreve","","",null,null],[17,"XK_Jcircumflex","","",null,null],[17,"XK_hstroke","","",null,null],[17,"XK_hcircumflex","","",null,null],[17,"XK_idotless","","",null,null],[17,"XK_gbreve","","",null,null],[17,"XK_jcircumflex","","",null,null],[17,"XK_Cabovedot","","",null,null],[17,"XK_Ccircumflex","","",null,null],[17,"XK_Gabovedot","","",null,null],[17,"XK_Gcircumflex","","",null,null],[17,"XK_Ubreve","","",null,null],[17,"XK_Scircumflex","","",null,null],[17,"XK_cabovedot","","",null,null],[17,"XK_ccircumflex","","",null,null],[17,"XK_gabovedot","","",null,null],[17,"XK_gcircumflex","","",null,null],[17,"XK_ubreve","","",null,null],[17,"XK_scircumflex","","",null,null],[17,"XK_kra","","",null,null],[17,"XK_kappa","","",null,null],[17,"XK_Rcedilla","","",null,null],[17,"XK_Itilde","","",null,null],[17,"XK_Lcedilla","","",null,null],[17,"XK_Emacron","","",null,null],[17,"XK_Gcedilla","","",null,null],[17,"XK_Tslash","","",null,null],[17,"XK_rcedilla","","",null,null],[17,"XK_itilde","","",null,null],[17,"XK_lcedilla","","",null,null],[17,"XK_emacron","","",null,null],[17,"XK_gcedilla","","",null,null],[17,"XK_tslash","","",null,null],[17,"XK_ENG","","",null,null],[17,"XK_eng","","",null,null],[17,"XK_Amacron","","",null,null],[17,"XK_Iogonek","","",null,null],[17,"XK_Eabovedot","","",null,null],[17,"XK_Imacron","","",null,null],[17,"XK_Ncedilla","","",null,null],[17,"XK_Omacron","","",null,null],[17,"XK_Kcedilla","","",null,null],[17,"XK_Uogonek","","",null,null],[17,"XK_Utilde","","",null,null],[17,"XK_Umacron","","",null,null],[17,"XK_amacron","","",null,null],[17,"XK_iogonek","","",null,null],[17,"XK_eabovedot","","",null,null],[17,"XK_imacron","","",null,null],[17,"XK_ncedilla","","",null,null],[17,"XK_omacron","","",null,null],[17,"XK_kcedilla","","",null,null],[17,"XK_uogonek","","",null,null],[17,"XK_utilde","","",null,null],[17,"XK_umacron","","",null,null],[17,"XK_overline","","",null,null],[17,"XK_kana_fullstop","","",null,null],[17,"XK_kana_openingbracket","","",null,null],[17,"XK_kana_closingbracket","","",null,null],[17,"XK_kana_comma","","",null,null],[17,"XK_kana_conjunctive","","",null,null],[17,"XK_kana_middledot","","",null,null],[17,"XK_kana_WO","","",null,null],[17,"XK_kana_a","","",null,null],[17,"XK_kana_i","","",null,null],[17,"XK_kana_u","","",null,null],[17,"XK_kana_e","","",null,null],[17,"XK_kana_o","","",null,null],[17,"XK_kana_ya","","",null,null],[17,"XK_kana_yu","","",null,null],[17,"XK_kana_yo","","",null,null],[17,"XK_kana_tsu","","",null,null],[17,"XK_kana_tu","","",null,null],[17,"XK_prolongedsound","","",null,null],[17,"XK_kana_A","","",null,null],[17,"XK_kana_I","","",null,null],[17,"XK_kana_U","","",null,null],[17,"XK_kana_E","","",null,null],[17,"XK_kana_O","","",null,null],[17,"XK_kana_KA","","",null,null],[17,"XK_kana_KI","","",null,null],[17,"XK_kana_KU","","",null,null],[17,"XK_kana_KE","","",null,null],[17,"XK_kana_KO","","",null,null],[17,"XK_kana_SA","","",null,null],[17,"XK_kana_SHI","","",null,null],[17,"XK_kana_SU","","",null,null],[17,"XK_kana_SE","","",null,null],[17,"XK_kana_SO","","",null,null],[17,"XK_kana_TA","","",null,null],[17,"XK_kana_CHI","","",null,null],[17,"XK_kana_TI","","",null,null],[17,"XK_kana_TSU","","",null,null],[17,"XK_kana_TU","","",null,null],[17,"XK_kana_TE","","",null,null],[17,"XK_kana_TO","","",null,null],[17,"XK_kana_NA","","",null,null],[17,"XK_kana_NI","","",null,null],[17,"XK_kana_NU","","",null,null],[17,"XK_kana_NE","","",null,null],[17,"XK_kana_NO","","",null,null],[17,"XK_kana_HA","","",null,null],[17,"XK_kana_HI","","",null,null],[17,"XK_kana_FU","","",null,null],[17,"XK_kana_HU","","",null,null],[17,"XK_kana_HE","","",null,null],[17,"XK_kana_HO","","",null,null],[17,"XK_kana_MA","","",null,null],[17,"XK_kana_MI","","",null,null],[17,"XK_kana_MU","","",null,null],[17,"XK_kana_ME","","",null,null],[17,"XK_kana_MO","","",null,null],[17,"XK_kana_YA","","",null,null],[17,"XK_kana_YU","","",null,null],[17,"XK_kana_YO","","",null,null],[17,"XK_kana_RA","","",null,null],[17,"XK_kana_RI","","",null,null],[17,"XK_kana_RU","","",null,null],[17,"XK_kana_RE","","",null,null],[17,"XK_kana_RO","","",null,null],[17,"XK_kana_WA","","",null,null],[17,"XK_kana_N","","",null,null],[17,"XK_voicedsound","","",null,null],[17,"XK_semivoicedsound","","",null,null],[17,"XK_kana_switch","","",null,null],[17,"XK_Arabic_comma","","",null,null],[17,"XK_Arabic_semicolon","","",null,null],[17,"XK_Arabic_question_mark","","",null,null],[17,"XK_Arabic_hamza","","",null,null],[17,"XK_Arabic_maddaonalef","","",null,null],[17,"XK_Arabic_hamzaonalef","","",null,null],[17,"XK_Arabic_hamzaonwaw","","",null,null],[17,"XK_Arabic_hamzaunderalef","","",null,null],[17,"XK_Arabic_hamzaonyeh","","",null,null],[17,"XK_Arabic_alef","","",null,null],[17,"XK_Arabic_beh","","",null,null],[17,"XK_Arabic_tehmarbuta","","",null,null],[17,"XK_Arabic_teh","","",null,null],[17,"XK_Arabic_theh","","",null,null],[17,"XK_Arabic_jeem","","",null,null],[17,"XK_Arabic_hah","","",null,null],[17,"XK_Arabic_khah","","",null,null],[17,"XK_Arabic_dal","","",null,null],[17,"XK_Arabic_thal","","",null,null],[17,"XK_Arabic_ra","","",null,null],[17,"XK_Arabic_zain","","",null,null],[17,"XK_Arabic_seen","","",null,null],[17,"XK_Arabic_sheen","","",null,null],[17,"XK_Arabic_sad","","",null,null],[17,"XK_Arabic_dad","","",null,null],[17,"XK_Arabic_tah","","",null,null],[17,"XK_Arabic_zah","","",null,null],[17,"XK_Arabic_ain","","",null,null],[17,"XK_Arabic_ghain","","",null,null],[17,"XK_Arabic_tatweel","","",null,null],[17,"XK_Arabic_feh","","",null,null],[17,"XK_Arabic_qaf","","",null,null],[17,"XK_Arabic_kaf","","",null,null],[17,"XK_Arabic_lam","","",null,null],[17,"XK_Arabic_meem","","",null,null],[17,"XK_Arabic_noon","","",null,null],[17,"XK_Arabic_ha","","",null,null],[17,"XK_Arabic_heh","","",null,null],[17,"XK_Arabic_waw","","",null,null],[17,"XK_Arabic_alefmaksura","","",null,null],[17,"XK_Arabic_yeh","","",null,null],[17,"XK_Arabic_fathatan","","",null,null],[17,"XK_Arabic_dammatan","","",null,null],[17,"XK_Arabic_kasratan","","",null,null],[17,"XK_Arabic_fatha","","",null,null],[17,"XK_Arabic_damma","","",null,null],[17,"XK_Arabic_kasra","","",null,null],[17,"XK_Arabic_shadda","","",null,null],[17,"XK_Arabic_sukun","","",null,null],[17,"XK_Arabic_switch","","",null,null],[17,"XK_Serbian_dje","","",null,null],[17,"XK_Macedonia_gje","","",null,null],[17,"XK_Cyrillic_io","","",null,null],[17,"XK_Ukrainian_ie","","",null,null],[17,"XK_Ukranian_je","","",null,null],[17,"XK_Macedonia_dse","","",null,null],[17,"XK_Ukrainian_i","","",null,null],[17,"XK_Ukranian_i","","",null,null],[17,"XK_Ukrainian_yi","","",null,null],[17,"XK_Ukranian_yi","","",null,null],[17,"XK_Cyrillic_je","","",null,null],[17,"XK_Serbian_je","","",null,null],[17,"XK_Cyrillic_lje","","",null,null],[17,"XK_Serbian_lje","","",null,null],[17,"XK_Cyrillic_nje","","",null,null],[17,"XK_Serbian_nje","","",null,null],[17,"XK_Serbian_tshe","","",null,null],[17,"XK_Macedonia_kje","","",null,null],[17,"XK_Byelorussian_shortu","","",null,null],[17,"XK_Cyrillic_dzhe","","",null,null],[17,"XK_Serbian_dze","","",null,null],[17,"XK_numerosign","","",null,null],[17,"XK_Serbian_DJE","","",null,null],[17,"XK_Macedonia_GJE","","",null,null],[17,"XK_Cyrillic_IO","","",null,null],[17,"XK_Ukrainian_IE","","",null,null],[17,"XK_Ukranian_JE","","",null,null],[17,"XK_Macedonia_DSE","","",null,null],[17,"XK_Ukrainian_I","","",null,null],[17,"XK_Ukranian_I","","",null,null],[17,"XK_Ukrainian_YI","","",null,null],[17,"XK_Ukranian_YI","","",null,null],[17,"XK_Cyrillic_JE","","",null,null],[17,"XK_Serbian_JE","","",null,null],[17,"XK_Cyrillic_LJE","","",null,null],[17,"XK_Serbian_LJE","","",null,null],[17,"XK_Cyrillic_NJE","","",null,null],[17,"XK_Serbian_NJE","","",null,null],[17,"XK_Serbian_TSHE","","",null,null],[17,"XK_Macedonia_KJE","","",null,null],[17,"XK_Byelorussian_SHORTU","","",null,null],[17,"XK_Cyrillic_DZHE","","",null,null],[17,"XK_Serbian_DZE","","",null,null],[17,"XK_Cyrillic_yu","","",null,null],[17,"XK_Cyrillic_a","","",null,null],[17,"XK_Cyrillic_be","","",null,null],[17,"XK_Cyrillic_tse","","",null,null],[17,"XK_Cyrillic_de","","",null,null],[17,"XK_Cyrillic_ie","","",null,null],[17,"XK_Cyrillic_ef","","",null,null],[17,"XK_Cyrillic_ghe","","",null,null],[17,"XK_Cyrillic_ha","","",null,null],[17,"XK_Cyrillic_i","","",null,null],[17,"XK_Cyrillic_shorti","","",null,null],[17,"XK_Cyrillic_ka","","",null,null],[17,"XK_Cyrillic_el","","",null,null],[17,"XK_Cyrillic_em","","",null,null],[17,"XK_Cyrillic_en","","",null,null],[17,"XK_Cyrillic_o","","",null,null],[17,"XK_Cyrillic_pe","","",null,null],[17,"XK_Cyrillic_ya","","",null,null],[17,"XK_Cyrillic_er","","",null,null],[17,"XK_Cyrillic_es","","",null,null],[17,"XK_Cyrillic_te","","",null,null],[17,"XK_Cyrillic_u","","",null,null],[17,"XK_Cyrillic_zhe","","",null,null],[17,"XK_Cyrillic_ve","","",null,null],[17,"XK_Cyrillic_softsign","","",null,null],[17,"XK_Cyrillic_yeru","","",null,null],[17,"XK_Cyrillic_ze","","",null,null],[17,"XK_Cyrillic_sha","","",null,null],[17,"XK_Cyrillic_e","","",null,null],[17,"XK_Cyrillic_shcha","","",null,null],[17,"XK_Cyrillic_che","","",null,null],[17,"XK_Cyrillic_hardsign","","",null,null],[17,"XK_Cyrillic_YU","","",null,null],[17,"XK_Cyrillic_A","","",null,null],[17,"XK_Cyrillic_BE","","",null,null],[17,"XK_Cyrillic_TSE","","",null,null],[17,"XK_Cyrillic_DE","","",null,null],[17,"XK_Cyrillic_IE","","",null,null],[17,"XK_Cyrillic_EF","","",null,null],[17,"XK_Cyrillic_GHE","","",null,null],[17,"XK_Cyrillic_HA","","",null,null],[17,"XK_Cyrillic_I","","",null,null],[17,"XK_Cyrillic_SHORTI","","",null,null],[17,"XK_Cyrillic_KA","","",null,null],[17,"XK_Cyrillic_EL","","",null,null],[17,"XK_Cyrillic_EM","","",null,null],[17,"XK_Cyrillic_EN","","",null,null],[17,"XK_Cyrillic_O","","",null,null],[17,"XK_Cyrillic_PE","","",null,null],[17,"XK_Cyrillic_YA","","",null,null],[17,"XK_Cyrillic_ER","","",null,null],[17,"XK_Cyrillic_ES","","",null,null],[17,"XK_Cyrillic_TE","","",null,null],[17,"XK_Cyrillic_U","","",null,null],[17,"XK_Cyrillic_ZHE","","",null,null],[17,"XK_Cyrillic_VE","","",null,null],[17,"XK_Cyrillic_SOFTSIGN","","",null,null],[17,"XK_Cyrillic_YERU","","",null,null],[17,"XK_Cyrillic_ZE","","",null,null],[17,"XK_Cyrillic_SHA","","",null,null],[17,"XK_Cyrillic_E","","",null,null],[17,"XK_Cyrillic_SHCHA","","",null,null],[17,"XK_Cyrillic_CHE","","",null,null],[17,"XK_Cyrillic_HARDSIGN","","",null,null],[17,"XK_Greek_ALPHAaccent","","",null,null],[17,"XK_Greek_EPSILONaccent","","",null,null],[17,"XK_Greek_ETAaccent","","",null,null],[17,"XK_Greek_IOTAaccent","","",null,null],[17,"XK_Greek_IOTAdiaeresis","","",null,null],[17,"XK_Greek_OMICRONaccent","","",null,null],[17,"XK_Greek_UPSILONaccent","","",null,null],[17,"XK_Greek_UPSILONdieresis","","",null,null],[17,"XK_Greek_OMEGAaccent","","",null,null],[17,"XK_Greek_accentdieresis","","",null,null],[17,"XK_Greek_horizbar","","",null,null],[17,"XK_Greek_alphaaccent","","",null,null],[17,"XK_Greek_epsilonaccent","","",null,null],[17,"XK_Greek_etaaccent","","",null,null],[17,"XK_Greek_iotaaccent","","",null,null],[17,"XK_Greek_iotadieresis","","",null,null],[17,"XK_Greek_iotaaccentdieresis","","",null,null],[17,"XK_Greek_omicronaccent","","",null,null],[17,"XK_Greek_upsilonaccent","","",null,null],[17,"XK_Greek_upsilondieresis","","",null,null],[17,"XK_Greek_upsilonaccentdieresis","","",null,null],[17,"XK_Greek_omegaaccent","","",null,null],[17,"XK_Greek_ALPHA","","",null,null],[17,"XK_Greek_BETA","","",null,null],[17,"XK_Greek_GAMMA","","",null,null],[17,"XK_Greek_DELTA","","",null,null],[17,"XK_Greek_EPSILON","","",null,null],[17,"XK_Greek_ZETA","","",null,null],[17,"XK_Greek_ETA","","",null,null],[17,"XK_Greek_THETA","","",null,null],[17,"XK_Greek_IOTA","","",null,null],[17,"XK_Greek_KAPPA","","",null,null],[17,"XK_Greek_LAMDA","","",null,null],[17,"XK_Greek_LAMBDA","","",null,null],[17,"XK_Greek_MU","","",null,null],[17,"XK_Greek_NU","","",null,null],[17,"XK_Greek_XI","","",null,null],[17,"XK_Greek_OMICRON","","",null,null],[17,"XK_Greek_PI","","",null,null],[17,"XK_Greek_RHO","","",null,null],[17,"XK_Greek_SIGMA","","",null,null],[17,"XK_Greek_TAU","","",null,null],[17,"XK_Greek_UPSILON","","",null,null],[17,"XK_Greek_PHI","","",null,null],[17,"XK_Greek_CHI","","",null,null],[17,"XK_Greek_PSI","","",null,null],[17,"XK_Greek_OMEGA","","",null,null],[17,"XK_Greek_alpha","","",null,null],[17,"XK_Greek_beta","","",null,null],[17,"XK_Greek_gamma","","",null,null],[17,"XK_Greek_delta","","",null,null],[17,"XK_Greek_epsilon","","",null,null],[17,"XK_Greek_zeta","","",null,null],[17,"XK_Greek_eta","","",null,null],[17,"XK_Greek_theta","","",null,null],[17,"XK_Greek_iota","","",null,null],[17,"XK_Greek_kappa","","",null,null],[17,"XK_Greek_lamda","","",null,null],[17,"XK_Greek_lambda","","",null,null],[17,"XK_Greek_mu","","",null,null],[17,"XK_Greek_nu","","",null,null],[17,"XK_Greek_xi","","",null,null],[17,"XK_Greek_omicron","","",null,null],[17,"XK_Greek_pi","","",null,null],[17,"XK_Greek_rho","","",null,null],[17,"XK_Greek_sigma","","",null,null],[17,"XK_Greek_finalsmallsigma","","",null,null],[17,"XK_Greek_tau","","",null,null],[17,"XK_Greek_upsilon","","",null,null],[17,"XK_Greek_phi","","",null,null],[17,"XK_Greek_chi","","",null,null],[17,"XK_Greek_psi","","",null,null],[17,"XK_Greek_omega","","",null,null],[17,"XK_Greek_switch","","",null,null],[17,"XK_leftradical","","",null,null],[17,"XK_topleftradical","","",null,null],[17,"XK_horizconnector","","",null,null],[17,"XK_topintegral","","",null,null],[17,"XK_botintegral","","",null,null],[17,"XK_vertconnector","","",null,null],[17,"XK_topleftsqbracket","","",null,null],[17,"XK_botleftsqbracket","","",null,null],[17,"XK_toprightsqbracket","","",null,null],[17,"XK_botrightsqbracket","","",null,null],[17,"XK_topleftparens","","",null,null],[17,"XK_botleftparens","","",null,null],[17,"XK_toprightparens","","",null,null],[17,"XK_botrightparens","","",null,null],[17,"XK_leftmiddlecurlybrace","","",null,null],[17,"XK_rightmiddlecurlybrace","","",null,null],[17,"XK_topleftsummation","","",null,null],[17,"XK_botleftsummation","","",null,null],[17,"XK_topvertsummationconnector","","",null,null],[17,"XK_botvertsummationconnector","","",null,null],[17,"XK_toprightsummation","","",null,null],[17,"XK_botrightsummation","","",null,null],[17,"XK_rightmiddlesummation","","",null,null],[17,"XK_lessthanequal","","",null,null],[17,"XK_notequal","","",null,null],[17,"XK_greaterthanequal","","",null,null],[17,"XK_integral","","",null,null],[17,"XK_therefore","","",null,null],[17,"XK_variation","","",null,null],[17,"XK_infinity","","",null,null],[17,"XK_nabla","","",null,null],[17,"XK_approximate","","",null,null],[17,"XK_similarequal","","",null,null],[17,"XK_ifonlyif","","",null,null],[17,"XK_implies","","",null,null],[17,"XK_identical","","",null,null],[17,"XK_radical","","",null,null],[17,"XK_includedin","","",null,null],[17,"XK_includes","","",null,null],[17,"XK_intersection","","",null,null],[17,"XK_union","","",null,null],[17,"XK_logicaland","","",null,null],[17,"XK_logicalor","","",null,null],[17,"XK_partialderivative","","",null,null],[17,"XK_function","","",null,null],[17,"XK_leftarrow","","",null,null],[17,"XK_uparrow","","",null,null],[17,"XK_rightarrow","","",null,null],[17,"XK_downarrow","","",null,null],[17,"XK_blank","","",null,null],[17,"XK_soliddiamond","","",null,null],[17,"XK_checkerboard","","",null,null],[17,"XK_ht","","",null,null],[17,"XK_ff","","",null,null],[17,"XK_cr","","",null,null],[17,"XK_lf","","",null,null],[17,"XK_nl","","",null,null],[17,"XK_vt","","",null,null],[17,"XK_lowrightcorner","","",null,null],[17,"XK_uprightcorner","","",null,null],[17,"XK_upleftcorner","","",null,null],[17,"XK_lowleftcorner","","",null,null],[17,"XK_crossinglines","","",null,null],[17,"XK_horizlinescan1","","",null,null],[17,"XK_horizlinescan3","","",null,null],[17,"XK_horizlinescan5","","",null,null],[17,"XK_horizlinescan7","","",null,null],[17,"XK_horizlinescan9","","",null,null],[17,"XK_leftt","","",null,null],[17,"XK_rightt","","",null,null],[17,"XK_bott","","",null,null],[17,"XK_topt","","",null,null],[17,"XK_vertbar","","",null,null],[17,"XK_emspace","","",null,null],[17,"XK_enspace","","",null,null],[17,"XK_em3space","","",null,null],[17,"XK_em4space","","",null,null],[17,"XK_digitspace","","",null,null],[17,"XK_punctspace","","",null,null],[17,"XK_thinspace","","",null,null],[17,"XK_hairspace","","",null,null],[17,"XK_emdash","","",null,null],[17,"XK_endash","","",null,null],[17,"XK_signifblank","","",null,null],[17,"XK_ellipsis","","",null,null],[17,"XK_doubbaselinedot","","",null,null],[17,"XK_onethird","","",null,null],[17,"XK_twothirds","","",null,null],[17,"XK_onefifth","","",null,null],[17,"XK_twofifths","","",null,null],[17,"XK_threefifths","","",null,null],[17,"XK_fourfifths","","",null,null],[17,"XK_onesixth","","",null,null],[17,"XK_fivesixths","","",null,null],[17,"XK_careof","","",null,null],[17,"XK_figdash","","",null,null],[17,"XK_leftanglebracket","","",null,null],[17,"XK_decimalpoint","","",null,null],[17,"XK_rightanglebracket","","",null,null],[17,"XK_marker","","",null,null],[17,"XK_oneeighth","","",null,null],[17,"XK_threeeighths","","",null,null],[17,"XK_fiveeighths","","",null,null],[17,"XK_seveneighths","","",null,null],[17,"XK_trademark","","",null,null],[17,"XK_signaturemark","","",null,null],[17,"XK_trademarkincircle","","",null,null],[17,"XK_leftopentriangle","","",null,null],[17,"XK_rightopentriangle","","",null,null],[17,"XK_emopencircle","","",null,null],[17,"XK_emopenrectangle","","",null,null],[17,"XK_leftsinglequotemark","","",null,null],[17,"XK_rightsinglequotemark","","",null,null],[17,"XK_leftdoublequotemark","","",null,null],[17,"XK_rightdoublequotemark","","",null,null],[17,"XK_prescription","","",null,null],[17,"XK_minutes","","",null,null],[17,"XK_seconds","","",null,null],[17,"XK_latincross","","",null,null],[17,"XK_hexagram","","",null,null],[17,"XK_filledrectbullet","","",null,null],[17,"XK_filledlefttribullet","","",null,null],[17,"XK_filledrighttribullet","","",null,null],[17,"XK_emfilledcircle","","",null,null],[17,"XK_emfilledrect","","",null,null],[17,"XK_enopencircbullet","","",null,null],[17,"XK_enopensquarebullet","","",null,null],[17,"XK_openrectbullet","","",null,null],[17,"XK_opentribulletup","","",null,null],[17,"XK_opentribulletdown","","",null,null],[17,"XK_openstar","","",null,null],[17,"XK_enfilledcircbullet","","",null,null],[17,"XK_enfilledsqbullet","","",null,null],[17,"XK_filledtribulletup","","",null,null],[17,"XK_filledtribulletdown","","",null,null],[17,"XK_leftpointer","","",null,null],[17,"XK_rightpointer","","",null,null],[17,"XK_club","","",null,null],[17,"XK_diamond","","",null,null],[17,"XK_heart","","",null,null],[17,"XK_maltesecross","","",null,null],[17,"XK_dagger","","",null,null],[17,"XK_doubledagger","","",null,null],[17,"XK_checkmark","","",null,null],[17,"XK_ballotcross","","",null,null],[17,"XK_musicalsharp","","",null,null],[17,"XK_musicalflat","","",null,null],[17,"XK_malesymbol","","",null,null],[17,"XK_femalesymbol","","",null,null],[17,"XK_telephone","","",null,null],[17,"XK_telephonerecorder","","",null,null],[17,"XK_phonographcopyright","","",null,null],[17,"XK_caret","","",null,null],[17,"XK_singlelowquotemark","","",null,null],[17,"XK_doublelowquotemark","","",null,null],[17,"XK_cursor","","",null,null],[17,"XK_leftcaret","","",null,null],[17,"XK_rightcaret","","",null,null],[17,"XK_downcaret","","",null,null],[17,"XK_upcaret","","",null,null],[17,"XK_overbar","","",null,null],[17,"XK_downtack","","",null,null],[17,"XK_upshoe","","",null,null],[17,"XK_downstile","","",null,null],[17,"XK_underbar","","",null,null],[17,"XK_jot","","",null,null],[17,"XK_quad","","",null,null],[17,"XK_uptack","","",null,null],[17,"XK_circle","","",null,null],[17,"XK_upstile","","",null,null],[17,"XK_downshoe","","",null,null],[17,"XK_rightshoe","","",null,null],[17,"XK_leftshoe","","",null,null],[17,"XK_lefttack","","",null,null],[17,"XK_righttack","","",null,null],[17,"XK_hebrew_doublelowline","","",null,null],[17,"XK_hebrew_aleph","","",null,null],[17,"XK_hebrew_bet","","",null,null],[17,"XK_hebrew_beth","","",null,null],[17,"XK_hebrew_gimel","","",null,null],[17,"XK_hebrew_gimmel","","",null,null],[17,"XK_hebrew_dalet","","",null,null],[17,"XK_hebrew_daleth","","",null,null],[17,"XK_hebrew_he","","",null,null],[17,"XK_hebrew_waw","","",null,null],[17,"XK_hebrew_zain","","",null,null],[17,"XK_hebrew_zayin","","",null,null],[17,"XK_hebrew_chet","","",null,null],[17,"XK_hebrew_het","","",null,null],[17,"XK_hebrew_tet","","",null,null],[17,"XK_hebrew_teth","","",null,null],[17,"XK_hebrew_yod","","",null,null],[17,"XK_hebrew_finalkaph","","",null,null],[17,"XK_hebrew_kaph","","",null,null],[17,"XK_hebrew_lamed","","",null,null],[17,"XK_hebrew_finalmem","","",null,null],[17,"XK_hebrew_mem","","",null,null],[17,"XK_hebrew_finalnun","","",null,null],[17,"XK_hebrew_nun","","",null,null],[17,"XK_hebrew_samech","","",null,null],[17,"XK_hebrew_samekh","","",null,null],[17,"XK_hebrew_ayin","","",null,null],[17,"XK_hebrew_finalpe","","",null,null],[17,"XK_hebrew_pe","","",null,null],[17,"XK_hebrew_finalzade","","",null,null],[17,"XK_hebrew_finalzadi","","",null,null],[17,"XK_hebrew_zade","","",null,null],[17,"XK_hebrew_zadi","","",null,null],[17,"XK_hebrew_qoph","","",null,null],[17,"XK_hebrew_kuf","","",null,null],[17,"XK_hebrew_resh","","",null,null],[17,"XK_hebrew_shin","","",null,null],[17,"XK_hebrew_taw","","",null,null],[17,"XK_hebrew_taf","","",null,null],[17,"XK_Hebrew_switch","","",null,null],[17,"XF86XK_ModeLock","","",null,null],[17,"XF86XK_MonBrightnessUp","","",null,null],[17,"XF86XK_MonBrightnessDown","","",null,null],[17,"XF86XK_KbdLightOnOff","","",null,null],[17,"XF86XK_KbdBrightnessUp","","",null,null],[17,"XF86XK_KbdBrightnessDown","","",null,null],[17,"XF86XK_Standby","","",null,null],[17,"XF86XK_AudioLowerVolume","","",null,null],[17,"XF86XK_AudioMute","","",null,null],[17,"XF86XK_AudioRaiseVolume","","",null,null],[17,"XF86XK_AudioPlay","","",null,null],[17,"XF86XK_AudioStop","","",null,null],[17,"XF86XK_AudioPrev","","",null,null],[17,"XF86XK_AudioNext","","",null,null],[17,"XF86XK_HomePage","","",null,null],[17,"XF86XK_Mail","","",null,null],[17,"XF86XK_Start","","",null,null],[17,"XF86XK_Search","","",null,null],[17,"XF86XK_AudioRecord","","",null,null],[17,"XF86XK_Calculator","","",null,null],[17,"XF86XK_Memo","","",null,null],[17,"XF86XK_ToDoList","","",null,null],[17,"XF86XK_Calendar","","",null,null],[17,"XF86XK_PowerDown","","",null,null],[17,"XF86XK_ContrastAdjust","","",null,null],[17,"XF86XK_RockerUp","","",null,null],[17,"XF86XK_RockerDown","","",null,null],[17,"XF86XK_RockerEnter","","",null,null],[17,"XF86XK_Back","","",null,null],[17,"XF86XK_Forward","","",null,null],[17,"XF86XK_Stop","","",null,null],[17,"XF86XK_Refresh","","",null,null],[17,"XF86XK_PowerOff","","",null,null],[17,"XF86XK_WakeUp","","",null,null],[17,"XF86XK_Eject","","",null,null],[17,"XF86XK_ScreenSaver","","",null,null],[17,"XF86XK_WWW","","",null,null],[17,"XF86XK_Sleep","","",null,null],[17,"XF86XK_Favorites","","",null,null],[17,"XF86XK_AudioPause","","",null,null],[17,"XF86XK_AudioMedia","","",null,null],[17,"XF86XK_MyComputer","","",null,null],[17,"XF86XK_VendorHome","","",null,null],[17,"XF86XK_LightBulb","","",null,null],[17,"XF86XK_Shop","","",null,null],[17,"XF86XK_History","","",null,null],[17,"XF86XK_OpenURL","","",null,null],[17,"XF86XK_AddFavorite","","",null,null],[17,"XF86XK_HotLinks","","",null,null],[17,"XF86XK_BrightnessAdjust","","",null,null],[17,"XF86XK_Finance","","",null,null],[17,"XF86XK_Community","","",null,null],[17,"XF86XK_AudioRewind","","",null,null],[17,"XF86XK_BackForward","","",null,null],[17,"XF86XK_Launch0","","",null,null],[17,"XF86XK_Launch1","","",null,null],[17,"XF86XK_Launch2","","",null,null],[17,"XF86XK_Launch3","","",null,null],[17,"XF86XK_Launch4","","",null,null],[17,"XF86XK_Launch5","","",null,null],[17,"XF86XK_Launch6","","",null,null],[17,"XF86XK_Launch7","","",null,null],[17,"XF86XK_Launch8","","",null,null],[17,"XF86XK_Launch9","","",null,null],[17,"XF86XK_LaunchA","","",null,null],[17,"XF86XK_LaunchB","","",null,null],[17,"XF86XK_LaunchC","","",null,null],[17,"XF86XK_LaunchD","","",null,null],[17,"XF86XK_LaunchE","","",null,null],[17,"XF86XK_LaunchF","","",null,null],[17,"XF86XK_ApplicationLeft","","",null,null],[17,"XF86XK_ApplicationRight","","",null,null],[17,"XF86XK_Book","","",null,null],[17,"XF86XK_CD","","",null,null],[17,"XF86XK_Calculater","","",null,null],[17,"XF86XK_Clear","","",null,null],[17,"XF86XK_Close","","",null,null],[17,"XF86XK_Copy","","",null,null],[17,"XF86XK_Cut","","",null,null],[17,"XF86XK_Display","","",null,null],[17,"XF86XK_DOS","","",null,null],[17,"XF86XK_Documents","","",null,null],[17,"XF86XK_Excel","","",null,null],[17,"XF86XK_Explorer","","",null,null],[17,"XF86XK_Game","","",null,null],[17,"XF86XK_Go","","",null,null],[17,"XF86XK_iTouch","","",null,null],[17,"XF86XK_LogOff","","",null,null],[17,"XF86XK_Market","","",null,null],[17,"XF86XK_Meeting","","",null,null],[17,"XF86XK_MenuKB","","",null,null],[17,"XF86XK_MenuPB","","",null,null],[17,"XF86XK_MySites","","",null,null],[17,"XF86XK_New","","",null,null],[17,"XF86XK_News","","",null,null],[17,"XF86XK_OfficeHome","","",null,null],[17,"XF86XK_Open","","",null,null],[17,"XF86XK_Option","","",null,null],[17,"XF86XK_Paste","","",null,null],[17,"XF86XK_Phone","","",null,null],[17,"XF86XK_Q","","",null,null],[17,"XF86XK_Reply","","",null,null],[17,"XF86XK_Reload","","",null,null],[17,"XF86XK_RotateWindows","","",null,null],[17,"XF86XK_RotationPB","","",null,null],[17,"XF86XK_RotationKB","","",null,null],[17,"XF86XK_Save","","",null,null],[17,"XF86XK_ScrollUp","","",null,null],[17,"XF86XK_ScrollDown","","",null,null],[17,"XF86XK_ScrollClick","","",null,null],[17,"XF86XK_Send","","",null,null],[17,"XF86XK_Spell","","",null,null],[17,"XF86XK_SplitScreen","","",null,null],[17,"XF86XK_Support","","",null,null],[17,"XF86XK_TaskPane","","",null,null],[17,"XF86XK_Terminal","","",null,null],[17,"XF86XK_Tools","","",null,null],[17,"XF86XK_Travel","","",null,null],[17,"XF86XK_UserPB","","",null,null],[17,"XF86XK_User1KB","","",null,null],[17,"XF86XK_User2KB","","",null,null],[17,"XF86XK_Video","","",null,null],[17,"XF86XK_WheelButton","","",null,null],[17,"XF86XK_Word","","",null,null],[17,"XF86XK_Xfer","","",null,null],[17,"XF86XK_ZoomIn","","",null,null],[17,"XF86XK_ZoomOut","","",null,null],[17,"XF86XK_Away","","",null,null],[17,"XF86XK_Messenger","","",null,null],[17,"XF86XK_WebCam","","",null,null],[17,"XF86XK_MailForward","","",null,null],[17,"XF86XK_Pictures","","",null,null],[17,"XF86XK_Music","","",null,null],[17,"XF86XK_Battery","","",null,null],[17,"XF86XK_Bluetooth","","",null,null],[17,"XF86XK_WLAN","","",null,null],[17,"XF86XK_UWB","","",null,null],[17,"XF86XK_AudioForward","","",null,null],[17,"XF86XK_AudioRepeat","","",null,null],[17,"XF86XK_AudioRandomPlay","","",null,null],[17,"XF86XK_Subtitle","","",null,null],[17,"XF86XK_AudioCycleTrack","","",null,null],[17,"XF86XK_CycleAngle","","",null,null],[17,"XF86XK_FrameBack","","",null,null],[17,"XF86XK_FrameForward","","",null,null],[17,"XF86XK_Time","","",null,null],[17,"XF86XK_Select","","",null,null],[17,"XF86XK_View","","",null,null],[17,"XF86XK_TopMenu","","",null,null],[17,"XF86XK_Red","","",null,null],[17,"XF86XK_Green","","",null,null],[17,"XF86XK_Yellow","","",null,null],[17,"XF86XK_Blue","","",null,null],[17,"XF86XK_Suspend","","",null,null],[17,"XF86XK_Hibernate","","",null,null],[17,"XF86XK_TouchpadToggle","","",null,null],[17,"XF86XK_TouchpadOn","","",null,null],[17,"XF86XK_TouchpadOff","","",null,null],[17,"XF86XK_AudioMicMute","","",null,null],[17,"XF86XK_Switch_VT_1","","",null,null],[17,"XF86XK_Switch_VT_2","","",null,null],[17,"XF86XK_Switch_VT_3","","",null,null],[17,"XF86XK_Switch_VT_4","","",null,null],[17,"XF86XK_Switch_VT_5","","",null,null],[17,"XF86XK_Switch_VT_6","","",null,null],[17,"XF86XK_Switch_VT_7","","",null,null],[17,"XF86XK_Switch_VT_8","","",null,null],[17,"XF86XK_Switch_VT_9","","",null,null],[17,"XF86XK_Switch_VT_10","","",null,null],[17,"XF86XK_Switch_VT_11","","",null,null],[17,"XF86XK_Switch_VT_12","","",null,null],[17,"XF86XK_Ungrab","","",null,null],[17,"XF86XK_ClearGrab","","",null,null],[17,"XF86XK_Next_VMode","","",null,null],[17,"XF86XK_Prev_VMode","","",null,null],[17,"XF86XK_LogWindowTree","","",null,null],[17,"XF86XK_LogGrabInfo","","",null,null],[17,"XK_ISO_Lock","","",null,null],[17,"XK_ISO_Level2_Latch","","",null,null],[17,"XK_ISO_Level3_Shift","","",null,null],[17,"XK_ISO_Level3_Latch","","",null,null],[17,"XK_ISO_Level3_Lock","","",null,null],[17,"XK_ISO_Level5_Shift","","",null,null],[17,"XK_ISO_Level5_Latch","","",null,null],[17,"XK_ISO_Level5_Lock","","",null,null],[17,"XK_ISO_Group_Shift","","",null,null],[17,"XK_ISO_Group_Latch","","",null,null],[17,"XK_ISO_Group_Lock","","",null,null],[17,"XK_ISO_Next_Group","","",null,null],[17,"XK_ISO_Next_Group_Lock","","",null,null],[17,"XK_ISO_Prev_Group","","",null,null],[17,"XK_ISO_Prev_Group_Lock","","",null,null],[17,"XK_ISO_First_Group","","",null,null],[17,"XK_ISO_First_Group_Lock","","",null,null],[17,"XK_ISO_Last_Group","","",null,null],[17,"XK_ISO_Last_Group_Lock","","",null,null],[17,"XK_ISO_Left_Tab","","",null,null],[17,"XK_ISO_Move_Line_Up","","",null,null],[17,"XK_ISO_Move_Line_Down","","",null,null],[17,"XK_ISO_Partial_Line_Up","","",null,null],[17,"XK_ISO_Partial_Line_Down","","",null,null],[17,"XK_ISO_Partial_Space_Left","","",null,null],[17,"XK_ISO_Partial_Space_Right","","",null,null],[17,"XK_ISO_Set_Margin_Left","","",null,null],[17,"XK_ISO_Set_Margin_Right","","",null,null],[17,"XK_ISO_Release_Margin_Left","","",null,null],[17,"XK_ISO_Release_Margin_Right","","",null,null],[17,"XK_ISO_Release_Both_Margins","","",null,null],[17,"XK_ISO_Fast_Cursor_Left","","",null,null],[17,"XK_ISO_Fast_Cursor_Right","","",null,null],[17,"XK_ISO_Fast_Cursor_Up","","",null,null],[17,"XK_ISO_Fast_Cursor_Down","","",null,null],[17,"XK_ISO_Continuous_Underline","","",null,null],[17,"XK_ISO_Discontinuous_Underline","","",null,null],[17,"XK_ISO_Emphasize","","",null,null],[17,"XK_ISO_Center_Object","","",null,null],[17,"XK_ISO_Enter","","",null,null],[17,"XK_dead_grave","","",null,null],[17,"XK_dead_acute","","",null,null],[17,"XK_dead_circumflex","","",null,null],[17,"XK_dead_tilde","","",null,null],[17,"XK_dead_perispomeni","","",null,null],[17,"XK_dead_macron","","",null,null],[17,"XK_dead_breve","","",null,null],[17,"XK_dead_abovedot","","",null,null],[17,"XK_dead_diaeresis","","",null,null],[17,"XK_dead_abovering","","",null,null],[17,"XK_dead_doubleacute","","",null,null],[17,"XK_dead_caron","","",null,null],[17,"XK_dead_cedilla","","",null,null],[17,"XK_dead_ogonek","","",null,null],[17,"XK_dead_iota","","",null,null],[17,"XK_dead_voiced_sound","","",null,null],[17,"XK_dead_semivoiced_sound","","",null,null],[17,"XK_dead_belowdot","","",null,null],[17,"XK_dead_hook","","",null,null],[17,"XK_dead_horn","","",null,null],[17,"XK_dead_stroke","","",null,null],[17,"XK_dead_abovecomma","","",null,null],[17,"XK_dead_psili","","",null,null],[17,"XK_dead_abovereversedcomma","","",null,null],[17,"XK_dead_dasia","","",null,null],[17,"XK_dead_doublegrave","","",null,null],[17,"XK_dead_belowring","","",null,null],[17,"XK_dead_belowmacron","","",null,null],[17,"XK_dead_belowcircumflex","","",null,null],[17,"XK_dead_belowtilde","","",null,null],[17,"XK_dead_belowbreve","","",null,null],[17,"XK_dead_belowdiaeresis","","",null,null],[17,"XK_dead_invertedbreve","","",null,null],[17,"XK_dead_belowcomma","","",null,null],[17,"XK_dead_currency","","",null,null],[17,"XK_dead_lowline","","",null,null],[17,"XK_dead_aboveverticalline","","",null,null],[17,"XK_dead_belowverticalline","","",null,null],[17,"XK_dead_longsolidusoverlay","","",null,null],[17,"XK_dead_a","","",null,null],[17,"XK_dead_A","","",null,null],[17,"XK_dead_e","","",null,null],[17,"XK_dead_E","","",null,null],[17,"XK_dead_i","","",null,null],[17,"XK_dead_I","","",null,null],[17,"XK_dead_o","","",null,null],[17,"XK_dead_O","","",null,null],[17,"XK_dead_u","","",null,null],[17,"XK_dead_U","","",null,null],[17,"XK_dead_small_schwa","","",null,null],[17,"XK_dead_capital_schwa","","",null,null],[17,"XK_dead_greek","","",null,null],[17,"XK_First_Virtual_Screen","","",null,null],[17,"XK_Prev_Virtual_Screen","","",null,null],[17,"XK_Next_Virtual_Screen","","",null,null],[17,"XK_Last_Virtual_Screen","","",null,null],[17,"XK_Terminate_Server","","",null,null],[17,"XK_AccessX_Enable","","",null,null],[17,"XK_AccessX_Feedback_Enable","","",null,null],[17,"XK_RepeatKeys_Enable","","",null,null],[17,"XK_SlowKeys_Enable","","",null,null],[17,"XK_BounceKeys_Enable","","",null,null],[17,"XK_StickyKeys_Enable","","",null,null],[17,"XK_MouseKeys_Enable","","",null,null],[17,"XK_MouseKeys_Accel_Enable","","",null,null],[17,"XK_Overlay1_Enable","","",null,null],[17,"XK_Overlay2_Enable","","",null,null],[17,"XK_AudibleBell_Enable","","",null,null],[17,"XK_Pointer_Left","","",null,null],[17,"XK_Pointer_Right","","",null,null],[17,"XK_Pointer_Up","","",null,null],[17,"XK_Pointer_Down","","",null,null],[17,"XK_Pointer_UpLeft","","",null,null],[17,"XK_Pointer_UpRight","","",null,null],[17,"XK_Pointer_DownLeft","","",null,null],[17,"XK_Pointer_DownRight","","",null,null],[17,"XK_Pointer_Button_Dflt","","",null,null],[17,"XK_Pointer_Button1","","",null,null],[17,"XK_Pointer_Button2","","",null,null],[17,"XK_Pointer_Button3","","",null,null],[17,"XK_Pointer_Button4","","",null,null],[17,"XK_Pointer_Button5","","",null,null],[17,"XK_Pointer_DblClick_Dflt","","",null,null],[17,"XK_Pointer_DblClick1","","",null,null],[17,"XK_Pointer_DblClick2","","",null,null],[17,"XK_Pointer_DblClick3","","",null,null],[17,"XK_Pointer_DblClick4","","",null,null],[17,"XK_Pointer_DblClick5","","",null,null],[17,"XK_Pointer_Drag_Dflt","","",null,null],[17,"XK_Pointer_Drag1","","",null,null],[17,"XK_Pointer_Drag2","","",null,null],[17,"XK_Pointer_Drag3","","",null,null],[17,"XK_Pointer_Drag4","","",null,null],[17,"XK_Pointer_Drag5","","",null,null],[17,"XK_Pointer_EnableKeys","","",null,null],[17,"XK_Pointer_Accelerate","","",null,null],[17,"XK_Pointer_DfltBtnNext","","",null,null],[17,"XK_Pointer_DfltBtnPrev","","",null,null],[17,"XK_ch","","",null,null],[17,"XK_Ch","","",null,null],[17,"XK_CH","","",null,null],[17,"XK_c_h","","",null,null],[17,"XK_C_h","","",null,null],[17,"XK_C_H","","",null,null],[0,"xcursor","x11_dl","",null,null],[3,"Xcursor","x11_dl::xcursor","",null,null],[12,"XcursorAnimateCreate","","",102,null],[12,"XcursorAnimateDestroy","","",102,null],[12,"XcursorAnimateNext","","",102,null],[12,"XcursorCommentCreate","","",102,null],[12,"XcursorCommentDestroy","","",102,null],[12,"XcursorCommentsCreate","","",102,null],[12,"XcursorCommentsDestroy","","",102,null],[12,"XcursorCursorsCreate","","",102,null],[12,"XcursorCursorsDestroy","","",102,null],[12,"XcursorFileLoad","","",102,null],[12,"XcursorFileLoadAllImages","","",102,null],[12,"XcursorFileLoadImage","","",102,null],[12,"XcursorFileLoadImages","","",102,null],[12,"XcursorFilenameLoad","","",102,null],[12,"XcursorFilenameLoadAllImages","","",102,null],[12,"XcursorFilenameLoadCursor","","",102,null],[12,"XcursorFilenameLoadCursors","","",102,null],[12,"XcursorFilenameLoadImage","","",102,null],[12,"XcursorFilenameLoadImages","","",102,null],[12,"XcursorFilenameSave","","",102,null],[12,"XcursorFilenameSaveImages","","",102,null],[12,"XcursorFileSave","","",102,null],[12,"XcursorFileSaveImages","","",102,null],[12,"XcursorGetDefaultSize","","",102,null],[12,"XcursorGetTheme","","",102,null],[12,"XcursorGetThemeCore","","",102,null],[12,"XcursorImageCreate","","",102,null],[12,"XcursorImageDestroy","","",102,null],[12,"XcursorImageHash","","",102,null],[12,"XcursorImageLoadCursor","","",102,null],[12,"XcursorImagesCreate","","",102,null],[12,"XcursorImagesDestroy","","",102,null],[12,"XcursorImagesLoadCursor","","",102,null],[12,"XcursorImagesLoadCursors","","",102,null],[12,"XcursorImagesSetName","","",102,null],[12,"XcursorLibraryLoadCursor","","",102,null],[12,"XcursorLibraryLoadCursors","","",102,null],[12,"XcursorLibraryLoadImage","","",102,null],[12,"XcursorLibraryLoadImages","","",102,null],[12,"XcursorLibraryPath","","",102,null],[12,"XcursorLibraryShape","","",102,null],[12,"XcursorNoticeCreateBitmap","","",102,null],[12,"XcursorNoticePutBitmap","","",102,null],[12,"XcursorSetDefaultSize","","",102,null],[12,"XcursorSetTheme","","",102,null],[12,"XcursorSetThemeCore","","",102,null],[12,"XcursorShapeLoadCursor","","",102,null],[12,"XcursorShapeLoadCursors","","",102,null],[12,"XcursorShapeLoadImage","","",102,null],[12,"XcursorShapeLoadImages","","",102,null],[12,"XcursorSupportsAnim","","",102,null],[12,"XcursorSupportsARGB","","",102,null],[12,"XcursorTryShapeBitmapCursor","","",102,null],[12,"XcursorTryShapeCursor","","",102,null],[12,"XcursorXcFileLoad","","",102,null],[12,"XcursorXcFileLoadAllImages","","",102,null],[12,"XcursorXcFileLoadImage","","",102,null],[12,"XcursorXcFileLoadImages","","",102,null],[12,"XcursorXcFileSave","","",102,null],[3,"_XcursorAnimate","","",null,null],[12,"cursors","","",103,null],[12,"sequence","","",103,null],[3,"_XcursorChunkHeader","","",null,null],[12,"header","","",104,null],[12,"type_","","",104,null],[12,"subtype","","",104,null],[12,"version","","",104,null],[3,"_XcursorComment","","",null,null],[12,"version","","",105,null],[12,"comment_type","","",105,null],[12,"comment","","",105,null],[3,"_XcursorComments","","",null,null],[12,"ncomment","","",106,null],[12,"comments","","",106,null],[3,"_XcursorCursors","","",null,null],[12,"dpy","","",107,null],[12,"ref_","","",107,null],[12,"ncursor","","",107,null],[12,"cursors","","",107,null],[3,"_XcursorFile","","",null,null],[12,"closure","","",108,null],[12,"read","","",108,null],[12,"write","","",108,null],[12,"seek","","",108,null],[3,"_XcursorFileHeader","","",null,null],[12,"magic","","",109,null],[12,"header","","",109,null],[12,"version","","",109,null],[12,"ntoc","","",109,null],[12,"tocs","","",109,null],[3,"_XcursorFileToc","","",null,null],[12,"type_","","",110,null],[12,"subtype","","",110,null],[12,"position","","",110,null],[3,"_XcursorImage","","",null,null],[12,"version","","",111,null],[12,"size","","",111,null],[12,"width","","",111,null],[12,"height","","",111,null],[12,"xhot","","",111,null],[12,"yhot","","",111,null],[12,"delay","","",111,null],[12,"pixels","","",111,null],[3,"_XcursorImages","","",null,null],[12,"nimage","","",112,null],[12,"images","","",112,null],[12,"name","","",112,null],[6,"XcursorBool","","",null,null],[6,"XcursorDim","","",null,null],[6,"XcursorPixel","","",null,null],[6,"XcursorUInt","","",null,null],[6,"XcursorAnimate","","",null,null],[6,"XcursorChunkHeader","","",null,null],[6,"XcursorComment","","",null,null],[6,"XcursorComments","","",null,null],[6,"XcursorCursors","","",null,null],[6,"XcursorFile","","",null,null],[6,"XcursorFileHeader","","",null,null],[6,"XcursorFileToc","","",null,null],[6,"XcursorImage","","",null,null],[6,"XcursorImages","","",null,null],[11,"open","","",102,{"inputs":[],"output":{"generics":["xcursor","openerror"],"name":"result"}}],[11,"fmt","","",103,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",103,{"inputs":[{"name":"self"}],"output":{"name":"_xcursoranimate"}}],[11,"fmt","","",104,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",104,{"inputs":[{"name":"self"}],"output":{"name":"_xcursorchunkheader"}}],[11,"fmt","","",105,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",105,{"inputs":[{"name":"self"}],"output":{"name":"_xcursorcomment"}}],[11,"fmt","","",106,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",106,{"inputs":[{"name":"self"}],"output":{"name":"_xcursorcomments"}}],[11,"fmt","","",107,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",107,{"inputs":[{"name":"self"}],"output":{"name":"_xcursorcursors"}}],[11,"fmt","","",108,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",108,{"inputs":[{"name":"self"}],"output":{"name":"_xcursorfile"}}],[11,"fmt","","",109,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",109,{"inputs":[{"name":"self"}],"output":{"name":"_xcursorfileheader"}}],[11,"fmt","","",110,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",110,{"inputs":[{"name":"self"}],"output":{"name":"_xcursorfiletoc"}}],[11,"fmt","","",111,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",111,{"inputs":[{"name":"self"}],"output":{"name":"_xcursorimage"}}],[11,"fmt","","",112,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",112,{"inputs":[{"name":"self"}],"output":{"name":"_xcursorimages"}}],[0,"xf86vmode","x11_dl","",null,null],[3,"Xf86vmode","x11_dl::xf86vmode","",null,null],[12,"XF86VidModeAddModeLine","","",113,null],[12,"XF86VidModeDeleteModeLine","","",113,null],[12,"XF86VidModeGetAllModeLines","","",113,null],[12,"XF86VidModeGetDotClocks","","",113,null],[12,"XF86VidModeGetGamma","","",113,null],[12,"XF86VidModeGetGammaRamp","","",113,null],[12,"XF86VidModeGetGammaRampSize","","",113,null],[12,"XF86VidModeGetModeLine","","",113,null],[12,"XF86VidModeGetMonitor","","",113,null],[12,"XF86VidModeGetPermissions","","",113,null],[12,"XF86VidModeGetViewPort","","",113,null],[12,"XF86VidModeLockModeSwitch","","",113,null],[12,"XF86VidModeModModeLine","","",113,null],[12,"XF86VidModeQueryExtension","","",113,null],[12,"XF86VidModeQueryVersion","","",113,null],[12,"XF86VidModeSetClientVersion","","",113,null],[12,"XF86VidModeSetGamma","","",113,null],[12,"XF86VidModeSetGammaRamp","","",113,null],[12,"XF86VidModeSetViewPort","","",113,null],[12,"XF86VidModeSwitchMode","","",113,null],[12,"XF86VidModeSwitchToMode","","",113,null],[12,"XF86VidModeValidateModeLine","","",113,null],[3,"XF86VidModeGamma","","",null,null],[12,"red","","",114,null],[12,"green","","",114,null],[12,"blue","","",114,null],[3,"XF86VidModeModeInfo","","",null,null],[12,"dotclock","","",115,null],[12,"hdisplay","","",115,null],[12,"hsyncstart","","",115,null],[12,"hsyncend","","",115,null],[12,"htotal","","",115,null],[12,"hskew","","",115,null],[12,"vdisplay","","",115,null],[12,"vsyncstart","","",115,null],[12,"vsyncend","","",115,null],[12,"vtotal","","",115,null],[12,"flags","","",115,null],[12,"privsize","","",115,null],[12,"private","","",115,null],[3,"XF86VidModeModeLine","","",null,null],[12,"hdisplay","","",116,null],[12,"hsyncstart","","",116,null],[12,"hsyncend","","",116,null],[12,"htotal","","",116,null],[12,"hskew","","",116,null],[12,"vdisplay","","",116,null],[12,"vsyncstart","","",116,null],[12,"vsyncend","","",116,null],[12,"vtotal","","",116,null],[12,"flags","","",116,null],[12,"privsize","","",116,null],[12,"private","","",116,null],[3,"XF86VidModeMonitor","","",null,null],[12,"vendor","","",117,null],[12,"model","","",117,null],[12,"EMPTY","","",117,null],[12,"nhsync","","",117,null],[12,"hsync","","",117,null],[12,"nvsync","","",117,null],[12,"vsync","","",117,null],[3,"XF86VidModeSyncRange","","",null,null],[12,"hi","","",118,null],[12,"lo","","",118,null],[3,"XF86VidModeNotifyEvent","","",null,null],[12,"type_","","",119,null],[12,"serial","","",119,null],[12,"send_event","","",119,null],[12,"display","","",119,null],[12,"root","","",119,null],[12,"state","","",119,null],[12,"kind","","",119,null],[12,"forced","","",119,null],[12,"time","","",119,null],[11,"open","","",113,{"inputs":[],"output":{"generics":["xf86vmode","openerror"],"name":"result"}}],[11,"fmt","","",114,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",114,{"inputs":[{"name":"self"}],"output":{"name":"xf86vidmodegamma"}}],[11,"fmt","","",115,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",115,{"inputs":[{"name":"self"}],"output":{"name":"xf86vidmodemodeinfo"}}],[11,"eq","","",115,{"inputs":[{"name":"self"},{"name":"xf86vidmodemodeinfo"}],"output":{"name":"bool"}}],[11,"ne","","",115,{"inputs":[{"name":"self"},{"name":"xf86vidmodemodeinfo"}],"output":{"name":"bool"}}],[11,"fmt","","",116,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",116,{"inputs":[{"name":"self"}],"output":{"name":"xf86vidmodemodeline"}}],[11,"fmt","","",117,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",117,{"inputs":[{"name":"self"}],"output":{"name":"xf86vidmodemonitor"}}],[11,"fmt","","",118,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",118,{"inputs":[{"name":"self"}],"output":{"name":"xf86vidmodesyncrange"}}],[11,"fmt","","",119,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",119,{"inputs":[{"name":"self"}],"output":{"name":"xf86vidmodenotifyevent"}}],[11,"as_mut","x11_dl::xlib","",97,{"inputs":[{"name":"self"}],"output":{"name":"xf86vidmodenotifyevent"}}],[11,"as_ref","","",97,{"inputs":[{"name":"self"}],"output":{"name":"xf86vidmodenotifyevent"}}],[11,"from","","",97,{"inputs":[{"name":"xf86vidmodenotifyevent"}],"output":{"name":"xevent"}}],[11,"from","","",97,{"inputs":[{"name":"xf86vidmodenotifyevent"}],"output":{"name":"xevent"}}],[11,"from","x11_dl::xf86vmode","",119,{"inputs":[{"name":"xevent"}],"output":{"name":"xf86vidmodenotifyevent"}}],[11,"from","","",119,{"inputs":[{"name":"xevent"}],"output":{"name":"xf86vidmodenotifyevent"}}],[0,"xfixes","x11_dl","",null,null],[6,"PointerBarrier","x11_dl::xfixes","",null,null],[0,"xft","x11_dl","",null,null],[3,"Xft","x11_dl::xft","",null,null],[12,"XftCharExists","","",120,null],[12,"XftCharFontSpecRender","","",120,null],[12,"XftCharIndex","","",120,null],[12,"XftCharSpecRender","","",120,null],[12,"XftColorAllocName","","",120,null],[12,"XftColorAllocValue","","",120,null],[12,"XftColorFree","","",120,null],[12,"XftDefaultHasRender","","",120,null],[12,"XftDefaultSet","","",120,null],[12,"XftDefaultSubstitute","","",120,null],[12,"XftDrawChange","","",120,null],[12,"XftDrawCharFontSpec","","",120,null],[12,"XftDrawCharSpec","","",120,null],[12,"XftDrawColormap","","",120,null],[12,"XftDrawCreate","","",120,null],[12,"XftDrawCreateAlpha","","",120,null],[12,"XftDrawCreateBitmap","","",120,null],[12,"XftDrawDestroy","","",120,null],[12,"XftDrawDisplay","","",120,null],[12,"XftDrawDrawable","","",120,null],[12,"XftDrawGlyphFontSpec","","",120,null],[12,"XftDrawGlyphs","","",120,null],[12,"XftDrawGlyphSpec","","",120,null],[12,"XftDrawPicture","","",120,null],[12,"XftDrawRect","","",120,null],[12,"XftDrawSetClip","","",120,null],[12,"XftDrawSetClipRectangles","","",120,null],[12,"XftDrawSetSubwindowMode","","",120,null],[12,"XftDrawSrcPicture","","",120,null],[12,"XftDrawString16","","",120,null],[12,"XftDrawString32","","",120,null],[12,"XftDrawString8","","",120,null],[12,"XftDrawStringUtf16","","",120,null],[12,"XftDrawStringUtf8","","",120,null],[12,"XftDrawVisual","","",120,null],[12,"XftFontCheckGlyph","","",120,null],[12,"XftFontClose","","",120,null],[12,"XftFontCopy","","",120,null],[12,"XftFontInfoCreate","","",120,null],[12,"XftFontInfoDestroy","","",120,null],[12,"XftFontInfoEqual","","",120,null],[12,"XftFontInfoHash","","",120,null],[12,"XftFontLoadGlyphs","","",120,null],[12,"XftFontMatch","","",120,null],[12,"XftFontOpenInfo","","",120,null],[12,"XftFontOpenName","","",120,null],[12,"XftFontOpenPattern","","",120,null],[12,"XftFontOpenXlfd","","",120,null],[12,"XftFontUnloadGlyphs","","",120,null],[12,"XftGetVersion","","",120,null],[12,"XftGlyphExtents","","",120,null],[12,"XftGlyphFontSpecRender","","",120,null],[12,"XftGlyphRender","","",120,null],[12,"XftGlyphSpecRender","","",120,null],[12,"XftInit","","",120,null],[12,"XftInitFtLibrary","","",120,null],[12,"XftLockFace","","",120,null],[12,"XftNameParse","","",120,null],[12,"XftNameUnparse","","",120,null],[12,"XftTextExtents16","","",120,null],[12,"XftTextExtents32","","",120,null],[12,"XftTextExtents8","","",120,null],[12,"XftTextExtentsUtf16","","",120,null],[12,"XftTextExtentsUtf8","","",120,null],[12,"XftTextRender16","","",120,null],[12,"XftTextRender16BE","","",120,null],[12,"XftTextRender16LE","","",120,null],[12,"XftTextRender32","","",120,null],[12,"XftTextRender32BE","","",120,null],[12,"XftTextRender32LE","","",120,null],[12,"XftTextRender8","","",120,null],[12,"XftTextRenderUtf16","","",120,null],[12,"XftTextRenderUtf8","","",120,null],[12,"XftUnlockFace","","",120,null],[12,"XftXlfdParse","","",120,null],[12,"XftFontOpen","","",120,null],[12,"XftListFonts","","",120,null],[3,"XftFont","","",null,null],[12,"ascent","","",121,null],[12,"descent","","",121,null],[12,"height","","",121,null],[12,"max_advance_width","","",121,null],[12,"charset","","",121,null],[12,"pattern","","",121,null],[3,"XftColor","","",null,null],[12,"pixel","","",122,null],[12,"color","","",122,null],[3,"XftCharSpec","","",null,null],[12,"ucs4","","",123,null],[12,"x","","",123,null],[12,"y","","",123,null],[3,"XftCharFontSpec","","",null,null],[12,"font","","",124,null],[12,"ucs4","","",124,null],[12,"x","","",124,null],[12,"y","","",124,null],[3,"XftFontSet","","",null,null],[12,"nfont","","",125,null],[12,"sfont","","",125,null],[12,"fonts","","",125,null],[3,"XftGlyphSpec","","",null,null],[12,"glyph","","",126,null],[12,"x","","",126,null],[12,"y","","",126,null],[3,"XftGlyphFontSpec","","",null,null],[12,"font","","",127,null],[12,"glyph","","",127,null],[12,"x","","",127,null],[12,"y","","",127,null],[4,"FT_FaceRec","","",null,null],[4,"FcCharSet","","",null,null],[4,"FcPattern","","",null,null],[4,"FcEndian","","",null,null],[13,"Big","","",128,null],[13,"Little","","",128,null],[4,"FcResult","","",null,null],[13,"Match","","",129,null],[13,"NoMatch","","",129,null],[13,"TypeMismatch","","",129,null],[13,"NoId","","",129,null],[13,"OutOfMemory","","",129,null],[4,"XftFontInfo","","",null,null],[4,"XftDraw","","",null,null],[4,"XftPattern","","",null,null],[6,"FT_UInt","","",null,null],[6,"FcChar32","","",null,null],[17,"XFT_FAMILY","","",null,null],[17,"XFT_STYLE","","",null,null],[17,"XFT_SLANT","","",null,null],[17,"XFT_WEIGHT","","",null,null],[17,"XFT_SIZE","","",null,null],[17,"XFT_PIXEL_SIZE","","",null,null],[17,"XFT_SPACING","","",null,null],[17,"XFT_FOUNDRY","","",null,null],[17,"XFT_ANTIALIAS","","",null,null],[17,"XFT_SLANT_ROMAN","","",null,null],[17,"XFT_SLANT_ITALIC","","",null,null],[17,"XFT_SLANT_OBLIQUE","","",null,null],[17,"XftTypeVoid","","",null,null],[17,"XftTypeInteger","","",null,null],[17,"XftTypeDouble","","",null,null],[17,"XftTypeString","","",null,null],[17,"XftTypeBool","","",null,null],[17,"XftTypeMatrix","","",null,null],[11,"open","","",120,{"inputs":[],"output":{"generics":["xft","openerror"],"name":"result"}}],[11,"fmt","","",121,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",121,{"inputs":[{"name":"self"}],"output":{"name":"xftfont"}}],[11,"eq","","",121,{"inputs":[{"name":"self"},{"name":"xftfont"}],"output":{"name":"bool"}}],[11,"ne","","",121,{"inputs":[{"name":"self"},{"name":"xftfont"}],"output":{"name":"bool"}}],[11,"fmt","","",122,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",122,{"inputs":[{"name":"self"}],"output":{"name":"xftcolor"}}],[11,"eq","","",122,{"inputs":[{"name":"self"},{"name":"xftcolor"}],"output":{"name":"bool"}}],[11,"ne","","",122,{"inputs":[{"name":"self"},{"name":"xftcolor"}],"output":{"name":"bool"}}],[11,"fmt","","",123,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",123,{"inputs":[{"name":"self"}],"output":{"name":"xftcharspec"}}],[11,"eq","","",123,{"inputs":[{"name":"self"},{"name":"xftcharspec"}],"output":{"name":"bool"}}],[11,"ne","","",123,{"inputs":[{"name":"self"},{"name":"xftcharspec"}],"output":{"name":"bool"}}],[11,"fmt","","",124,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",124,{"inputs":[{"name":"self"}],"output":{"name":"xftcharfontspec"}}],[11,"eq","","",124,{"inputs":[{"name":"self"},{"name":"xftcharfontspec"}],"output":{"name":"bool"}}],[11,"ne","","",124,{"inputs":[{"name":"self"},{"name":"xftcharfontspec"}],"output":{"name":"bool"}}],[11,"fmt","","",125,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",125,{"inputs":[{"name":"self"}],"output":{"name":"xftfontset"}}],[11,"eq","","",125,{"inputs":[{"name":"self"},{"name":"xftfontset"}],"output":{"name":"bool"}}],[11,"ne","","",125,{"inputs":[{"name":"self"},{"name":"xftfontset"}],"output":{"name":"bool"}}],[11,"fmt","","",126,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",126,{"inputs":[{"name":"self"}],"output":{"name":"xftglyphspec"}}],[11,"eq","","",126,{"inputs":[{"name":"self"},{"name":"xftglyphspec"}],"output":{"name":"bool"}}],[11,"ne","","",126,{"inputs":[{"name":"self"},{"name":"xftglyphspec"}],"output":{"name":"bool"}}],[11,"fmt","","",127,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",127,{"inputs":[{"name":"self"}],"output":{"name":"xftglyphfontspec"}}],[11,"eq","","",127,{"inputs":[{"name":"self"},{"name":"xftglyphfontspec"}],"output":{"name":"bool"}}],[11,"ne","","",127,{"inputs":[{"name":"self"},{"name":"xftglyphfontspec"}],"output":{"name":"bool"}}],[0,"xinerama","x11_dl","",null,null],[3,"Xlib","x11_dl::xinerama","",null,null],[12,"XineramaIsActive","","",130,null],[12,"XineramaQueryExtension","","",130,null],[12,"XineramaQueryScreens","","",130,null],[12,"XineramaQueryVersion","","",130,null],[12,"XPanoramiXAllocInfo","","",130,null],[12,"XPanoramiXGetScreenCount","","",130,null],[12,"XPanoramiXGetScreenSize","","",130,null],[12,"XPanoramiXGetState","","",130,null],[12,"XPanoramiXQueryExtension","","",130,null],[12,"XPanoramiXQueryVersion","","",130,null],[3,"XineramaScreenInfo","","",null,null],[12,"screen_number","","",131,null],[12,"x_org","","",131,null],[12,"y_org","","",131,null],[12,"width","","",131,null],[12,"height","","",131,null],[3,"XPanoramiXInfo","","",null,null],[12,"window","","",132,null],[12,"screen","","",132,null],[12,"State","","",132,null],[12,"width","","",132,null],[12,"height","","",132,null],[12,"ScreenCount","","",132,null],[12,"eventMask","","",132,null],[11,"open","","",130,{"inputs":[],"output":{"generics":["xlib","openerror"],"name":"result"}}],[11,"fmt","","",131,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",131,{"inputs":[{"name":"self"}],"output":{"name":"xineramascreeninfo"}}],[11,"eq","","",131,{"inputs":[{"name":"self"},{"name":"xineramascreeninfo"}],"output":{"name":"bool"}}],[11,"ne","","",131,{"inputs":[{"name":"self"},{"name":"xineramascreeninfo"}],"output":{"name":"bool"}}],[11,"fmt","","",132,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",132,{"inputs":[{"name":"self"}],"output":{"name":"xpanoramixinfo"}}],[11,"eq","","",132,{"inputs":[{"name":"self"},{"name":"xpanoramixinfo"}],"output":{"name":"bool"}}],[11,"ne","","",132,{"inputs":[{"name":"self"},{"name":"xpanoramixinfo"}],"output":{"name":"bool"}}],[0,"xinput","x11_dl","",null,null],[3,"XInput","x11_dl::xinput","",null,null],[12,"XAllowDeviceEvents","","",133,null],[12,"XChangeDeviceControl","","",133,null],[12,"XChangeDeviceDontPropagateList","","",133,null],[12,"XChangeDeviceKeyMapping","","",133,null],[12,"XChangeDeviceProperty","","",133,null],[12,"XChangeFeedbackControl","","",133,null],[12,"XChangeKeyboardDevice","","",133,null],[12,"XChangePointerDevice","","",133,null],[12,"XCloseDevice","","",133,null],[12,"XDeleteDeviceProperty","","",133,null],[12,"XDeviceBell","","",133,null],[12,"XFreeDeviceControl","","",133,null],[12,"XFreeDeviceList","","",133,null],[12,"XFreeDeviceMotionEvents","","",133,null],[12,"XFreeDeviceState","","",133,null],[12,"XFreeFeedbackList","","",133,null],[12,"XGetDeviceButtonMapping","","",133,null],[12,"XGetDeviceControl","","",133,null],[12,"XGetDeviceDontPropagateList","","",133,null],[12,"XGetDeviceFocus","","",133,null],[12,"XGetDeviceKeyMapping","","",133,null],[12,"XGetDeviceModifierMapping","","",133,null],[12,"XGetDeviceMotionEvents","","",133,null],[12,"XGetDeviceProperty","","",133,null],[12,"XGetExtensionVersion","","",133,null],[12,"XGetFeedbackControl","","",133,null],[12,"XGetSelectedExtensionEvents","","",133,null],[12,"XGrabDevice","","",133,null],[12,"XGrabDeviceButton","","",133,null],[12,"XGrabDeviceKey","","",133,null],[12,"XListDeviceProperties","","",133,null],[12,"XListInputDevices","","",133,null],[12,"XOpenDevice","","",133,null],[12,"XQueryDeviceState","","",133,null],[12,"XSelectExtensionEvent","","",133,null],[12,"XSendExtensionEvent","","",133,null],[12,"XSetDeviceButtonMapping","","",133,null],[12,"XSetDeviceFocus","","",133,null],[12,"XSetDeviceMode","","",133,null],[12,"XSetDeviceModifierMapping","","",133,null],[12,"XSetDeviceValuators","","",133,null],[12,"XUngrabDevice","","",133,null],[12,"XUngrabDeviceButton","","",133,null],[12,"XUngrabDeviceKey","","",133,null],[3,"XDevice","","",null,null],[12,"device_id","","",134,null],[12,"num_classes","","",134,null],[12,"classes","","",134,null],[3,"XDeviceControl","","",null,null],[12,"control","","",135,null],[12,"length","","",135,null],[3,"XDeviceInfo","","",null,null],[12,"id","","",136,null],[12,"type_","","",136,null],[12,"name","","",136,null],[12,"num_classes","","",136,null],[12,"use_","","",136,null],[12,"inputclassinfo","","",136,null],[3,"XDeviceState","","",null,null],[12,"device_id","","",137,null],[12,"num_classes","","",137,null],[12,"data","","",137,null],[3,"XDeviceTimeCoord","","",null,null],[12,"time","","",138,null],[12,"data","","",138,null],[3,"XExtensionVersion","","",null,null],[12,"present","","",139,null],[12,"major_version","","",139,null],[12,"minor_version","","",139,null],[3,"XFeedbackControl","","",null,null],[12,"class","","",140,null],[12,"length","","",140,null],[12,"id","","",140,null],[3,"XFeedbackState","","",null,null],[12,"class","","",141,null],[12,"length","","",141,null],[12,"id","","",141,null],[3,"XInputClass","","",null,null],[12,"class","","",142,null],[12,"length","","",142,null],[3,"XInputClassInfo","","",null,null],[12,"input_class","","",143,null],[12,"event_type_base","","",143,null],[4,"_XAnyClassinfo","","",null,null],[6,"XAnyClassPtr","","",null,null],[11,"open","","",133,{"inputs":[],"output":{"generics":["xinput","openerror"],"name":"result"}}],[11,"fmt","","",134,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",134,{"inputs":[{"name":"self"}],"output":{"name":"xdevice"}}],[11,"eq","","",134,{"inputs":[{"name":"self"},{"name":"xdevice"}],"output":{"name":"bool"}}],[11,"ne","","",134,{"inputs":[{"name":"self"},{"name":"xdevice"}],"output":{"name":"bool"}}],[11,"fmt","","",135,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",135,{"inputs":[{"name":"self"}],"output":{"name":"xdevicecontrol"}}],[11,"eq","","",135,{"inputs":[{"name":"self"},{"name":"xdevicecontrol"}],"output":{"name":"bool"}}],[11,"ne","","",135,{"inputs":[{"name":"self"},{"name":"xdevicecontrol"}],"output":{"name":"bool"}}],[11,"fmt","","",136,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",136,{"inputs":[{"name":"self"}],"output":{"name":"xdeviceinfo"}}],[11,"eq","","",136,{"inputs":[{"name":"self"},{"name":"xdeviceinfo"}],"output":{"name":"bool"}}],[11,"ne","","",136,{"inputs":[{"name":"self"},{"name":"xdeviceinfo"}],"output":{"name":"bool"}}],[11,"fmt","","",137,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",137,{"inputs":[{"name":"self"}],"output":{"name":"xdevicestate"}}],[11,"eq","","",137,{"inputs":[{"name":"self"},{"name":"xdevicestate"}],"output":{"name":"bool"}}],[11,"ne","","",137,{"inputs":[{"name":"self"},{"name":"xdevicestate"}],"output":{"name":"bool"}}],[11,"fmt","","",138,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",138,{"inputs":[{"name":"self"}],"output":{"name":"xdevicetimecoord"}}],[11,"eq","","",138,{"inputs":[{"name":"self"},{"name":"xdevicetimecoord"}],"output":{"name":"bool"}}],[11,"ne","","",138,{"inputs":[{"name":"self"},{"name":"xdevicetimecoord"}],"output":{"name":"bool"}}],[11,"fmt","","",139,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",139,{"inputs":[{"name":"self"}],"output":{"name":"xextensionversion"}}],[11,"eq","","",139,{"inputs":[{"name":"self"},{"name":"xextensionversion"}],"output":{"name":"bool"}}],[11,"ne","","",139,{"inputs":[{"name":"self"},{"name":"xextensionversion"}],"output":{"name":"bool"}}],[11,"fmt","","",140,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",140,{"inputs":[{"name":"self"}],"output":{"name":"xfeedbackcontrol"}}],[11,"eq","","",140,{"inputs":[{"name":"self"},{"name":"xfeedbackcontrol"}],"output":{"name":"bool"}}],[11,"ne","","",140,{"inputs":[{"name":"self"},{"name":"xfeedbackcontrol"}],"output":{"name":"bool"}}],[11,"fmt","","",141,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",141,{"inputs":[{"name":"self"}],"output":{"name":"xfeedbackstate"}}],[11,"eq","","",141,{"inputs":[{"name":"self"},{"name":"xfeedbackstate"}],"output":{"name":"bool"}}],[11,"ne","","",141,{"inputs":[{"name":"self"},{"name":"xfeedbackstate"}],"output":{"name":"bool"}}],[11,"fmt","","",142,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",142,{"inputs":[{"name":"self"}],"output":{"name":"xinputclass"}}],[11,"eq","","",142,{"inputs":[{"name":"self"},{"name":"xinputclass"}],"output":{"name":"bool"}}],[11,"ne","","",142,{"inputs":[{"name":"self"},{"name":"xinputclass"}],"output":{"name":"bool"}}],[11,"fmt","","",143,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",143,{"inputs":[{"name":"self"}],"output":{"name":"xinputclassinfo"}}],[11,"eq","","",143,{"inputs":[{"name":"self"},{"name":"xinputclassinfo"}],"output":{"name":"bool"}}],[11,"ne","","",143,{"inputs":[{"name":"self"},{"name":"xinputclassinfo"}],"output":{"name":"bool"}}],[0,"xinput2","x11_dl","",null,null],[3,"XInput2","x11_dl::xinput2","",null,null],[12,"XIAllowEvents","","",144,null],[12,"XIAllowTouchEvents","","",144,null],[12,"XIBarrierReleasePointer","","",144,null],[12,"XIBarrierReleasePointers","","",144,null],[12,"XIChangeHierarchy","","",144,null],[12,"XIChangeProperty","","",144,null],[12,"XIDefineCursor","","",144,null],[12,"XIDeleteProperty","","",144,null],[12,"XIFreeDeviceInfo","","",144,null],[12,"XIGetClientPointer","","",144,null],[12,"XIGetFocus","","",144,null],[12,"XIGetProperty","","",144,null],[12,"XIGetSelectedEvents","","",144,null],[12,"XIGrabButton","","",144,null],[12,"XIGrabDevice","","",144,null],[12,"XIGrabEnter","","",144,null],[12,"XIGrabFocusIn","","",144,null],[12,"XIGrabKeycode","","",144,null],[12,"XIGrabTouchBegin","","",144,null],[12,"XIListProperties","","",144,null],[12,"XIQueryDevice","","",144,null],[12,"XIQueryPointer","","",144,null],[12,"XIQueryVersion","","",144,null],[12,"XISelectEvents","","",144,null],[12,"XISetClientPointer","","",144,null],[12,"XISetFocus","","",144,null],[12,"XIUndefineCursor","","",144,null],[12,"XIUngrabButton","","",144,null],[12,"XIUngrabDevice","","",144,null],[12,"XIUngrabEnter","","",144,null],[12,"XIUngrabFocusIn","","",144,null],[12,"XIUngrabKeycode","","",144,null],[12,"XIUngrabTouchBegin","","",144,null],[12,"XIWarpPointer","","",144,null],[3,"XIAddMasterInfo","","",null,null],[12,"_type","","",145,null],[12,"name","","",145,null],[12,"send_core","","",145,null],[12,"enable","","",145,null],[3,"XIRemoveMasterInfo","","",null,null],[12,"_type","","",146,null],[12,"deviceid","","",146,null],[12,"return_mode","","",146,null],[12,"return_pointer","","",146,null],[12,"return_keyboard","","",146,null],[3,"XIAttachSlaveInfo","","",null,null],[12,"_type","","",147,null],[12,"deviceid","","",147,null],[12,"new_master","","",147,null],[3,"XIDetachSlaveInfo","","",null,null],[12,"_type","","",148,null],[12,"deviceid","","",148,null],[3,"XIAnyHierarchyChangeInfo","","",null,null],[12,"_bindgen_data_","","",149,null],[3,"XIModifierState","","",null,null],[12,"base","","",150,null],[12,"latched","","",150,null],[12,"locked","","",150,null],[12,"effective","","",150,null],[3,"XIButtonState","","",null,null],[12,"mask_len","","",151,null],[12,"mask","","",151,null],[3,"XIValuatorState","","",null,null],[12,"mask_len","","",152,null],[12,"mask","","",152,null],[12,"values","","",152,null],[3,"XIEventMask","","",null,null],[12,"deviceid","","",153,null],[12,"mask_len","","",153,null],[12,"mask","","",153,null],[3,"XIAnyClassInfo","","",null,null],[12,"_type","","",154,null],[12,"sourceid","","",154,null],[3,"XIButtonClassInfo","","",null,null],[12,"_type","","",155,null],[12,"sourceid","","",155,null],[12,"num_buttons","","",155,null],[12,"labels","","",155,null],[12,"state","","",155,null],[3,"XIKeyClassInfo","","",null,null],[12,"_type","","",156,null],[12,"sourceid","","",156,null],[12,"num_keycodes","","",156,null],[12,"keycodes","","",156,null],[3,"XIValuatorClassInfo","","",null,null],[12,"_type","","",157,null],[12,"sourceid","","",157,null],[12,"number","","",157,null],[12,"label","","",157,null],[12,"min","","",157,null],[12,"max","","",157,null],[12,"value","","",157,null],[12,"resolution","","",157,null],[12,"mode","","",157,null],[3,"XIScrollClassInfo","","",null,null],[12,"_type","","",158,null],[12,"sourceid","","",158,null],[12,"number","","",158,null],[12,"scroll_type","","",158,null],[12,"increment","","",158,null],[12,"flags","","",158,null],[3,"XITouchClassInfo","","",null,null],[12,"_type","","",159,null],[12,"sourceid","","",159,null],[12,"mode","","",159,null],[12,"num_touches","","",159,null],[3,"XIDeviceInfo","","",null,null],[12,"deviceid","","",160,null],[12,"name","","",160,null],[12,"_use","","",160,null],[12,"attachment","","",160,null],[12,"enabled","","",160,null],[12,"num_classes","","",160,null],[12,"classes","","",160,null],[3,"XIGrabModifiers","","",null,null],[12,"modifiers","","",161,null],[12,"status","","",161,null],[3,"XIBarrierReleasePointerInfo","","",null,null],[12,"deviceid","","",162,null],[12,"barrier","","",162,null],[12,"eventid","","",162,null],[3,"XIEvent","","",null,null],[12,"_type","","",163,null],[12,"serial","","",163,null],[12,"send_event","","",163,null],[12,"display","","",163,null],[12,"extension","","",163,null],[12,"evtype","","",163,null],[12,"time","","",163,null],[3,"XIHierarchyInfo","","",null,null],[12,"deviceid","","",164,null],[12,"attachment","","",164,null],[12,"_use","","",164,null],[12,"enabled","","",164,null],[12,"flags","","",164,null],[3,"XIHierarchyEvent","","",null,null],[12,"_type","","",165,null],[12,"serial","","",165,null],[12,"send_event","","",165,null],[12,"display","","",165,null],[12,"extension","","",165,null],[12,"evtype","","",165,null],[12,"time","","",165,null],[12,"flags","","",165,null],[12,"num_info","","",165,null],[12,"info","","",165,null],[3,"XIDeviceChangedEvent","","",null,null],[12,"_type","","",166,null],[12,"serial","","",166,null],[12,"send_event","","",166,null],[12,"display","","",166,null],[12,"extension","","",166,null],[12,"evtype","","",166,null],[12,"time","","",166,null],[12,"deviceid","","",166,null],[12,"sourceid","","",166,null],[12,"reason","","",166,null],[12,"num_classes","","",166,null],[12,"classes","","",166,null],[3,"XIDeviceEvent","","",null,null],[12,"_type","","",167,null],[12,"serial","","",167,null],[12,"send_event","","",167,null],[12,"display","","",167,null],[12,"extension","","",167,null],[12,"evtype","","",167,null],[12,"time","","",167,null],[12,"deviceid","","",167,null],[12,"sourceid","","",167,null],[12,"detail","","",167,null],[12,"root","","",167,null],[12,"event","","",167,null],[12,"child","","",167,null],[12,"root_x","","",167,null],[12,"root_y","","",167,null],[12,"event_x","","",167,null],[12,"event_y","","",167,null],[12,"flags","","",167,null],[12,"buttons","","",167,null],[12,"valuators","","",167,null],[12,"mods","","",167,null],[12,"group","","",167,null],[3,"XIRawEvent","","",null,null],[12,"_type","","",168,null],[12,"serial","","",168,null],[12,"send_event","","",168,null],[12,"display","","",168,null],[12,"extension","","",168,null],[12,"evtype","","",168,null],[12,"time","","",168,null],[12,"deviceid","","",168,null],[12,"sourceid","","",168,null],[12,"detail","","",168,null],[12,"flags","","",168,null],[12,"valuators","","",168,null],[12,"raw_values","","",168,null],[3,"XIEnterEvent","","",null,null],[12,"_type","","",169,null],[12,"serial","","",169,null],[12,"send_event","","",169,null],[12,"display","","",169,null],[12,"extension","","",169,null],[12,"evtype","","",169,null],[12,"time","","",169,null],[12,"deviceid","","",169,null],[12,"sourceid","","",169,null],[12,"detail","","",169,null],[12,"root","","",169,null],[12,"event","","",169,null],[12,"child","","",169,null],[12,"root_x","","",169,null],[12,"root_y","","",169,null],[12,"event_x","","",169,null],[12,"event_y","","",169,null],[12,"mode","","",169,null],[12,"focus","","",169,null],[12,"same_screen","","",169,null],[12,"buttons","","",169,null],[12,"mods","","",169,null],[12,"group","","",169,null],[3,"XIPropertyEvent","","",null,null],[12,"_type","","",170,null],[12,"serial","","",170,null],[12,"send_event","","",170,null],[12,"display","","",170,null],[12,"extension","","",170,null],[12,"evtype","","",170,null],[12,"time","","",170,null],[12,"deviceid","","",170,null],[12,"property","","",170,null],[12,"what","","",170,null],[3,"XITouchOwnershipEvent","","",null,null],[12,"_type","","",171,null],[12,"serial","","",171,null],[12,"send_event","","",171,null],[12,"display","","",171,null],[12,"extension","","",171,null],[12,"evtype","","",171,null],[12,"time","","",171,null],[12,"deviceid","","",171,null],[12,"sourceid","","",171,null],[12,"touchid","","",171,null],[12,"root","","",171,null],[12,"event","","",171,null],[12,"child","","",171,null],[12,"flags","","",171,null],[3,"XIBarrierEvent","","",null,null],[12,"_type","","",172,null],[12,"serial","","",172,null],[12,"send_event","","",172,null],[12,"display","","",172,null],[12,"extension","","",172,null],[12,"evtype","","",172,null],[12,"time","","",172,null],[12,"deviceid","","",172,null],[12,"sourceid","","",172,null],[12,"event","","",172,null],[12,"root","","",172,null],[12,"root_x","","",172,null],[12,"root_y","","",172,null],[12,"dx","","",172,null],[12,"dy","","",172,null],[12,"dtime","","",172,null],[12,"flags","","",172,null],[12,"barrier","","",172,null],[12,"eventid","","",172,null],[5,"XISetMask","","",null,null],[5,"XIClearMask","","",null,null],[5,"XIMaskIsSet","","",null,null],[6,"XIGroupState","","",null,null],[6,"BarrierEventID","","",null,null],[6,"XILeaveEvent","","",null,null],[6,"XIFocusInEvent","","",null,null],[6,"XIFocusOutEvent","","",null,null],[17,"XInput_2_0","","",null,null],[17,"XI_2_Major","","",null,null],[17,"XI_2_Minor","","",null,null],[17,"XIPropertyDeleted","","",null,null],[17,"XIPropertyCreated","","",null,null],[17,"XIPropertyModified","","",null,null],[17,"XIPropModeReplace","","",null,null],[17,"XIPropModePrepend","","",null,null],[17,"XIPropModeAppend","","",null,null],[17,"XINotifyNormal","","",null,null],[17,"XINotifyGrab","","",null,null],[17,"XINotifyUngrab","","",null,null],[17,"XINotifyWhileGrabbed","","",null,null],[17,"XINotifyPassiveGrab","","",null,null],[17,"XINotifyPassiveUngrab","","",null,null],[17,"XINotifyAncestor","","",null,null],[17,"XINotifyVirtual","","",null,null],[17,"XINotifyInferior","","",null,null],[17,"XINotifyNonlinear","","",null,null],[17,"XINotifyNonlinearVirtual","","",null,null],[17,"XINotifyPointer","","",null,null],[17,"XINotifyPointerRoot","","",null,null],[17,"XINotifyDetailNone","","",null,null],[17,"XIGrabModeSync","","",null,null],[17,"XIGrabModeAsync","","",null,null],[17,"XIGrabModeTouch","","",null,null],[17,"XIGrabSuccess","","",null,null],[17,"XIAlreadyGrabbed","","",null,null],[17,"XIGrabInvalidTime","","",null,null],[17,"XIGrabNotViewable","","",null,null],[17,"XIGrabFrozen","","",null,null],[17,"XIGrabtypeButton","","",null,null],[17,"XIGrabtypeKeycode","","",null,null],[17,"XIGrabtypeEnter","","",null,null],[17,"XIGrabtypeFocusIn","","",null,null],[17,"XIGrabtypeTouchBegin","","",null,null],[17,"XIAnyButton","","",null,null],[17,"XIAnyKeycode","","",null,null],[17,"XIAsyncDevice","","",null,null],[17,"XISyncDevice","","",null,null],[17,"XIReplayDevice","","",null,null],[17,"XIAsyncPairedDevice","","",null,null],[17,"XIAsyncPair","","",null,null],[17,"XISyncPair","","",null,null],[17,"XIAcceptTouch","","",null,null],[17,"XIRejectTouch","","",null,null],[17,"XISlaveSwitch","","",null,null],[17,"XIDeviceChange","","",null,null],[17,"XIMasterAdded","","",null,null],[17,"XIMasterRemoved","","",null,null],[17,"XISlaveAdded","","",null,null],[17,"XISlaveRemoved","","",null,null],[17,"XISlaveAttached","","",null,null],[17,"XISlaveDetached","","",null,null],[17,"XIDeviceEnabled","","",null,null],[17,"XIDeviceDisabled","","",null,null],[17,"XIAddMaster","","",null,null],[17,"XIRemoveMaster","","",null,null],[17,"XIAttachSlave","","",null,null],[17,"XIDetachSlave","","",null,null],[17,"XIAttachToMaster","","",null,null],[17,"XIFloating","","",null,null],[17,"XIModeRelative","","",null,null],[17,"XIModeAbsolute","","",null,null],[17,"XIMasterPointer","","",null,null],[17,"XIMasterKeyboard","","",null,null],[17,"XISlavePointer","","",null,null],[17,"XISlaveKeyboard","","",null,null],[17,"XIFloatingSlave","","",null,null],[17,"XIKeyClass","","",null,null],[17,"XIButtonClass","","",null,null],[17,"XIValuatorClass","","",null,null],[17,"XIScrollClass","","",null,null],[17,"XITouchClass","","",null,null],[17,"XIScrollTypeVertical","","",null,null],[17,"XIScrollTypeHorizontal","","",null,null],[17,"XIScrollFlagNoEmulation","","",null,null],[17,"XIScrollFlagPreferred","","",null,null],[17,"XIKeyRepeat","","",null,null],[17,"XIPointerEmulated","","",null,null],[17,"XITouchPendingEnd","","",null,null],[17,"XITouchEmulatingPointer","","",null,null],[17,"XIBarrierPointerReleased","","",null,null],[17,"XIBarrierDeviceIsGrabbed","","",null,null],[17,"XIDirectTouch","","",null,null],[17,"XIDependentTouch","","",null,null],[17,"XIAllDevices","","",null,null],[17,"XIAllMasterDevices","","",null,null],[17,"XI_DeviceChanged","","",null,null],[17,"XI_KeyPress","","",null,null],[17,"XI_KeyRelease","","",null,null],[17,"XI_ButtonPress","","",null,null],[17,"XI_ButtonRelease","","",null,null],[17,"XI_Motion","","",null,null],[17,"XI_Enter","","",null,null],[17,"XI_Leave","","",null,null],[17,"XI_FocusIn","","",null,null],[17,"XI_FocusOut","","",null,null],[17,"XI_HierarchyChanged","","",null,null],[17,"XI_PropertyEvent","","",null,null],[17,"XI_RawKeyPress","","",null,null],[17,"XI_RawKeyRelease","","",null,null],[17,"XI_RawButtonPress","","",null,null],[17,"XI_RawButtonRelease","","",null,null],[17,"XI_RawMotion","","",null,null],[17,"XI_TouchBegin","","",null,null],[17,"XI_TouchUpdate","","",null,null],[17,"XI_TouchEnd","","",null,null],[17,"XI_TouchOwnership","","",null,null],[17,"XI_RawTouchBegin","","",null,null],[17,"XI_RawTouchUpdate","","",null,null],[17,"XI_RawTouchEnd","","",null,null],[17,"XI_BarrierHit","","",null,null],[17,"XI_BarrierLeave","","",null,null],[17,"XI_LASTEVENT","","",null,null],[17,"XI_DeviceChangedMask","","",null,null],[17,"XI_KeyPressMask","","",null,null],[17,"XI_KeyReleaseMask","","",null,null],[17,"XI_ButtonPressMask","","",null,null],[17,"XI_ButtonReleaseMask","","",null,null],[17,"XI_MotionMask","","",null,null],[17,"XI_EnterMask","","",null,null],[17,"XI_LeaveMask","","",null,null],[17,"XI_FocusInMask","","",null,null],[17,"XI_FocusOutMask","","",null,null],[17,"XI_HierarchyChangedMask","","",null,null],[17,"XI_PropertyEventMask","","",null,null],[17,"XI_RawKeyPressMask","","",null,null],[17,"XI_RawKeyReleaseMask","","",null,null],[17,"XI_RawButtonPressMask","","",null,null],[17,"XI_RawButtonReleaseMask","","",null,null],[17,"XI_RawMotionMask","","",null,null],[17,"XI_TouchBeginMask","","",null,null],[17,"XI_TouchEndMask","","",null,null],[17,"XI_TouchOwnershipChangedMask","","",null,null],[17,"XI_TouchUpdateMask","","",null,null],[17,"XI_RawTouchBeginMask","","",null,null],[17,"XI_RawTouchEndMask","","",null,null],[17,"XI_RawTouchUpdateMask","","",null,null],[17,"XI_BarrierHitMask","","",null,null],[17,"XI_BarrierLeaveMask","","",null,null],[11,"open","","",144,{"inputs":[],"output":{"generics":["xinput2","openerror"],"name":"result"}}],[11,"fmt","","",145,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",145,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"default","","",145,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",146,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",146,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"default","","",146,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",147,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",147,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"default","","",147,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",148,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",148,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"default","","",148,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",149,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"_type","","",149,null],[11,"add","","",149,null],[11,"remove","","",149,null],[11,"attach","","",149,null],[11,"detach","","",149,null],[11,"clone","","",149,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"default","","",149,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",150,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",150,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"default","","",150,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",151,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",151,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"default","","",151,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",152,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",152,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"default","","",152,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",153,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",153,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"default","","",153,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",154,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",154,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"default","","",154,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",155,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",155,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"default","","",155,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",156,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",156,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"default","","",156,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",157,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",157,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"default","","",157,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",158,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",158,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"default","","",158,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",159,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",159,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"default","","",159,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",160,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",160,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"default","","",160,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",161,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",161,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"default","","",161,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",162,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",162,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"default","","",162,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",163,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",163,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"default","","",163,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",164,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",164,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"default","","",164,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",165,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",165,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"default","","",165,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",166,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",166,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"default","","",166,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",167,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",167,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"default","","",167,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",168,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",168,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"default","","",168,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",169,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",169,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"default","","",169,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",170,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",170,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"default","","",170,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",171,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",171,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"default","","",171,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",172,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",172,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"default","","",172,{"inputs":[],"output":{"name":"self"}}],[0,"xmd","x11_dl","",null,null],[6,"INT8","x11_dl::xmd","",null,null],[6,"INT16","","",null,null],[6,"INT32","","",null,null],[6,"INT64","","",null,null],[6,"CARD8","","",null,null],[6,"CARD16","","",null,null],[6,"CARD32","","",null,null],[6,"CARD64","","",null,null],[6,"BYTE","","",null,null],[6,"BOOL","","",null,null],[0,"xmu","x11_dl","",null,null],[3,"Xmu","x11_dl::xmu","",null,null],[12,"XmuAddCloseDisplayHook","","",173,null],[12,"XmuAddInitializer","","",173,null],[12,"XmuAllStandardColormaps","","",173,null],[12,"XmuAppendSegment","","",173,null],[12,"XmuAreaAnd","","",173,null],[12,"XmuAreaCopy","","",173,null],[12,"XmuAreaDup","","",173,null],[12,"XmuAreaNot","","",173,null],[12,"XmuAreaOrXor","","",173,null],[12,"XmuCallInitializers","","",173,null],[12,"XmuClientWindow","","",173,null],[12,"XmuCompareISOLatin1","","",173,null],[12,"XmuConvertStandardSelection","","",173,null],[12,"XmuCopyISOLatin1Lowered","","",173,null],[12,"XmuCopyISOLatin1Uppered","","",173,null],[12,"XmuCreateColormap","","",173,null],[12,"XmuCreatePixmapFromBitmap","","",173,null],[12,"XmuCreateStippledPixmap","","",173,null],[12,"XmuCursorNameToIndex","","",173,null],[12,"XmuCvtBackingStoreToString","","",173,null],[12,"XmuCvtFunctionToCallback","","",173,null],[12,"XmuCvtGravityToString","","",173,null],[12,"XmuCvtJustifyToString","","",173,null],[12,"XmuCvtLongToString","","",173,null],[12,"XmuCvtOrientationToString","","",173,null],[12,"XmuCvtShapeStyleToString","","",173,null],[12,"XmuCvtStringToBackingStore","","",173,null],[12,"XmuCvtStringToBitmap","","",173,null],[12,"XmuCvtStringToColorCursor","","",173,null],[12,"XmuCvtStringToCursor","","",173,null],[12,"XmuCvtStringToGravity","","",173,null],[12,"XmuCvtStringToJustify","","",173,null],[12,"XmuCvtStringToLong","","",173,null],[12,"XmuCvtStringToOrientation","","",173,null],[12,"XmuCvtStringToShapeStyle","","",173,null],[12,"XmuCvtStringToWidget","","",173,null],[12,"XmuCvtWidgetToString","","",173,null],[12,"XmuDeleteStandardColormap","","",173,null],[12,"XmuDestroyScanlineList","","",173,null],[12,"XmuDestroySegmentList","","",173,null],[12,"XmuDistinguishableColors","","",173,null],[12,"XmuDistinguishablePixels","","",173,null],[12,"XmuDQAddDisplay","","",173,null],[12,"XmuDQCreate","","",173,null],[12,"XmuDQDestroy","","",173,null],[12,"XmuDQLookupDisplay","","",173,null],[12,"XmuDQRemoveDisplay","","",173,null],[12,"XmuDrawLogo","","",173,null],[12,"XmuDrawRoundedRectangle","","",173,null],[12,"XmuFillRoundedRectangle","","",173,null],[12,"XmuGetAtomName","","",173,null],[12,"XmuGetColormapAllocation","","",173,null],[12,"XmuGetHostname","","",173,null],[12,"XmuInternAtom","","",173,null],[12,"XmuInternStrings","","",173,null],[12,"XmuLocateBitmapFile","","",173,null],[12,"XmuLocatePixmapFile","","",173,null],[12,"XmuLookupAPL","","",173,null],[12,"XmuLookupArabic","","",173,null],[12,"XmuLookupCloseDisplayHook","","",173,null],[12,"XmuLookupCyrillic","","",173,null],[12,"XmuLookupGreek","","",173,null],[12,"XmuLookupHebrew","","",173,null],[12,"XmuLookupJISX0201","","",173,null],[12,"XmuLookupKana","","",173,null],[12,"XmuLookupLatin1","","",173,null],[12,"XmuLookupLatin2","","",173,null],[12,"XmuLookupLatin3","","",173,null],[12,"XmuLookupLatin4","","",173,null],[12,"XmuLookupStandardColormap","","",173,null],[12,"XmuLookupString","","",173,null],[12,"XmuMakeAtom","","",173,null],[12,"XmuNameOfAtom","","",173,null],[12,"XmuNCopyISOLatin1Lowered","","",173,null],[12,"XmuNCopyISOLatin1Uppered","","",173,null],[12,"XmuNewArea","","",173,null],[12,"XmuNewCvtStringToWidget","","",173,null],[12,"XmuNewScanline","","",173,null],[12,"XmuNewSegment","","",173,null],[12,"XmuOptimizeArea","","",173,null],[12,"XmuOptimizeScanline","","",173,null],[12,"XmuPrintDefaultErrorMessage","","",173,null],[12,"XmuReadBitmapData","","",173,null],[12,"XmuReadBitmapDataFromFile","","",173,null],[12,"XmuRegisterExternalAgent","","",173,null],[12,"XmuReleaseStippledPixmap","","",173,null],[12,"XmuRemoveCloseDisplayHook","","",173,null],[12,"XmuReshapeWidget","","",173,null],[12,"XmuScanlineAnd","","",173,null],[12,"XmuScanlineAndSegment","","",173,null],[12,"XmuScanlineCopy","","",173,null],[12,"XmuScanlineEqu","","",173,null],[12,"XmuScanlineNot","","",173,null],[12,"XmuScanlineOr","","",173,null],[12,"XmuScanlineOrSegment","","",173,null],[12,"XmuScanlineXor","","",173,null],[12,"XmuScanlineXorSegment","","",173,null],[12,"XmuScreenOfWindow","","",173,null],[12,"XmuSimpleErrorHandler","","",173,null],[12,"XmuStandardColormap","","",173,null],[12,"XmuUpdateMapHints","","",173,null],[12,"XmuValidArea","","",173,null],[12,"XmuValidScanline","","",173,null],[12,"XmuVisualStandardColormaps","","",173,null],[12,"XmuWnCountOwnedResources","","",173,null],[12,"XmuWnFetchResources","","",173,null],[12,"XmuWnInitializeNodes","","",173,null],[12,"XmuWnNameToNode","","",173,null],[12,"XmuSnprintf","","",173,null],[12,"_XA_ATOM_PAIR","","",173,null],[12,"_XA_CHARACTER_POSITION","","",173,null],[12,"_XA_CLASS","","",173,null],[12,"_XA_CLIENT_WINDOW","","",173,null],[12,"_XA_CLIPBOARD","","",173,null],[12,"_XA_COMPOUND_TEXT","","",173,null],[12,"_XA_DECNET_ADDRESS","","",173,null],[12,"_XA_DELETE","","",173,null],[12,"_XA_FILENAME","","",173,null],[12,"_XA_HOSTNAME","","",173,null],[12,"_XA_IP_ADDRESS","","",173,null],[12,"_XA_LENGTH","","",173,null],[12,"_XA_LIST_LENGTH","","",173,null],[12,"_XA_NAME","","",173,null],[12,"_XA_NET_ADDRESS","","",173,null],[12,"_XA_NULL","","",173,null],[12,"_XA_OWNER_OS","","",173,null],[12,"_XA_SPAN","","",173,null],[12,"_XA_TARGETS","","",173,null],[12,"_XA_TEXT","","",173,null],[12,"_XA_TIMESTAMP","","",173,null],[12,"_XA_USER","","",173,null],[12,"_XA_UTF8_STRING","","",173,null],[3,"_AtomRec","","",null,null],[3,"_XmuArea","","",null,null],[3,"_XmuDisplayQueue","","",null,null],[3,"_XmuDisplayQueueEntry","","",null,null],[3,"_XmuScanline","","",null,null],[3,"_XmuSegment","","",null,null],[3,"_XmuWidgetNode","","",null,null],[6,"AtomPtr","","",null,null],[6,"XmuArea","","",null,null],[6,"XmuDisplayQueue","","",null,null],[6,"XmuDisplayQueueEntry","","",null,null],[6,"XmuScanline","","",null,null],[6,"XmuSegment","","",null,null],[6,"XmuWidgetNode","","",null,null],[11,"open","","",173,{"inputs":[],"output":{"generics":["xmu","openerror"],"name":"result"}}],[0,"xrecord","x11_dl","",null,null],[3,"Xf86vmode","x11_dl::xrecord","",null,null],[12,"XRecordAllocRange","","",174,null],[12,"XRecordCreateContext","","",174,null],[12,"XRecordDisableContext","","",174,null],[12,"XRecordEnableContext","","",174,null],[12,"XRecordEnableContextAsync","","",174,null],[12,"XRecordFreeContext","","",174,null],[12,"XRecordFreeData","","",174,null],[12,"XRecordFreeState","","",174,null],[12,"XRecordGetContext","","",174,null],[12,"XRecordIdBaseMask","","",174,null],[12,"XRecordProcessReplies","","",174,null],[12,"XRecordQueryVersion","","",174,null],[12,"XRecordRegisterClients","","",174,null],[12,"XRecordUnregisterClients","","",174,null],[3,"XRecordClientInfo","","",null,null],[12,"client","","",175,null],[12,"nranges","","",175,null],[12,"ranges","","",175,null],[3,"XRecordExtRange","","",null,null],[12,"ext_major","","",176,null],[12,"ext_minor","","",176,null],[3,"XRecordInterceptData","","",null,null],[12,"id_base","","",177,null],[12,"server_time","","",177,null],[12,"client_seq","","",177,null],[12,"category","","",177,null],[12,"client_swapped","","",177,null],[12,"data","","",177,null],[12,"data_len","","",177,null],[3,"XRecordRange","","",null,null],[12,"core_requests","","",178,null],[12,"core_replies","","",178,null],[12,"ext_requests","","",178,null],[12,"ext_replies","","",178,null],[12,"delivered_events","","",178,null],[12,"device_events","","",178,null],[12,"errors","","",178,null],[12,"client_started","","",178,null],[12,"client_died","","",178,null],[3,"XRecordRange8","","",null,null],[12,"first","","",179,null],[12,"last","","",179,null],[3,"XRecordRange16","","",null,null],[12,"first","","",180,null],[12,"last","","",180,null],[3,"XRecordState","","",null,null],[12,"enabled","","",181,null],[12,"datum_flags","","",181,null],[12,"nclients","","",181,null],[12,"client_info","","",181,null],[6,"XRecordClientSpec","","",null,null],[6,"XRecordContext","","",null,null],[17,"XRecordFromServerTime","","",null,null],[17,"XRecordFromClientTime","","",null,null],[17,"XRecordFromClientSequence","","",null,null],[17,"XRecordCurrentClients","","",null,null],[17,"XRecordFutureClients","","",null,null],[17,"XRecordAllClients","","",null,null],[17,"XRecordFromServer","","",null,null],[17,"XRecordFromClient","","",null,null],[17,"XRecordClientStarted","","",null,null],[17,"XRecordClientDied","","",null,null],[17,"XRecordStartOfData","","",null,null],[17,"XRecordEndOfData","","",null,null],[11,"open","","",174,{"inputs":[],"output":{"generics":["xf86vmode","openerror"],"name":"result"}}],[11,"fmt","","",175,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",175,{"inputs":[{"name":"self"}],"output":{"name":"xrecordclientinfo"}}],[11,"eq","","",175,{"inputs":[{"name":"self"},{"name":"xrecordclientinfo"}],"output":{"name":"bool"}}],[11,"ne","","",175,{"inputs":[{"name":"self"},{"name":"xrecordclientinfo"}],"output":{"name":"bool"}}],[11,"fmt","","",176,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",176,{"inputs":[{"name":"self"}],"output":{"name":"xrecordextrange"}}],[11,"eq","","",176,{"inputs":[{"name":"self"},{"name":"xrecordextrange"}],"output":{"name":"bool"}}],[11,"ne","","",176,{"inputs":[{"name":"self"},{"name":"xrecordextrange"}],"output":{"name":"bool"}}],[11,"fmt","","",177,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",177,{"inputs":[{"name":"self"}],"output":{"name":"xrecordinterceptdata"}}],[11,"eq","","",177,{"inputs":[{"name":"self"},{"name":"xrecordinterceptdata"}],"output":{"name":"bool"}}],[11,"ne","","",177,{"inputs":[{"name":"self"},{"name":"xrecordinterceptdata"}],"output":{"name":"bool"}}],[11,"fmt","","",178,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",178,{"inputs":[{"name":"self"}],"output":{"name":"xrecordrange"}}],[11,"eq","","",178,{"inputs":[{"name":"self"},{"name":"xrecordrange"}],"output":{"name":"bool"}}],[11,"ne","","",178,{"inputs":[{"name":"self"},{"name":"xrecordrange"}],"output":{"name":"bool"}}],[11,"fmt","","",179,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",179,{"inputs":[{"name":"self"}],"output":{"name":"xrecordrange8"}}],[11,"eq","","",179,{"inputs":[{"name":"self"},{"name":"xrecordrange8"}],"output":{"name":"bool"}}],[11,"ne","","",179,{"inputs":[{"name":"self"},{"name":"xrecordrange8"}],"output":{"name":"bool"}}],[11,"fmt","","",180,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",180,{"inputs":[{"name":"self"}],"output":{"name":"xrecordrange16"}}],[11,"eq","","",180,{"inputs":[{"name":"self"},{"name":"xrecordrange16"}],"output":{"name":"bool"}}],[11,"ne","","",180,{"inputs":[{"name":"self"},{"name":"xrecordrange16"}],"output":{"name":"bool"}}],[11,"fmt","","",181,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",181,{"inputs":[{"name":"self"}],"output":{"name":"xrecordstate"}}],[11,"eq","","",181,{"inputs":[{"name":"self"},{"name":"xrecordstate"}],"output":{"name":"bool"}}],[11,"ne","","",181,{"inputs":[{"name":"self"},{"name":"xrecordstate"}],"output":{"name":"bool"}}],[0,"xrender","x11_dl","",null,null],[3,"Xrender","x11_dl::xrender","",null,null],[12,"XRenderAddGlyphs","","",182,null],[12,"XRenderAddTraps","","",182,null],[12,"XRenderChangePicture","","",182,null],[12,"XRenderComposite","","",182,null],[12,"XRenderCompositeDoublePoly","","",182,null],[12,"XRenderCompositeString16","","",182,null],[12,"XRenderCompositeString32","","",182,null],[12,"XRenderCompositeString8","","",182,null],[12,"XRenderCompositeText16","","",182,null],[12,"XRenderCompositeText32","","",182,null],[12,"XRenderCompositeText8","","",182,null],[12,"XRenderCompositeTrapezoids","","",182,null],[12,"XRenderCompositeTriangles","","",182,null],[12,"XRenderCompositeTriFan","","",182,null],[12,"XRenderCompositeTriStrip","","",182,null],[12,"XRenderCreateAnimCursor","","",182,null],[12,"XRenderCreateConicalGradient","","",182,null],[12,"XRenderCreateCursor","","",182,null],[12,"XRenderCreateGlyphSet","","",182,null],[12,"XRenderCreateLinearGradient","","",182,null],[12,"XRenderCreatePicture","","",182,null],[12,"XRenderCreateRadialGradient","","",182,null],[12,"XRenderCreateSolidFill","","",182,null],[12,"XRenderFillRectangle","","",182,null],[12,"XRenderFillRectangles","","",182,null],[12,"XRenderFindFormat","","",182,null],[12,"XRenderFindStandardFormat","","",182,null],[12,"XRenderFindVisualFormat","","",182,null],[12,"XRenderFreeGlyphs","","",182,null],[12,"XRenderFreeGlyphSet","","",182,null],[12,"XRenderFreePicture","","",182,null],[12,"XRenderParseColor","","",182,null],[12,"XRenderQueryExtension","","",182,null],[12,"XRenderQueryFilters","","",182,null],[12,"XRenderQueryFormats","","",182,null],[12,"XRenderQueryPictIndexValues","","",182,null],[12,"XRenderQuerySubpixelOrder","","",182,null],[12,"XRenderQueryVersion","","",182,null],[12,"XRenderReferenceGlyphSet","","",182,null],[12,"XRenderSetPictureClipRectangles","","",182,null],[12,"XRenderSetPictureClipRegion","","",182,null],[12,"XRenderSetPictureFilter","","",182,null],[12,"XRenderSetPictureTransform","","",182,null],[12,"XRenderSetSubpixelOrder","","",182,null],[3,"_XAnimCursor","","",null,null],[12,"cursor","","",183,null],[12,"delay","","",183,null],[3,"_XCircle","","",null,null],[12,"x","","",184,null],[12,"y","","",184,null],[12,"radius","","",184,null],[3,"_XConicalGradient","","",null,null],[12,"center","","",185,null],[12,"angle","","",185,null],[3,"_XFilters","","",null,null],[12,"nfilter","","",186,null],[12,"filter","","",186,null],[12,"nalias","","",186,null],[12,"alias","","",186,null],[3,"_XGlyphElt8","","",null,null],[12,"glyphset","","",187,null],[12,"chars","","",187,null],[12,"nchars","","",187,null],[12,"xOff","","",187,null],[12,"yOff","","",187,null],[3,"_XGlyphElt16","","",null,null],[12,"glyphset","","",188,null],[12,"chars","","",188,null],[12,"nchars","","",188,null],[12,"xOff","","",188,null],[12,"yOff","","",188,null],[3,"_XGlyphElt32","","",null,null],[12,"glyphset","","",189,null],[12,"chars","","",189,null],[12,"nchars","","",189,null],[12,"xOff","","",189,null],[12,"yOff","","",189,null],[3,"_XGlyphInfo","","",null,null],[12,"width","","",190,null],[12,"height","","",190,null],[12,"x","","",190,null],[12,"y","","",190,null],[12,"xOff","","",190,null],[12,"yOff","","",190,null],[3,"_XIndexValue","","",null,null],[12,"pixel","","",191,null],[12,"red","","",191,null],[12,"green","","",191,null],[12,"blue","","",191,null],[12,"alpha","","",191,null],[3,"_XLinearGradient","","",null,null],[12,"p1","","",192,null],[12,"p2","","",192,null],[3,"_XLineFixed","","",null,null],[12,"p1","","",193,null],[12,"p2","","",193,null],[3,"_XPointDouble","","",null,null],[12,"x","","",194,null],[12,"y","","",194,null],[3,"_XPointFixed","","",null,null],[12,"x","","",195,null],[12,"y","","",195,null],[3,"_XRadialGradient","","",null,null],[12,"inner","","",196,null],[12,"outer","","",196,null],[3,"XRenderColor","","",null,null],[12,"red","","",197,null],[12,"green","","",197,null],[12,"blue","","",197,null],[12,"alpha","","",197,null],[3,"XRenderDirectFormat","","",null,null],[12,"red","","",198,null],[12,"redMask","","",198,null],[12,"green","","",198,null],[12,"greenMask","","",198,null],[12,"blue","","",198,null],[12,"blueMask","","",198,null],[12,"alpha","","",198,null],[12,"alphaMask","","",198,null],[3,"XRenderPictFormat","","",null,null],[12,"id","","",199,null],[12,"type_","","",199,null],[12,"depth","","",199,null],[12,"direct","","",199,null],[12,"colormap","","",199,null],[3,"_XRenderPictureAttributes","","",null,null],[12,"repeat","","",200,null],[12,"alpha_map","","",200,null],[12,"alpha_x_origin","","",200,null],[12,"alpha_y_origin","","",200,null],[12,"clip_x_origin","","",200,null],[12,"clip_y_origin","","",200,null],[12,"clip_mask","","",200,null],[12,"graphics_exposures","","",200,null],[12,"subwindow_mode","","",200,null],[12,"poly_edge","","",200,null],[12,"poly_mode","","",200,null],[12,"dither","","",200,null],[12,"component_alpha","","",200,null],[3,"_XSpanFix","","",null,null],[12,"left","","",201,null],[12,"right","","",201,null],[12,"y","","",201,null],[3,"_XTrap","","",null,null],[12,"top","","",202,null],[12,"bottom","","",202,null],[3,"_XTrapezoid","","",null,null],[12,"top","","",203,null],[12,"bottom","","",203,null],[12,"left","","",203,null],[12,"right","","",203,null],[3,"_XTriangle","","",null,null],[12,"p1","","",204,null],[12,"p2","","",204,null],[12,"p3","","",204,null],[3,"_XTransform","","",null,null],[12,"matrix","","",205,null],[6,"Glyph","","",null,null],[6,"GlyphSet","","",null,null],[6,"PictFormat","","",null,null],[6,"Picture","","",null,null],[6,"XDouble","","",null,null],[6,"XFixed","","",null,null],[6,"XAnimCursor","","",null,null],[6,"XCircle","","",null,null],[6,"XConicalGradient","","",null,null],[6,"XFilters","","",null,null],[6,"XGlyphElt8","","",null,null],[6,"XGlyphElt16","","",null,null],[6,"XGlyphElt32","","",null,null],[6,"XGlyphInfo","","",null,null],[6,"XIndexValue","","",null,null],[6,"XLinearGradient","","",null,null],[6,"XLineFixed","","",null,null],[6,"XPointDouble","","",null,null],[6,"XPointFixed","","",null,null],[6,"XRadialGradient","","",null,null],[6,"XRenderPictureAttributes","","",null,null],[6,"XSpanFix","","",null,null],[6,"XTrap","","",null,null],[6,"XTrapezoid","","",null,null],[6,"XTriangle","","",null,null],[6,"XTransform","","",null,null],[17,"PictFormatID","","",null,null],[17,"PictFormatType","","",null,null],[17,"PictFormatDepth","","",null,null],[17,"PictFormatRed","","",null,null],[17,"PictFormatRedMask","","",null,null],[17,"PictFormatGreen","","",null,null],[17,"PictFormatGreenMask","","",null,null],[17,"PictFormatBlue","","",null,null],[17,"PictFormatBlueMask","","",null,null],[17,"PictFormatAlpha","","",null,null],[17,"PictFormatAlphaMask","","",null,null],[17,"PictFormatColormap","","",null,null],[17,"BadPictFormat","","",null,null],[17,"BadPicture","","",null,null],[17,"BadPictOp","","",null,null],[17,"BadGlyphSet","","",null,null],[17,"BadGlyph","","",null,null],[17,"RenderNumberErrors","","",null,null],[17,"PictTypeIndexed","","",null,null],[17,"PictTypeDirect","","",null,null],[17,"PictOpMinimum","","",null,null],[17,"PictOpClear","","",null,null],[17,"PictOpSrc","","",null,null],[17,"PictOpDst","","",null,null],[17,"PictOpOver","","",null,null],[17,"PictOpOverReverse","","",null,null],[17,"PictOpIn","","",null,null],[17,"PictOpInReverse","","",null,null],[17,"PictOpOut","","",null,null],[17,"PictOpOutReverse","","",null,null],[17,"PictOpAtop","","",null,null],[17,"PictOpAtopReverse","","",null,null],[17,"PictOpXor","","",null,null],[17,"PictOpAdd","","",null,null],[17,"PictOpSaturate","","",null,null],[17,"PictOpMaximum","","",null,null],[17,"PictOpDisjointMinimum","","",null,null],[17,"PictOpDisjointClear","","",null,null],[17,"PictOpDisjointSrc","","",null,null],[17,"PictOpDisjointDst","","",null,null],[17,"PictOpDisjointOver","","",null,null],[17,"PictOpDisjointOverReverse","","",null,null],[17,"PictOpDisjointIn","","",null,null],[17,"PictOpDisjointInReverse","","",null,null],[17,"PictOpDisjointOut","","",null,null],[17,"PictOpDisjointOutReverse","","",null,null],[17,"PictOpDisjointAtop","","",null,null],[17,"PictOpDisjointAtopReverse","","",null,null],[17,"PictOpDisjointXor","","",null,null],[17,"PictOpDisjointMaximum","","",null,null],[17,"PictOpConjointMinimum","","",null,null],[17,"PictOpConjointClear","","",null,null],[17,"PictOpConjointSrc","","",null,null],[17,"PictOpConjointDst","","",null,null],[17,"PictOpConjointOver","","",null,null],[17,"PictOpConjointOverReverse","","",null,null],[17,"PictOpConjointIn","","",null,null],[17,"PictOpConjointInReverse","","",null,null],[17,"PictOpConjointOut","","",null,null],[17,"PictOpConjointOutReverse","","",null,null],[17,"PictOpConjointAtop","","",null,null],[17,"PictOpConjointAtopReverse","","",null,null],[17,"PictOpConjointXor","","",null,null],[17,"PictOpConjointMaximum","","",null,null],[17,"PictOpBlendMinimum","","",null,null],[17,"PictOpMultiply","","",null,null],[17,"PictOpScreen","","",null,null],[17,"PictOpOverlay","","",null,null],[17,"PictOpDarken","","",null,null],[17,"PictOpLighten","","",null,null],[17,"PictOpColorDodge","","",null,null],[17,"PictOpColorBurn","","",null,null],[17,"PictOpHardLight","","",null,null],[17,"PictOpSoftLight","","",null,null],[17,"PictOpDifference","","",null,null],[17,"PictOpExclusion","","",null,null],[17,"PictOpHSLHue","","",null,null],[17,"PictOpHSLSaturation","","",null,null],[17,"PictOpHSLColor","","",null,null],[17,"PictOpHSLLuminosity","","",null,null],[17,"PictOpBlendMaximum","","",null,null],[17,"PolyEdgeSharp","","",null,null],[17,"PolyEdgeSmooth","","",null,null],[17,"PolyModePrecise","","",null,null],[17,"PolyModeImprecise","","",null,null],[17,"CPRepeat","","",null,null],[17,"CPAlphaMap","","",null,null],[17,"CPAlphaXOrigin","","",null,null],[17,"CPAlphaYOrigin","","",null,null],[17,"CPClipXOrigin","","",null,null],[17,"CPClipYOrigin","","",null,null],[17,"CPClipMask","","",null,null],[17,"CPGraphicsExposure","","",null,null],[17,"CPSubwindowMode","","",null,null],[17,"CPPolyEdge","","",null,null],[17,"CPPolyMode","","",null,null],[17,"CPDither","","",null,null],[17,"CPComponentAlpha","","",null,null],[17,"CPLastBit","","",null,null],[17,"FilterNearest","","",null,null],[17,"FilterBilinear","","",null,null],[17,"FilterConvolution","","",null,null],[17,"FilterFast","","",null,null],[17,"FilterGood","","",null,null],[17,"FilterBest","","",null,null],[17,"SubPixelUnknown","","",null,null],[17,"SubPixelHorizontalRGB","","",null,null],[17,"SubPixelHorizontalBGR","","",null,null],[17,"SubPixelVerticalRGB","","",null,null],[17,"SubPixelVerticalBGR","","",null,null],[17,"SubPixelNone","","",null,null],[17,"RepeatNone","","",null,null],[17,"RepeatNormal","","",null,null],[17,"RepeatPad","","",null,null],[17,"RepeatReflect","","",null,null],[11,"open","","",182,{"inputs":[],"output":{"generics":["xrender","openerror"],"name":"result"}}],[11,"fmt","","",183,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",183,{"inputs":[{"name":"self"}],"output":{"name":"_xanimcursor"}}],[11,"eq","","",183,{"inputs":[{"name":"self"},{"name":"_xanimcursor"}],"output":{"name":"bool"}}],[11,"ne","","",183,{"inputs":[{"name":"self"},{"name":"_xanimcursor"}],"output":{"name":"bool"}}],[11,"fmt","","",184,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",184,{"inputs":[{"name":"self"}],"output":{"name":"_xcircle"}}],[11,"eq","","",184,{"inputs":[{"name":"self"},{"name":"_xcircle"}],"output":{"name":"bool"}}],[11,"ne","","",184,{"inputs":[{"name":"self"},{"name":"_xcircle"}],"output":{"name":"bool"}}],[11,"fmt","","",185,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",185,{"inputs":[{"name":"self"}],"output":{"name":"_xconicalgradient"}}],[11,"eq","","",185,{"inputs":[{"name":"self"},{"name":"_xconicalgradient"}],"output":{"name":"bool"}}],[11,"ne","","",185,{"inputs":[{"name":"self"},{"name":"_xconicalgradient"}],"output":{"name":"bool"}}],[11,"fmt","","",186,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",186,{"inputs":[{"name":"self"}],"output":{"name":"_xfilters"}}],[11,"eq","","",186,{"inputs":[{"name":"self"},{"name":"_xfilters"}],"output":{"name":"bool"}}],[11,"ne","","",186,{"inputs":[{"name":"self"},{"name":"_xfilters"}],"output":{"name":"bool"}}],[11,"fmt","","",187,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",187,{"inputs":[{"name":"self"}],"output":{"name":"_xglyphelt8"}}],[11,"eq","","",187,{"inputs":[{"name":"self"},{"name":"_xglyphelt8"}],"output":{"name":"bool"}}],[11,"ne","","",187,{"inputs":[{"name":"self"},{"name":"_xglyphelt8"}],"output":{"name":"bool"}}],[11,"fmt","","",188,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",188,{"inputs":[{"name":"self"}],"output":{"name":"_xglyphelt16"}}],[11,"eq","","",188,{"inputs":[{"name":"self"},{"name":"_xglyphelt16"}],"output":{"name":"bool"}}],[11,"ne","","",188,{"inputs":[{"name":"self"},{"name":"_xglyphelt16"}],"output":{"name":"bool"}}],[11,"fmt","","",189,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",189,{"inputs":[{"name":"self"}],"output":{"name":"_xglyphelt32"}}],[11,"eq","","",189,{"inputs":[{"name":"self"},{"name":"_xglyphelt32"}],"output":{"name":"bool"}}],[11,"ne","","",189,{"inputs":[{"name":"self"},{"name":"_xglyphelt32"}],"output":{"name":"bool"}}],[11,"fmt","","",190,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",190,{"inputs":[{"name":"self"}],"output":{"name":"_xglyphinfo"}}],[11,"eq","","",190,{"inputs":[{"name":"self"},{"name":"_xglyphinfo"}],"output":{"name":"bool"}}],[11,"ne","","",190,{"inputs":[{"name":"self"},{"name":"_xglyphinfo"}],"output":{"name":"bool"}}],[11,"fmt","","",191,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",191,{"inputs":[{"name":"self"}],"output":{"name":"_xindexvalue"}}],[11,"eq","","",191,{"inputs":[{"name":"self"},{"name":"_xindexvalue"}],"output":{"name":"bool"}}],[11,"ne","","",191,{"inputs":[{"name":"self"},{"name":"_xindexvalue"}],"output":{"name":"bool"}}],[11,"fmt","","",192,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",192,{"inputs":[{"name":"self"}],"output":{"name":"_xlineargradient"}}],[11,"eq","","",192,{"inputs":[{"name":"self"},{"name":"_xlineargradient"}],"output":{"name":"bool"}}],[11,"ne","","",192,{"inputs":[{"name":"self"},{"name":"_xlineargradient"}],"output":{"name":"bool"}}],[11,"fmt","","",193,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",193,{"inputs":[{"name":"self"}],"output":{"name":"_xlinefixed"}}],[11,"eq","","",193,{"inputs":[{"name":"self"},{"name":"_xlinefixed"}],"output":{"name":"bool"}}],[11,"ne","","",193,{"inputs":[{"name":"self"},{"name":"_xlinefixed"}],"output":{"name":"bool"}}],[11,"fmt","","",194,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",194,{"inputs":[{"name":"self"}],"output":{"name":"_xpointdouble"}}],[11,"eq","","",194,{"inputs":[{"name":"self"},{"name":"_xpointdouble"}],"output":{"name":"bool"}}],[11,"ne","","",194,{"inputs":[{"name":"self"},{"name":"_xpointdouble"}],"output":{"name":"bool"}}],[11,"fmt","","",195,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",195,{"inputs":[{"name":"self"}],"output":{"name":"_xpointfixed"}}],[11,"eq","","",195,{"inputs":[{"name":"self"},{"name":"_xpointfixed"}],"output":{"name":"bool"}}],[11,"ne","","",195,{"inputs":[{"name":"self"},{"name":"_xpointfixed"}],"output":{"name":"bool"}}],[11,"fmt","","",196,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",196,{"inputs":[{"name":"self"}],"output":{"name":"_xradialgradient"}}],[11,"eq","","",196,{"inputs":[{"name":"self"},{"name":"_xradialgradient"}],"output":{"name":"bool"}}],[11,"ne","","",196,{"inputs":[{"name":"self"},{"name":"_xradialgradient"}],"output":{"name":"bool"}}],[11,"fmt","","",197,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",197,{"inputs":[{"name":"self"}],"output":{"name":"xrendercolor"}}],[11,"eq","","",197,{"inputs":[{"name":"self"},{"name":"xrendercolor"}],"output":{"name":"bool"}}],[11,"ne","","",197,{"inputs":[{"name":"self"},{"name":"xrendercolor"}],"output":{"name":"bool"}}],[11,"fmt","","",198,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",198,{"inputs":[{"name":"self"}],"output":{"name":"xrenderdirectformat"}}],[11,"eq","","",198,{"inputs":[{"name":"self"},{"name":"xrenderdirectformat"}],"output":{"name":"bool"}}],[11,"ne","","",198,{"inputs":[{"name":"self"},{"name":"xrenderdirectformat"}],"output":{"name":"bool"}}],[11,"fmt","","",199,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",199,{"inputs":[{"name":"self"}],"output":{"name":"xrenderpictformat"}}],[11,"eq","","",199,{"inputs":[{"name":"self"},{"name":"xrenderpictformat"}],"output":{"name":"bool"}}],[11,"ne","","",199,{"inputs":[{"name":"self"},{"name":"xrenderpictformat"}],"output":{"name":"bool"}}],[11,"fmt","","",200,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",200,{"inputs":[{"name":"self"}],"output":{"name":"_xrenderpictureattributes"}}],[11,"eq","","",200,{"inputs":[{"name":"self"},{"name":"_xrenderpictureattributes"}],"output":{"name":"bool"}}],[11,"ne","","",200,{"inputs":[{"name":"self"},{"name":"_xrenderpictureattributes"}],"output":{"name":"bool"}}],[11,"fmt","","",201,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",201,{"inputs":[{"name":"self"}],"output":{"name":"_xspanfix"}}],[11,"eq","","",201,{"inputs":[{"name":"self"},{"name":"_xspanfix"}],"output":{"name":"bool"}}],[11,"ne","","",201,{"inputs":[{"name":"self"},{"name":"_xspanfix"}],"output":{"name":"bool"}}],[11,"fmt","","",202,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",202,{"inputs":[{"name":"self"}],"output":{"name":"_xtrap"}}],[11,"eq","","",202,{"inputs":[{"name":"self"},{"name":"_xtrap"}],"output":{"name":"bool"}}],[11,"ne","","",202,{"inputs":[{"name":"self"},{"name":"_xtrap"}],"output":{"name":"bool"}}],[11,"fmt","","",203,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",203,{"inputs":[{"name":"self"}],"output":{"name":"_xtrapezoid"}}],[11,"eq","","",203,{"inputs":[{"name":"self"},{"name":"_xtrapezoid"}],"output":{"name":"bool"}}],[11,"ne","","",203,{"inputs":[{"name":"self"},{"name":"_xtrapezoid"}],"output":{"name":"bool"}}],[11,"fmt","","",204,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",204,{"inputs":[{"name":"self"}],"output":{"name":"_xtriangle"}}],[11,"eq","","",204,{"inputs":[{"name":"self"},{"name":"_xtriangle"}],"output":{"name":"bool"}}],[11,"ne","","",204,{"inputs":[{"name":"self"},{"name":"_xtriangle"}],"output":{"name":"bool"}}],[11,"fmt","","",205,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",205,{"inputs":[{"name":"self"}],"output":{"name":"_xtransform"}}],[11,"eq","","",205,{"inputs":[{"name":"self"},{"name":"_xtransform"}],"output":{"name":"bool"}}],[11,"ne","","",205,{"inputs":[{"name":"self"},{"name":"_xtransform"}],"output":{"name":"bool"}}],[0,"xss","x11_dl","",null,null],[3,"Xss","x11_dl::xss","",null,null],[12,"XScreenSaverQueryExtension","","",206,null],[12,"XScreenSaverQueryVersion","","",206,null],[12,"XScreenSaverAllocInfo","","",206,null],[12,"XScreenSaverQueryInfo","","",206,null],[12,"XScreenSaverSelectInput","","",206,null],[12,"XScreenSaverSetAttributes","","",206,null],[12,"XScreenSaverUnsetAttributes","","",206,null],[12,"XScreenSaverRegister","","",206,null],[12,"XScreenSaverUnregister","","",206,null],[12,"XScreenSaverGetRegistered","","",206,null],[12,"XScreenSaverSuspend","","",206,null],[3,"XScreenSaverInfo","","",null,null],[12,"window","","",207,null],[12,"state","","",207,null],[12,"kind","","",207,null],[12,"til_or_since","","",207,null],[12,"idle","","",207,null],[12,"eventMask","","",207,null],[3,"XScreenSaverNotifyEvent","","",null,null],[12,"type_","","",208,null],[12,"serial","","",208,null],[12,"send_event","","",208,null],[12,"display","","",208,null],[12,"window","","",208,null],[12,"root","","",208,null],[12,"state","","",208,null],[12,"kind","","",208,null],[12,"forced","","",208,null],[12,"time","","",208,null],[17,"ScreenSaverName","","",null,null],[17,"ScreenSaverPropertyName","","",null,null],[17,"ScreenSaverNotifyMask","","",null,null],[17,"ScreenSaverCycleMask","","",null,null],[17,"ScreenSaverMajorVersion","","",null,null],[17,"ScreenSaverMinorVersion","","",null,null],[17,"ScreenSaverOff","","",null,null],[17,"ScreenSaverOn","","",null,null],[17,"ScreenSaverCycle","","",null,null],[17,"ScreenSaverDisabled","","",null,null],[17,"ScreenSaverBlanked","","",null,null],[17,"ScreenSaverInternal","","",null,null],[17,"ScreenSaverExternal","","",null,null],[17,"ScreenSaverNotify","","",null,null],[17,"ScreenSaverNumberEvents","","",null,null],[11,"open","","",206,{"inputs":[],"output":{"generics":["xss","openerror"],"name":"result"}}],[11,"fmt","","",207,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",207,{"inputs":[{"name":"self"}],"output":{"name":"xscreensaverinfo"}}],[11,"eq","","",207,{"inputs":[{"name":"self"},{"name":"xscreensaverinfo"}],"output":{"name":"bool"}}],[11,"ne","","",207,{"inputs":[{"name":"self"},{"name":"xscreensaverinfo"}],"output":{"name":"bool"}}],[11,"fmt","","",208,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",208,{"inputs":[{"name":"self"}],"output":{"name":"xscreensavernotifyevent"}}],[11,"eq","","",208,{"inputs":[{"name":"self"},{"name":"xscreensavernotifyevent"}],"output":{"name":"bool"}}],[11,"ne","","",208,{"inputs":[{"name":"self"},{"name":"xscreensavernotifyevent"}],"output":{"name":"bool"}}],[11,"as_mut","x11_dl::xlib","",97,{"inputs":[{"name":"self"}],"output":{"name":"xscreensavernotifyevent"}}],[11,"as_ref","","",97,{"inputs":[{"name":"self"}],"output":{"name":"xscreensavernotifyevent"}}],[11,"from","","",97,{"inputs":[{"name":"xscreensavernotifyevent"}],"output":{"name":"xevent"}}],[11,"from","","",97,{"inputs":[{"name":"xscreensavernotifyevent"}],"output":{"name":"xevent"}}],[11,"from","x11_dl::xss","",208,{"inputs":[{"name":"xevent"}],"output":{"name":"xscreensavernotifyevent"}}],[11,"from","","",208,{"inputs":[{"name":"xevent"}],"output":{"name":"xscreensavernotifyevent"}}],[0,"xt","x11_dl","",null,null],[3,"Xt","x11_dl::xt","",null,null],[12,"XtAddActions","","",209,null],[12,"XtAddCallback","","",209,null],[12,"XtAddCallbacks","","",209,null],[12,"XtAddConverter","","",209,null],[12,"XtAddEventHandler","","",209,null],[12,"XtAddExposureToRegion","","",209,null],[12,"XtAddGrab","","",209,null],[12,"XtAddInput","","",209,null],[12,"XtAddRawEventHandler","","",209,null],[12,"XtAddSignal","","",209,null],[12,"XtAddTimeOut","","",209,null],[12,"XtAddWorkProc","","",209,null],[12,"XtAllocateGC","","",209,null],[12,"XtAppAddActionHook","","",209,null],[12,"XtAppAddActions","","",209,null],[12,"XtAppAddBlockHook","","",209,null],[12,"XtAppAddConverter","","",209,null],[12,"XtAppAddInput","","",209,null],[12,"XtAppAddSignal","","",209,null],[12,"XtAppAddTimeOut","","",209,null],[12,"XtAppAddWorkProc","","",209,null],[12,"XtAppCreateShell","","",209,null],[12,"XtAppError","","",209,null],[12,"XtAppErrorMsg","","",209,null],[12,"XtAppGetErrorDatabase","","",209,null],[12,"XtAppGetErrorDatabaseText","","",209,null],[12,"XtAppGetExitFlag","","",209,null],[12,"XtAppGetSelectionTimeout","","",209,null],[12,"XtAppInitialize","","",209,null],[12,"XtAppLock","","",209,null],[12,"XtAppMainLoop","","",209,null],[12,"XtAppNextEvent","","",209,null],[12,"XtAppPeekEvent","","",209,null],[12,"XtAppPending","","",209,null],[12,"XtAppProcessEvent","","",209,null],[12,"XtAppReleaseCacheRefs","","",209,null],[12,"XtAppSetErrorHandler","","",209,null],[12,"XtAppSetErrorMsgHandler","","",209,null],[12,"XtAppSetExitFlag","","",209,null],[12,"XtAppSetFallbackResources","","",209,null],[12,"XtAppSetSelectionTimeout","","",209,null],[12,"XtAppSetTypeConverter","","",209,null],[12,"XtAppSetWarningHandler","","",209,null],[12,"XtAppSetWarningMsgHandler","","",209,null],[12,"XtAppUnlock","","",209,null],[12,"XtAppWarning","","",209,null],[12,"XtAppWarningMsg","","",209,null],[12,"XtAugmentTranslations","","",209,null],[12,"XtBuildEventMask","","",209,null],[12,"XtCallAcceptFocus","","",209,null],[12,"XtCallActionProc","","",209,null],[12,"XtCallbackExclusive","","",209,null],[12,"XtCallbackNone","","",209,null],[12,"XtCallbackNonexclusive","","",209,null],[12,"XtCallbackPopdown","","",209,null],[12,"XtCallbackReleaseCacheRef","","",209,null],[12,"XtCallbackReleaseCacheRefList","","",209,null],[12,"XtCallCallbackList","","",209,null],[12,"XtCallCallbacks","","",209,null],[12,"XtCallConverter","","",209,null],[12,"XtCalloc","","",209,null],[12,"XtCancelSelectionRequest","","",209,null],[12,"XtChangeManagedSet","","",209,null],[12,"XtClass","","",209,null],[12,"XtCloseDisplay","","",209,null],[12,"XtConfigureWidget","","",209,null],[12,"XtConvert","","",209,null],[12,"XtConvertAndStore","","",209,null],[12,"XtConvertCase","","",209,null],[12,"XtCreateApplicationContext","","",209,null],[12,"XtCreateApplicationShell","","",209,null],[12,"XtCreateManagedWidget","","",209,null],[12,"XtCreatePopupShell","","",209,null],[12,"XtCreateSelectionRequest","","",209,null],[12,"XtCreateWidget","","",209,null],[12,"XtCreateWindow","","",209,null],[12,"XtCvtColorToPixel","","",209,null],[12,"XtCvtIntToBool","","",209,null],[12,"XtCvtIntToBoolean","","",209,null],[12,"XtCvtIntToColor","","",209,null],[12,"XtCvtIntToFloat","","",209,null],[12,"XtCvtIntToFont","","",209,null],[12,"XtCvtIntToPixel","","",209,null],[12,"XtCvtIntToPixmap","","",209,null],[12,"XtCvtIntToShort","","",209,null],[12,"XtCvtIntToUnsignedChar","","",209,null],[12,"XtCvtStringToAcceleratorTable","","",209,null],[12,"XtCvtStringToAtom","","",209,null],[12,"XtCvtStringToBool","","",209,null],[12,"XtCvtStringToBoolean","","",209,null],[12,"XtCvtStringToCommandArgArray","","",209,null],[12,"XtCvtStringToCursor","","",209,null],[12,"XtCvtStringToDimension","","",209,null],[12,"XtCvtStringToDirectoryString","","",209,null],[12,"XtCvtStringToDisplay","","",209,null],[12,"XtCvtStringToFile","","",209,null],[12,"XtCvtStringToFloat","","",209,null],[12,"XtCvtStringToFont","","",209,null],[12,"XtCvtStringToFontSet","","",209,null],[12,"XtCvtStringToFontStruct","","",209,null],[12,"XtCvtStringToGravity","","",209,null],[12,"XtCvtStringToInitialState","","",209,null],[12,"XtCvtStringToInt","","",209,null],[12,"XtCvtStringToPixel","","",209,null],[12,"XtCvtStringToRestartStyle","","",209,null],[12,"XtCvtStringToShort","","",209,null],[12,"XtCvtStringToTranslationTable","","",209,null],[12,"XtCvtStringToUnsignedChar","","",209,null],[12,"XtCvtStringToVisual","","",209,null],[12,"XtDatabase","","",209,null],[12,"XtDestroyApplicationContext","","",209,null],[12,"XtDestroyGC","","",209,null],[12,"XtDestroyWidget","","",209,null],[12,"XtDirectConvert","","",209,null],[12,"XtDisownSelection","","",209,null],[12,"XtDispatchEvent","","",209,null],[12,"XtDispatchEventToWidget","","",209,null],[12,"XtDisplay","","",209,null],[12,"XtDisplayInitialize","","",209,null],[12,"XtDisplayOfObject","","",209,null],[12,"XtDisplayStringConversionWarning","","",209,null],[12,"XtDisplayToApplicationContext","","",209,null],[12,"XtError","","",209,null],[12,"XtErrorMsg","","",209,null],[12,"XtFindFile","","",209,null],[12,"XtFree","","",209,null],[12,"XtGetActionKeysym","","",209,null],[12,"XtGetActionList","","",209,null],[12,"XtGetApplicationNameAndClass","","",209,null],[12,"XtGetApplicationResources","","",209,null],[12,"XtGetClassExtension","","",209,null],[12,"XtGetConstraintResourceList","","",209,null],[12,"XtGetDisplays","","",209,null],[12,"XtGetErrorDatabase","","",209,null],[12,"XtGetErrorDatabaseText","","",209,null],[12,"XtGetGC","","",209,null],[12,"XtGetKeyboardFocusWidget","","",209,null],[12,"XtGetKeysymTable","","",209,null],[12,"XtGetMultiClickTime","","",209,null],[12,"XtGetResourceList","","",209,null],[12,"XtGetSelectionParameters","","",209,null],[12,"XtGetSelectionRequest","","",209,null],[12,"XtGetSelectionTimeout","","",209,null],[12,"XtGetSelectionValue","","",209,null],[12,"XtGetSelectionValueIncremental","","",209,null],[12,"XtGetSelectionValues","","",209,null],[12,"XtGetSelectionValuesIncremental","","",209,null],[12,"XtGetSubresources","","",209,null],[12,"XtGetSubvalues","","",209,null],[12,"XtGetValues","","",209,null],[12,"XtGrabButton","","",209,null],[12,"XtGrabKey","","",209,null],[12,"XtGrabKeyboard","","",209,null],[12,"XtGrabPointer","","",209,null],[12,"XtHasCallbacks","","",209,null],[12,"XtHooksOfDisplay","","",209,null],[12,"XtInitialize","","",209,null],[12,"XtInitializeWidgetClass","","",209,null],[12,"XtInsertEventHandler","","",209,null],[12,"XtInsertEventTypeHandler","","",209,null],[12,"XtInsertRawEventHandler","","",209,null],[12,"XtInstallAccelerators","","",209,null],[12,"XtInstallAllAccelerators","","",209,null],[12,"XtIsApplicationShell","","",209,null],[12,"XtIsComposite","","",209,null],[12,"XtIsConstraint","","",209,null],[12,"XtIsManaged","","",209,null],[12,"XtIsObject","","",209,null],[12,"XtIsOverrideShell","","",209,null],[12,"XtIsRealized","","",209,null],[12,"XtIsRectObj","","",209,null],[12,"XtIsSensitive","","",209,null],[12,"XtIsSessionShell","","",209,null],[12,"XtIsShell","","",209,null],[12,"XtIsSubclass","","",209,null],[12,"XtIsTopLevelShell","","",209,null],[12,"XtIsTransientShell","","",209,null],[12,"XtIsVendorShell","","",209,null],[12,"XtIsWidget","","",209,null],[12,"XtIsWMShell","","",209,null],[12,"XtKeysymToKeycodeList","","",209,null],[12,"XtLastEventProcessed","","",209,null],[12,"XtLastTimestampProcessed","","",209,null],[12,"XtMainLoop","","",209,null],[12,"XtMakeGeometryRequest","","",209,null],[12,"XtMakeResizeRequest","","",209,null],[12,"XtMalloc","","",209,null],[12,"XtManageChild","","",209,null],[12,"XtManageChildren","","",209,null],[12,"XtMapWidget","","",209,null],[12,"XtMenuPopupAction","","",209,null],[12,"XtMergeArgLists","","",209,null],[12,"XtMoveWidget","","",209,null],[12,"XtName","","",209,null],[12,"XtNameToWidget","","",209,null],[12,"XtNewString","","",209,null],[12,"XtNextEvent","","",209,null],[12,"XtNoticeSignal","","",209,null],[12,"XtOpenApplication","","",209,null],[12,"XtOpenDisplay","","",209,null],[12,"XtOverrideTranslations","","",209,null],[12,"XtOwnSelection","","",209,null],[12,"XtOwnSelectionIncremental","","",209,null],[12,"XtParent","","",209,null],[12,"XtParseAcceleratorTable","","",209,null],[12,"XtParseTranslationTable","","",209,null],[12,"XtPeekEvent","","",209,null],[12,"XtPending","","",209,null],[12,"XtPopdown","","",209,null],[12,"XtPopup","","",209,null],[12,"XtPopupSpringLoaded","","",209,null],[12,"XtProcessEvent","","",209,null],[12,"XtProcessLock","","",209,null],[12,"XtProcessUnlock","","",209,null],[12,"XtQueryGeometry","","",209,null],[12,"XtRealizeWidget","","",209,null],[12,"XtRealloc","","",209,null],[12,"XtRegisterCaseConverter","","",209,null],[12,"XtRegisterDrawable","","",209,null],[12,"XtRegisterExtensionSelector","","",209,null],[12,"XtRegisterGrabAction","","",209,null],[12,"XtReleaseGC","","",209,null],[12,"XtReleasePropertyAtom","","",209,null],[12,"XtRemoveActionHook","","",209,null],[12,"XtRemoveAllCallbacks","","",209,null],[12,"XtRemoveBlockHook","","",209,null],[12,"XtRemoveCallback","","",209,null],[12,"XtRemoveCallbacks","","",209,null],[12,"XtRemoveEventHandler","","",209,null],[12,"XtRemoveEventTypeHandler","","",209,null],[12,"XtRemoveGrab","","",209,null],[12,"XtRemoveInput","","",209,null],[12,"XtRemoveRawEventHandler","","",209,null],[12,"XtRemoveSignal","","",209,null],[12,"XtRemoveTimeOut","","",209,null],[12,"XtRemoveWorkProc","","",209,null],[12,"XtReservePropertyAtom","","",209,null],[12,"XtResizeWidget","","",209,null],[12,"XtResizeWindow","","",209,null],[12,"XtResolvePathname","","",209,null],[12,"XtScreen","","",209,null],[12,"XtScreenDatabase","","",209,null],[12,"XtScreenOfObject","","",209,null],[12,"XtSendSelectionRequest","","",209,null],[12,"XtSessionGetToken","","",209,null],[12,"XtSessionReturnToken","","",209,null],[12,"XtSetErrorHandler","","",209,null],[12,"XtSetErrorMsgHandler","","",209,null],[12,"XtSetEventDispatcher","","",209,null],[12,"XtSetKeyboardFocus","","",209,null],[12,"XtSetKeyTranslator","","",209,null],[12,"XtSetLanguageProc","","",209,null],[12,"XtSetMappedWhenManaged","","",209,null],[12,"XtSetMultiClickTime","","",209,null],[12,"XtSetSelectionParameters","","",209,null],[12,"XtSetSelectionTimeout","","",209,null],[12,"XtSetSensitive","","",209,null],[12,"XtSetSubvalues","","",209,null],[12,"XtSetTypeConverter","","",209,null],[12,"XtSetValues","","",209,null],[12,"XtSetWarningHandler","","",209,null],[12,"XtSetWarningMsgHandler","","",209,null],[12,"XtSetWMColormapWindows","","",209,null],[12,"XtStringConversionWarning","","",209,null],[12,"XtSuperclass","","",209,null],[12,"XtToolkitInitialize","","",209,null],[12,"XtToolkitThreadInitialize","","",209,null],[12,"XtTranslateCoords","","",209,null],[12,"XtTranslateKey","","",209,null],[12,"XtTranslateKeycode","","",209,null],[12,"XtUngrabButton","","",209,null],[12,"XtUngrabKey","","",209,null],[12,"XtUngrabKeyboard","","",209,null],[12,"XtUngrabPointer","","",209,null],[12,"XtUninstallTranslations","","",209,null],[12,"XtUnmanageChild","","",209,null],[12,"XtUnmanageChildren","","",209,null],[12,"XtUnmapWidget","","",209,null],[12,"XtUnrealizeWidget","","",209,null],[12,"XtUnregisterDrawable","","",209,null],[12,"XtWarning","","",209,null],[12,"XtWarningMsg","","",209,null],[12,"XtWidgetToApplicationContext","","",209,null],[12,"XtWindow","","",209,null],[12,"XtWindowOfObject","","",209,null],[12,"XtWindowToWidget","","",209,null],[12,"XtAsprintf","","",209,null],[12,"XtVaAppCreateShell","","",209,null],[12,"XtVaAppInitialize","","",209,null],[12,"XtVaCreateArgsList","","",209,null],[12,"XtVaCreateManagedWidget","","",209,null],[12,"XtVaCreatePopupShell","","",209,null],[12,"XtVaCreateWidget","","",209,null],[12,"XtVaGetApplicationResources","","",209,null],[12,"XtVaGetSubresources","","",209,null],[12,"XtVaGetSubvalues","","",209,null],[12,"XtVaGetValues","","",209,null],[12,"XtVaOpenApplication","","",209,null],[12,"XtVaSetSubvalues","","",209,null],[12,"XtVaSetValues","","",209,null],[3,"Arg","","",null,null],[3,"SubstitutionRec","","",null,null],[3,"_TranslationData","","",null,null],[3,"_WidgetClassRec","","",null,null],[3,"_WidgetRec","","",null,null],[3,"_XtActionsRec","","",null,null],[3,"_XtAppStruct","","",null,null],[3,"_XtCallbackRec","","",null,null],[3,"_XtCheckpointTokenRec","","",null,null],[3,"XtConvertArgRec","","",null,null],[3,"_XtResource","","",null,null],[3,"XtWidgetGeometry","","",null,null],[6,"XtCallbackStatus","","",null,null],[6,"XtGeometryResult","","",null,null],[6,"XtGrabKind","","",null,null],[6,"XtListPosition","","",null,null],[6,"ArgList","","",null,null],[6,"Substitution","","",null,null],[6,"Widget","","",null,null],[6,"WidgetClass","","",null,null],[6,"XtAccelerators","","",null,null],[6,"XtActionList","","",null,null],[6,"XtActionsRec","","",null,null],[6,"XtAppContext","","",null,null],[6,"XtCallbackList","","",null,null],[6,"XtCallbackRec","","",null,null],[6,"XtCheckpointToken","","",null,null],[6,"XtCheckpointTokenRec","","",null,null],[6,"XtConvertArgList","","",null,null],[6,"XtResource","","",null,null],[6,"XtResourceList","","",null,null],[6,"XtTranslations","","",null,null],[11,"open","","",209,{"inputs":[],"output":{"generics":["xt","openerror"],"name":"result"}}],[0,"xtest","x11_dl","",null,null],[3,"Xf86vmode","x11_dl::xtest","",null,null],[12,"XTestCompareCurrentCursorWithWindow","","",210,null],[12,"XTestCompareCursorWithWindow","","",210,null],[12,"XTestDiscard","","",210,null],[12,"XTestFakeButtonEvent","","",210,null],[12,"XTestFakeDeviceButtonEvent","","",210,null],[12,"XTestFakeDeviceKeyEvent","","",210,null],[12,"XTestFakeDeviceMotionEvent","","",210,null],[12,"XTestFakeKeyEvent","","",210,null],[12,"XTestFakeMotionEvent","","",210,null],[12,"XTestFakeProximityEvent","","",210,null],[12,"XTestFakeRelativeMotionEvent","","",210,null],[12,"XTestGrabControl","","",210,null],[12,"XTestQueryExtension","","",210,null],[12,"XTestSetGContextOfGC","","",210,null],[12,"XTestSetVisualIDOfVisual","","",210,null],[11,"open","","",210,{"inputs":[],"output":{"generics":["xf86vmode","openerror"],"name":"result"}}],[0,"xlib_xcb","x11_dl","",null,null],[3,"Xlib_xcb","x11_dl::xlib_xcb","",null,null],[12,"XGetXCBConnection","","",211,null],[6,"xcb_connection_t","","",null,null],[11,"open","","",211,{"inputs":[],"output":{"generics":["xlib_xcb","openerror"],"name":"result"}}],[0,"xrandr","x11_dl","",null,null],[3,"Xrandr","x11_dl::xrandr","",null,null],[12,"XRRAddOutputMode","","",212,null],[12,"XRRAllocGamma","","",212,null],[12,"XRRAllocModeInfo","","",212,null],[12,"XRRAllocateMonitor","","",212,null],[12,"XRRChangeOutputProperty","","",212,null],[12,"XRRChangeProviderProperty","","",212,null],[12,"XRRConfigCurrentConfiguration","","",212,null],[12,"XRRConfigCurrentRate","","",212,null],[12,"XRRConfigRates","","",212,null],[12,"XRRConfigRotations","","",212,null],[12,"XRRConfigSizes","","",212,null],[12,"XRRConfigTimes","","",212,null],[12,"XRRConfigureOutputProperty","","",212,null],[12,"XRRConfigureProviderProperty","","",212,null],[12,"XRRCreateMode","","",212,null],[12,"XRRDeleteMonitor","","",212,null],[12,"XRRDeleteOutputMode","","",212,null],[12,"XRRDeleteOutputProperty","","",212,null],[12,"XRRDeleteProviderProperty","","",212,null],[12,"XRRDestroyMode","","",212,null],[12,"XRRFreeCrtcInfo","","",212,null],[12,"XRRFreeGamma","","",212,null],[12,"XRRFreeModeInfo","","",212,null],[12,"XRRFreeMonitors","","",212,null],[12,"XRRFreeOutputInfo","","",212,null],[12,"XRRFreePanning","","",212,null],[12,"XRRFreeProviderInfo","","",212,null],[12,"XRRFreeProviderResources","","",212,null],[12,"XRRFreeScreenConfigInfo","","",212,null],[12,"XRRFreeScreenResources","","",212,null],[12,"XRRGetCrtcGamma","","",212,null],[12,"XRRGetCrtcGammaSize","","",212,null],[12,"XRRGetCrtcInfo","","",212,null],[12,"XRRGetCrtcTransform","","",212,null],[12,"XRRGetMonitors","","",212,null],[12,"XRRGetOutputInfo","","",212,null],[12,"XRRGetOutputPrimary","","",212,null],[12,"XRRGetOutputProperty","","",212,null],[12,"XRRGetPanning","","",212,null],[12,"XRRGetProviderInfo","","",212,null],[12,"XRRGetProviderProperty","","",212,null],[12,"XRRGetProviderResources","","",212,null],[12,"XRRGetScreenInfo","","",212,null],[12,"XRRGetScreenResources","","",212,null],[12,"XRRGetScreenResourcesCurrent","","",212,null],[12,"XRRGetScreenSizeRange","","",212,null],[12,"XRRListOutputProperties","","",212,null],[12,"XRRListProviderProperties","","",212,null],[12,"XRRQueryExtension","","",212,null],[12,"XRRQueryOutputProperty","","",212,null],[12,"XRRQueryProviderProperty","","",212,null],[12,"XRRQueryVersion","","",212,null],[12,"XRRRates","","",212,null],[12,"XRRRootToScreen","","",212,null],[12,"XRRRotations","","",212,null],[12,"XRRSelectInput","","",212,null],[12,"XRRSetCrtcConfig","","",212,null],[12,"XRRSetCrtcGamma","","",212,null],[12,"XRRSetCrtcTransform","","",212,null],[12,"XRRSetMonitor","","",212,null],[12,"XRRSetOutputPrimary","","",212,null],[12,"XRRSetPanning","","",212,null],[12,"XRRSetProviderOffloadSink","","",212,null],[12,"XRRSetProviderOutputSource","","",212,null],[12,"XRRSetScreenConfig","","",212,null],[12,"XRRSetScreenConfigAndRate","","",212,null],[12,"XRRSetScreenSize","","",212,null],[12,"XRRSizes","","",212,null],[12,"XRRTimes","","",212,null],[12,"XRRUpdateConfiguration","","",212,null],[3,"XRRScreenSize","","",null,null],[12,"width","","",213,null],[12,"height","","",213,null],[12,"mwidth","","",213,null],[12,"mheight","","",213,null],[3,"XRRScreenConfiguration","","",null,null],[3,"XRRModeInfo","","",null,null],[12,"id","","",214,null],[12,"width","","",214,null],[12,"height","","",214,null],[12,"dotClock","","",214,null],[12,"hSyncStart","","",214,null],[12,"hSyncEnd","","",214,null],[12,"hTotal","","",214,null],[12,"hSkew","","",214,null],[12,"vSyncStart","","",214,null],[12,"vSyncEnd","","",214,null],[12,"vTotal","","",214,null],[12,"name","","",214,null],[12,"nameLength","","",214,null],[12,"modeFlags","","",214,null],[3,"XRRScreenResources","","",null,null],[12,"timestamp","","",215,null],[12,"configTimestamp","","",215,null],[12,"ncrtc","","",215,null],[12,"crtcs","","",215,null],[12,"noutput","","",215,null],[12,"outputs","","",215,null],[12,"nmode","","",215,null],[12,"modes","","",215,null],[3,"XRROutputInfo","","",null,null],[12,"timestamp","","",216,null],[12,"crtc","","",216,null],[12,"name","","",216,null],[12,"nameLen","","",216,null],[12,"mm_width","","",216,null],[12,"mm_height","","",216,null],[12,"connection","","",216,null],[12,"subpixel_order","","",216,null],[12,"ncrtc","","",216,null],[12,"crtcs","","",216,null],[12,"nclone","","",216,null],[12,"clones","","",216,null],[12,"nmode","","",216,null],[12,"npreferred","","",216,null],[12,"modes","","",216,null],[3,"XRRPropertyInfo","","",null,null],[12,"pending","","",217,null],[12,"range","","",217,null],[12,"immutable","","",217,null],[12,"num_values","","",217,null],[12,"values","","",217,null],[3,"XRRCrtcInfo","","",null,null],[12,"timestamp","","",218,null],[12,"x","","",218,null],[12,"y","","",218,null],[12,"width","","",218,null],[12,"height","","",218,null],[12,"mode","","",218,null],[12,"rotation","","",218,null],[12,"noutput","","",218,null],[12,"outputs","","",218,null],[12,"rotations","","",218,null],[12,"npossible","","",218,null],[12,"possible","","",218,null],[3,"XRRCrtcGamma","","",null,null],[12,"size","","",219,null],[12,"red","","",219,null],[12,"green","","",219,null],[12,"blue","","",219,null],[3,"XRRCrtcTransformAttributes","","",null,null],[12,"pendingTransform","","",220,null],[12,"pendingFilter","","",220,null],[12,"pendingNparams","","",220,null],[12,"pendingParams","","",220,null],[12,"currentTransform","","",220,null],[12,"currentFilter","","",220,null],[12,"currentNparams","","",220,null],[12,"currentParams","","",220,null],[3,"XRRPanning","","",null,null],[12,"timestamp","","",221,null],[12,"left","","",221,null],[12,"top","","",221,null],[12,"width","","",221,null],[12,"height","","",221,null],[12,"track_left","","",221,null],[12,"track_top","","",221,null],[12,"track_width","","",221,null],[12,"track_height","","",221,null],[12,"border_left","","",221,null],[12,"border_top","","",221,null],[12,"border_right","","",221,null],[12,"border_bottom","","",221,null],[3,"XRRProviderResources","","",null,null],[12,"timestamp","","",222,null],[12,"nproviders","","",222,null],[12,"providers","","",222,null],[3,"XRRProviderInfo","","",null,null],[12,"capabilities","","",223,null],[12,"ncrtcs","","",223,null],[12,"crtcs","","",223,null],[12,"noutputs","","",223,null],[12,"outputs","","",223,null],[12,"name","","",223,null],[12,"nassociatedproviders","","",223,null],[12,"associated_providers","","",223,null],[12,"associated_capability","","",223,null],[12,"nameLen","","",223,null],[3,"XRRMonitorInfo","","",null,null],[12,"name","","",224,null],[12,"primary","","",224,null],[12,"automatic","","",224,null],[12,"noutput","","",224,null],[12,"x","","",224,null],[12,"y","","",224,null],[12,"width","","",224,null],[12,"height","","",224,null],[12,"mwidth","","",224,null],[12,"mheight","","",224,null],[12,"outputs","","",224,null],[3,"XRRScreenChangeNotifyEvent","","",null,null],[12,"type_","","",225,null],[12,"serial","","",225,null],[12,"send_event","","",225,null],[12,"display","","",225,null],[12,"window","","",225,null],[12,"root","","",225,null],[12,"timestamp","","",225,null],[12,"config_timestamp","","",225,null],[12,"size_index","","",225,null],[12,"subpixel_order","","",225,null],[12,"rotation","","",225,null],[12,"width","","",225,null],[12,"height","","",225,null],[12,"mwidth","","",225,null],[12,"mheight","","",225,null],[3,"XRRNotifyEvent","","",null,null],[12,"type_","","",226,null],[12,"serial","","",226,null],[12,"send_event","","",226,null],[12,"display","","",226,null],[12,"window","","",226,null],[12,"subtype","","",226,null],[3,"XRROutputChangeNotifyEvent","","",null,null],[12,"type_","","",227,null],[12,"serial","","",227,null],[12,"send_event","","",227,null],[12,"display","","",227,null],[12,"window","","",227,null],[12,"subtype","","",227,null],[12,"output","","",227,null],[12,"crtc","","",227,null],[12,"mode","","",227,null],[12,"rotation","","",227,null],[12,"connection","","",227,null],[12,"subpixel_order","","",227,null],[3,"XRRCrtcChangeNotifyEvent","","",null,null],[12,"type_","","",228,null],[12,"serial","","",228,null],[12,"send_event","","",228,null],[12,"display","","",228,null],[12,"window","","",228,null],[12,"subtype","","",228,null],[12,"crtc","","",228,null],[12,"mode","","",228,null],[12,"rotation","","",228,null],[12,"x","","",228,null],[12,"y","","",228,null],[12,"width","","",228,null],[12,"height","","",228,null],[3,"XRROutputPropertyNotifyEvent","","",null,null],[12,"type_","","",229,null],[12,"serial","","",229,null],[12,"send_event","","",229,null],[12,"display","","",229,null],[12,"window","","",229,null],[12,"subtype","","",229,null],[12,"output","","",229,null],[12,"property","","",229,null],[12,"timestamp","","",229,null],[12,"state","","",229,null],[3,"XRRProviderChangeNotifyEvent","","",null,null],[12,"type_","","",230,null],[12,"serial","","",230,null],[12,"send_event","","",230,null],[12,"display","","",230,null],[12,"window","","",230,null],[12,"subtype","","",230,null],[12,"provider","","",230,null],[12,"timestamp","","",230,null],[12,"current_role","","",230,null],[3,"XRRProviderPropertyNotifyEvent","","",null,null],[12,"type_","","",231,null],[12,"serial","","",231,null],[12,"send_event","","",231,null],[12,"display","","",231,null],[12,"window","","",231,null],[12,"subtype","","",231,null],[12,"provider","","",231,null],[12,"property","","",231,null],[12,"timestamp","","",231,null],[12,"state","","",231,null],[3,"XRRResourceChangeNotifyEvent","","",null,null],[12,"type_","","",232,null],[12,"serial","","",232,null],[12,"send_event","","",232,null],[12,"display","","",232,null],[12,"window","","",232,null],[12,"subtype","","",232,null],[12,"timestamp","","",232,null],[3,"Xrandr_2_2_0","","",null,null],[12,"XRRAddOutputMode","","",233,null],[12,"XRRAllocGamma","","",233,null],[12,"XRRAllocModeInfo","","",233,null],[12,"XRRChangeOutputProperty","","",233,null],[12,"XRRChangeProviderProperty","","",233,null],[12,"XRRConfigCurrentConfiguration","","",233,null],[12,"XRRConfigCurrentRate","","",233,null],[12,"XRRConfigRates","","",233,null],[12,"XRRConfigRotations","","",233,null],[12,"XRRConfigSizes","","",233,null],[12,"XRRConfigTimes","","",233,null],[12,"XRRConfigureOutputProperty","","",233,null],[12,"XRRConfigureProviderProperty","","",233,null],[12,"XRRCreateMode","","",233,null],[12,"XRRDeleteOutputMode","","",233,null],[12,"XRRDeleteOutputProperty","","",233,null],[12,"XRRDeleteProviderProperty","","",233,null],[12,"XRRDestroyMode","","",233,null],[12,"XRRFreeCrtcInfo","","",233,null],[12,"XRRFreeGamma","","",233,null],[12,"XRRFreeModeInfo","","",233,null],[12,"XRRFreeOutputInfo","","",233,null],[12,"XRRFreePanning","","",233,null],[12,"XRRFreeProviderInfo","","",233,null],[12,"XRRFreeProviderResources","","",233,null],[12,"XRRFreeScreenConfigInfo","","",233,null],[12,"XRRFreeScreenResources","","",233,null],[12,"XRRGetCrtcGamma","","",233,null],[12,"XRRGetCrtcGammaSize","","",233,null],[12,"XRRGetCrtcInfo","","",233,null],[12,"XRRGetCrtcTransform","","",233,null],[12,"XRRGetOutputInfo","","",233,null],[12,"XRRGetOutputPrimary","","",233,null],[12,"XRRGetOutputProperty","","",233,null],[12,"XRRGetPanning","","",233,null],[12,"XRRGetProviderInfo","","",233,null],[12,"XRRGetProviderProperty","","",233,null],[12,"XRRGetProviderResources","","",233,null],[12,"XRRGetScreenInfo","","",233,null],[12,"XRRGetScreenResources","","",233,null],[12,"XRRGetScreenResourcesCurrent","","",233,null],[12,"XRRGetScreenSizeRange","","",233,null],[12,"XRRListOutputProperties","","",233,null],[12,"XRRListProviderProperties","","",233,null],[12,"XRRQueryExtension","","",233,null],[12,"XRRQueryOutputProperty","","",233,null],[12,"XRRQueryProviderProperty","","",233,null],[12,"XRRQueryVersion","","",233,null],[12,"XRRRates","","",233,null],[12,"XRRRootToScreen","","",233,null],[12,"XRRRotations","","",233,null],[12,"XRRSelectInput","","",233,null],[12,"XRRSetCrtcConfig","","",233,null],[12,"XRRSetCrtcGamma","","",233,null],[12,"XRRSetCrtcTransform","","",233,null],[12,"XRRSetOutputPrimary","","",233,null],[12,"XRRSetPanning","","",233,null],[12,"XRRSetProviderOffloadSink","","",233,null],[12,"XRRSetProviderOutputSource","","",233,null],[12,"XRRSetScreenConfig","","",233,null],[12,"XRRSetScreenConfigAndRate","","",233,null],[12,"XRRSetScreenSize","","",233,null],[12,"XRRSizes","","",233,null],[12,"XRRTimes","","",233,null],[12,"XRRUpdateConfiguration","","",233,null],[6,"Connection","","",null,null],[6,"Rotation","","",null,null],[6,"SizeID","","",null,null],[6,"SubpixelOrder","","",null,null],[6,"RROutput","","",null,null],[6,"RRCrtc","","",null,null],[6,"RRMode","","",null,null],[6,"RRProvider","","",null,null],[6,"XRRModeFlags","","",null,null],[17,"RANDR_NAME","","",null,null],[17,"RANDR_MAJOR","","",null,null],[17,"RANDR_MINOR","","",null,null],[17,"RRNumberErrors","","",null,null],[17,"RRNumberEvents","","",null,null],[17,"RRNumberRequests","","",null,null],[17,"X_RRQueryVersion","","",null,null],[17,"X_RROldGetScreenInfo","","",null,null],[17,"X_RRSetScreenConfig","","",null,null],[17,"X_RROldScreenChangeSelectInput","","",null,null],[17,"X_RRSelectInput","","",null,null],[17,"X_RRGetScreenInfo","","",null,null],[17,"X_RRGetScreenSizeRange","","",null,null],[17,"X_RRSetScreenSize","","",null,null],[17,"X_RRGetScreenResources","","",null,null],[17,"X_RRGetOutputInfo","","",null,null],[17,"X_RRListOutputProperties","","",null,null],[17,"X_RRQueryOutputProperty","","",null,null],[17,"X_RRConfigureOutputProperty","","",null,null],[17,"X_RRChangeOutputProperty","","",null,null],[17,"X_RRDeleteOutputProperty","","",null,null],[17,"X_RRGetOutputProperty","","",null,null],[17,"X_RRCreateMode","","",null,null],[17,"X_RRDestroyMode","","",null,null],[17,"X_RRAddOutputMode","","",null,null],[17,"X_RRDeleteOutputMode","","",null,null],[17,"X_RRGetCrtcInfo","","",null,null],[17,"X_RRSetCrtcConfig","","",null,null],[17,"X_RRGetCrtcGammaSize","","",null,null],[17,"X_RRGetCrtcGamma","","",null,null],[17,"X_RRSetCrtcGamma","","",null,null],[17,"X_RRGetScreenResourcesCurrent","","",null,null],[17,"X_RRSetCrtcTransform","","",null,null],[17,"X_RRGetCrtcTransform","","",null,null],[17,"X_RRGetPanning","","",null,null],[17,"X_RRSetPanning","","",null,null],[17,"X_RRSetOutputPrimary","","",null,null],[17,"X_RRGetOutputPrimary","","",null,null],[17,"X_RRGetProviders","","",null,null],[17,"X_RRGetProviderInfo","","",null,null],[17,"X_RRSetProviderOffloadSink","","",null,null],[17,"X_RRSetProviderOutputSource","","",null,null],[17,"X_RRListProviderProperties","","",null,null],[17,"X_RRQueryProviderProperty","","",null,null],[17,"X_RRConfigureProviderProperty","","",null,null],[17,"X_RRChangeProviderProperty","","",null,null],[17,"X_RRDeleteProviderProperty","","",null,null],[17,"X_RRGetProviderProperty","","",null,null],[17,"X_RRGetMonitors","","",null,null],[17,"X_RRSetMonitor","","",null,null],[17,"X_RRDeleteMonitor","","",null,null],[17,"RRTransformUnit","","",null,null],[17,"RRTransformScaleUp","","",null,null],[17,"RRTransformScaleDown","","",null,null],[17,"RRTransformProjective","","",null,null],[17,"RRScreenChangeNotifyMask","","",null,null],[17,"RRCrtcChangeNotifyMask","","",null,null],[17,"RROutputChangeNotifyMask","","",null,null],[17,"RROutputPropertyNotifyMask","","",null,null],[17,"RRProviderChangeNotifyMask","","",null,null],[17,"RRProviderPropertyNotifyMask","","",null,null],[17,"RRResourceChangeNotifyMask","","",null,null],[17,"RRScreenChangeNotify","","",null,null],[17,"RRNotify","","",null,null],[17,"RRNotify_CrtcChange","","",null,null],[17,"RRNotify_OutputChange","","",null,null],[17,"RRNotify_OutputProperty","","",null,null],[17,"RRNotify_ProviderChange","","",null,null],[17,"RRNotify_ProviderProperty","","",null,null],[17,"RRNotify_ResourceChange","","",null,null],[17,"RR_Rotate_0","","",null,null],[17,"RR_Rotate_90","","",null,null],[17,"RR_Rotate_180","","",null,null],[17,"RR_Rotate_270","","",null,null],[17,"RR_Reflect_X","","",null,null],[17,"RR_Reflect_Y","","",null,null],[17,"RRSetConfigSuccess","","",null,null],[17,"RRSetConfigInvalidConfigTime","","",null,null],[17,"RRSetConfigInvalidTime","","",null,null],[17,"RRSetConfigFailed","","",null,null],[17,"RR_HSyncPositive","","",null,null],[17,"RR_HSyncNegative","","",null,null],[17,"RR_VSyncPositive","","",null,null],[17,"RR_VSyncNegative","","",null,null],[17,"RR_Interlace","","",null,null],[17,"RR_DoubleScan","","",null,null],[17,"RR_CSync","","",null,null],[17,"RR_CSyncPositive","","",null,null],[17,"RR_CSyncNegative","","",null,null],[17,"RR_HSkewPresent","","",null,null],[17,"RR_BCast","","",null,null],[17,"RR_PixelMultiplex","","",null,null],[17,"RR_DoubleClock","","",null,null],[17,"RR_ClockDivideBy2","","",null,null],[17,"RR_Connected","","",null,null],[17,"RR_Disconnected","","",null,null],[17,"RR_UnknownConnection","","",null,null],[17,"BadRROutput","","",null,null],[17,"BadRRCrtc","","",null,null],[17,"BadRRMode","","",null,null],[17,"BadRRProvider","","",null,null],[17,"RR_PROPERTY_BACKLIGHT","","",null,null],[17,"RR_PROPERTY_RANDR_EDID","","",null,null],[17,"RR_PROPERTY_SIGNAL_FORMAT","","",null,null],[17,"RR_PROPERTY_SIGNAL_PROPERTIES","","",null,null],[17,"RR_PROPERTY_CONNECTOR_TYPE","","",null,null],[17,"RR_PROPERTY_CONNECTOR_NUMBER","","",null,null],[17,"RR_PROPERTY_COMPATIBILITY_LIST","","",null,null],[17,"RR_PROPERTY_CLONE_LIST","","",null,null],[17,"RR_PROPERTY_BORDER","","",null,null],[17,"RR_PROPERTY_BORDER_DIMENSIONS","","",null,null],[17,"RR_PROPERTY_GUID","","",null,null],[17,"RR_PROPERTY_RANDR_TILE","","",null,null],[17,"RR_Capability_None","","",null,null],[17,"RR_Capability_SourceOutput","","",null,null],[17,"RR_Capability_SinkOutput","","",null,null],[17,"RR_Capability_SourceOffload","","",null,null],[17,"RR_Capability_SinkOffload","","",null,null],[11,"open","","",212,{"inputs":[],"output":{"generics":["xrandr","openerror"],"name":"result"}}],[11,"fmt","","",213,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",213,{"inputs":[{"name":"self"}],"output":{"name":"xrrscreensize"}}],[11,"eq","","",213,{"inputs":[{"name":"self"},{"name":"xrrscreensize"}],"output":{"name":"bool"}}],[11,"ne","","",213,{"inputs":[{"name":"self"},{"name":"xrrscreensize"}],"output":{"name":"bool"}}],[11,"fmt","","",214,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",214,{"inputs":[{"name":"self"}],"output":{"name":"xrrmodeinfo"}}],[11,"eq","","",214,{"inputs":[{"name":"self"},{"name":"xrrmodeinfo"}],"output":{"name":"bool"}}],[11,"ne","","",214,{"inputs":[{"name":"self"},{"name":"xrrmodeinfo"}],"output":{"name":"bool"}}],[11,"fmt","","",215,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",215,{"inputs":[{"name":"self"}],"output":{"name":"xrrscreenresources"}}],[11,"eq","","",215,{"inputs":[{"name":"self"},{"name":"xrrscreenresources"}],"output":{"name":"bool"}}],[11,"ne","","",215,{"inputs":[{"name":"self"},{"name":"xrrscreenresources"}],"output":{"name":"bool"}}],[11,"fmt","","",216,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",216,{"inputs":[{"name":"self"}],"output":{"name":"xrroutputinfo"}}],[11,"eq","","",216,{"inputs":[{"name":"self"},{"name":"xrroutputinfo"}],"output":{"name":"bool"}}],[11,"ne","","",216,{"inputs":[{"name":"self"},{"name":"xrroutputinfo"}],"output":{"name":"bool"}}],[11,"fmt","","",217,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",217,{"inputs":[{"name":"self"}],"output":{"name":"xrrpropertyinfo"}}],[11,"eq","","",217,{"inputs":[{"name":"self"},{"name":"xrrpropertyinfo"}],"output":{"name":"bool"}}],[11,"ne","","",217,{"inputs":[{"name":"self"},{"name":"xrrpropertyinfo"}],"output":{"name":"bool"}}],[11,"fmt","","",218,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",218,{"inputs":[{"name":"self"}],"output":{"name":"xrrcrtcinfo"}}],[11,"eq","","",218,{"inputs":[{"name":"self"},{"name":"xrrcrtcinfo"}],"output":{"name":"bool"}}],[11,"ne","","",218,{"inputs":[{"name":"self"},{"name":"xrrcrtcinfo"}],"output":{"name":"bool"}}],[11,"fmt","","",219,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",219,{"inputs":[{"name":"self"}],"output":{"name":"xrrcrtcgamma"}}],[11,"eq","","",219,{"inputs":[{"name":"self"},{"name":"xrrcrtcgamma"}],"output":{"name":"bool"}}],[11,"ne","","",219,{"inputs":[{"name":"self"},{"name":"xrrcrtcgamma"}],"output":{"name":"bool"}}],[11,"fmt","","",220,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",220,{"inputs":[{"name":"self"}],"output":{"name":"xrrcrtctransformattributes"}}],[11,"eq","","",220,{"inputs":[{"name":"self"},{"name":"xrrcrtctransformattributes"}],"output":{"name":"bool"}}],[11,"ne","","",220,{"inputs":[{"name":"self"},{"name":"xrrcrtctransformattributes"}],"output":{"name":"bool"}}],[11,"fmt","","",221,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",221,{"inputs":[{"name":"self"}],"output":{"name":"xrrpanning"}}],[11,"eq","","",221,{"inputs":[{"name":"self"},{"name":"xrrpanning"}],"output":{"name":"bool"}}],[11,"ne","","",221,{"inputs":[{"name":"self"},{"name":"xrrpanning"}],"output":{"name":"bool"}}],[11,"fmt","","",222,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",222,{"inputs":[{"name":"self"}],"output":{"name":"xrrproviderresources"}}],[11,"eq","","",222,{"inputs":[{"name":"self"},{"name":"xrrproviderresources"}],"output":{"name":"bool"}}],[11,"ne","","",222,{"inputs":[{"name":"self"},{"name":"xrrproviderresources"}],"output":{"name":"bool"}}],[11,"fmt","","",223,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",223,{"inputs":[{"name":"self"}],"output":{"name":"xrrproviderinfo"}}],[11,"eq","","",223,{"inputs":[{"name":"self"},{"name":"xrrproviderinfo"}],"output":{"name":"bool"}}],[11,"ne","","",223,{"inputs":[{"name":"self"},{"name":"xrrproviderinfo"}],"output":{"name":"bool"}}],[11,"fmt","","",224,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",224,{"inputs":[{"name":"self"}],"output":{"name":"xrrmonitorinfo"}}],[11,"eq","","",224,{"inputs":[{"name":"self"},{"name":"xrrmonitorinfo"}],"output":{"name":"bool"}}],[11,"ne","","",224,{"inputs":[{"name":"self"},{"name":"xrrmonitorinfo"}],"output":{"name":"bool"}}],[11,"fmt","","",225,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",225,{"inputs":[{"name":"self"}],"output":{"name":"xrrscreenchangenotifyevent"}}],[11,"eq","","",225,{"inputs":[{"name":"self"},{"name":"xrrscreenchangenotifyevent"}],"output":{"name":"bool"}}],[11,"ne","","",225,{"inputs":[{"name":"self"},{"name":"xrrscreenchangenotifyevent"}],"output":{"name":"bool"}}],[11,"fmt","","",226,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",226,{"inputs":[{"name":"self"}],"output":{"name":"xrrnotifyevent"}}],[11,"eq","","",226,{"inputs":[{"name":"self"},{"name":"xrrnotifyevent"}],"output":{"name":"bool"}}],[11,"ne","","",226,{"inputs":[{"name":"self"},{"name":"xrrnotifyevent"}],"output":{"name":"bool"}}],[11,"fmt","","",227,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",227,{"inputs":[{"name":"self"}],"output":{"name":"xrroutputchangenotifyevent"}}],[11,"eq","","",227,{"inputs":[{"name":"self"},{"name":"xrroutputchangenotifyevent"}],"output":{"name":"bool"}}],[11,"ne","","",227,{"inputs":[{"name":"self"},{"name":"xrroutputchangenotifyevent"}],"output":{"name":"bool"}}],[11,"fmt","","",228,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",228,{"inputs":[{"name":"self"}],"output":{"name":"xrrcrtcchangenotifyevent"}}],[11,"eq","","",228,{"inputs":[{"name":"self"},{"name":"xrrcrtcchangenotifyevent"}],"output":{"name":"bool"}}],[11,"ne","","",228,{"inputs":[{"name":"self"},{"name":"xrrcrtcchangenotifyevent"}],"output":{"name":"bool"}}],[11,"fmt","","",229,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",229,{"inputs":[{"name":"self"}],"output":{"name":"xrroutputpropertynotifyevent"}}],[11,"eq","","",229,{"inputs":[{"name":"self"},{"name":"xrroutputpropertynotifyevent"}],"output":{"name":"bool"}}],[11,"ne","","",229,{"inputs":[{"name":"self"},{"name":"xrroutputpropertynotifyevent"}],"output":{"name":"bool"}}],[11,"fmt","","",230,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",230,{"inputs":[{"name":"self"}],"output":{"name":"xrrproviderchangenotifyevent"}}],[11,"eq","","",230,{"inputs":[{"name":"self"},{"name":"xrrproviderchangenotifyevent"}],"output":{"name":"bool"}}],[11,"ne","","",230,{"inputs":[{"name":"self"},{"name":"xrrproviderchangenotifyevent"}],"output":{"name":"bool"}}],[11,"fmt","","",231,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",231,{"inputs":[{"name":"self"}],"output":{"name":"xrrproviderpropertynotifyevent"}}],[11,"eq","","",231,{"inputs":[{"name":"self"},{"name":"xrrproviderpropertynotifyevent"}],"output":{"name":"bool"}}],[11,"ne","","",231,{"inputs":[{"name":"self"},{"name":"xrrproviderpropertynotifyevent"}],"output":{"name":"bool"}}],[11,"fmt","","",232,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",232,{"inputs":[{"name":"self"}],"output":{"name":"xrrresourcechangenotifyevent"}}],[11,"eq","","",232,{"inputs":[{"name":"self"},{"name":"xrrresourcechangenotifyevent"}],"output":{"name":"bool"}}],[11,"ne","","",232,{"inputs":[{"name":"self"},{"name":"xrrresourcechangenotifyevent"}],"output":{"name":"bool"}}],[11,"as_mut","x11_dl::xlib","",97,{"inputs":[{"name":"self"}],"output":{"name":"xrrscreenchangenotifyevent"}}],[11,"as_ref","","",97,{"inputs":[{"name":"self"}],"output":{"name":"xrrscreenchangenotifyevent"}}],[11,"from","","",97,{"inputs":[{"name":"xrrscreenchangenotifyevent"}],"output":{"name":"xevent"}}],[11,"from","","",97,{"inputs":[{"name":"xrrscreenchangenotifyevent"}],"output":{"name":"xevent"}}],[11,"from","x11_dl::xrandr","",225,{"inputs":[{"name":"xevent"}],"output":{"name":"xrrscreenchangenotifyevent"}}],[11,"from","","",225,{"inputs":[{"name":"xevent"}],"output":{"name":"xrrscreenchangenotifyevent"}}],[11,"as_mut","x11_dl::xlib","",97,{"inputs":[{"name":"self"}],"output":{"name":"xrrnotifyevent"}}],[11,"as_ref","","",97,{"inputs":[{"name":"self"}],"output":{"name":"xrrnotifyevent"}}],[11,"from","","",97,{"inputs":[{"name":"xrrnotifyevent"}],"output":{"name":"xevent"}}],[11,"from","","",97,{"inputs":[{"name":"xrrnotifyevent"}],"output":{"name":"xevent"}}],[11,"from","x11_dl::xrandr","",226,{"inputs":[{"name":"xevent"}],"output":{"name":"xrrnotifyevent"}}],[11,"from","","",226,{"inputs":[{"name":"xevent"}],"output":{"name":"xrrnotifyevent"}}],[11,"as_mut","x11_dl::xlib","",97,{"inputs":[{"name":"self"}],"output":{"name":"xrroutputchangenotifyevent"}}],[11,"as_ref","","",97,{"inputs":[{"name":"self"}],"output":{"name":"xrroutputchangenotifyevent"}}],[11,"from","","",97,{"inputs":[{"name":"xrroutputchangenotifyevent"}],"output":{"name":"xevent"}}],[11,"from","","",97,{"inputs":[{"name":"xrroutputchangenotifyevent"}],"output":{"name":"xevent"}}],[11,"from","x11_dl::xrandr","",227,{"inputs":[{"name":"xevent"}],"output":{"name":"xrroutputchangenotifyevent"}}],[11,"from","","",227,{"inputs":[{"name":"xevent"}],"output":{"name":"xrroutputchangenotifyevent"}}],[11,"as_mut","x11_dl::xlib","",97,{"inputs":[{"name":"self"}],"output":{"name":"xrrcrtcchangenotifyevent"}}],[11,"as_ref","","",97,{"inputs":[{"name":"self"}],"output":{"name":"xrrcrtcchangenotifyevent"}}],[11,"from","","",97,{"inputs":[{"name":"xrrcrtcchangenotifyevent"}],"output":{"name":"xevent"}}],[11,"from","","",97,{"inputs":[{"name":"xrrcrtcchangenotifyevent"}],"output":{"name":"xevent"}}],[11,"from","x11_dl::xrandr","",228,{"inputs":[{"name":"xevent"}],"output":{"name":"xrrcrtcchangenotifyevent"}}],[11,"from","","",228,{"inputs":[{"name":"xevent"}],"output":{"name":"xrrcrtcchangenotifyevent"}}],[11,"as_mut","x11_dl::xlib","",97,{"inputs":[{"name":"self"}],"output":{"name":"xrroutputpropertynotifyevent"}}],[11,"as_ref","","",97,{"inputs":[{"name":"self"}],"output":{"name":"xrroutputpropertynotifyevent"}}],[11,"from","","",97,{"inputs":[{"name":"xrroutputpropertynotifyevent"}],"output":{"name":"xevent"}}],[11,"from","","",97,{"inputs":[{"name":"xrroutputpropertynotifyevent"}],"output":{"name":"xevent"}}],[11,"from","x11_dl::xrandr","",229,{"inputs":[{"name":"xevent"}],"output":{"name":"xrroutputpropertynotifyevent"}}],[11,"from","","",229,{"inputs":[{"name":"xevent"}],"output":{"name":"xrroutputpropertynotifyevent"}}],[11,"as_mut","x11_dl::xlib","",97,{"inputs":[{"name":"self"}],"output":{"name":"xrrproviderchangenotifyevent"}}],[11,"as_ref","","",97,{"inputs":[{"name":"self"}],"output":{"name":"xrrproviderchangenotifyevent"}}],[11,"from","","",97,{"inputs":[{"name":"xrrproviderchangenotifyevent"}],"output":{"name":"xevent"}}],[11,"from","","",97,{"inputs":[{"name":"xrrproviderchangenotifyevent"}],"output":{"name":"xevent"}}],[11,"from","x11_dl::xrandr","",230,{"inputs":[{"name":"xevent"}],"output":{"name":"xrrproviderchangenotifyevent"}}],[11,"from","","",230,{"inputs":[{"name":"xevent"}],"output":{"name":"xrrproviderchangenotifyevent"}}],[11,"as_mut","x11_dl::xlib","",97,{"inputs":[{"name":"self"}],"output":{"name":"xrrproviderpropertynotifyevent"}}],[11,"as_ref","","",97,{"inputs":[{"name":"self"}],"output":{"name":"xrrproviderpropertynotifyevent"}}],[11,"from","","",97,{"inputs":[{"name":"xrrproviderpropertynotifyevent"}],"output":{"name":"xevent"}}],[11,"from","","",97,{"inputs":[{"name":"xrrproviderpropertynotifyevent"}],"output":{"name":"xevent"}}],[11,"from","x11_dl::xrandr","",231,{"inputs":[{"name":"xevent"}],"output":{"name":"xrrproviderpropertynotifyevent"}}],[11,"from","","",231,{"inputs":[{"name":"xevent"}],"output":{"name":"xrrproviderpropertynotifyevent"}}],[11,"as_mut","x11_dl::xlib","",97,{"inputs":[{"name":"self"}],"output":{"name":"xrrresourcechangenotifyevent"}}],[11,"as_ref","","",97,{"inputs":[{"name":"self"}],"output":{"name":"xrrresourcechangenotifyevent"}}],[11,"from","","",97,{"inputs":[{"name":"xrrresourcechangenotifyevent"}],"output":{"name":"xevent"}}],[11,"from","","",97,{"inputs":[{"name":"xrrresourcechangenotifyevent"}],"output":{"name":"xevent"}}],[11,"from","x11_dl::xrandr","",232,{"inputs":[{"name":"xevent"}],"output":{"name":"xrrresourcechangenotifyevent"}}],[11,"from","","",232,{"inputs":[{"name":"xevent"}],"output":{"name":"xrrresourcechangenotifyevent"}}],[11,"open","","",233,{"inputs":[],"output":{"generics":["xrandr_2_2_0","openerror"],"name":"result"}}]],"paths":[[4,"OpenErrorKind"],[3,"OpenError"],[3,"Xlib"],[3,"XAnyEvent"],[3,"XButtonEvent"],[3,"XCirculateEvent"],[3,"XCirculateRequestEvent"],[3,"XClientMessageEvent"],[3,"XColormapEvent"],[3,"XConfigureEvent"],[3,"XConfigureRequestEvent"],[3,"XCreateWindowEvent"],[3,"XCrossingEvent"],[3,"XDestroyWindowEvent"],[3,"XErrorEvent"],[3,"XExposeEvent"],[3,"XFocusChangeEvent"],[3,"XGraphicsExposeEvent"],[3,"XGravityEvent"],[3,"XKeyEvent"],[3,"XKeymapEvent"],[3,"XMapEvent"],[3,"XMappingEvent"],[3,"XMapRequestEvent"],[3,"XMotionEvent"],[3,"XNoExposeEvent"],[3,"XPropertyEvent"],[3,"XReparentEvent"],[3,"XResizeRequestEvent"],[3,"XSelectionClearEvent"],[3,"XSelectionEvent"],[3,"XSelectionRequestEvent"],[3,"XUnmapEvent"],[3,"XVisibilityEvent"],[3,"_XkbCompatMapRec"],[3,"_XkbDesc"],[3,"_XkbIndicatorRec"],[3,"_XkbKeyAliasRec"],[3,"_XkbKeyNameRec"],[3,"_XkbNamesRec"],[3,"XkbAnyEvent"],[3,"XkbNewKeyboardNotifyEvent"],[3,"_XkbMapNotifyEvent"],[3,"XkbStateNotifyEvent"],[3,"_XkbControlsNotifyEvent"],[3,"XkbIndicatorNotifyEvent"],[3,"_XkbNamesNotifyEvent"],[3,"XkbCompatMapNotifyEvent"],[3,"XkbBellNotifyEvent"],[3,"XkbActionMessageEvent"],[3,"XkbAccessXNotifyEvent"],[3,"_XkbExtensionDeviceNotifyEvent"],[3,"Depth"],[3,"Screen"],[3,"ScreenFormat"],[3,"Visual"],[3,"XArc"],[3,"XChar2b"],[3,"XCharStruct"],[3,"XClassHint"],[3,"XColor"],[3,"XComposeStatus"],[3,"XExtCodes"],[3,"XExtData"],[3,"XFontProp"],[3,"XFontSetExtents"],[3,"XFontStruct"],[3,"XGCValues"],[3,"XGenericEventCookie"],[3,"XHostAddress"],[3,"XIconSize"],[3,"XImage"],[3,"XKeyboardControl"],[3,"XKeyboardState"],[3,"XmbTextItem"],[3,"XModifierKeymap"],[3,"XOMCharSetList"],[3,"XPixmapFormatValues"],[3,"XPoint"],[3,"XRectangle"],[3,"XrmOptionDescRec"],[3,"XrmValue"],[3,"XSegment"],[3,"XSetWindowAttributes"],[3,"XSizeHints"],[3,"XStandardColormap"],[3,"XTextItem"],[3,"XTextItem16"],[3,"XTextProperty"],[3,"XTimeCoord"],[3,"XVisualInfo"],[3,"XwcTextItem"],[3,"XWindowAttributes"],[3,"XWindowChanges"],[3,"XWMHints"],[3,"AspectRatio"],[3,"ImageFns"],[19,"XEvent"],[3,"XkbEvent"],[3,"ClientMessageData"],[3,"Xext"],[3,"Glx"],[3,"Xcursor"],[3,"_XcursorAnimate"],[3,"_XcursorChunkHeader"],[3,"_XcursorComment"],[3,"_XcursorComments"],[3,"_XcursorCursors"],[3,"_XcursorFile"],[3,"_XcursorFileHeader"],[3,"_XcursorFileToc"],[3,"_XcursorImage"],[3,"_XcursorImages"],[3,"Xf86vmode"],[3,"XF86VidModeGamma"],[3,"XF86VidModeModeInfo"],[3,"XF86VidModeModeLine"],[3,"XF86VidModeMonitor"],[3,"XF86VidModeSyncRange"],[3,"XF86VidModeNotifyEvent"],[3,"Xft"],[3,"XftFont"],[3,"XftColor"],[3,"XftCharSpec"],[3,"XftCharFontSpec"],[3,"XftFontSet"],[3,"XftGlyphSpec"],[3,"XftGlyphFontSpec"],[4,"FcEndian"],[4,"FcResult"],[3,"Xlib"],[3,"XineramaScreenInfo"],[3,"XPanoramiXInfo"],[3,"XInput"],[3,"XDevice"],[3,"XDeviceControl"],[3,"XDeviceInfo"],[3,"XDeviceState"],[3,"XDeviceTimeCoord"],[3,"XExtensionVersion"],[3,"XFeedbackControl"],[3,"XFeedbackState"],[3,"XInputClass"],[3,"XInputClassInfo"],[3,"XInput2"],[3,"XIAddMasterInfo"],[3,"XIRemoveMasterInfo"],[3,"XIAttachSlaveInfo"],[3,"XIDetachSlaveInfo"],[3,"XIAnyHierarchyChangeInfo"],[3,"XIModifierState"],[3,"XIButtonState"],[3,"XIValuatorState"],[3,"XIEventMask"],[3,"XIAnyClassInfo"],[3,"XIButtonClassInfo"],[3,"XIKeyClassInfo"],[3,"XIValuatorClassInfo"],[3,"XIScrollClassInfo"],[3,"XITouchClassInfo"],[3,"XIDeviceInfo"],[3,"XIGrabModifiers"],[3,"XIBarrierReleasePointerInfo"],[3,"XIEvent"],[3,"XIHierarchyInfo"],[3,"XIHierarchyEvent"],[3,"XIDeviceChangedEvent"],[3,"XIDeviceEvent"],[3,"XIRawEvent"],[3,"XIEnterEvent"],[3,"XIPropertyEvent"],[3,"XITouchOwnershipEvent"],[3,"XIBarrierEvent"],[3,"Xmu"],[3,"Xf86vmode"],[3,"XRecordClientInfo"],[3,"XRecordExtRange"],[3,"XRecordInterceptData"],[3,"XRecordRange"],[3,"XRecordRange8"],[3,"XRecordRange16"],[3,"XRecordState"],[3,"Xrender"],[3,"_XAnimCursor"],[3,"_XCircle"],[3,"_XConicalGradient"],[3,"_XFilters"],[3,"_XGlyphElt8"],[3,"_XGlyphElt16"],[3,"_XGlyphElt32"],[3,"_XGlyphInfo"],[3,"_XIndexValue"],[3,"_XLinearGradient"],[3,"_XLineFixed"],[3,"_XPointDouble"],[3,"_XPointFixed"],[3,"_XRadialGradient"],[3,"XRenderColor"],[3,"XRenderDirectFormat"],[3,"XRenderPictFormat"],[3,"_XRenderPictureAttributes"],[3,"_XSpanFix"],[3,"_XTrap"],[3,"_XTrapezoid"],[3,"_XTriangle"],[3,"_XTransform"],[3,"Xss"],[3,"XScreenSaverInfo"],[3,"XScreenSaverNotifyEvent"],[3,"Xt"],[3,"Xf86vmode"],[3,"Xlib_xcb"],[3,"Xrandr"],[3,"XRRScreenSize"],[3,"XRRModeInfo"],[3,"XRRScreenResources"],[3,"XRROutputInfo"],[3,"XRRPropertyInfo"],[3,"XRRCrtcInfo"],[3,"XRRCrtcGamma"],[3,"XRRCrtcTransformAttributes"],[3,"XRRPanning"],[3,"XRRProviderResources"],[3,"XRRProviderInfo"],[3,"XRRMonitorInfo"],[3,"XRRScreenChangeNotifyEvent"],[3,"XRRNotifyEvent"],[3,"XRROutputChangeNotifyEvent"],[3,"XRRCrtcChangeNotifyEvent"],[3,"XRROutputPropertyNotifyEvent"],[3,"XRRProviderChangeNotifyEvent"],[3,"XRRProviderPropertyNotifyEvent"],[3,"XRRResourceChangeNotifyEvent"],[3,"Xrandr_2_2_0"]]};
initSearch(searchIndex);
